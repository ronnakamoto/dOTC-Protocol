// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  wallet     String      @unique
  name       String?
  projects   Project[]
  whitelists Whitelist[]
  createdAt  DateTime?   @default(now())
  updatedAt  DateTime?   @updatedAt
  Token      Token[]
  Order      Order[]
  Wallet     Wallet[]
}

enum DealVisibilityType {
  PUBLIC
  PRIVATE
}

enum OfferType {
  SAFT
  SAFE
  TOKEN_WARRANT
}

enum TradeType {
  NORMAL
  LOT
}

enum DealStatus {
  ACTIVE
  ARCHIVED
  CANCELLED
}

enum SellerType {
  INDIVIDUAL
  VC
  HEDGE_FUND
  FAMILY_HOUSE
}

enum InvestmentRoundType {
  PRE_SEED
  SEED
  ROUND_A
  ROUND_B
  ROUND_C
  TIER_1
  TIER_2
  TIER_3
  PRIVATE
}

model Project {
  id             String              @id @default(auto()) @map("_id") @db.ObjectId
  // general details
  name           String
  symbol         String
  description    String?
  dealVisibility DealVisibilityType?

  // round details
  offerType          OfferType?
  investmentRound    InvestmentRoundType?
  sellerType         SellerType?
  roundFdv           Float?
  roundPricePerToken Float?
  // tradingDetails
  tradeType          TradeType?
  tokensToSell       Float?
  pricePerToken      Float
  serviceCharge      Float

  transactionHash String?
  csvCid          String?
  chainId         Int?
  saftMerkleRoot  String?
  contractAddress String?

  status    DealStatus  @default(ACTIVE)
  tokens    Token[]
  createdBy User        @relation(fields: [userId], references: [id])
  userId    String      @db.ObjectId
  createdAt DateTime?   @default(now())
  updatedAt DateTime?   @updatedAt
  Whitelist Whitelist[]
  Trade     Trade[]
  Order     Order[]
}

model Token {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  projectId       String   @db.ObjectId
  contractAddress String
  walletAddress   String
  tokenId         Int
  transactionHash String?
  chainId         Int
  amount          Float?
  mintedBy        User     @relation(fields: [userId], references: [id])
  userId          String   @db.ObjectId
  project         Project  @relation(fields: [projectId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([projectId, tokenId])
}

model Whitelist {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  project           Project  @relation(fields: [projectId], references: [id])
  projectId         String   @db.ObjectId
  userWalletAddress String
  amount            Float
  attributes        Json? // Additional attributes for whitelisting criteria
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  User              User?    @relation(fields: [userId], references: [id])
  userId            String?  @db.ObjectId
}

model Order {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  userId        String       @db.ObjectId
  user          User         @relation(fields: [userId], references: [id])
  type          OrderType
  status        OrderStatus
  price         Float
  amount        Float
  mempool       Boolean      @default(true)
  project       Project      @relation(fields: [projectId], references: [id])
  projectId     String       @db.ObjectId
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  OrderBundle   OrderBundle? @relation(fields: [orderBundleId], references: [id])
  orderBundleId String?      @db.ObjectId
}

enum OrderType {
  BUY
  SELL
}

enum OrderStatus {
  OPEN
  FILLED
  PARTIALLY_FILLED
  CANCELLED
}

model Trade {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  buyOrderId  String
  sellOrderId String
  price       Float
  amount      Float
  projectId   String   @db.ObjectId
  project     Project  @relation(fields: [projectId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum WalletTxnStatus {
  PENDING
  PROCESSED
  FAILED
}

enum WalletTxnType {
  DEPOSIT
  WITHDRAWAL
}

model Wallet {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  contractAddress String
  symbol          String
  userId          String          @db.ObjectId
  user            User            @relation(fields: [userId], references: [id])
  amount          Float
  transactionHash String          @unique
  status          WalletTxnStatus
  transactionType WalletTxnType
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model OrderBundle {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  nonce          BigInt
  bundleHash     String // Hash of the bundle
  prevBundleHash String? // Hash of the previous bundle
  merkleRoot     String // Merkle root of the orders in this bundle
  orders         Order[] // Orders included in this bundle
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  network        String // The network where this bundle will be synced
  synced         Boolean  @default(false) // Sync status with the blockchain
}

model OrderBundler {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  registrationId  String   @unique
  transactionHash String?
  requestId       String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
