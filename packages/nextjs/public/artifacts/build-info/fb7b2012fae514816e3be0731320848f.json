{"id":"fb7b2012fae514816e3be0731320848f","_format":"hh-sol-build-info-1","solcVersion":"0.8.19","solcLongVersion":"0.8.19+commit.7dd6d404","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/access/AccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"},"@openzeppelin/contracts/access/IAccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"},"@openzeppelin/contracts/security/ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"},"@openzeppelin/contracts/token/ERC1155/ERC1155.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"},"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"},"@openzeppelin/contracts/token/ERC1155/IERC1155.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"},"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\n * against this attack out of the box.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"},"contracts/SAFTToken.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\ninterface IExecutorManager {\n\tfunction isExecutor(address _address) external view returns (bool);\n}\n\ninterface IERC20 {\n\tfunction transferFrom(\n\t\taddress sender,\n\t\taddress recipient,\n\t\tuint256 amount\n\t) external returns (bool);\n}\n\ninterface ITradingWallet {\n\tfunction batchUpdateBalances(\n\t\taddress[] memory fromAddresses,\n\t\taddress[] memory toAddresses,\n\t\taddress token,\n\t\tuint256[] memory amounts\n\t) external;\n\n\tfunction getERC20Balance(\n\t\taddress user,\n\t\taddress token\n\t) external view returns (uint256);\n}\n\ncontract SAFTToken is ERC1155, AccessControl {\n\tbytes32 public merkleRoot;\n\tmapping(uint256 => bool) public lockingFlags; // Reentrancy guard for minting\n\tuint256 private tokenIdCounter;\n\tuint public pricePerToken;\n\tuint public serviceFee;\n\tuint public platformFee;\n\tbytes32 public constant EXECUTOR_ROLE = keccak256(\"EXECUTOR_ROLE\");\n\tIERC20 public baseToken;\n\tIExecutorManager public executorManager;\n\tITradingWallet public tradingWallet;\n\taddress public platformTreasury;\n\n\tevent BundleProcessed(\n\t\taddress indexed executor,\n\t\tuint256 indexed bundleNonce,\n\t\tbytes32 bundleHash,\n\t\tuint256 timestamp\n\t);\n\n\tconstructor(\n\t\taddress _owner,\n\t\tbytes32 _merkleRoot,\n\t\tstring memory metadataUri,\n\t\tuint totalSupply,\n\t\tuint _pricePerToken,\n\t\taddress _executorManager,\n\t\tuint _serviceFee,\n\t\tuint _platformFee,\n\t\taddress _baseToken,\n\t\taddress _platformTreasury,\n\t\taddress _tradingWallet\n\t) ERC1155(metadataUri) {\n\t\trequire(_owner != address(0), \"Owner address cannot be empty\");\n\t\t_mint(msg.sender, tokenIdCounter++, totalSupply, \"\");\n\t\t_setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n\t\tmerkleRoot = _merkleRoot;\n\t\tserviceFee = _serviceFee;\n\t\tplatformFee = _platformFee;\n\t\tpricePerToken = _pricePerToken;\n\t\tplatformTreasury = _platformTreasury;\n\t\texecutorManager = IExecutorManager(_executorManager);\n\t\tbaseToken = IERC20(_baseToken);\n\t\ttradingWallet = ITradingWallet(_tradingWallet);\n\t}\n\n\tfunction isApprovedForAll(\n\t\taddress owner,\n\t\taddress operator\n\t) public view override returns (bool) {\n\t\tif (executorManager.isExecutor(operator)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tfunction _beforeTokenTransfer(\n\t\taddress operator,\n\t\taddress from,\n\t\taddress to,\n\t\tuint256[] memory ids,\n\t\tuint256[] memory amounts,\n\t\tbytes memory data\n\t) internal override {\n\t\trequire(isApprovedForAll(from, operator), \"Transfer not approved\");\n\t\tsuper._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\t}\n\n\tfunction whitelistMint(\n\t\tuint256 amount,\n\t\tbytes memory data,\n\t\tbytes32[] calldata merkleProof\n\t) public {\n\t\tuint256 id = tokenIdCounter;\n\t\trequire(!lockingFlags[id], \"Token is currently locked for minting\");\n\n\t\t// Validate merkle proof using a single call\n\t\trequire(isWhitelisted(merkleProof), \"Caller is not whitelisted\");\n\n\t\tlockingFlags[id] = true; // Set locking flag to prevent duplicate mints\n\n\t\t// Minimize external function calls for gas efficiency\n\t\t_mint(msg.sender, id, amount, data);\n\n\t\tlockingFlags[id] = false; // Unlock after successful minting\n\t\ttokenIdCounter++;\n\t}\n\n\tfunction isWhitelisted(\n\t\tbytes32[] calldata merkleProof\n\t) public view returns (bool) {\n\t\tbytes32 leaf = keccak256(abi.encodePacked(msg.sender));\n\t\treturn MerkleProof.verify(merkleProof, merkleRoot, leaf);\n\t}\n\n\tfunction setMerkleRoot(\n\t\tbytes32 _merkleRoot\n\t) public onlyRole(DEFAULT_ADMIN_ROLE) {\n\t\tmerkleRoot = _merkleRoot;\n\t}\n\n\tfunction supportsInterface(\n\t\tbytes4 interfaceId\n\t) public view virtual override(ERC1155, AccessControl) returns (bool) {\n\t\treturn\n\t\t\tERC1155.supportsInterface(interfaceId) ||\n\t\t\tAccessControl.supportsInterface(interfaceId);\n\t}\n\n\tfunction setExecutorManager(\n\t\taddress _executorManager\n\t) public onlyRole(DEFAULT_ADMIN_ROLE) {\n\t\texecutorManager = IExecutorManager(_executorManager);\n\t}\n\n\tfunction processBundle(\n\t\tbytes calldata bundleData,\n\t\tuint256 bundleNonce\n\t) public {\n\t\trequire(\n\t\t\texecutorManager.isExecutor(msg.sender),\n\t\t\t\"Caller is not an authorized executor\"\n\t\t);\n\n\t\t// Decode and process each transaction in the bundle\n\t\tfor (uint i = 0; i < bundleData.length; i += 104) {\n\t\t\t(\n\t\t\t\taddress buyer,\n\t\t\t\taddress seller,\n\t\t\t\tuint256 tokenId,\n\t\t\t\tuint256 amount // otc token amount bought\n\t\t\t) = abi.decode(\n\t\t\t\t\tbundleData[i:i + 104],\n\t\t\t\t\t(address, address, uint256, uint256)\n\t\t\t\t);\n\n\t\t\t// Ensure that the seller has enough tokens\n\t\t\trequire(\n\t\t\t\tbalanceOf(seller, tokenId) >= amount,\n\t\t\t\t\"Seller does not have enough tokens\"\n\t\t\t);\n\n\t\t\t// Calculate total payment by buyer in stablecoin excluding fees\n\t\t\tuint256 totalPayment = amount * pricePerToken;\n\n\t\t\t// Calculate service fee and platform fee\n\t\t\tuint serviceFeeAmount = (totalPayment * serviceFee) / 100;\n\t\t\tuint platformFeeAmount = (totalPayment * platformFee) / 100;\n\n\t\t\t// Calculate total cost to the buyer in stablecoin\n\t\t\tuint256 totalCost = totalPayment +\n\t\t\t\tserviceFeeAmount +\n\t\t\t\tplatformFeeAmount;\n\n\t\t\t// Ensure buyer has enough tokens\n\t\t\trequire(\n\t\t\t\ttradingWallet.getERC20Balance(buyer, address(baseToken)) >=\n\t\t\t\t\ttotalCost,\n\t\t\t\t\"Buyer does not have enough tokens\"\n\t\t\t);\n\n\t\t\t// Prepare the payment balance update data\n\t\t\taddress[] memory fromAddresses = new address[](2);\n\t\t\tfromAddresses[0] = buyer;\n\t\t\tfromAddresses[1] = buyer;\n\n\t\t\taddress[] memory toAddresses = new address[](2);\n\t\t\ttoAddresses[0] = seller;\n\t\t\ttoAddresses[1] = platformTreasury;\n\n\t\t\tuint[] memory amounts = new uint[](2);\n\t\t\tamounts[0] = serviceFeeAmount;\n\t\t\tamounts[1] = platformFeeAmount;\n\t\t\t// Perform the payment updates in batch\n\t\t\ttradingWallet.batchUpdateBalances(\n\t\t\t\tfromAddresses,\n\t\t\t\ttoAddresses,\n\t\t\t\taddress(baseToken),\n\t\t\t\tamounts\n\t\t\t);\n\n\t\t\t// Perform the otc balance settlement\n\t\t}\n\n\t\t// Compute the hash of the bundle data for logging\n\t\tbytes32 bundleHash = keccak256(bundleData);\n\n\t\t// Emit the event with necessary details\n\t\temit BundleProcessed(\n\t\t\tmsg.sender,\n\t\t\tbundleNonce,\n\t\t\tbundleHash,\n\t\t\tblock.timestamp\n\t\t);\n\t}\n}\n"},"contracts/TradingWallet.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\ninterface IExecutorManager {\n\tfunction isExecutor(address _address) external view returns (bool);\n}\n\ncontract TradingWallet is ReentrancyGuard {\n\t// Mapping from user to token to balance\n\tmapping(address => mapping(address => uint256)) private _balances;\n\tIExecutorManager public executorManager;\n\n\t// Event emitted when a deposit is made\n\tevent Deposit(address indexed user, address indexed token, uint256 amount);\n\t// Event emitted when a withdrawal is made\n\tevent Withdrawal(\n\t\taddress indexed user,\n\t\taddress indexed token,\n\t\tuint256 amount\n\t);\n\t// Event emitted when a batch transfer is made\n\tevent UpdateBalance(\n\t\taddress indexed from,\n\t\taddress indexed to,\n\t\taddress indexed token,\n\t\tuint256 amount\n\t);\n\n\tconstructor(address _executorManager) {\n\t\texecutorManager = IExecutorManager(_executorManager);\n\t}\n\n\t// Function to deposit ERC20 tokens\n\tfunction depositERC20(address token, uint256 amount) public nonReentrant {\n\t\trequire(amount > 0, \"Deposit amount must be greater than 0\");\n\t\trequire(\n\t\t\tIERC20(token).transferFrom(msg.sender, address(this), amount),\n\t\t\t\"Transfer failed\"\n\t\t);\n\t\t_balances[msg.sender][token] += amount;\n\t\temit Deposit(msg.sender, token, amount);\n\t}\n\n\t// Function to withdraw ERC20 tokens\n\tfunction withdrawERC20(address token, uint256 amount) public nonReentrant {\n\t\trequire(_balances[msg.sender][token] >= amount, \"Insufficient balance\");\n\t\t_balances[msg.sender][token] -= amount;\n\t\trequire(IERC20(token).transfer(msg.sender, amount), \"Transfer failed\");\n\t\temit Withdrawal(msg.sender, token, amount);\n\t}\n\n\t// Function to deposit native cryptocurrency (e.g., ETH)\n\tfunction depositETH() public payable nonReentrant {\n\t\trequire(msg.value > 0, \"Deposit amount must be greater than 0\");\n\t\t_balances[msg.sender][address(0)] += msg.value;\n\t\temit Deposit(msg.sender, address(0), msg.value);\n\t}\n\n\t// Function to get ERC20 token balance\n\tfunction getERC20Balance(\n\t\taddress user,\n\t\taddress token\n\t) external view returns (uint256) {\n\t\treturn _balances[user][token];\n\t}\n\n\t// Function to batch update balances\n\tfunction batchUpdateBalances(\n\t\taddress[] memory fromAddresses,\n\t\taddress[] memory toAddresses,\n\t\taddress token,\n\t\tuint256[] memory amounts\n\t) external nonReentrant {\n\t\trequire(\n\t\t\texecutorManager.isExecutor(msg.sender),\n\t\t\t\"Permission denied for non-executor\"\n\t\t);\n\t\trequire(\n\t\t\tfromAddresses.length == toAddresses.length &&\n\t\t\t\ttoAddresses.length == amounts.length,\n\t\t\t\"Arrays must have the same length\"\n\t\t);\n\n\t\tfor (uint256 i = 0; i < fromAddresses.length; i++) {\n\t\t\taddress from = fromAddresses[i];\n\t\t\taddress to = toAddresses[i];\n\t\t\tuint256 amount = amounts[i];\n\n\t\t\trequire(\n\t\t\t\t_balances[from][token] >= amount,\n\t\t\t\t\"Insufficient balance for transfer\"\n\t\t\t);\n\t\t\t_balances[from][token] -= amount;\n\t\t\t_balances[to][token] += amount;\n\n\t\t\temit UpdateBalance(from, to, token, amount);\n\t\t}\n\t}\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> contracts/SAFTToken.sol:81:3:\n   |\n81 | \t\taddress owner,\n   | \t\t^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":2176,"file":"contracts/SAFTToken.sol","start":2163},"type":"Warning"}],"sources":{"@openzeppelin/contracts/access/AccessControl.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/AccessControl.sol","exportedSymbols":{"AccessControl":[315],"Context":[2273],"ERC165":[2974],"IAccessControl":[388],"IERC165":[2986],"Math":[3851],"Strings":[2448]},"id":316,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"108:23:0"},{"absolutePath":"@openzeppelin/contracts/access/IAccessControl.sol","file":"./IAccessControl.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":316,"sourceUnit":389,"src":"133:30:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":316,"sourceUnit":2274,"src":"164:30:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../utils/Strings.sol","id":4,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":316,"sourceUnit":2449,"src":"195:30:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"../utils/introspection/ERC165.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":316,"sourceUnit":2975,"src":"226:43:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":7,"name":"Context","nameLocations":["1841:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":2273,"src":"1841:7:0"},"id":8,"nodeType":"InheritanceSpecifier","src":"1841:7:0"},{"baseName":{"id":9,"name":"IAccessControl","nameLocations":["1850:14:0"],"nodeType":"IdentifierPath","referencedDeclaration":388,"src":"1850:14:0"},"id":10,"nodeType":"InheritanceSpecifier","src":"1850:14:0"},{"baseName":{"id":11,"name":"ERC165","nameLocations":["1866:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":2974,"src":"1866:6:0"},"id":12,"nodeType":"InheritanceSpecifier","src":"1866:6:0"}],"canonicalName":"AccessControl","contractDependencies":[],"contractKind":"contract","documentation":{"id":6,"nodeType":"StructuredDocumentation","src":"271:1534:0","text":" @dev Contract module that allows children to implement role-based access\n control mechanisms. This is a lightweight version that doesn't allow enumerating role\n members except through off-chain means by accessing the contract event logs. Some\n applications may benefit from on-chain enumerability, for those cases see\n {AccessControlEnumerable}.\n Roles are referred to by their `bytes32` identifier. These should be exposed\n in the external API and be unique. The best way to achieve this is by\n using `public constant` hash digests:\n ```\n bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n ```\n Roles can be used to represent a set of permissions. To restrict access to a\n function call, use {hasRole}:\n ```\n function foo() public {\n     require(hasRole(MY_ROLE, msg.sender));\n     ...\n }\n ```\n Roles can be granted and revoked dynamically via the {grantRole} and\n {revokeRole} functions. Each role has an associated admin role, and only\n accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n that only accounts with this role will be able to grant or revoke other\n roles. More complex role relationships can be created by using\n {_setRoleAdmin}.\n WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n grant and revoke this role. Extra precautions should be taken to secure\n accounts that have been granted it."},"fullyImplemented":true,"id":315,"linearizedBaseContracts":[315,2974,2986,388,2273],"name":"AccessControl","nameLocation":"1824:13:0","nodeType":"ContractDefinition","nodes":[{"canonicalName":"AccessControl.RoleData","id":19,"members":[{"constant":false,"id":16,"mutability":"mutable","name":"members","nameLocation":"1930:7:0","nodeType":"VariableDeclaration","scope":19,"src":"1905:32:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":15,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":13,"name":"address","nodeType":"ElementaryTypeName","src":"1913:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1905:24:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":14,"name":"bool","nodeType":"ElementaryTypeName","src":"1924:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"constant":false,"id":18,"mutability":"mutable","name":"adminRole","nameLocation":"1955:9:0","nodeType":"VariableDeclaration","scope":19,"src":"1947:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":17,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1947:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"RoleData","nameLocation":"1886:8:0","nodeType":"StructDefinition","scope":315,"src":"1879:92:0","visibility":"public"},{"constant":false,"id":24,"mutability":"mutable","name":"_roles","nameLocation":"2014:6:0","nodeType":"VariableDeclaration","scope":315,"src":"1977:43:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData)"},"typeName":{"id":23,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":20,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1985:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"1977:28:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":22,"nodeType":"UserDefinedTypeName","pathNode":{"id":21,"name":"RoleData","nameLocations":["1996:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":19,"src":"1996:8:0"},"referencedDeclaration":19,"src":"1996:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$19_storage_ptr","typeString":"struct AccessControl.RoleData"}}},"visibility":"private"},{"constant":true,"functionSelector":"a217fddf","id":27,"mutability":"constant","name":"DEFAULT_ADMIN_ROLE","nameLocation":"2051:18:0","nodeType":"VariableDeclaration","scope":315,"src":"2027:49:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":25,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2027:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"30783030","id":26,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2072:4:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x00"},"visibility":"public"},{"body":{"id":37,"nodeType":"Block","src":"2495:44:0","statements":[{"expression":{"arguments":[{"id":33,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":30,"src":"2516:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":32,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[92,131],"referencedDeclaration":92,"src":"2505:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$__$","typeString":"function (bytes32) view"}},"id":34,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2505:16:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":35,"nodeType":"ExpressionStatement","src":"2505:16:0"},{"id":36,"nodeType":"PlaceholderStatement","src":"2531:1:0"}]},"documentation":{"id":28,"nodeType":"StructuredDocumentation","src":"2083:375:0","text":" @dev Modifier that checks that an account has a specific role. Reverts\n with a standardized message including the required role.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n _Available since v4.1._"},"id":38,"name":"onlyRole","nameLocation":"2472:8:0","nodeType":"ModifierDefinition","parameters":{"id":31,"nodeType":"ParameterList","parameters":[{"constant":false,"id":30,"mutability":"mutable","name":"role","nameLocation":"2489:4:0","nodeType":"VariableDeclaration","scope":38,"src":"2481:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":29,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2481:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2480:14:0"},"src":"2463:76:0","virtual":false,"visibility":"internal"},{"baseFunctions":[2973],"body":{"id":59,"nodeType":"Block","src":"2697:111:0","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":57,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":52,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":47,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":41,"src":"2714:11:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":49,"name":"IAccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":388,"src":"2734:14:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessControl_$388_$","typeString":"type(contract IAccessControl)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IAccessControl_$388_$","typeString":"type(contract IAccessControl)"}],"id":48,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2729:4:0","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":50,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2729:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IAccessControl_$388","typeString":"type(contract IAccessControl)"}},"id":51,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2750:11:0","memberName":"interfaceId","nodeType":"MemberAccess","src":"2729:32:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"2714:47:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":55,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":41,"src":"2789:11:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":53,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2765:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_AccessControl_$315_$","typeString":"type(contract super AccessControl)"}},"id":54,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2771:17:0","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":2973,"src":"2765:23:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":56,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2765:36:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2714:87:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":46,"id":58,"nodeType":"Return","src":"2707:94:0"}]},"documentation":{"id":39,"nodeType":"StructuredDocumentation","src":"2545:56:0","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":60,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"2615:17:0","nodeType":"FunctionDefinition","overrides":{"id":43,"nodeType":"OverrideSpecifier","overrides":[],"src":"2673:8:0"},"parameters":{"id":42,"nodeType":"ParameterList","parameters":[{"constant":false,"id":41,"mutability":"mutable","name":"interfaceId","nameLocation":"2640:11:0","nodeType":"VariableDeclaration","scope":60,"src":"2633:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":40,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2633:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2632:20:0"},"returnParameters":{"id":46,"nodeType":"ParameterList","parameters":[{"constant":false,"id":45,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":60,"src":"2691:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":44,"name":"bool","nodeType":"ElementaryTypeName","src":"2691:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2690:6:0"},"scope":315,"src":"2606:202:0","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[355],"body":{"id":78,"nodeType":"Block","src":"2987:53:0","statements":[{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":71,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24,"src":"3004:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":73,"indexExpression":{"id":72,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":63,"src":"3011:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3004:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$19_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":74,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3017:7:0","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":16,"src":"3004:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":76,"indexExpression":{"id":75,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":65,"src":"3025:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3004:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":70,"id":77,"nodeType":"Return","src":"2997:36:0"}]},"documentation":{"id":61,"nodeType":"StructuredDocumentation","src":"2814:76:0","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":79,"implemented":true,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"2904:7:0","nodeType":"FunctionDefinition","overrides":{"id":67,"nodeType":"OverrideSpecifier","overrides":[],"src":"2963:8:0"},"parameters":{"id":66,"nodeType":"ParameterList","parameters":[{"constant":false,"id":63,"mutability":"mutable","name":"role","nameLocation":"2920:4:0","nodeType":"VariableDeclaration","scope":79,"src":"2912:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":62,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2912:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":65,"mutability":"mutable","name":"account","nameLocation":"2934:7:0","nodeType":"VariableDeclaration","scope":79,"src":"2926:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":64,"name":"address","nodeType":"ElementaryTypeName","src":"2926:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2911:31:0"},"returnParameters":{"id":70,"nodeType":"ParameterList","parameters":[{"constant":false,"id":69,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":79,"src":"2981:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":68,"name":"bool","nodeType":"ElementaryTypeName","src":"2981:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2980:6:0"},"scope":315,"src":"2895:145:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":91,"nodeType":"Block","src":"3390:47:0","statements":[{"expression":{"arguments":[{"id":86,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":82,"src":"3411:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":87,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2263,"src":"3417:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":88,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3417:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":85,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[92,131],"referencedDeclaration":131,"src":"3400:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) view"}},"id":89,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3400:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":90,"nodeType":"ExpressionStatement","src":"3400:30:0"}]},"documentation":{"id":80,"nodeType":"StructuredDocumentation","src":"3046:283:0","text":" @dev Revert with a standard message if `_msgSender()` is missing `role`.\n Overriding this function changes the behavior of the {onlyRole} modifier.\n Format of the revert message is described in {_checkRole}.\n _Available since v4.6._"},"id":92,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"3343:10:0","nodeType":"FunctionDefinition","parameters":{"id":83,"nodeType":"ParameterList","parameters":[{"constant":false,"id":82,"mutability":"mutable","name":"role","nameLocation":"3362:4:0","nodeType":"VariableDeclaration","scope":92,"src":"3354:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":81,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3354:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3353:14:0"},"returnParameters":{"id":84,"nodeType":"ParameterList","parameters":[],"src":"3390:0:0"},"scope":315,"src":"3334:103:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":130,"nodeType":"Block","src":"3791:406:0","statements":[{"condition":{"id":104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3805:23:0","subExpression":{"arguments":[{"id":101,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":95,"src":"3814:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":102,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":97,"src":"3820:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":100,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":79,"src":"3806:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":103,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3806:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":129,"nodeType":"IfStatement","src":"3801:390:0","trueBody":{"id":128,"nodeType":"Block","src":"3830:361:0","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"416363657373436f6e74726f6c3a206163636f756e7420","id":110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3938:25:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","typeString":"literal_string \"AccessControl: account \""},"value":"AccessControl: account "},{"arguments":[{"id":113,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":97,"src":"4009:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":111,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2448,"src":"3989:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$2448_$","typeString":"type(library Strings)"}},"id":112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3997:11:0","memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":2447,"src":"3989:19:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_string_memory_ptr_$","typeString":"function (address) pure returns (string memory)"}},"id":114,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3989:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"206973206d697373696e6720726f6c6520","id":115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4043:19:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","typeString":"literal_string \" is missing role \""},"value":" is missing role "},{"arguments":[{"arguments":[{"id":120,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":95,"src":"4116:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":119,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4108:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":118,"name":"uint256","nodeType":"ElementaryTypeName","src":"4108:7:0","typeDescriptions":{}}},"id":121,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4108:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"3332","id":122,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4123:2:0","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"}],"expression":{"id":116,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2448,"src":"4088:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$2448_$","typeString":"type(library Strings)"}},"id":117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4096:11:0","memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":2427,"src":"4088:19:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4088:38:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","typeString":"literal_string \"AccessControl: account \""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","typeString":"literal_string \" is missing role \""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":108,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3896:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":109,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3900:12:0","memberName":"encodePacked","nodeType":"MemberAccess","src":"3896:16:0","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":124,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3896:252:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":107,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3868:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":106,"name":"string","nodeType":"ElementaryTypeName","src":"3868:6:0","typeDescriptions":{}}},"id":125,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3868:298:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":105,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"3844:6:0","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":126,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3844:336:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":127,"nodeType":"ExpressionStatement","src":"3844:336:0"}]}}]},"documentation":{"id":93,"nodeType":"StructuredDocumentation","src":"3443:270:0","text":" @dev Revert with a standard message if `account` is missing `role`.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/"},"id":131,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"3727:10:0","nodeType":"FunctionDefinition","parameters":{"id":98,"nodeType":"ParameterList","parameters":[{"constant":false,"id":95,"mutability":"mutable","name":"role","nameLocation":"3746:4:0","nodeType":"VariableDeclaration","scope":131,"src":"3738:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":94,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3738:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":97,"mutability":"mutable","name":"account","nameLocation":"3760:7:0","nodeType":"VariableDeclaration","scope":131,"src":"3752:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":96,"name":"address","nodeType":"ElementaryTypeName","src":"3752:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3737:31:0"},"returnParameters":{"id":99,"nodeType":"ParameterList","parameters":[],"src":"3791:0:0"},"scope":315,"src":"3718:479:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[363],"body":{"id":145,"nodeType":"Block","src":"4461:46:0","statements":[{"expression":{"expression":{"baseExpression":{"id":140,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24,"src":"4478:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":142,"indexExpression":{"id":141,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":134,"src":"4485:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4478:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$19_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":143,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4491:9:0","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":18,"src":"4478:22:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":139,"id":144,"nodeType":"Return","src":"4471:29:0"}]},"documentation":{"id":132,"nodeType":"StructuredDocumentation","src":"4203:170:0","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {_setRoleAdmin}."},"functionSelector":"248a9ca3","id":146,"implemented":true,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"4387:12:0","nodeType":"FunctionDefinition","overrides":{"id":136,"nodeType":"OverrideSpecifier","overrides":[],"src":"4434:8:0"},"parameters":{"id":135,"nodeType":"ParameterList","parameters":[{"constant":false,"id":134,"mutability":"mutable","name":"role","nameLocation":"4408:4:0","nodeType":"VariableDeclaration","scope":146,"src":"4400:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":133,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4400:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4399:14:0"},"returnParameters":{"id":139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":138,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":146,"src":"4452:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":137,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4452:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4451:9:0"},"scope":315,"src":"4378:129:0","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[371],"body":{"id":165,"nodeType":"Block","src":"4906:42:0","statements":[{"expression":{"arguments":[{"id":161,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":149,"src":"4927:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":162,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":151,"src":"4933:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":160,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":283,"src":"4916:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":163,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4916:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":164,"nodeType":"ExpressionStatement","src":"4916:25:0"}]},"documentation":{"id":147,"nodeType":"StructuredDocumentation","src":"4513:285:0","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleGranted} event."},"functionSelector":"2f2ff15d","id":166,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":156,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":149,"src":"4899:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":155,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"4886:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4886:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":158,"kind":"modifierInvocation","modifierName":{"id":154,"name":"onlyRole","nameLocations":["4877:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":38,"src":"4877:8:0"},"nodeType":"ModifierInvocation","src":"4877:28:0"}],"name":"grantRole","nameLocation":"4812:9:0","nodeType":"FunctionDefinition","overrides":{"id":153,"nodeType":"OverrideSpecifier","overrides":[],"src":"4868:8:0"},"parameters":{"id":152,"nodeType":"ParameterList","parameters":[{"constant":false,"id":149,"mutability":"mutable","name":"role","nameLocation":"4830:4:0","nodeType":"VariableDeclaration","scope":166,"src":"4822:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":148,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4822:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":151,"mutability":"mutable","name":"account","nameLocation":"4844:7:0","nodeType":"VariableDeclaration","scope":166,"src":"4836:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":150,"name":"address","nodeType":"ElementaryTypeName","src":"4836:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4821:31:0"},"returnParameters":{"id":159,"nodeType":"ParameterList","parameters":[],"src":"4906:0:0"},"scope":315,"src":"4803:145:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[379],"body":{"id":185,"nodeType":"Block","src":"5332:43:0","statements":[{"expression":{"arguments":[{"id":181,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":169,"src":"5354:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":182,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":171,"src":"5360:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":180,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":314,"src":"5342:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":183,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5342:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":184,"nodeType":"ExpressionStatement","src":"5342:26:0"}]},"documentation":{"id":167,"nodeType":"StructuredDocumentation","src":"4954:269:0","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleRevoked} event."},"functionSelector":"d547741f","id":186,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":176,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":169,"src":"5325:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":175,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"5312:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":177,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5312:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":178,"kind":"modifierInvocation","modifierName":{"id":174,"name":"onlyRole","nameLocations":["5303:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":38,"src":"5303:8:0"},"nodeType":"ModifierInvocation","src":"5303:28:0"}],"name":"revokeRole","nameLocation":"5237:10:0","nodeType":"FunctionDefinition","overrides":{"id":173,"nodeType":"OverrideSpecifier","overrides":[],"src":"5294:8:0"},"parameters":{"id":172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":169,"mutability":"mutable","name":"role","nameLocation":"5256:4:0","nodeType":"VariableDeclaration","scope":186,"src":"5248:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":168,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5248:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":171,"mutability":"mutable","name":"account","nameLocation":"5270:7:0","nodeType":"VariableDeclaration","scope":186,"src":"5262:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":170,"name":"address","nodeType":"ElementaryTypeName","src":"5262:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5247:31:0"},"returnParameters":{"id":179,"nodeType":"ParameterList","parameters":[],"src":"5332:0:0"},"scope":315,"src":"5228:147:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[387],"body":{"id":208,"nodeType":"Block","src":"5989:137:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":196,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":191,"src":"6007:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":197,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2263,"src":"6018:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6018:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6007:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66","id":200,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6032:49:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","typeString":"literal_string \"AccessControl: can only renounce roles for self\""},"value":"AccessControl: can only renounce roles for self"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","typeString":"literal_string \"AccessControl: can only renounce roles for self\""}],"id":195,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5999:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5999:83:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":202,"nodeType":"ExpressionStatement","src":"5999:83:0"},{"expression":{"arguments":[{"id":204,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"6105:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":205,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":191,"src":"6111:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":203,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":314,"src":"6093:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6093:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":207,"nodeType":"ExpressionStatement","src":"6093:26:0"}]},"documentation":{"id":187,"nodeType":"StructuredDocumentation","src":"5381:526:0","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been revoked `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`.\n May emit a {RoleRevoked} event."},"functionSelector":"36568abe","id":209,"implemented":true,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"5921:12:0","nodeType":"FunctionDefinition","overrides":{"id":193,"nodeType":"OverrideSpecifier","overrides":[],"src":"5980:8:0"},"parameters":{"id":192,"nodeType":"ParameterList","parameters":[{"constant":false,"id":189,"mutability":"mutable","name":"role","nameLocation":"5942:4:0","nodeType":"VariableDeclaration","scope":209,"src":"5934:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":188,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5934:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":191,"mutability":"mutable","name":"account","nameLocation":"5956:7:0","nodeType":"VariableDeclaration","scope":209,"src":"5948:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":190,"name":"address","nodeType":"ElementaryTypeName","src":"5948:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5933:31:0"},"returnParameters":{"id":194,"nodeType":"ParameterList","parameters":[],"src":"5989:0:0"},"scope":315,"src":"5912:214:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":222,"nodeType":"Block","src":"6879:42:0","statements":[{"expression":{"arguments":[{"id":218,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":212,"src":"6900:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":219,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":214,"src":"6906:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":217,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":283,"src":"6889:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":220,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6889:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":221,"nodeType":"ExpressionStatement","src":"6889:25:0"}]},"documentation":{"id":210,"nodeType":"StructuredDocumentation","src":"6132:674:0","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event. Note that unlike {grantRole}, this function doesn't perform any\n checks on the calling account.\n May emit a {RoleGranted} event.\n [WARNING]\n ====\n This function should only be called from the constructor when setting\n up the initial roles for the system.\n Using this function in any other way is effectively circumventing the admin\n system imposed by {AccessControl}.\n ====\n NOTE: This function is deprecated in favor of {_grantRole}."},"id":223,"implemented":true,"kind":"function","modifiers":[],"name":"_setupRole","nameLocation":"6820:10:0","nodeType":"FunctionDefinition","parameters":{"id":215,"nodeType":"ParameterList","parameters":[{"constant":false,"id":212,"mutability":"mutable","name":"role","nameLocation":"6839:4:0","nodeType":"VariableDeclaration","scope":223,"src":"6831:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":211,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6831:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":214,"mutability":"mutable","name":"account","nameLocation":"6853:7:0","nodeType":"VariableDeclaration","scope":223,"src":"6845:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":213,"name":"address","nodeType":"ElementaryTypeName","src":"6845:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6830:31:0"},"returnParameters":{"id":216,"nodeType":"ParameterList","parameters":[],"src":"6879:0:0"},"scope":315,"src":"6811:110:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":250,"nodeType":"Block","src":"7119:174:0","statements":[{"assignments":[232],"declarations":[{"constant":false,"id":232,"mutability":"mutable","name":"previousAdminRole","nameLocation":"7137:17:0","nodeType":"VariableDeclaration","scope":250,"src":"7129:25:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":231,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7129:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":236,"initialValue":{"arguments":[{"id":234,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":226,"src":"7170:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":233,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"7157:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":235,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7157:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"7129:46:0"},{"expression":{"id":242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":237,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24,"src":"7185:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":239,"indexExpression":{"id":238,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":226,"src":"7192:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7185:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$19_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":240,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7198:9:0","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":18,"src":"7185:22:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":241,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":228,"src":"7210:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"7185:34:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":243,"nodeType":"ExpressionStatement","src":"7185:34:0"},{"eventCall":{"arguments":[{"id":245,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":226,"src":"7251:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":246,"name":"previousAdminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":232,"src":"7257:17:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":247,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":228,"src":"7276:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":244,"name":"RoleAdminChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"7234:16:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32,bytes32)"}},"id":248,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7234:52:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":249,"nodeType":"EmitStatement","src":"7229:57:0"}]},"documentation":{"id":224,"nodeType":"StructuredDocumentation","src":"6927:114:0","text":" @dev Sets `adminRole` as ``role``'s admin role.\n Emits a {RoleAdminChanged} event."},"id":251,"implemented":true,"kind":"function","modifiers":[],"name":"_setRoleAdmin","nameLocation":"7055:13:0","nodeType":"FunctionDefinition","parameters":{"id":229,"nodeType":"ParameterList","parameters":[{"constant":false,"id":226,"mutability":"mutable","name":"role","nameLocation":"7077:4:0","nodeType":"VariableDeclaration","scope":251,"src":"7069:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":225,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7069:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":228,"mutability":"mutable","name":"adminRole","nameLocation":"7091:9:0","nodeType":"VariableDeclaration","scope":251,"src":"7083:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":227,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7083:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7068:33:0"},"returnParameters":{"id":230,"nodeType":"ParameterList","parameters":[],"src":"7119:0:0"},"scope":315,"src":"7046:247:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":282,"nodeType":"Block","src":"7529:165:0","statements":[{"condition":{"id":263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7543:23:0","subExpression":{"arguments":[{"id":260,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"7552:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":261,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"7558:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":259,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":79,"src":"7544:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":262,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7544:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":281,"nodeType":"IfStatement","src":"7539:149:0","trueBody":{"id":280,"nodeType":"Block","src":"7568:120:0","statements":[{"expression":{"id":271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":264,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24,"src":"7582:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":266,"indexExpression":{"id":265,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"7589:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7582:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$19_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":267,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7595:7:0","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":16,"src":"7582:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":269,"indexExpression":{"id":268,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"7603:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7582:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":270,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7614:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"7582:36:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":272,"nodeType":"ExpressionStatement","src":"7582:36:0"},{"eventCall":{"arguments":[{"id":274,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"7649:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":275,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"7655:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":276,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2263,"src":"7664:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7664:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":273,"name":"RoleGranted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":336,"src":"7637:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7637:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":279,"nodeType":"EmitStatement","src":"7632:45:0"}]}}]},"documentation":{"id":252,"nodeType":"StructuredDocumentation","src":"7299:157:0","text":" @dev Grants `role` to `account`.\n Internal function without access restriction.\n May emit a {RoleGranted} event."},"id":283,"implemented":true,"kind":"function","modifiers":[],"name":"_grantRole","nameLocation":"7470:10:0","nodeType":"FunctionDefinition","parameters":{"id":257,"nodeType":"ParameterList","parameters":[{"constant":false,"id":254,"mutability":"mutable","name":"role","nameLocation":"7489:4:0","nodeType":"VariableDeclaration","scope":283,"src":"7481:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":253,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7481:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":256,"mutability":"mutable","name":"account","nameLocation":"7503:7:0","nodeType":"VariableDeclaration","scope":283,"src":"7495:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":255,"name":"address","nodeType":"ElementaryTypeName","src":"7495:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7480:31:0"},"returnParameters":{"id":258,"nodeType":"ParameterList","parameters":[],"src":"7529:0:0"},"scope":315,"src":"7461:233:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":313,"nodeType":"Block","src":"7934:165:0","statements":[{"condition":{"arguments":[{"id":292,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":286,"src":"7956:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":293,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":288,"src":"7962:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":291,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":79,"src":"7948:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7948:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":312,"nodeType":"IfStatement","src":"7944:149:0","trueBody":{"id":311,"nodeType":"Block","src":"7972:121:0","statements":[{"expression":{"id":302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":295,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24,"src":"7986:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":297,"indexExpression":{"id":296,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":286,"src":"7993:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7986:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$19_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":298,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7999:7:0","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":16,"src":"7986:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":300,"indexExpression":{"id":299,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":288,"src":"8007:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7986:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":301,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8018:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"7986:37:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":303,"nodeType":"ExpressionStatement","src":"7986:37:0"},{"eventCall":{"arguments":[{"id":305,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":286,"src":"8054:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":306,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":288,"src":"8060:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":307,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2263,"src":"8069:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":308,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8069:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":304,"name":"RoleRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":345,"src":"8042:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":309,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8042:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":310,"nodeType":"EmitStatement","src":"8037:45:0"}]}}]},"documentation":{"id":284,"nodeType":"StructuredDocumentation","src":"7700:160:0","text":" @dev Revokes `role` from `account`.\n Internal function without access restriction.\n May emit a {RoleRevoked} event."},"id":314,"implemented":true,"kind":"function","modifiers":[],"name":"_revokeRole","nameLocation":"7874:11:0","nodeType":"FunctionDefinition","parameters":{"id":289,"nodeType":"ParameterList","parameters":[{"constant":false,"id":286,"mutability":"mutable","name":"role","nameLocation":"7894:4:0","nodeType":"VariableDeclaration","scope":314,"src":"7886:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":285,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7886:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":288,"mutability":"mutable","name":"account","nameLocation":"7908:7:0","nodeType":"VariableDeclaration","scope":314,"src":"7900:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":287,"name":"address","nodeType":"ElementaryTypeName","src":"7900:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7885:31:0"},"returnParameters":{"id":290,"nodeType":"ParameterList","parameters":[],"src":"7934:0:0"},"scope":315,"src":"7865:234:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":316,"src":"1806:6295:0","usedErrors":[]}],"src":"108:7994:0"},"id":0},"@openzeppelin/contracts/access/IAccessControl.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/IAccessControl.sol","exportedSymbols":{"IAccessControl":[388]},"id":389,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":317,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"94:23:1"},{"abstract":false,"baseContracts":[],"canonicalName":"IAccessControl","contractDependencies":[],"contractKind":"interface","documentation":{"id":318,"nodeType":"StructuredDocumentation","src":"119:89:1","text":" @dev External interface of AccessControl declared to support ERC165 detection."},"fullyImplemented":false,"id":388,"linearizedBaseContracts":[388],"name":"IAccessControl","nameLocation":"219:14:1","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":319,"nodeType":"StructuredDocumentation","src":"240:292:1","text":" @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n {RoleAdminChanged} not being emitted signaling this.\n _Available since v3.1._"},"eventSelector":"bd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff","id":327,"name":"RoleAdminChanged","nameLocation":"543:16:1","nodeType":"EventDefinition","parameters":{"id":326,"nodeType":"ParameterList","parameters":[{"constant":false,"id":321,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"576:4:1","nodeType":"VariableDeclaration","scope":327,"src":"560:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":320,"name":"bytes32","nodeType":"ElementaryTypeName","src":"560:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":323,"indexed":true,"mutability":"mutable","name":"previousAdminRole","nameLocation":"598:17:1","nodeType":"VariableDeclaration","scope":327,"src":"582:33:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":322,"name":"bytes32","nodeType":"ElementaryTypeName","src":"582:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":325,"indexed":true,"mutability":"mutable","name":"newAdminRole","nameLocation":"633:12:1","nodeType":"VariableDeclaration","scope":327,"src":"617:28:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":324,"name":"bytes32","nodeType":"ElementaryTypeName","src":"617:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"559:87:1"},"src":"537:110:1"},{"anonymous":false,"documentation":{"id":328,"nodeType":"StructuredDocumentation","src":"653:212:1","text":" @dev Emitted when `account` is granted `role`.\n `sender` is the account that originated the contract call, an admin role\n bearer except when using {AccessControl-_setupRole}."},"eventSelector":"2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","id":336,"name":"RoleGranted","nameLocation":"876:11:1","nodeType":"EventDefinition","parameters":{"id":335,"nodeType":"ParameterList","parameters":[{"constant":false,"id":330,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"904:4:1","nodeType":"VariableDeclaration","scope":336,"src":"888:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":329,"name":"bytes32","nodeType":"ElementaryTypeName","src":"888:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":332,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"926:7:1","nodeType":"VariableDeclaration","scope":336,"src":"910:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":331,"name":"address","nodeType":"ElementaryTypeName","src":"910:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":334,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"951:6:1","nodeType":"VariableDeclaration","scope":336,"src":"935:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":333,"name":"address","nodeType":"ElementaryTypeName","src":"935:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"887:71:1"},"src":"870:89:1"},{"anonymous":false,"documentation":{"id":337,"nodeType":"StructuredDocumentation","src":"965:275:1","text":" @dev Emitted when `account` is revoked `role`.\n `sender` is the account that originated the contract call:\n   - if using `revokeRole`, it is the admin role bearer\n   - if using `renounceRole`, it is the role bearer (i.e. `account`)"},"eventSelector":"f6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b","id":345,"name":"RoleRevoked","nameLocation":"1251:11:1","nodeType":"EventDefinition","parameters":{"id":344,"nodeType":"ParameterList","parameters":[{"constant":false,"id":339,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"1279:4:1","nodeType":"VariableDeclaration","scope":345,"src":"1263:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":338,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1263:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":341,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1301:7:1","nodeType":"VariableDeclaration","scope":345,"src":"1285:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":340,"name":"address","nodeType":"ElementaryTypeName","src":"1285:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":343,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1326:6:1","nodeType":"VariableDeclaration","scope":345,"src":"1310:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":342,"name":"address","nodeType":"ElementaryTypeName","src":"1310:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1262:71:1"},"src":"1245:89:1"},{"documentation":{"id":346,"nodeType":"StructuredDocumentation","src":"1340:76:1","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":355,"implemented":false,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"1430:7:1","nodeType":"FunctionDefinition","parameters":{"id":351,"nodeType":"ParameterList","parameters":[{"constant":false,"id":348,"mutability":"mutable","name":"role","nameLocation":"1446:4:1","nodeType":"VariableDeclaration","scope":355,"src":"1438:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":347,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1438:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":350,"mutability":"mutable","name":"account","nameLocation":"1460:7:1","nodeType":"VariableDeclaration","scope":355,"src":"1452:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":349,"name":"address","nodeType":"ElementaryTypeName","src":"1452:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1437:31:1"},"returnParameters":{"id":354,"nodeType":"ParameterList","parameters":[{"constant":false,"id":353,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":355,"src":"1492:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":352,"name":"bool","nodeType":"ElementaryTypeName","src":"1492:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1491:6:1"},"scope":388,"src":"1421:77:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":356,"nodeType":"StructuredDocumentation","src":"1504:184:1","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {AccessControl-_setRoleAdmin}."},"functionSelector":"248a9ca3","id":363,"implemented":false,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"1702:12:1","nodeType":"FunctionDefinition","parameters":{"id":359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":358,"mutability":"mutable","name":"role","nameLocation":"1723:4:1","nodeType":"VariableDeclaration","scope":363,"src":"1715:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":357,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1715:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1714:14:1"},"returnParameters":{"id":362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":361,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":363,"src":"1752:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":360,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1752:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1751:9:1"},"scope":388,"src":"1693:68:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":364,"nodeType":"StructuredDocumentation","src":"1767:239:1","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"2f2ff15d","id":371,"implemented":false,"kind":"function","modifiers":[],"name":"grantRole","nameLocation":"2020:9:1","nodeType":"FunctionDefinition","parameters":{"id":369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":366,"mutability":"mutable","name":"role","nameLocation":"2038:4:1","nodeType":"VariableDeclaration","scope":371,"src":"2030:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":365,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2030:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":368,"mutability":"mutable","name":"account","nameLocation":"2052:7:1","nodeType":"VariableDeclaration","scope":371,"src":"2044:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":367,"name":"address","nodeType":"ElementaryTypeName","src":"2044:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2029:31:1"},"returnParameters":{"id":370,"nodeType":"ParameterList","parameters":[],"src":"2069:0:1"},"scope":388,"src":"2011:59:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":372,"nodeType":"StructuredDocumentation","src":"2076:223:1","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"d547741f","id":379,"implemented":false,"kind":"function","modifiers":[],"name":"revokeRole","nameLocation":"2313:10:1","nodeType":"FunctionDefinition","parameters":{"id":377,"nodeType":"ParameterList","parameters":[{"constant":false,"id":374,"mutability":"mutable","name":"role","nameLocation":"2332:4:1","nodeType":"VariableDeclaration","scope":379,"src":"2324:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":373,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2324:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":376,"mutability":"mutable","name":"account","nameLocation":"2346:7:1","nodeType":"VariableDeclaration","scope":379,"src":"2338:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":375,"name":"address","nodeType":"ElementaryTypeName","src":"2338:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2323:31:1"},"returnParameters":{"id":378,"nodeType":"ParameterList","parameters":[],"src":"2363:0:1"},"scope":388,"src":"2304:60:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":380,"nodeType":"StructuredDocumentation","src":"2370:480:1","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been granted `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`."},"functionSelector":"36568abe","id":387,"implemented":false,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"2864:12:1","nodeType":"FunctionDefinition","parameters":{"id":385,"nodeType":"ParameterList","parameters":[{"constant":false,"id":382,"mutability":"mutable","name":"role","nameLocation":"2885:4:1","nodeType":"VariableDeclaration","scope":387,"src":"2877:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":381,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2877:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":384,"mutability":"mutable","name":"account","nameLocation":"2899:7:1","nodeType":"VariableDeclaration","scope":387,"src":"2891:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":383,"name":"address","nodeType":"ElementaryTypeName","src":"2891:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2876:31:1"},"returnParameters":{"id":386,"nodeType":"ParameterList","parameters":[],"src":"2916:0:1"},"scope":388,"src":"2855:62:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":389,"src":"209:2710:1","usedErrors":[]}],"src":"94:2826:1"},"id":1},"@openzeppelin/contracts/security/ReentrancyGuard.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/security/ReentrancyGuard.sol","exportedSymbols":{"ReentrancyGuard":[442]},"id":443,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":390,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:2"},{"abstract":true,"baseContracts":[],"canonicalName":"ReentrancyGuard","contractDependencies":[],"contractKind":"contract","documentation":{"id":391,"nodeType":"StructuredDocumentation","src":"137:750:2","text":" @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."},"fullyImplemented":true,"id":442,"linearizedBaseContracts":[442],"name":"ReentrancyGuard","nameLocation":"906:15:2","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":394,"mutability":"constant","name":"_NOT_ENTERED","nameLocation":"1701:12:2","nodeType":"VariableDeclaration","scope":442,"src":"1676:41:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":392,"name":"uint256","nodeType":"ElementaryTypeName","src":"1676:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":393,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1716:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":true,"id":397,"mutability":"constant","name":"_ENTERED","nameLocation":"1748:8:2","nodeType":"VariableDeclaration","scope":442,"src":"1723:37:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":395,"name":"uint256","nodeType":"ElementaryTypeName","src":"1723:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":396,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1759:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"constant":false,"id":399,"mutability":"mutable","name":"_status","nameLocation":"1783:7:2","nodeType":"VariableDeclaration","scope":442,"src":"1767:23:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":398,"name":"uint256","nodeType":"ElementaryTypeName","src":"1767:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"body":{"id":406,"nodeType":"Block","src":"1811:39:2","statements":[{"expression":{"id":404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":402,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":399,"src":"1821:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":403,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":394,"src":"1831:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1821:22:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":405,"nodeType":"ExpressionStatement","src":"1821:22:2"}]},"id":407,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":400,"nodeType":"ParameterList","parameters":[],"src":"1808:2:2"},"returnParameters":{"id":401,"nodeType":"ParameterList","parameters":[],"src":"1811:0:2"},"scope":442,"src":"1797:53:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":417,"nodeType":"Block","src":"2251:79:2","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":410,"name":"_nonReentrantBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":433,"src":"2261:19:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":411,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2261:21:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":412,"nodeType":"ExpressionStatement","src":"2261:21:2"},{"id":413,"nodeType":"PlaceholderStatement","src":"2292:1:2"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":414,"name":"_nonReentrantAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":441,"src":"2303:18:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":415,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2303:20:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":416,"nodeType":"ExpressionStatement","src":"2303:20:2"}]},"documentation":{"id":408,"nodeType":"StructuredDocumentation","src":"1856:366:2","text":" @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."},"id":418,"name":"nonReentrant","nameLocation":"2236:12:2","nodeType":"ModifierDefinition","parameters":{"id":409,"nodeType":"ParameterList","parameters":[],"src":"2248:2:2"},"src":"2227:103:2","virtual":false,"visibility":"internal"},{"body":{"id":432,"nodeType":"Block","src":"2375:248:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":422,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":399,"src":"2468:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":423,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":397,"src":"2479:8:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2468:19:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5265656e7472616e637947756172643a207265656e7472616e742063616c6c","id":425,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2489:33:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""},"value":"ReentrancyGuard: reentrant call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""}],"id":421,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2460:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":426,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2460:63:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":427,"nodeType":"ExpressionStatement","src":"2460:63:2"},{"expression":{"id":430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":428,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":399,"src":"2598:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":429,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":397,"src":"2608:8:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2598:18:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":431,"nodeType":"ExpressionStatement","src":"2598:18:2"}]},"id":433,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantBefore","nameLocation":"2345:19:2","nodeType":"FunctionDefinition","parameters":{"id":419,"nodeType":"ParameterList","parameters":[],"src":"2364:2:2"},"returnParameters":{"id":420,"nodeType":"ParameterList","parameters":[],"src":"2375:0:2"},"scope":442,"src":"2336:287:2","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":440,"nodeType":"Block","src":"2667:171:2","statements":[{"expression":{"id":438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":436,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":399,"src":"2809:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":437,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":394,"src":"2819:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2809:22:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":439,"nodeType":"ExpressionStatement","src":"2809:22:2"}]},"id":441,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantAfter","nameLocation":"2638:18:2","nodeType":"FunctionDefinition","parameters":{"id":434,"nodeType":"ParameterList","parameters":[],"src":"2656:2:2"},"returnParameters":{"id":435,"nodeType":"ParameterList","parameters":[],"src":"2667:0:2"},"scope":442,"src":"2629:209:2","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":443,"src":"888:1952:2","usedErrors":[]}],"src":"112:2729:2"},"id":2},"@openzeppelin/contracts/token/ERC1155/ERC1155.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC1155/ERC1155.sol","exportedSymbols":{"Address":[2251],"Context":[2273],"ERC1155":[1665],"ERC165":[2974],"IERC1155":[1787],"IERC1155MetadataURI":[1843],"IERC1155Receiver":[1828],"IERC165":[2986]},"id":1666,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":444,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"109:23:3"},{"absolutePath":"@openzeppelin/contracts/token/ERC1155/IERC1155.sol","file":"./IERC1155.sol","id":445,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1666,"sourceUnit":1788,"src":"134:24:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol","file":"./IERC1155Receiver.sol","id":446,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1666,"sourceUnit":1829,"src":"159:32:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol","file":"./extensions/IERC1155MetadataURI.sol","id":447,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1666,"sourceUnit":1844,"src":"192:46:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../utils/Address.sol","id":448,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1666,"sourceUnit":2252,"src":"239:33:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../utils/Context.sol","id":449,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1666,"sourceUnit":2274,"src":"273:33:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"../../utils/introspection/ERC165.sol","id":450,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1666,"sourceUnit":2975,"src":"307:46:3","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":452,"name":"Context","nameLocations":["590:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":2273,"src":"590:7:3"},"id":453,"nodeType":"InheritanceSpecifier","src":"590:7:3"},{"baseName":{"id":454,"name":"ERC165","nameLocations":["599:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":2974,"src":"599:6:3"},"id":455,"nodeType":"InheritanceSpecifier","src":"599:6:3"},{"baseName":{"id":456,"name":"IERC1155","nameLocations":["607:8:3"],"nodeType":"IdentifierPath","referencedDeclaration":1787,"src":"607:8:3"},"id":457,"nodeType":"InheritanceSpecifier","src":"607:8:3"},{"baseName":{"id":458,"name":"IERC1155MetadataURI","nameLocations":["617:19:3"],"nodeType":"IdentifierPath","referencedDeclaration":1843,"src":"617:19:3"},"id":459,"nodeType":"InheritanceSpecifier","src":"617:19:3"}],"canonicalName":"ERC1155","contractDependencies":[],"contractKind":"contract","documentation":{"id":451,"nodeType":"StructuredDocumentation","src":"355:214:3","text":" @dev Implementation of the basic standard multi-token.\n See https://eips.ethereum.org/EIPS/eip-1155\n Originally based on code by Enjin: https://github.com/enjin/erc-1155\n _Available since v3.1._"},"fullyImplemented":true,"id":1665,"linearizedBaseContracts":[1665,1843,1787,2974,2986,2273],"name":"ERC1155","nameLocation":"579:7:3","nodeType":"ContractDefinition","nodes":[{"global":false,"id":462,"libraryName":{"id":460,"name":"Address","nameLocations":["649:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":2251,"src":"649:7:3"},"nodeType":"UsingForDirective","src":"643:26:3","typeName":{"id":461,"name":"address","nodeType":"ElementaryTypeName","src":"661:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"constant":false,"id":468,"mutability":"mutable","name":"_balances","nameLocation":"780:9:3","nodeType":"VariableDeclaration","scope":1665,"src":"724:65:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"},"typeName":{"id":467,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":463,"name":"uint256","nodeType":"ElementaryTypeName","src":"732:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"724:47:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":466,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":464,"name":"address","nodeType":"ElementaryTypeName","src":"751:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"743:27:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":465,"name":"uint256","nodeType":"ElementaryTypeName","src":"762:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"constant":false,"id":474,"mutability":"mutable","name":"_operatorApprovals","nameLocation":"899:18:3","nodeType":"VariableDeclaration","scope":1665,"src":"846:71:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":473,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":469,"name":"address","nodeType":"ElementaryTypeName","src":"854:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"846:44:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":472,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":470,"name":"address","nodeType":"ElementaryTypeName","src":"873:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"865:24:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":471,"name":"bool","nodeType":"ElementaryTypeName","src":"884:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"private"},{"constant":false,"id":476,"mutability":"mutable","name":"_uri","nameLocation":"1053:4:3","nodeType":"VariableDeclaration","scope":1665,"src":"1038:19:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":475,"name":"string","nodeType":"ElementaryTypeName","src":"1038:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"body":{"id":486,"nodeType":"Block","src":"1139:30:3","statements":[{"expression":{"arguments":[{"id":483,"name":"uri_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":479,"src":"1157:4:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":482,"name":"_setURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":998,"src":"1149:7:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory)"}},"id":484,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1149:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":485,"nodeType":"ExpressionStatement","src":"1149:13:3"}]},"documentation":{"id":477,"nodeType":"StructuredDocumentation","src":"1064:38:3","text":" @dev See {_setURI}."},"id":487,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":480,"nodeType":"ParameterList","parameters":[{"constant":false,"id":479,"mutability":"mutable","name":"uri_","nameLocation":"1133:4:3","nodeType":"VariableDeclaration","scope":487,"src":"1119:18:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":478,"name":"string","nodeType":"ElementaryTypeName","src":"1119:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1118:20:3"},"returnParameters":{"id":481,"nodeType":"ParameterList","parameters":[],"src":"1139:0:3"},"scope":1665,"src":"1107:62:3","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[2973,2985],"body":{"id":517,"nodeType":"Block","src":"1344:197:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":498,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"1373:11:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":500,"name":"IERC1155","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1787,"src":"1393:8:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155_$1787_$","typeString":"type(contract IERC1155)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC1155_$1787_$","typeString":"type(contract IERC1155)"}],"id":499,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1388:4:3","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":501,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1388:14:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC1155_$1787","typeString":"type(contract IERC1155)"}},"id":502,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1403:11:3","memberName":"interfaceId","nodeType":"MemberAccess","src":"1388:26:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1373:41:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":504,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"1430:11:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":506,"name":"IERC1155MetadataURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1843,"src":"1450:19:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155MetadataURI_$1843_$","typeString":"type(contract IERC1155MetadataURI)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC1155MetadataURI_$1843_$","typeString":"type(contract IERC1155MetadataURI)"}],"id":505,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1445:4:3","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1445:25:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC1155MetadataURI_$1843","typeString":"type(contract IERC1155MetadataURI)"}},"id":508,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1471:11:3","memberName":"interfaceId","nodeType":"MemberAccess","src":"1445:37:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1430:52:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1373:109:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":513,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"1522:11:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":511,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1498:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC1155_$1665_$","typeString":"type(contract super ERC1155)"}},"id":512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1504:17:3","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":2973,"src":"1498:23:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":514,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1498:36:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1373:161:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":497,"id":516,"nodeType":"Return","src":"1354:180:3"}]},"documentation":{"id":488,"nodeType":"StructuredDocumentation","src":"1175:56:3","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":518,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1245:17:3","nodeType":"FunctionDefinition","overrides":{"id":494,"nodeType":"OverrideSpecifier","overrides":[{"id":492,"name":"ERC165","nameLocations":["1312:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":2974,"src":"1312:6:3"},{"id":493,"name":"IERC165","nameLocations":["1320:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":2986,"src":"1320:7:3"}],"src":"1303:25:3"},"parameters":{"id":491,"nodeType":"ParameterList","parameters":[{"constant":false,"id":490,"mutability":"mutable","name":"interfaceId","nameLocation":"1270:11:3","nodeType":"VariableDeclaration","scope":518,"src":"1263:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":489,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1263:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1262:20:3"},"returnParameters":{"id":497,"nodeType":"ParameterList","parameters":[{"constant":false,"id":496,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":518,"src":"1338:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":495,"name":"bool","nodeType":"ElementaryTypeName","src":"1338:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1337:6:3"},"scope":1665,"src":"1236:305:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1842],"body":{"id":529,"nodeType":"Block","src":"2015:28:3","statements":[{"expression":{"id":527,"name":"_uri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":476,"src":"2032:4:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":526,"id":528,"nodeType":"Return","src":"2025:11:3"}]},"documentation":{"id":519,"nodeType":"StructuredDocumentation","src":"1547:388:3","text":" @dev See {IERC1155MetadataURI-uri}.\n This implementation returns the same URI for *all* token types. It relies\n on the token type ID substitution mechanism\n https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n Clients calling this function must replace the `\\{id\\}` substring with the\n actual token type ID."},"functionSelector":"0e89341c","id":530,"implemented":true,"kind":"function","modifiers":[],"name":"uri","nameLocation":"1949:3:3","nodeType":"FunctionDefinition","overrides":{"id":523,"nodeType":"OverrideSpecifier","overrides":[],"src":"1982:8:3"},"parameters":{"id":522,"nodeType":"ParameterList","parameters":[{"constant":false,"id":521,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":530,"src":"1953:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":520,"name":"uint256","nodeType":"ElementaryTypeName","src":"1953:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1952:9:3"},"returnParameters":{"id":526,"nodeType":"ParameterList","parameters":[{"constant":false,"id":525,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":530,"src":"2000:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":524,"name":"string","nodeType":"ElementaryTypeName","src":"2000:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1999:15:3"},"scope":1665,"src":"1940:103:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1725],"body":{"id":557,"nodeType":"Block","src":"2280:132:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":542,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":533,"src":"2298:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":545,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2317:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":544,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2309:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":543,"name":"address","nodeType":"ElementaryTypeName","src":"2309:7:3","typeDescriptions":{}}},"id":546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2309:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2298:21:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2061646472657373207a65726f206973206e6f7420612076616c6964206f776e6572","id":548,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2321:44:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad","typeString":"literal_string \"ERC1155: address zero is not a valid owner\""},"value":"ERC1155: address zero is not a valid owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad","typeString":"literal_string \"ERC1155: address zero is not a valid owner\""}],"id":541,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2290:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":549,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2290:76:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":550,"nodeType":"ExpressionStatement","src":"2290:76:3"},{"expression":{"baseExpression":{"baseExpression":{"id":551,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":468,"src":"2383:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":553,"indexExpression":{"id":552,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":535,"src":"2393:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2383:13:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":555,"indexExpression":{"id":554,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":533,"src":"2397:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2383:22:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":540,"id":556,"nodeType":"Return","src":"2376:29:3"}]},"documentation":{"id":531,"nodeType":"StructuredDocumentation","src":"2049:131:3","text":" @dev See {IERC1155-balanceOf}.\n Requirements:\n - `account` cannot be the zero address."},"functionSelector":"00fdd58e","id":558,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"2194:9:3","nodeType":"FunctionDefinition","overrides":{"id":537,"nodeType":"OverrideSpecifier","overrides":[],"src":"2253:8:3"},"parameters":{"id":536,"nodeType":"ParameterList","parameters":[{"constant":false,"id":533,"mutability":"mutable","name":"account","nameLocation":"2212:7:3","nodeType":"VariableDeclaration","scope":558,"src":"2204:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":532,"name":"address","nodeType":"ElementaryTypeName","src":"2204:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":535,"mutability":"mutable","name":"id","nameLocation":"2229:2:3","nodeType":"VariableDeclaration","scope":558,"src":"2221:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":534,"name":"uint256","nodeType":"ElementaryTypeName","src":"2221:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2203:29:3"},"returnParameters":{"id":540,"nodeType":"ParameterList","parameters":[{"constant":false,"id":539,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":558,"src":"2271:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":538,"name":"uint256","nodeType":"ElementaryTypeName","src":"2271:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2270:9:3"},"scope":1665,"src":"2185:227:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1738],"body":{"id":621,"nodeType":"Block","src":"2742:335:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":573,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":562,"src":"2760:8:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2769:6:3","memberName":"length","nodeType":"MemberAccess","src":"2760:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":575,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":565,"src":"2779:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2783:6:3","memberName":"length","nodeType":"MemberAccess","src":"2779:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2760:29:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206163636f756e747320616e6420696473206c656e677468206d69736d61746368","id":578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2791:43:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5","typeString":"literal_string \"ERC1155: accounts and ids length mismatch\""},"value":"ERC1155: accounts and ids length mismatch"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5","typeString":"literal_string \"ERC1155: accounts and ids length mismatch\""}],"id":572,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2752:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":579,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2752:83:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":580,"nodeType":"ExpressionStatement","src":"2752:83:3"},{"assignments":[585],"declarations":[{"constant":false,"id":585,"mutability":"mutable","name":"batchBalances","nameLocation":"2863:13:3","nodeType":"VariableDeclaration","scope":621,"src":"2846:30:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":583,"name":"uint256","nodeType":"ElementaryTypeName","src":"2846:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":584,"nodeType":"ArrayTypeName","src":"2846:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":592,"initialValue":{"arguments":[{"expression":{"id":589,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":562,"src":"2893:8:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2902:6:3","memberName":"length","nodeType":"MemberAccess","src":"2893:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":588,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2879:13:3","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":586,"name":"uint256","nodeType":"ElementaryTypeName","src":"2883:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":587,"nodeType":"ArrayTypeName","src":"2883:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":591,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2879:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"2846:63:3"},{"body":{"id":617,"nodeType":"Block","src":"2966:74:3","statements":[{"expression":{"id":615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":604,"name":"batchBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":585,"src":"2980:13:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":606,"indexExpression":{"id":605,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"2994:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2980:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":608,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":562,"src":"3009:8:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":610,"indexExpression":{"id":609,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"3018:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3009:11:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":611,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":565,"src":"3022:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":613,"indexExpression":{"id":612,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"3026:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3022:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":607,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":558,"src":"2999:9:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,uint256) view returns (uint256)"}},"id":614,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2999:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2980:49:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":616,"nodeType":"ExpressionStatement","src":"2980:49:3"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":597,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"2940:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":598,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":562,"src":"2944:8:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2953:6:3","memberName":"length","nodeType":"MemberAccess","src":"2944:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2940:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":618,"initializationExpression":{"assignments":[594],"declarations":[{"constant":false,"id":594,"mutability":"mutable","name":"i","nameLocation":"2933:1:3","nodeType":"VariableDeclaration","scope":618,"src":"2925:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":593,"name":"uint256","nodeType":"ElementaryTypeName","src":"2925:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":596,"initialValue":{"hexValue":"30","id":595,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2937:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2925:13:3"},"loopExpression":{"expression":{"id":602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"2961:3:3","subExpression":{"id":601,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"2963:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":603,"nodeType":"ExpressionStatement","src":"2961:3:3"},"nodeType":"ForStatement","src":"2920:120:3"},{"expression":{"id":619,"name":"batchBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":585,"src":"3057:13:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":571,"id":620,"nodeType":"Return","src":"3050:20:3"}]},"documentation":{"id":559,"nodeType":"StructuredDocumentation","src":"2418:146:3","text":" @dev See {IERC1155-balanceOfBatch}.\n Requirements:\n - `accounts` and `ids` must have the same length."},"functionSelector":"4e1273f4","id":622,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOfBatch","nameLocation":"2578:14:3","nodeType":"FunctionDefinition","overrides":{"id":567,"nodeType":"OverrideSpecifier","overrides":[],"src":"2694:8:3"},"parameters":{"id":566,"nodeType":"ParameterList","parameters":[{"constant":false,"id":562,"mutability":"mutable","name":"accounts","nameLocation":"2610:8:3","nodeType":"VariableDeclaration","scope":622,"src":"2593:25:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":560,"name":"address","nodeType":"ElementaryTypeName","src":"2593:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":561,"nodeType":"ArrayTypeName","src":"2593:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":565,"mutability":"mutable","name":"ids","nameLocation":"2637:3:3","nodeType":"VariableDeclaration","scope":622,"src":"2620:20:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":563,"name":"uint256","nodeType":"ElementaryTypeName","src":"2620:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":564,"nodeType":"ArrayTypeName","src":"2620:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2592:49:3"},"returnParameters":{"id":571,"nodeType":"ParameterList","parameters":[{"constant":false,"id":570,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":622,"src":"2720:16:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":568,"name":"uint256","nodeType":"ElementaryTypeName","src":"2720:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":569,"nodeType":"ArrayTypeName","src":"2720:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2719:18:3"},"scope":1665,"src":"2569:508:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1746],"body":{"id":638,"nodeType":"Block","src":"3229:69:3","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":632,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2263,"src":"3258:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3258:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":634,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":625,"src":"3272:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":635,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":627,"src":"3282:8:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":631,"name":"_setApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1470,"src":"3239:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":636,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3239:52:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":637,"nodeType":"ExpressionStatement","src":"3239:52:3"}]},"documentation":{"id":623,"nodeType":"StructuredDocumentation","src":"3083:57:3","text":" @dev See {IERC1155-setApprovalForAll}."},"functionSelector":"a22cb465","id":639,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"3154:17:3","nodeType":"FunctionDefinition","overrides":{"id":629,"nodeType":"OverrideSpecifier","overrides":[],"src":"3220:8:3"},"parameters":{"id":628,"nodeType":"ParameterList","parameters":[{"constant":false,"id":625,"mutability":"mutable","name":"operator","nameLocation":"3180:8:3","nodeType":"VariableDeclaration","scope":639,"src":"3172:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":624,"name":"address","nodeType":"ElementaryTypeName","src":"3172:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":627,"mutability":"mutable","name":"approved","nameLocation":"3195:8:3","nodeType":"VariableDeclaration","scope":639,"src":"3190:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":626,"name":"bool","nodeType":"ElementaryTypeName","src":"3190:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3171:33:3"},"returnParameters":{"id":630,"nodeType":"ParameterList","parameters":[],"src":"3229:0:3"},"scope":1665,"src":"3145:153:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1756],"body":{"id":656,"nodeType":"Block","src":"3470:61:3","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":650,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":474,"src":"3487:18:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":652,"indexExpression":{"id":651,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":642,"src":"3506:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3487:27:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":654,"indexExpression":{"id":653,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":644,"src":"3515:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3487:37:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":649,"id":655,"nodeType":"Return","src":"3480:44:3"}]},"documentation":{"id":640,"nodeType":"StructuredDocumentation","src":"3304:56:3","text":" @dev See {IERC1155-isApprovedForAll}."},"functionSelector":"e985e9c5","id":657,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"3374:16:3","nodeType":"FunctionDefinition","overrides":{"id":646,"nodeType":"OverrideSpecifier","overrides":[],"src":"3446:8:3"},"parameters":{"id":645,"nodeType":"ParameterList","parameters":[{"constant":false,"id":642,"mutability":"mutable","name":"account","nameLocation":"3399:7:3","nodeType":"VariableDeclaration","scope":657,"src":"3391:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":641,"name":"address","nodeType":"ElementaryTypeName","src":"3391:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":644,"mutability":"mutable","name":"operator","nameLocation":"3416:8:3","nodeType":"VariableDeclaration","scope":657,"src":"3408:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":643,"name":"address","nodeType":"ElementaryTypeName","src":"3408:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3390:35:3"},"returnParameters":{"id":649,"nodeType":"ParameterList","parameters":[{"constant":false,"id":648,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":657,"src":"3464:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":647,"name":"bool","nodeType":"ElementaryTypeName","src":"3464:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3463:6:3"},"scope":1665,"src":"3365:166:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1770],"body":{"id":694,"nodeType":"Block","src":"3767:225:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":673,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":660,"src":"3798:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":674,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2263,"src":"3806:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":675,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3806:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3798:20:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":678,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":660,"src":"3839:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":679,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2263,"src":"3845:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":680,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3845:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":677,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":657,"src":"3822:16:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":681,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3822:36:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3798:60:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564","id":683,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3872:48:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156","typeString":"literal_string \"ERC1155: caller is not token owner or approved\""},"value":"ERC1155: caller is not token owner or approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156","typeString":"literal_string \"ERC1155: caller is not token owner or approved\""}],"id":672,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3777:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":684,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3777:153:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":685,"nodeType":"ExpressionStatement","src":"3777:153:3"},{"expression":{"arguments":[{"id":687,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":660,"src":"3958:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":688,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":662,"src":"3964:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":689,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":664,"src":"3968:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":690,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":666,"src":"3972:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":691,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":668,"src":"3980:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":686,"name":"_safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":852,"src":"3940:17:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,uint256,bytes memory)"}},"id":692,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3940:45:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":693,"nodeType":"ExpressionStatement","src":"3940:45:3"}]},"documentation":{"id":658,"nodeType":"StructuredDocumentation","src":"3537:56:3","text":" @dev See {IERC1155-safeTransferFrom}."},"functionSelector":"f242432a","id":695,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"3607:16:3","nodeType":"FunctionDefinition","overrides":{"id":670,"nodeType":"OverrideSpecifier","overrides":[],"src":"3758:8:3"},"parameters":{"id":669,"nodeType":"ParameterList","parameters":[{"constant":false,"id":660,"mutability":"mutable","name":"from","nameLocation":"3641:4:3","nodeType":"VariableDeclaration","scope":695,"src":"3633:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":659,"name":"address","nodeType":"ElementaryTypeName","src":"3633:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":662,"mutability":"mutable","name":"to","nameLocation":"3663:2:3","nodeType":"VariableDeclaration","scope":695,"src":"3655:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":661,"name":"address","nodeType":"ElementaryTypeName","src":"3655:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":664,"mutability":"mutable","name":"id","nameLocation":"3683:2:3","nodeType":"VariableDeclaration","scope":695,"src":"3675:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":663,"name":"uint256","nodeType":"ElementaryTypeName","src":"3675:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":666,"mutability":"mutable","name":"amount","nameLocation":"3703:6:3","nodeType":"VariableDeclaration","scope":695,"src":"3695:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":665,"name":"uint256","nodeType":"ElementaryTypeName","src":"3695:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":668,"mutability":"mutable","name":"data","nameLocation":"3732:4:3","nodeType":"VariableDeclaration","scope":695,"src":"3719:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":667,"name":"bytes","nodeType":"ElementaryTypeName","src":"3719:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3623:119:3"},"returnParameters":{"id":671,"nodeType":"ParameterList","parameters":[],"src":"3767:0:3"},"scope":1665,"src":"3598:394:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1786],"body":{"id":734,"nodeType":"Block","src":"4258:232:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":713,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":698,"src":"4289:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":714,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2263,"src":"4297:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":715,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4297:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4289:20:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":718,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":698,"src":"4330:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":719,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2263,"src":"4336:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":720,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4336:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":717,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":657,"src":"4313:16:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":721,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4313:36:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4289:60:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564","id":723,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4363:48:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156","typeString":"literal_string \"ERC1155: caller is not token owner or approved\""},"value":"ERC1155: caller is not token owner or approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156","typeString":"literal_string \"ERC1155: caller is not token owner or approved\""}],"id":712,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4268:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":724,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4268:153:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":725,"nodeType":"ExpressionStatement","src":"4268:153:3"},{"expression":{"arguments":[{"id":727,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":698,"src":"4454:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":728,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":700,"src":"4460:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":729,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":703,"src":"4464:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":730,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":706,"src":"4469:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":731,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":708,"src":"4478:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":726,"name":"_safeBatchTransferFrom","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":987,"src":"4431:22:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":732,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4431:52:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":733,"nodeType":"ExpressionStatement","src":"4431:52:3"}]},"documentation":{"id":696,"nodeType":"StructuredDocumentation","src":"3998:61:3","text":" @dev See {IERC1155-safeBatchTransferFrom}."},"functionSelector":"2eb2c2d6","id":735,"implemented":true,"kind":"function","modifiers":[],"name":"safeBatchTransferFrom","nameLocation":"4073:21:3","nodeType":"FunctionDefinition","overrides":{"id":710,"nodeType":"OverrideSpecifier","overrides":[],"src":"4249:8:3"},"parameters":{"id":709,"nodeType":"ParameterList","parameters":[{"constant":false,"id":698,"mutability":"mutable","name":"from","nameLocation":"4112:4:3","nodeType":"VariableDeclaration","scope":735,"src":"4104:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":697,"name":"address","nodeType":"ElementaryTypeName","src":"4104:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":700,"mutability":"mutable","name":"to","nameLocation":"4134:2:3","nodeType":"VariableDeclaration","scope":735,"src":"4126:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":699,"name":"address","nodeType":"ElementaryTypeName","src":"4126:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":703,"mutability":"mutable","name":"ids","nameLocation":"4163:3:3","nodeType":"VariableDeclaration","scope":735,"src":"4146:20:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":701,"name":"uint256","nodeType":"ElementaryTypeName","src":"4146:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":702,"nodeType":"ArrayTypeName","src":"4146:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":706,"mutability":"mutable","name":"amounts","nameLocation":"4193:7:3","nodeType":"VariableDeclaration","scope":735,"src":"4176:24:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":704,"name":"uint256","nodeType":"ElementaryTypeName","src":"4176:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":705,"nodeType":"ArrayTypeName","src":"4176:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":708,"mutability":"mutable","name":"data","nameLocation":"4223:4:3","nodeType":"VariableDeclaration","scope":735,"src":"4210:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":707,"name":"bytes","nodeType":"ElementaryTypeName","src":"4210:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4094:139:3"},"returnParameters":{"id":711,"nodeType":"ParameterList","parameters":[],"src":"4258:0:3"},"scope":1665,"src":"4064:426:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":851,"nodeType":"Block","src":"5103:784:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":750,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":740,"src":"5121:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":753,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5135:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":752,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5127:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":751,"name":"address","nodeType":"ElementaryTypeName","src":"5127:7:3","typeDescriptions":{}}},"id":754,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5127:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5121:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a207472616e7366657220746f20746865207a65726f2061646472657373","id":756,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5139:39:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d","typeString":"literal_string \"ERC1155: transfer to the zero address\""},"value":"ERC1155: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d","typeString":"literal_string \"ERC1155: transfer to the zero address\""}],"id":749,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5113:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":757,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5113:66:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":758,"nodeType":"ExpressionStatement","src":"5113:66:3"},{"assignments":[760],"declarations":[{"constant":false,"id":760,"mutability":"mutable","name":"operator","nameLocation":"5198:8:3","nodeType":"VariableDeclaration","scope":851,"src":"5190:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":759,"name":"address","nodeType":"ElementaryTypeName","src":"5190:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":763,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":761,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2263,"src":"5209:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":762,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5209:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5190:31:3"},{"assignments":[768],"declarations":[{"constant":false,"id":768,"mutability":"mutable","name":"ids","nameLocation":"5248:3:3","nodeType":"VariableDeclaration","scope":851,"src":"5231:20:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":766,"name":"uint256","nodeType":"ElementaryTypeName","src":"5231:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":767,"nodeType":"ArrayTypeName","src":"5231:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":772,"initialValue":{"arguments":[{"id":770,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":742,"src":"5272:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":769,"name":"_asSingletonArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1664,"src":"5254:17:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"}},"id":771,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5254:21:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"5231:44:3"},{"assignments":[777],"declarations":[{"constant":false,"id":777,"mutability":"mutable","name":"amounts","nameLocation":"5302:7:3","nodeType":"VariableDeclaration","scope":851,"src":"5285:24:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":775,"name":"uint256","nodeType":"ElementaryTypeName","src":"5285:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":776,"nodeType":"ArrayTypeName","src":"5285:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":781,"initialValue":{"arguments":[{"id":779,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":744,"src":"5330:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":778,"name":"_asSingletonArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1664,"src":"5312:17:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"}},"id":780,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5312:25:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"5285:52:3"},{"expression":{"arguments":[{"id":783,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"5369:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":784,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":738,"src":"5379:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":785,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":740,"src":"5385:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":786,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":768,"src":"5389:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":787,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"5394:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":788,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":746,"src":"5403:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":782,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1489,"src":"5348:20:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":789,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5348:60:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":790,"nodeType":"ExpressionStatement","src":"5348:60:3"},{"assignments":[792],"declarations":[{"constant":false,"id":792,"mutability":"mutable","name":"fromBalance","nameLocation":"5427:11:3","nodeType":"VariableDeclaration","scope":851,"src":"5419:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":791,"name":"uint256","nodeType":"ElementaryTypeName","src":"5419:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":798,"initialValue":{"baseExpression":{"baseExpression":{"id":793,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":468,"src":"5441:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":795,"indexExpression":{"id":794,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":742,"src":"5451:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5441:13:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":797,"indexExpression":{"id":796,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":738,"src":"5455:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5441:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5419:41:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":800,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":792,"src":"5478:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":801,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":744,"src":"5493:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5478:21:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a20696e73756666696369656e742062616c616e636520666f72207472616e73666572","id":803,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5501:44:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf","typeString":"literal_string \"ERC1155: insufficient balance for transfer\""},"value":"ERC1155: insufficient balance for transfer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf","typeString":"literal_string \"ERC1155: insufficient balance for transfer\""}],"id":799,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5470:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":804,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5470:76:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":805,"nodeType":"ExpressionStatement","src":"5470:76:3"},{"id":816,"nodeType":"UncheckedBlock","src":"5556:77:3","statements":[{"expression":{"id":814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":806,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":468,"src":"5580:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":809,"indexExpression":{"id":807,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":742,"src":"5590:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5580:13:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":810,"indexExpression":{"id":808,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":738,"src":"5594:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5580:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":811,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":792,"src":"5602:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":812,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":744,"src":"5616:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5602:20:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5580:42:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":815,"nodeType":"ExpressionStatement","src":"5580:42:3"}]},{"expression":{"id":823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":817,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":468,"src":"5642:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":820,"indexExpression":{"id":818,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":742,"src":"5652:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5642:13:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":821,"indexExpression":{"id":819,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":740,"src":"5656:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5642:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":822,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":744,"src":"5663:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5642:27:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":824,"nodeType":"ExpressionStatement","src":"5642:27:3"},{"eventCall":{"arguments":[{"id":826,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"5700:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":827,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":738,"src":"5710:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":828,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":740,"src":"5716:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":829,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":742,"src":"5720:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":830,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":744,"src":"5724:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":825,"name":"TransferSingle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1684,"src":"5685:14:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256,uint256)"}},"id":831,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5685:46:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":832,"nodeType":"EmitStatement","src":"5680:51:3"},{"expression":{"arguments":[{"id":834,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"5762:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":835,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":738,"src":"5772:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":836,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":740,"src":"5778:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":837,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":768,"src":"5782:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":838,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"5787:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":839,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":746,"src":"5796:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":833,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1508,"src":"5742:19:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":840,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5742:59:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":841,"nodeType":"ExpressionStatement","src":"5742:59:3"},{"expression":{"arguments":[{"id":843,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"5843:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":844,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":738,"src":"5853:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":845,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":740,"src":"5859:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":846,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":742,"src":"5863:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":847,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":744,"src":"5867:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":848,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":746,"src":"5875:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":842,"name":"_doSafeTransferAcceptanceCheck","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1571,"src":"5812:30:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256,uint256,bytes memory)"}},"id":849,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5812:68:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":850,"nodeType":"ExpressionStatement","src":"5812:68:3"}]},"documentation":{"id":736,"nodeType":"StructuredDocumentation","src":"4496:439:3","text":" @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n Emits a {TransferSingle} event.\n Requirements:\n - `to` cannot be the zero address.\n - `from` must have a balance of tokens of type `id` of at least `amount`.\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n acceptance magic value."},"id":852,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransferFrom","nameLocation":"4949:17:3","nodeType":"FunctionDefinition","parameters":{"id":747,"nodeType":"ParameterList","parameters":[{"constant":false,"id":738,"mutability":"mutable","name":"from","nameLocation":"4984:4:3","nodeType":"VariableDeclaration","scope":852,"src":"4976:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":737,"name":"address","nodeType":"ElementaryTypeName","src":"4976:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":740,"mutability":"mutable","name":"to","nameLocation":"5006:2:3","nodeType":"VariableDeclaration","scope":852,"src":"4998:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":739,"name":"address","nodeType":"ElementaryTypeName","src":"4998:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":742,"mutability":"mutable","name":"id","nameLocation":"5026:2:3","nodeType":"VariableDeclaration","scope":852,"src":"5018:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":741,"name":"uint256","nodeType":"ElementaryTypeName","src":"5018:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":744,"mutability":"mutable","name":"amount","nameLocation":"5046:6:3","nodeType":"VariableDeclaration","scope":852,"src":"5038:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":743,"name":"uint256","nodeType":"ElementaryTypeName","src":"5038:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":746,"mutability":"mutable","name":"data","nameLocation":"5075:4:3","nodeType":"VariableDeclaration","scope":852,"src":"5062:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":745,"name":"bytes","nodeType":"ElementaryTypeName","src":"5062:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4966:119:3"},"returnParameters":{"id":748,"nodeType":"ParameterList","parameters":[],"src":"5103:0:3"},"scope":1665,"src":"4940:947:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":986,"nodeType":"Block","src":"6421:927:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":873,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":869,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":860,"src":"6439:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6443:6:3","memberName":"length","nodeType":"MemberAccess","src":"6439:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":871,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":863,"src":"6453:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6461:6:3","memberName":"length","nodeType":"MemberAccess","src":"6453:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6439:28:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2069647320616e6420616d6f756e7473206c656e677468206d69736d61746368","id":874,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6469:42:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807","typeString":"literal_string \"ERC1155: ids and amounts length mismatch\""},"value":"ERC1155: ids and amounts length mismatch"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807","typeString":"literal_string \"ERC1155: ids and amounts length mismatch\""}],"id":868,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6431:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":875,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6431:81:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":876,"nodeType":"ExpressionStatement","src":"6431:81:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":878,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":857,"src":"6530:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":881,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6544:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":880,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6536:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":879,"name":"address","nodeType":"ElementaryTypeName","src":"6536:7:3","typeDescriptions":{}}},"id":882,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6536:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6530:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a207472616e7366657220746f20746865207a65726f2061646472657373","id":884,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6548:39:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d","typeString":"literal_string \"ERC1155: transfer to the zero address\""},"value":"ERC1155: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d","typeString":"literal_string \"ERC1155: transfer to the zero address\""}],"id":877,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6522:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":885,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6522:66:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":886,"nodeType":"ExpressionStatement","src":"6522:66:3"},{"assignments":[888],"declarations":[{"constant":false,"id":888,"mutability":"mutable","name":"operator","nameLocation":"6607:8:3","nodeType":"VariableDeclaration","scope":986,"src":"6599:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":887,"name":"address","nodeType":"ElementaryTypeName","src":"6599:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":891,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":889,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2263,"src":"6618:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":890,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6618:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6599:31:3"},{"expression":{"arguments":[{"id":893,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":888,"src":"6662:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":894,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":855,"src":"6672:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":895,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":857,"src":"6678:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":896,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":860,"src":"6682:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":897,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":863,"src":"6687:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":898,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":865,"src":"6696:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":892,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1489,"src":"6641:20:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":899,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6641:60:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":900,"nodeType":"ExpressionStatement","src":"6641:60:3"},{"body":{"id":958,"nodeType":"Block","src":"6753:370:3","statements":[{"assignments":[913],"declarations":[{"constant":false,"id":913,"mutability":"mutable","name":"id","nameLocation":"6775:2:3","nodeType":"VariableDeclaration","scope":958,"src":"6767:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":912,"name":"uint256","nodeType":"ElementaryTypeName","src":"6767:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":917,"initialValue":{"baseExpression":{"id":914,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":860,"src":"6780:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":916,"indexExpression":{"id":915,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":902,"src":"6784:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6780:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6767:19:3"},{"assignments":[919],"declarations":[{"constant":false,"id":919,"mutability":"mutable","name":"amount","nameLocation":"6808:6:3","nodeType":"VariableDeclaration","scope":958,"src":"6800:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":918,"name":"uint256","nodeType":"ElementaryTypeName","src":"6800:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":923,"initialValue":{"baseExpression":{"id":920,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":863,"src":"6817:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":922,"indexExpression":{"id":921,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":902,"src":"6825:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6817:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6800:27:3"},{"assignments":[925],"declarations":[{"constant":false,"id":925,"mutability":"mutable","name":"fromBalance","nameLocation":"6850:11:3","nodeType":"VariableDeclaration","scope":958,"src":"6842:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":924,"name":"uint256","nodeType":"ElementaryTypeName","src":"6842:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":931,"initialValue":{"baseExpression":{"baseExpression":{"id":926,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":468,"src":"6864:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":928,"indexExpression":{"id":927,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":913,"src":"6874:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6864:13:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":930,"indexExpression":{"id":929,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":855,"src":"6878:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6864:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6842:41:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":933,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":925,"src":"6905:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":934,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":919,"src":"6920:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6905:21:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a20696e73756666696369656e742062616c616e636520666f72207472616e73666572","id":936,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6928:44:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf","typeString":"literal_string \"ERC1155: insufficient balance for transfer\""},"value":"ERC1155: insufficient balance for transfer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf","typeString":"literal_string \"ERC1155: insufficient balance for transfer\""}],"id":932,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6897:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":937,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6897:76:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":938,"nodeType":"ExpressionStatement","src":"6897:76:3"},{"id":949,"nodeType":"UncheckedBlock","src":"6987:85:3","statements":[{"expression":{"id":947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":939,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":468,"src":"7015:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":942,"indexExpression":{"id":940,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":913,"src":"7025:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7015:13:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":943,"indexExpression":{"id":941,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":855,"src":"7029:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7015:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":946,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":944,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":925,"src":"7037:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":945,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":919,"src":"7051:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7037:20:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7015:42:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":948,"nodeType":"ExpressionStatement","src":"7015:42:3"}]},{"expression":{"id":956,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":950,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":468,"src":"7085:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":953,"indexExpression":{"id":951,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":913,"src":"7095:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7085:13:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":954,"indexExpression":{"id":952,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":857,"src":"7099:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7085:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":955,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":919,"src":"7106:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7085:27:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":957,"nodeType":"ExpressionStatement","src":"7085:27:3"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":905,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":902,"src":"6732:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":906,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":860,"src":"6736:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6740:6:3","memberName":"length","nodeType":"MemberAccess","src":"6736:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6732:14:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":959,"initializationExpression":{"assignments":[902],"declarations":[{"constant":false,"id":902,"mutability":"mutable","name":"i","nameLocation":"6725:1:3","nodeType":"VariableDeclaration","scope":959,"src":"6717:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":901,"name":"uint256","nodeType":"ElementaryTypeName","src":"6717:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":904,"initialValue":{"hexValue":"30","id":903,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6729:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6717:13:3"},"loopExpression":{"expression":{"id":910,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"6748:3:3","subExpression":{"id":909,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":902,"src":"6750:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":911,"nodeType":"ExpressionStatement","src":"6748:3:3"},"nodeType":"ForStatement","src":"6712:411:3"},{"eventCall":{"arguments":[{"id":961,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":888,"src":"7152:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":962,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":855,"src":"7162:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":963,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":857,"src":"7168:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":964,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":860,"src":"7172:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":965,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":863,"src":"7177:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":960,"name":"TransferBatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1699,"src":"7138:13:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory)"}},"id":966,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7138:47:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":967,"nodeType":"EmitStatement","src":"7133:52:3"},{"expression":{"arguments":[{"id":969,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":888,"src":"7216:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":970,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":855,"src":"7226:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":971,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":857,"src":"7232:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":972,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":860,"src":"7236:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":973,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":863,"src":"7241:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":974,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":865,"src":"7250:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":968,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1508,"src":"7196:19:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":975,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7196:59:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":976,"nodeType":"ExpressionStatement","src":"7196:59:3"},{"expression":{"arguments":[{"id":978,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":888,"src":"7302:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":979,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":855,"src":"7312:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":980,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":857,"src":"7318:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":981,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":860,"src":"7322:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":982,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":863,"src":"7327:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":983,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":865,"src":"7336:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":977,"name":"_doSafeBatchTransferAcceptanceCheck","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1636,"src":"7266:35:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":984,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7266:75:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":985,"nodeType":"ExpressionStatement","src":"7266:75:3"}]},"documentation":{"id":853,"nodeType":"StructuredDocumentation","src":"5893:335:3","text":" @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n Emits a {TransferBatch} event.\n Requirements:\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n acceptance magic value."},"id":987,"implemented":true,"kind":"function","modifiers":[],"name":"_safeBatchTransferFrom","nameLocation":"6242:22:3","nodeType":"FunctionDefinition","parameters":{"id":866,"nodeType":"ParameterList","parameters":[{"constant":false,"id":855,"mutability":"mutable","name":"from","nameLocation":"6282:4:3","nodeType":"VariableDeclaration","scope":987,"src":"6274:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":854,"name":"address","nodeType":"ElementaryTypeName","src":"6274:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":857,"mutability":"mutable","name":"to","nameLocation":"6304:2:3","nodeType":"VariableDeclaration","scope":987,"src":"6296:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":856,"name":"address","nodeType":"ElementaryTypeName","src":"6296:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":860,"mutability":"mutable","name":"ids","nameLocation":"6333:3:3","nodeType":"VariableDeclaration","scope":987,"src":"6316:20:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":858,"name":"uint256","nodeType":"ElementaryTypeName","src":"6316:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":859,"nodeType":"ArrayTypeName","src":"6316:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":863,"mutability":"mutable","name":"amounts","nameLocation":"6363:7:3","nodeType":"VariableDeclaration","scope":987,"src":"6346:24:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":861,"name":"uint256","nodeType":"ElementaryTypeName","src":"6346:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":862,"nodeType":"ArrayTypeName","src":"6346:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":865,"mutability":"mutable","name":"data","nameLocation":"6393:4:3","nodeType":"VariableDeclaration","scope":987,"src":"6380:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":864,"name":"bytes","nodeType":"ElementaryTypeName","src":"6380:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6264:139:3"},"returnParameters":{"id":867,"nodeType":"ParameterList","parameters":[],"src":"6421:0:3"},"scope":1665,"src":"6233:1115:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":997,"nodeType":"Block","src":"8227:30:3","statements":[{"expression":{"id":995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":993,"name":"_uri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":476,"src":"8237:4:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":994,"name":"newuri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":990,"src":"8244:6:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"8237:13:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":996,"nodeType":"ExpressionStatement","src":"8237:13:3"}]},"documentation":{"id":988,"nodeType":"StructuredDocumentation","src":"7354:812:3","text":" @dev Sets a new URI for all token types, by relying on the token type ID\n substitution mechanism\n https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n URI or any of the amounts in the JSON file at said URI will be replaced by\n clients with the token type ID.\n For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n interpreted by clients as\n `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n for token type ID 0x4cce0.\n See {uri}.\n Because these URIs cannot be meaningfully represented by the {URI} event,\n this function emits no events."},"id":998,"implemented":true,"kind":"function","modifiers":[],"name":"_setURI","nameLocation":"8180:7:3","nodeType":"FunctionDefinition","parameters":{"id":991,"nodeType":"ParameterList","parameters":[{"constant":false,"id":990,"mutability":"mutable","name":"newuri","nameLocation":"8202:6:3","nodeType":"VariableDeclaration","scope":998,"src":"8188:20:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":989,"name":"string","nodeType":"ElementaryTypeName","src":"8188:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8187:22:3"},"returnParameters":{"id":992,"nodeType":"ParameterList","parameters":[],"src":"8227:0:3"},"scope":1665,"src":"8171:86:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1098,"nodeType":"Block","src":"8759:580:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1011,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1001,"src":"8777:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1014,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8791:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1013,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8783:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1012,"name":"address","nodeType":"ElementaryTypeName","src":"8783:7:3","typeDescriptions":{}}},"id":1015,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8783:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8777:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206d696e7420746f20746865207a65726f2061646472657373","id":1017,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8795:35:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2","typeString":"literal_string \"ERC1155: mint to the zero address\""},"value":"ERC1155: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2","typeString":"literal_string \"ERC1155: mint to the zero address\""}],"id":1010,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8769:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1018,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8769:62:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1019,"nodeType":"ExpressionStatement","src":"8769:62:3"},{"assignments":[1021],"declarations":[{"constant":false,"id":1021,"mutability":"mutable","name":"operator","nameLocation":"8850:8:3","nodeType":"VariableDeclaration","scope":1098,"src":"8842:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1020,"name":"address","nodeType":"ElementaryTypeName","src":"8842:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1024,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1022,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2263,"src":"8861:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1023,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8861:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"8842:31:3"},{"assignments":[1029],"declarations":[{"constant":false,"id":1029,"mutability":"mutable","name":"ids","nameLocation":"8900:3:3","nodeType":"VariableDeclaration","scope":1098,"src":"8883:20:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1027,"name":"uint256","nodeType":"ElementaryTypeName","src":"8883:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1028,"nodeType":"ArrayTypeName","src":"8883:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":1033,"initialValue":{"arguments":[{"id":1031,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"8924:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1030,"name":"_asSingletonArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1664,"src":"8906:17:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"}},"id":1032,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8906:21:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"8883:44:3"},{"assignments":[1038],"declarations":[{"constant":false,"id":1038,"mutability":"mutable","name":"amounts","nameLocation":"8954:7:3","nodeType":"VariableDeclaration","scope":1098,"src":"8937:24:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1036,"name":"uint256","nodeType":"ElementaryTypeName","src":"8937:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1037,"nodeType":"ArrayTypeName","src":"8937:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":1042,"initialValue":{"arguments":[{"id":1040,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1005,"src":"8982:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1039,"name":"_asSingletonArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1664,"src":"8964:17:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"}},"id":1041,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8964:25:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"8937:52:3"},{"expression":{"arguments":[{"id":1044,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1021,"src":"9021:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1047,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9039:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1046,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9031:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1045,"name":"address","nodeType":"ElementaryTypeName","src":"9031:7:3","typeDescriptions":{}}},"id":1048,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9031:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1049,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1001,"src":"9043:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1050,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1029,"src":"9047:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1051,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1038,"src":"9052:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1052,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1007,"src":"9061:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1043,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1489,"src":"9000:20:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1053,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9000:66:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1054,"nodeType":"ExpressionStatement","src":"9000:66:3"},{"expression":{"id":1061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1055,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":468,"src":"9077:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1058,"indexExpression":{"id":1056,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"9087:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9077:13:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1059,"indexExpression":{"id":1057,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1001,"src":"9091:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9077:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1060,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1005,"src":"9098:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9077:27:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1062,"nodeType":"ExpressionStatement","src":"9077:27:3"},{"eventCall":{"arguments":[{"id":1064,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1021,"src":"9134:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1067,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9152:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1066,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9144:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1065,"name":"address","nodeType":"ElementaryTypeName","src":"9144:7:3","typeDescriptions":{}}},"id":1068,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9144:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1069,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1001,"src":"9156:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1070,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"9160:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1071,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1005,"src":"9164:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1063,"name":"TransferSingle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1684,"src":"9119:14:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256,uint256)"}},"id":1072,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9119:52:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1073,"nodeType":"EmitStatement","src":"9114:57:3"},{"expression":{"arguments":[{"id":1075,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1021,"src":"9202:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1078,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9220:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1077,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9212:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1076,"name":"address","nodeType":"ElementaryTypeName","src":"9212:7:3","typeDescriptions":{}}},"id":1079,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9212:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1080,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1001,"src":"9224:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1081,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1029,"src":"9228:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1082,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1038,"src":"9233:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1083,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1007,"src":"9242:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1074,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1508,"src":"9182:19:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1084,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9182:65:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1085,"nodeType":"ExpressionStatement","src":"9182:65:3"},{"expression":{"arguments":[{"id":1087,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1021,"src":"9289:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1090,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9307:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1089,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9299:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1088,"name":"address","nodeType":"ElementaryTypeName","src":"9299:7:3","typeDescriptions":{}}},"id":1091,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9299:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1092,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1001,"src":"9311:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1093,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"9315:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1094,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1005,"src":"9319:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1095,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1007,"src":"9327:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1086,"name":"_doSafeTransferAcceptanceCheck","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1571,"src":"9258:30:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256,uint256,bytes memory)"}},"id":1096,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9258:74:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1097,"nodeType":"ExpressionStatement","src":"9258:74:3"}]},"documentation":{"id":999,"nodeType":"StructuredDocumentation","src":"8263:362:3","text":" @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n Emits a {TransferSingle} event.\n Requirements:\n - `to` cannot be the zero address.\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n acceptance magic value."},"id":1099,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"8639:5:3","nodeType":"FunctionDefinition","parameters":{"id":1008,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1001,"mutability":"mutable","name":"to","nameLocation":"8662:2:3","nodeType":"VariableDeclaration","scope":1099,"src":"8654:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1000,"name":"address","nodeType":"ElementaryTypeName","src":"8654:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1003,"mutability":"mutable","name":"id","nameLocation":"8682:2:3","nodeType":"VariableDeclaration","scope":1099,"src":"8674:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1002,"name":"uint256","nodeType":"ElementaryTypeName","src":"8674:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1005,"mutability":"mutable","name":"amount","nameLocation":"8702:6:3","nodeType":"VariableDeclaration","scope":1099,"src":"8694:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1004,"name":"uint256","nodeType":"ElementaryTypeName","src":"8694:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1007,"mutability":"mutable","name":"data","nameLocation":"8731:4:3","nodeType":"VariableDeclaration","scope":1099,"src":"8718:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1006,"name":"bytes","nodeType":"ElementaryTypeName","src":"8718:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8644:97:3"},"returnParameters":{"id":1009,"nodeType":"ParameterList","parameters":[],"src":"8759:0:3"},"scope":1665,"src":"8630:709:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1209,"nodeType":"Block","src":"9883:637:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1114,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1102,"src":"9901:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1117,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9915:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1116,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9907:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1115,"name":"address","nodeType":"ElementaryTypeName","src":"9907:7:3","typeDescriptions":{}}},"id":1118,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9907:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9901:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206d696e7420746f20746865207a65726f2061646472657373","id":1120,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9919:35:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2","typeString":"literal_string \"ERC1155: mint to the zero address\""},"value":"ERC1155: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2","typeString":"literal_string \"ERC1155: mint to the zero address\""}],"id":1113,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9893:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1121,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9893:62:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1122,"nodeType":"ExpressionStatement","src":"9893:62:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1124,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1105,"src":"9973:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9977:6:3","memberName":"length","nodeType":"MemberAccess","src":"9973:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1126,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1108,"src":"9987:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9995:6:3","memberName":"length","nodeType":"MemberAccess","src":"9987:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9973:28:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2069647320616e6420616d6f756e7473206c656e677468206d69736d61746368","id":1129,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10003:42:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807","typeString":"literal_string \"ERC1155: ids and amounts length mismatch\""},"value":"ERC1155: ids and amounts length mismatch"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807","typeString":"literal_string \"ERC1155: ids and amounts length mismatch\""}],"id":1123,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9965:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1130,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9965:81:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1131,"nodeType":"ExpressionStatement","src":"9965:81:3"},{"assignments":[1133],"declarations":[{"constant":false,"id":1133,"mutability":"mutable","name":"operator","nameLocation":"10065:8:3","nodeType":"VariableDeclaration","scope":1209,"src":"10057:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1132,"name":"address","nodeType":"ElementaryTypeName","src":"10057:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1136,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1134,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2263,"src":"10076:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1135,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10076:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"10057:31:3"},{"expression":{"arguments":[{"id":1138,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1133,"src":"10120:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1141,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10138:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1140,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10130:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1139,"name":"address","nodeType":"ElementaryTypeName","src":"10130:7:3","typeDescriptions":{}}},"id":1142,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10130:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1143,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1102,"src":"10142:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1144,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1105,"src":"10146:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1145,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1108,"src":"10151:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1146,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1110,"src":"10160:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1137,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1489,"src":"10099:20:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1147,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10099:66:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1148,"nodeType":"ExpressionStatement","src":"10099:66:3"},{"body":{"id":1172,"nodeType":"Block","src":"10217:60:3","statements":[{"expression":{"id":1170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1160,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":468,"src":"10231:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1165,"indexExpression":{"baseExpression":{"id":1161,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1105,"src":"10241:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1163,"indexExpression":{"id":1162,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1150,"src":"10245:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10241:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10231:17:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1166,"indexExpression":{"id":1164,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1102,"src":"10249:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10231:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"baseExpression":{"id":1167,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1108,"src":"10256:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1169,"indexExpression":{"id":1168,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1150,"src":"10264:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10256:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10231:35:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1171,"nodeType":"ExpressionStatement","src":"10231:35:3"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1153,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1150,"src":"10196:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1154,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1105,"src":"10200:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10204:6:3","memberName":"length","nodeType":"MemberAccess","src":"10200:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10196:14:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1173,"initializationExpression":{"assignments":[1150],"declarations":[{"constant":false,"id":1150,"mutability":"mutable","name":"i","nameLocation":"10189:1:3","nodeType":"VariableDeclaration","scope":1173,"src":"10181:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1149,"name":"uint256","nodeType":"ElementaryTypeName","src":"10181:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1152,"initialValue":{"hexValue":"30","id":1151,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10193:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10181:13:3"},"loopExpression":{"expression":{"id":1158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10212:3:3","subExpression":{"id":1157,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1150,"src":"10212:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1159,"nodeType":"ExpressionStatement","src":"10212:3:3"},"nodeType":"ForStatement","src":"10176:101:3"},{"eventCall":{"arguments":[{"id":1175,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1133,"src":"10306:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10324:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1177,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10316:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1176,"name":"address","nodeType":"ElementaryTypeName","src":"10316:7:3","typeDescriptions":{}}},"id":1179,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10316:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1180,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1102,"src":"10328:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1181,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1105,"src":"10332:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1182,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1108,"src":"10337:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":1174,"name":"TransferBatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1699,"src":"10292:13:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory)"}},"id":1183,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10292:53:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1184,"nodeType":"EmitStatement","src":"10287:58:3"},{"expression":{"arguments":[{"id":1186,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1133,"src":"10376:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1189,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10394:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1188,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10386:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1187,"name":"address","nodeType":"ElementaryTypeName","src":"10386:7:3","typeDescriptions":{}}},"id":1190,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10386:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1191,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1102,"src":"10398:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1192,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1105,"src":"10402:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1193,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1108,"src":"10407:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1194,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1110,"src":"10416:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1185,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1508,"src":"10356:19:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1195,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10356:65:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1196,"nodeType":"ExpressionStatement","src":"10356:65:3"},{"expression":{"arguments":[{"id":1198,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1133,"src":"10468:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1201,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10486:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1200,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10478:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1199,"name":"address","nodeType":"ElementaryTypeName","src":"10478:7:3","typeDescriptions":{}}},"id":1202,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10478:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1203,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1102,"src":"10490:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1204,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1105,"src":"10494:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1205,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1108,"src":"10499:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1206,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1110,"src":"10508:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1197,"name":"_doSafeBatchTransferAcceptanceCheck","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1636,"src":"10432:35:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1207,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10432:81:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1208,"nodeType":"ExpressionStatement","src":"10432:81:3"}]},"documentation":{"id":1100,"nodeType":"StructuredDocumentation","src":"9345:379:3","text":" @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n Emits a {TransferBatch} event.\n Requirements:\n - `ids` and `amounts` must have the same length.\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n acceptance magic value."},"id":1210,"implemented":true,"kind":"function","modifiers":[],"name":"_mintBatch","nameLocation":"9738:10:3","nodeType":"FunctionDefinition","parameters":{"id":1111,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1102,"mutability":"mutable","name":"to","nameLocation":"9766:2:3","nodeType":"VariableDeclaration","scope":1210,"src":"9758:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1101,"name":"address","nodeType":"ElementaryTypeName","src":"9758:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1105,"mutability":"mutable","name":"ids","nameLocation":"9795:3:3","nodeType":"VariableDeclaration","scope":1210,"src":"9778:20:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1103,"name":"uint256","nodeType":"ElementaryTypeName","src":"9778:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1104,"nodeType":"ArrayTypeName","src":"9778:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1108,"mutability":"mutable","name":"amounts","nameLocation":"9825:7:3","nodeType":"VariableDeclaration","scope":1210,"src":"9808:24:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1106,"name":"uint256","nodeType":"ElementaryTypeName","src":"9808:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1107,"nodeType":"ArrayTypeName","src":"9808:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1110,"mutability":"mutable","name":"data","nameLocation":"9855:4:3","nodeType":"VariableDeclaration","scope":1210,"src":"9842:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1109,"name":"bytes","nodeType":"ElementaryTypeName","src":"9842:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9748:117:3"},"returnParameters":{"id":1112,"nodeType":"ParameterList","parameters":[],"src":"9883:0:3"},"scope":1665,"src":"9729:791:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1314,"nodeType":"Block","src":"10910:682:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1221,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1213,"src":"10928:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1224,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10944:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1223,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10936:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1222,"name":"address","nodeType":"ElementaryTypeName","src":"10936:7:3","typeDescriptions":{}}},"id":1225,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10936:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10928:18:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206275726e2066726f6d20746865207a65726f2061646472657373","id":1227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10948:37:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_87fd4aee52f5758d127cd9704d5ffef70f36ed1e87eb99b6f40e37a25c79a76a","typeString":"literal_string \"ERC1155: burn from the zero address\""},"value":"ERC1155: burn from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_87fd4aee52f5758d127cd9704d5ffef70f36ed1e87eb99b6f40e37a25c79a76a","typeString":"literal_string \"ERC1155: burn from the zero address\""}],"id":1220,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10920:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1228,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10920:66:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1229,"nodeType":"ExpressionStatement","src":"10920:66:3"},{"assignments":[1231],"declarations":[{"constant":false,"id":1231,"mutability":"mutable","name":"operator","nameLocation":"11005:8:3","nodeType":"VariableDeclaration","scope":1314,"src":"10997:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1230,"name":"address","nodeType":"ElementaryTypeName","src":"10997:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1234,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1232,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2263,"src":"11016:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1233,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11016:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"10997:31:3"},{"assignments":[1239],"declarations":[{"constant":false,"id":1239,"mutability":"mutable","name":"ids","nameLocation":"11055:3:3","nodeType":"VariableDeclaration","scope":1314,"src":"11038:20:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1237,"name":"uint256","nodeType":"ElementaryTypeName","src":"11038:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1238,"nodeType":"ArrayTypeName","src":"11038:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":1243,"initialValue":{"arguments":[{"id":1241,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1215,"src":"11079:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1240,"name":"_asSingletonArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1664,"src":"11061:17:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"}},"id":1242,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11061:21:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"11038:44:3"},{"assignments":[1248],"declarations":[{"constant":false,"id":1248,"mutability":"mutable","name":"amounts","nameLocation":"11109:7:3","nodeType":"VariableDeclaration","scope":1314,"src":"11092:24:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1246,"name":"uint256","nodeType":"ElementaryTypeName","src":"11092:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1247,"nodeType":"ArrayTypeName","src":"11092:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":1252,"initialValue":{"arguments":[{"id":1250,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1217,"src":"11137:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1249,"name":"_asSingletonArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1664,"src":"11119:17:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"}},"id":1251,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11119:25:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"11092:52:3"},{"expression":{"arguments":[{"id":1254,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1231,"src":"11176:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1255,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1213,"src":"11186:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1258,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11200:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1257,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11192:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1256,"name":"address","nodeType":"ElementaryTypeName","src":"11192:7:3","typeDescriptions":{}}},"id":1259,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11192:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1260,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1239,"src":"11204:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1261,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1248,"src":"11209:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"hexValue":"","id":1262,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11218:2:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":1253,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1489,"src":"11155:20:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1263,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11155:66:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1264,"nodeType":"ExpressionStatement","src":"11155:66:3"},{"assignments":[1266],"declarations":[{"constant":false,"id":1266,"mutability":"mutable","name":"fromBalance","nameLocation":"11240:11:3","nodeType":"VariableDeclaration","scope":1314,"src":"11232:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1265,"name":"uint256","nodeType":"ElementaryTypeName","src":"11232:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1272,"initialValue":{"baseExpression":{"baseExpression":{"id":1267,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":468,"src":"11254:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1269,"indexExpression":{"id":1268,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1215,"src":"11264:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11254:13:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1271,"indexExpression":{"id":1270,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1213,"src":"11268:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11254:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11232:41:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1274,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1266,"src":"11291:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1275,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1217,"src":"11306:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11291:21:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206275726e20616d6f756e7420657863656564732062616c616e6365","id":1277,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11314:38:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_294a5de01910e2350ff231c633ae2d453ed6b1b72c75506234b7aace63eae685","typeString":"literal_string \"ERC1155: burn amount exceeds balance\""},"value":"ERC1155: burn amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_294a5de01910e2350ff231c633ae2d453ed6b1b72c75506234b7aace63eae685","typeString":"literal_string \"ERC1155: burn amount exceeds balance\""}],"id":1273,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11283:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11283:70:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1279,"nodeType":"ExpressionStatement","src":"11283:70:3"},{"id":1290,"nodeType":"UncheckedBlock","src":"11363:77:3","statements":[{"expression":{"id":1288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1280,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":468,"src":"11387:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1283,"indexExpression":{"id":1281,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1215,"src":"11397:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11387:13:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1284,"indexExpression":{"id":1282,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1213,"src":"11401:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11387:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1285,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1266,"src":"11409:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1286,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1217,"src":"11423:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11409:20:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11387:42:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1289,"nodeType":"ExpressionStatement","src":"11387:42:3"}]},{"eventCall":{"arguments":[{"id":1292,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1231,"src":"11470:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1293,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1213,"src":"11480:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1296,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11494:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1295,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11486:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1294,"name":"address","nodeType":"ElementaryTypeName","src":"11486:7:3","typeDescriptions":{}}},"id":1297,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11486:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1298,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1215,"src":"11498:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1299,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1217,"src":"11502:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1291,"name":"TransferSingle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1684,"src":"11455:14:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256,uint256)"}},"id":1300,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11455:54:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1301,"nodeType":"EmitStatement","src":"11450:59:3"},{"expression":{"arguments":[{"id":1303,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1231,"src":"11540:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1304,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1213,"src":"11550:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11564:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1306,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11556:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1305,"name":"address","nodeType":"ElementaryTypeName","src":"11556:7:3","typeDescriptions":{}}},"id":1308,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11556:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1309,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1239,"src":"11568:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1310,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1248,"src":"11573:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"hexValue":"","id":1311,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11582:2:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":1302,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1508,"src":"11520:19:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1312,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11520:65:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1313,"nodeType":"ExpressionStatement","src":"11520:65:3"}]},"documentation":{"id":1211,"nodeType":"StructuredDocumentation","src":"10526:275:3","text":" @dev Destroys `amount` tokens of token type `id` from `from`\n Emits a {TransferSingle} event.\n Requirements:\n - `from` cannot be the zero address.\n - `from` must have at least `amount` tokens of token type `id`."},"id":1315,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"10815:5:3","nodeType":"FunctionDefinition","parameters":{"id":1218,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1213,"mutability":"mutable","name":"from","nameLocation":"10838:4:3","nodeType":"VariableDeclaration","scope":1315,"src":"10830:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1212,"name":"address","nodeType":"ElementaryTypeName","src":"10830:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1215,"mutability":"mutable","name":"id","nameLocation":"10860:2:3","nodeType":"VariableDeclaration","scope":1315,"src":"10852:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1214,"name":"uint256","nodeType":"ElementaryTypeName","src":"10852:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1217,"mutability":"mutable","name":"amount","nameLocation":"10880:6:3","nodeType":"VariableDeclaration","scope":1315,"src":"10872:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1216,"name":"uint256","nodeType":"ElementaryTypeName","src":"10872:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10820:72:3"},"returnParameters":{"id":1219,"nodeType":"ParameterList","parameters":[],"src":"10910:0:3"},"scope":1665,"src":"10806:786:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1437,"nodeType":"Block","src":"11960:814:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1328,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1318,"src":"11978:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1331,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11994:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1330,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11986:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1329,"name":"address","nodeType":"ElementaryTypeName","src":"11986:7:3","typeDescriptions":{}}},"id":1332,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11986:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11978:18:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206275726e2066726f6d20746865207a65726f2061646472657373","id":1334,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11998:37:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_87fd4aee52f5758d127cd9704d5ffef70f36ed1e87eb99b6f40e37a25c79a76a","typeString":"literal_string \"ERC1155: burn from the zero address\""},"value":"ERC1155: burn from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_87fd4aee52f5758d127cd9704d5ffef70f36ed1e87eb99b6f40e37a25c79a76a","typeString":"literal_string \"ERC1155: burn from the zero address\""}],"id":1327,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11970:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1335,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11970:66:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1336,"nodeType":"ExpressionStatement","src":"11970:66:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1338,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1321,"src":"12054:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12058:6:3","memberName":"length","nodeType":"MemberAccess","src":"12054:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1340,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1324,"src":"12068:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12076:6:3","memberName":"length","nodeType":"MemberAccess","src":"12068:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12054:28:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2069647320616e6420616d6f756e7473206c656e677468206d69736d61746368","id":1343,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12084:42:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807","typeString":"literal_string \"ERC1155: ids and amounts length mismatch\""},"value":"ERC1155: ids and amounts length mismatch"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807","typeString":"literal_string \"ERC1155: ids and amounts length mismatch\""}],"id":1337,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12046:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1344,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12046:81:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1345,"nodeType":"ExpressionStatement","src":"12046:81:3"},{"assignments":[1347],"declarations":[{"constant":false,"id":1347,"mutability":"mutable","name":"operator","nameLocation":"12146:8:3","nodeType":"VariableDeclaration","scope":1437,"src":"12138:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1346,"name":"address","nodeType":"ElementaryTypeName","src":"12138:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1350,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1348,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2263,"src":"12157:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1349,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12157:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"12138:31:3"},{"expression":{"arguments":[{"id":1352,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1347,"src":"12201:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1353,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1318,"src":"12211:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1356,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12225:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1355,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12217:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1354,"name":"address","nodeType":"ElementaryTypeName","src":"12217:7:3","typeDescriptions":{}}},"id":1357,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12217:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1358,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1321,"src":"12229:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1359,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1324,"src":"12234:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"hexValue":"","id":1360,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12243:2:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":1351,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1489,"src":"12180:20:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1361,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12180:66:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1362,"nodeType":"ExpressionStatement","src":"12180:66:3"},{"body":{"id":1412,"nodeType":"Block","src":"12298:323:3","statements":[{"assignments":[1375],"declarations":[{"constant":false,"id":1375,"mutability":"mutable","name":"id","nameLocation":"12320:2:3","nodeType":"VariableDeclaration","scope":1412,"src":"12312:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1374,"name":"uint256","nodeType":"ElementaryTypeName","src":"12312:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1379,"initialValue":{"baseExpression":{"id":1376,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1321,"src":"12325:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1378,"indexExpression":{"id":1377,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1364,"src":"12329:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12325:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12312:19:3"},{"assignments":[1381],"declarations":[{"constant":false,"id":1381,"mutability":"mutable","name":"amount","nameLocation":"12353:6:3","nodeType":"VariableDeclaration","scope":1412,"src":"12345:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1380,"name":"uint256","nodeType":"ElementaryTypeName","src":"12345:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1385,"initialValue":{"baseExpression":{"id":1382,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1324,"src":"12362:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1384,"indexExpression":{"id":1383,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1364,"src":"12370:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12362:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12345:27:3"},{"assignments":[1387],"declarations":[{"constant":false,"id":1387,"mutability":"mutable","name":"fromBalance","nameLocation":"12395:11:3","nodeType":"VariableDeclaration","scope":1412,"src":"12387:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1386,"name":"uint256","nodeType":"ElementaryTypeName","src":"12387:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1393,"initialValue":{"baseExpression":{"baseExpression":{"id":1388,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":468,"src":"12409:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1390,"indexExpression":{"id":1389,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1375,"src":"12419:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12409:13:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1392,"indexExpression":{"id":1391,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1318,"src":"12423:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12409:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12387:41:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1395,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"12450:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1396,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1381,"src":"12465:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12450:21:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206275726e20616d6f756e7420657863656564732062616c616e6365","id":1398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12473:38:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_294a5de01910e2350ff231c633ae2d453ed6b1b72c75506234b7aace63eae685","typeString":"literal_string \"ERC1155: burn amount exceeds balance\""},"value":"ERC1155: burn amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_294a5de01910e2350ff231c633ae2d453ed6b1b72c75506234b7aace63eae685","typeString":"literal_string \"ERC1155: burn amount exceeds balance\""}],"id":1394,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12442:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1399,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12442:70:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1400,"nodeType":"ExpressionStatement","src":"12442:70:3"},{"id":1411,"nodeType":"UncheckedBlock","src":"12526:85:3","statements":[{"expression":{"id":1409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1401,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":468,"src":"12554:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1404,"indexExpression":{"id":1402,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1375,"src":"12564:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12554:13:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1405,"indexExpression":{"id":1403,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1318,"src":"12568:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12554:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1406,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"12576:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1407,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1381,"src":"12590:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12576:20:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12554:42:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1410,"nodeType":"ExpressionStatement","src":"12554:42:3"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1370,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1367,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1364,"src":"12277:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1368,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1321,"src":"12281:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12285:6:3","memberName":"length","nodeType":"MemberAccess","src":"12281:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12277:14:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1413,"initializationExpression":{"assignments":[1364],"declarations":[{"constant":false,"id":1364,"mutability":"mutable","name":"i","nameLocation":"12270:1:3","nodeType":"VariableDeclaration","scope":1413,"src":"12262:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1363,"name":"uint256","nodeType":"ElementaryTypeName","src":"12262:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1366,"initialValue":{"hexValue":"30","id":1365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12274:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"12262:13:3"},"loopExpression":{"expression":{"id":1372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"12293:3:3","subExpression":{"id":1371,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1364,"src":"12293:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1373,"nodeType":"ExpressionStatement","src":"12293:3:3"},"nodeType":"ForStatement","src":"12257:364:3"},{"eventCall":{"arguments":[{"id":1415,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1347,"src":"12650:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1416,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1318,"src":"12660:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1419,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12674:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1418,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12666:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1417,"name":"address","nodeType":"ElementaryTypeName","src":"12666:7:3","typeDescriptions":{}}},"id":1420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12666:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1421,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1321,"src":"12678:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1422,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1324,"src":"12683:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":1414,"name":"TransferBatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1699,"src":"12636:13:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory)"}},"id":1423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12636:55:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1424,"nodeType":"EmitStatement","src":"12631:60:3"},{"expression":{"arguments":[{"id":1426,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1347,"src":"12722:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1427,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1318,"src":"12732:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12746:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1429,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12738:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1428,"name":"address","nodeType":"ElementaryTypeName","src":"12738:7:3","typeDescriptions":{}}},"id":1431,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12738:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1432,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1321,"src":"12750:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1433,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1324,"src":"12755:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"hexValue":"","id":1434,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12764:2:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":1425,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1508,"src":"12702:19:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1435,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12702:65:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1436,"nodeType":"ExpressionStatement","src":"12702:65:3"}]},"documentation":{"id":1316,"nodeType":"StructuredDocumentation","src":"11598:228:3","text":" @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n Emits a {TransferBatch} event.\n Requirements:\n - `ids` and `amounts` must have the same length."},"id":1438,"implemented":true,"kind":"function","modifiers":[],"name":"_burnBatch","nameLocation":"11840:10:3","nodeType":"FunctionDefinition","parameters":{"id":1325,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1318,"mutability":"mutable","name":"from","nameLocation":"11868:4:3","nodeType":"VariableDeclaration","scope":1438,"src":"11860:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1317,"name":"address","nodeType":"ElementaryTypeName","src":"11860:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1321,"mutability":"mutable","name":"ids","nameLocation":"11899:3:3","nodeType":"VariableDeclaration","scope":1438,"src":"11882:20:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1319,"name":"uint256","nodeType":"ElementaryTypeName","src":"11882:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1320,"nodeType":"ArrayTypeName","src":"11882:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1324,"mutability":"mutable","name":"amounts","nameLocation":"11929:7:3","nodeType":"VariableDeclaration","scope":1438,"src":"11912:24:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1322,"name":"uint256","nodeType":"ElementaryTypeName","src":"11912:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1323,"nodeType":"ArrayTypeName","src":"11912:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"11850:92:3"},"returnParameters":{"id":1326,"nodeType":"ParameterList","parameters":[],"src":"11960:0:3"},"scope":1665,"src":"11831:943:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1469,"nodeType":"Block","src":"13033:200:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1449,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1441,"src":"13051:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1450,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1443,"src":"13060:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13051:17:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2073657474696e6720617070726f76616c2073746174757320666f722073656c66","id":1452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13070:43:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2","typeString":"literal_string \"ERC1155: setting approval status for self\""},"value":"ERC1155: setting approval status for self"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2","typeString":"literal_string \"ERC1155: setting approval status for self\""}],"id":1448,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13043:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1453,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13043:71:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1454,"nodeType":"ExpressionStatement","src":"13043:71:3"},{"expression":{"id":1461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1455,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":474,"src":"13124:18:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":1458,"indexExpression":{"id":1456,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1441,"src":"13143:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13124:25:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":1459,"indexExpression":{"id":1457,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1443,"src":"13150:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13124:35:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1460,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1445,"src":"13162:8:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13124:46:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1462,"nodeType":"ExpressionStatement","src":"13124:46:3"},{"eventCall":{"arguments":[{"id":1464,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1441,"src":"13200:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1465,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1443,"src":"13207:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1466,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1445,"src":"13217:8:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1463,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1708,"src":"13185:14:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":1467,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13185:41:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1468,"nodeType":"EmitStatement","src":"13180:46:3"}]},"documentation":{"id":1439,"nodeType":"StructuredDocumentation","src":"12780:125:3","text":" @dev Approve `operator` to operate on all of `owner` tokens\n Emits an {ApprovalForAll} event."},"id":1470,"implemented":true,"kind":"function","modifiers":[],"name":"_setApprovalForAll","nameLocation":"12919:18:3","nodeType":"FunctionDefinition","parameters":{"id":1446,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1441,"mutability":"mutable","name":"owner","nameLocation":"12955:5:3","nodeType":"VariableDeclaration","scope":1470,"src":"12947:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1440,"name":"address","nodeType":"ElementaryTypeName","src":"12947:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1443,"mutability":"mutable","name":"operator","nameLocation":"12978:8:3","nodeType":"VariableDeclaration","scope":1470,"src":"12970:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1442,"name":"address","nodeType":"ElementaryTypeName","src":"12970:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1445,"mutability":"mutable","name":"approved","nameLocation":"13001:8:3","nodeType":"VariableDeclaration","scope":1470,"src":"12996:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1444,"name":"bool","nodeType":"ElementaryTypeName","src":"12996:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"12937:78:3"},"returnParameters":{"id":1447,"nodeType":"ParameterList","parameters":[],"src":"13033:0:3"},"scope":1665,"src":"12910:323:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1488,"nodeType":"Block","src":"14381:2:3","statements":[]},"documentation":{"id":1471,"nodeType":"StructuredDocumentation","src":"13239:925:3","text":" @dev Hook that is called before any token transfer. This includes minting\n and burning, as well as batched variants.\n The same hook is called on both single and batched variants. For single\n transfers, the length of the `ids` and `amounts` arrays will be 1.\n Calling conditions (for each `id` and `amount` pair):\n - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n of token type `id` will be  transferred to `to`.\n - When `from` is zero, `amount` tokens of token type `id` will be minted\n for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n will be burned.\n - `from` and `to` are never both zero.\n - `ids` and `amounts` have the same, non-zero length.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":1489,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"14178:20:3","nodeType":"FunctionDefinition","parameters":{"id":1486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1473,"mutability":"mutable","name":"operator","nameLocation":"14216:8:3","nodeType":"VariableDeclaration","scope":1489,"src":"14208:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1472,"name":"address","nodeType":"ElementaryTypeName","src":"14208:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1475,"mutability":"mutable","name":"from","nameLocation":"14242:4:3","nodeType":"VariableDeclaration","scope":1489,"src":"14234:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1474,"name":"address","nodeType":"ElementaryTypeName","src":"14234:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1477,"mutability":"mutable","name":"to","nameLocation":"14264:2:3","nodeType":"VariableDeclaration","scope":1489,"src":"14256:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1476,"name":"address","nodeType":"ElementaryTypeName","src":"14256:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1480,"mutability":"mutable","name":"ids","nameLocation":"14293:3:3","nodeType":"VariableDeclaration","scope":1489,"src":"14276:20:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1478,"name":"uint256","nodeType":"ElementaryTypeName","src":"14276:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1479,"nodeType":"ArrayTypeName","src":"14276:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1483,"mutability":"mutable","name":"amounts","nameLocation":"14323:7:3","nodeType":"VariableDeclaration","scope":1489,"src":"14306:24:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1481,"name":"uint256","nodeType":"ElementaryTypeName","src":"14306:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1482,"nodeType":"ArrayTypeName","src":"14306:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1485,"mutability":"mutable","name":"data","nameLocation":"14353:4:3","nodeType":"VariableDeclaration","scope":1489,"src":"14340:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1484,"name":"bytes","nodeType":"ElementaryTypeName","src":"14340:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14198:165:3"},"returnParameters":{"id":1487,"nodeType":"ParameterList","parameters":[],"src":"14381:0:3"},"scope":1665,"src":"14169:214:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1507,"nodeType":"Block","src":"15527:2:3","statements":[]},"documentation":{"id":1490,"nodeType":"StructuredDocumentation","src":"14389:922:3","text":" @dev Hook that is called after any token transfer. This includes minting\n and burning, as well as batched variants.\n The same hook is called on both single and batched variants. For single\n transfers, the length of the `id` and `amount` arrays will be 1.\n Calling conditions (for each `id` and `amount` pair):\n - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n of token type `id` will be  transferred to `to`.\n - When `from` is zero, `amount` tokens of token type `id` will be minted\n for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n will be burned.\n - `from` and `to` are never both zero.\n - `ids` and `amounts` have the same, non-zero length.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":1508,"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokenTransfer","nameLocation":"15325:19:3","nodeType":"FunctionDefinition","parameters":{"id":1505,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1492,"mutability":"mutable","name":"operator","nameLocation":"15362:8:3","nodeType":"VariableDeclaration","scope":1508,"src":"15354:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1491,"name":"address","nodeType":"ElementaryTypeName","src":"15354:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1494,"mutability":"mutable","name":"from","nameLocation":"15388:4:3","nodeType":"VariableDeclaration","scope":1508,"src":"15380:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1493,"name":"address","nodeType":"ElementaryTypeName","src":"15380:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1496,"mutability":"mutable","name":"to","nameLocation":"15410:2:3","nodeType":"VariableDeclaration","scope":1508,"src":"15402:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1495,"name":"address","nodeType":"ElementaryTypeName","src":"15402:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1499,"mutability":"mutable","name":"ids","nameLocation":"15439:3:3","nodeType":"VariableDeclaration","scope":1508,"src":"15422:20:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1497,"name":"uint256","nodeType":"ElementaryTypeName","src":"15422:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1498,"nodeType":"ArrayTypeName","src":"15422:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1502,"mutability":"mutable","name":"amounts","nameLocation":"15469:7:3","nodeType":"VariableDeclaration","scope":1508,"src":"15452:24:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1500,"name":"uint256","nodeType":"ElementaryTypeName","src":"15452:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1501,"nodeType":"ArrayTypeName","src":"15452:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1504,"mutability":"mutable","name":"data","nameLocation":"15499:4:3","nodeType":"VariableDeclaration","scope":1508,"src":"15486:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1503,"name":"bytes","nodeType":"ElementaryTypeName","src":"15486:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"15344:165:3"},"returnParameters":{"id":1506,"nodeType":"ParameterList","parameters":[],"src":"15527:0:3"},"scope":1665,"src":"15316:213:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1570,"nodeType":"Block","src":"15728:532:3","statements":[{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1523,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1514,"src":"15742:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15745:10:3","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1939,"src":"15742:13:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":1525,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15742:15:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1569,"nodeType":"IfStatement","src":"15738:516:3","trueBody":{"id":1568,"nodeType":"Block","src":"15759:495:3","statements":[{"clauses":[{"block":{"id":1550,"nodeType":"Block","src":"15876:184:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1539,"name":"response","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1537,"src":"15898:8:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"expression":{"id":1540,"name":"IERC1155Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1828,"src":"15910:16:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155Receiver_$1828_$","typeString":"type(contract IERC1155Receiver)"}},"id":1541,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"15927:17:3","memberName":"onERC1155Received","nodeType":"MemberAccess","referencedDeclaration":1809,"src":"15910:34:3","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC1155Receiver.onERC1155Received(address,address,uint256,uint256,bytes calldata) returns (bytes4)"}},"id":1542,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"15945:8:3","memberName":"selector","nodeType":"MemberAccess","src":"15910:43:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"15898:55:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1549,"nodeType":"IfStatement","src":"15894:152:3","trueBody":{"id":1548,"nodeType":"Block","src":"15955:91:3","statements":[{"expression":{"arguments":[{"hexValue":"455243313135353a204552433131353552656365697665722072656a656374656420746f6b656e73","id":1545,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"15984:42:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503","typeString":"literal_string \"ERC1155: ERC1155Receiver rejected tokens\""},"value":"ERC1155: ERC1155Receiver rejected tokens"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503","typeString":"literal_string \"ERC1155: ERC1155Receiver rejected tokens\""}],"id":1544,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"15977:6:3","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1546,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15977:50:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1547,"nodeType":"ExpressionStatement","src":"15977:50:3"}]}}]},"errorName":"","id":1551,"nodeType":"TryCatchClause","parameters":{"id":1538,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1537,"mutability":"mutable","name":"response","nameLocation":"15866:8:3","nodeType":"VariableDeclaration","scope":1551,"src":"15859:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1536,"name":"bytes4","nodeType":"ElementaryTypeName","src":"15859:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"15858:17:3"},"src":"15850:210:3"},{"block":{"id":1559,"nodeType":"Block","src":"16095:47:3","statements":[{"expression":{"arguments":[{"id":1556,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1553,"src":"16120:6:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1555,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"16113:6:3","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1557,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16113:14:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1558,"nodeType":"ExpressionStatement","src":"16113:14:3"}]},"errorName":"Error","id":1560,"nodeType":"TryCatchClause","parameters":{"id":1554,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1553,"mutability":"mutable","name":"reason","nameLocation":"16087:6:3","nodeType":"VariableDeclaration","scope":1560,"src":"16073:20:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1552,"name":"string","nodeType":"ElementaryTypeName","src":"16073:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"16072:22:3"},"src":"16061:81:3"},{"block":{"id":1565,"nodeType":"Block","src":"16149:95:3","statements":[{"expression":{"arguments":[{"hexValue":"455243313135353a207472616e7366657220746f206e6f6e2d45524331313535526563656976657220696d706c656d656e746572","id":1562,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"16174:54:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d","typeString":"literal_string \"ERC1155: transfer to non-ERC1155Receiver implementer\""},"value":"ERC1155: transfer to non-ERC1155Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d","typeString":"literal_string \"ERC1155: transfer to non-ERC1155Receiver implementer\""}],"id":1561,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"16167:6:3","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1563,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16167:62:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1564,"nodeType":"ExpressionStatement","src":"16167:62:3"}]},"errorName":"","id":1566,"nodeType":"TryCatchClause","src":"16143:101:3"}],"externalCall":{"arguments":[{"id":1530,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1510,"src":"15816:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1531,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1512,"src":"15826:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1532,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1516,"src":"15832:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1533,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"15836:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1534,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1520,"src":"15844:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":1527,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1514,"src":"15794:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1526,"name":"IERC1155Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1828,"src":"15777:16:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155Receiver_$1828_$","typeString":"type(contract IERC1155Receiver)"}},"id":1528,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15777:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Receiver_$1828","typeString":"contract IERC1155Receiver"}},"id":1529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15798:17:3","memberName":"onERC1155Received","nodeType":"MemberAccess","referencedDeclaration":1809,"src":"15777:38:3","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,uint256,bytes memory) external returns (bytes4)"}},"id":1535,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15777:72:3","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":1567,"nodeType":"TryStatement","src":"15773:471:3"}]}}]},"id":1571,"implemented":true,"kind":"function","modifiers":[],"name":"_doSafeTransferAcceptanceCheck","nameLocation":"15544:30:3","nodeType":"FunctionDefinition","parameters":{"id":1521,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1510,"mutability":"mutable","name":"operator","nameLocation":"15592:8:3","nodeType":"VariableDeclaration","scope":1571,"src":"15584:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1509,"name":"address","nodeType":"ElementaryTypeName","src":"15584:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1512,"mutability":"mutable","name":"from","nameLocation":"15618:4:3","nodeType":"VariableDeclaration","scope":1571,"src":"15610:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1511,"name":"address","nodeType":"ElementaryTypeName","src":"15610:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1514,"mutability":"mutable","name":"to","nameLocation":"15640:2:3","nodeType":"VariableDeclaration","scope":1571,"src":"15632:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1513,"name":"address","nodeType":"ElementaryTypeName","src":"15632:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1516,"mutability":"mutable","name":"id","nameLocation":"15660:2:3","nodeType":"VariableDeclaration","scope":1571,"src":"15652:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1515,"name":"uint256","nodeType":"ElementaryTypeName","src":"15652:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1518,"mutability":"mutable","name":"amount","nameLocation":"15680:6:3","nodeType":"VariableDeclaration","scope":1571,"src":"15672:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1517,"name":"uint256","nodeType":"ElementaryTypeName","src":"15672:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1520,"mutability":"mutable","name":"data","nameLocation":"15709:4:3","nodeType":"VariableDeclaration","scope":1571,"src":"15696:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1519,"name":"bytes","nodeType":"ElementaryTypeName","src":"15696:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"15574:145:3"},"returnParameters":{"id":1522,"nodeType":"ParameterList","parameters":[],"src":"15728:0:3"},"scope":1665,"src":"15535:725:3","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1635,"nodeType":"Block","src":"16484:574:3","statements":[{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1588,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1577,"src":"16498:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16501:10:3","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1939,"src":"16498:13:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":1590,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16498:15:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1634,"nodeType":"IfStatement","src":"16494:558:3","trueBody":{"id":1633,"nodeType":"Block","src":"16515:537:3","statements":[{"clauses":[{"block":{"id":1615,"nodeType":"Block","src":"16669:189:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1604,"name":"response","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1602,"src":"16691:8:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"expression":{"id":1605,"name":"IERC1155Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1828,"src":"16703:16:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155Receiver_$1828_$","typeString":"type(contract IERC1155Receiver)"}},"id":1606,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16720:22:3","memberName":"onERC1155BatchReceived","nodeType":"MemberAccess","referencedDeclaration":1827,"src":"16703:39:3","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_calldata_ptr_$_t_array$_t_uint256_$dyn_calldata_ptr_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC1155Receiver.onERC1155BatchReceived(address,address,uint256[] calldata,uint256[] calldata,bytes calldata) returns (bytes4)"}},"id":1607,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16743:8:3","memberName":"selector","nodeType":"MemberAccess","src":"16703:48:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"16691:60:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1614,"nodeType":"IfStatement","src":"16687:157:3","trueBody":{"id":1613,"nodeType":"Block","src":"16753:91:3","statements":[{"expression":{"arguments":[{"hexValue":"455243313135353a204552433131353552656365697665722072656a656374656420746f6b656e73","id":1610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"16782:42:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503","typeString":"literal_string \"ERC1155: ERC1155Receiver rejected tokens\""},"value":"ERC1155: ERC1155Receiver rejected tokens"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503","typeString":"literal_string \"ERC1155: ERC1155Receiver rejected tokens\""}],"id":1609,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"16775:6:3","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1611,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16775:50:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1612,"nodeType":"ExpressionStatement","src":"16775:50:3"}]}}]},"errorName":"","id":1616,"nodeType":"TryCatchClause","parameters":{"id":1603,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1602,"mutability":"mutable","name":"response","nameLocation":"16646:8:3","nodeType":"VariableDeclaration","scope":1616,"src":"16639:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1601,"name":"bytes4","nodeType":"ElementaryTypeName","src":"16639:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"16621:47:3"},"src":"16613:245:3"},{"block":{"id":1624,"nodeType":"Block","src":"16893:47:3","statements":[{"expression":{"arguments":[{"id":1621,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1618,"src":"16918:6:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1620,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"16911:6:3","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1622,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16911:14:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1623,"nodeType":"ExpressionStatement","src":"16911:14:3"}]},"errorName":"Error","id":1625,"nodeType":"TryCatchClause","parameters":{"id":1619,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1618,"mutability":"mutable","name":"reason","nameLocation":"16885:6:3","nodeType":"VariableDeclaration","scope":1625,"src":"16871:20:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1617,"name":"string","nodeType":"ElementaryTypeName","src":"16871:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"16870:22:3"},"src":"16859:81:3"},{"block":{"id":1630,"nodeType":"Block","src":"16947:95:3","statements":[{"expression":{"arguments":[{"hexValue":"455243313135353a207472616e7366657220746f206e6f6e2d45524331313535526563656976657220696d706c656d656e746572","id":1627,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"16972:54:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d","typeString":"literal_string \"ERC1155: transfer to non-ERC1155Receiver implementer\""},"value":"ERC1155: transfer to non-ERC1155Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d","typeString":"literal_string \"ERC1155: transfer to non-ERC1155Receiver implementer\""}],"id":1626,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"16965:6:3","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1628,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16965:62:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1629,"nodeType":"ExpressionStatement","src":"16965:62:3"}]},"errorName":"","id":1631,"nodeType":"TryCatchClause","src":"16941:101:3"}],"externalCall":{"arguments":[{"id":1595,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1573,"src":"16577:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1596,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1575,"src":"16587:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1597,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1580,"src":"16593:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1598,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1583,"src":"16598:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1599,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1585,"src":"16607:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":1592,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1577,"src":"16550:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1591,"name":"IERC1155Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1828,"src":"16533:16:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155Receiver_$1828_$","typeString":"type(contract IERC1155Receiver)"}},"id":1593,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16533:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Receiver_$1828","typeString":"contract IERC1155Receiver"}},"id":1594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16554:22:3","memberName":"onERC1155BatchReceived","nodeType":"MemberAccess","referencedDeclaration":1827,"src":"16533:43:3","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256[] memory,uint256[] memory,bytes memory) external returns (bytes4)"}},"id":1600,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16533:79:3","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":1632,"nodeType":"TryStatement","src":"16529:513:3"}]}}]},"id":1636,"implemented":true,"kind":"function","modifiers":[],"name":"_doSafeBatchTransferAcceptanceCheck","nameLocation":"16275:35:3","nodeType":"FunctionDefinition","parameters":{"id":1586,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1573,"mutability":"mutable","name":"operator","nameLocation":"16328:8:3","nodeType":"VariableDeclaration","scope":1636,"src":"16320:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1572,"name":"address","nodeType":"ElementaryTypeName","src":"16320:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1575,"mutability":"mutable","name":"from","nameLocation":"16354:4:3","nodeType":"VariableDeclaration","scope":1636,"src":"16346:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1574,"name":"address","nodeType":"ElementaryTypeName","src":"16346:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1577,"mutability":"mutable","name":"to","nameLocation":"16376:2:3","nodeType":"VariableDeclaration","scope":1636,"src":"16368:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1576,"name":"address","nodeType":"ElementaryTypeName","src":"16368:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1580,"mutability":"mutable","name":"ids","nameLocation":"16405:3:3","nodeType":"VariableDeclaration","scope":1636,"src":"16388:20:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1578,"name":"uint256","nodeType":"ElementaryTypeName","src":"16388:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1579,"nodeType":"ArrayTypeName","src":"16388:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1583,"mutability":"mutable","name":"amounts","nameLocation":"16435:7:3","nodeType":"VariableDeclaration","scope":1636,"src":"16418:24:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1581,"name":"uint256","nodeType":"ElementaryTypeName","src":"16418:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1582,"nodeType":"ArrayTypeName","src":"16418:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1585,"mutability":"mutable","name":"data","nameLocation":"16465:4:3","nodeType":"VariableDeclaration","scope":1636,"src":"16452:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1584,"name":"bytes","nodeType":"ElementaryTypeName","src":"16452:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"16310:165:3"},"returnParameters":{"id":1587,"nodeType":"ParameterList","parameters":[],"src":"16484:0:3"},"scope":1665,"src":"16266:792:3","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1663,"nodeType":"Block","src":"17148:109:3","statements":[{"assignments":[1648],"declarations":[{"constant":false,"id":1648,"mutability":"mutable","name":"array","nameLocation":"17175:5:3","nodeType":"VariableDeclaration","scope":1663,"src":"17158:22:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1646,"name":"uint256","nodeType":"ElementaryTypeName","src":"17158:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1647,"nodeType":"ArrayTypeName","src":"17158:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":1654,"initialValue":{"arguments":[{"hexValue":"31","id":1652,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17197:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":1651,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"17183:13:3","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":1649,"name":"uint256","nodeType":"ElementaryTypeName","src":"17187:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1650,"nodeType":"ArrayTypeName","src":"17187:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":1653,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17183:16:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"17158:41:3"},{"expression":{"id":1659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1655,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1648,"src":"17209:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1657,"indexExpression":{"hexValue":"30","id":1656,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17215:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"17209:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1658,"name":"element","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1638,"src":"17220:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17209:18:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1660,"nodeType":"ExpressionStatement","src":"17209:18:3"},{"expression":{"id":1661,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1648,"src":"17245:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":1643,"id":1662,"nodeType":"Return","src":"17238:12:3"}]},"id":1664,"implemented":true,"kind":"function","modifiers":[],"name":"_asSingletonArray","nameLocation":"17073:17:3","nodeType":"FunctionDefinition","parameters":{"id":1639,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1638,"mutability":"mutable","name":"element","nameLocation":"17099:7:3","nodeType":"VariableDeclaration","scope":1664,"src":"17091:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1637,"name":"uint256","nodeType":"ElementaryTypeName","src":"17091:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17090:17:3"},"returnParameters":{"id":1643,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1642,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1664,"src":"17130:16:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1640,"name":"uint256","nodeType":"ElementaryTypeName","src":"17130:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1641,"nodeType":"ArrayTypeName","src":"17130:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"17129:18:3"},"scope":1665,"src":"17064:193:3","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1666,"src":"570:16689:3","usedErrors":[]}],"src":"109:17151:3"},"id":3},"@openzeppelin/contracts/token/ERC1155/IERC1155.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC1155/IERC1155.sol","exportedSymbols":{"IERC1155":[1787],"IERC165":[2986]},"id":1788,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1667,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"110:23:4"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../../utils/introspection/IERC165.sol","id":1668,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1788,"sourceUnit":2987,"src":"135:47:4","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1670,"name":"IERC165","nameLocations":["372:7:4"],"nodeType":"IdentifierPath","referencedDeclaration":2986,"src":"372:7:4"},"id":1671,"nodeType":"InheritanceSpecifier","src":"372:7:4"}],"canonicalName":"IERC1155","contractDependencies":[],"contractKind":"interface","documentation":{"id":1669,"nodeType":"StructuredDocumentation","src":"184:165:4","text":" @dev Required interface of an ERC1155 compliant contract, as defined in the\n https://eips.ethereum.org/EIPS/eip-1155[EIP].\n _Available since v3.1._"},"fullyImplemented":false,"id":1787,"linearizedBaseContracts":[1787,2986],"name":"IERC1155","nameLocation":"360:8:4","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1672,"nodeType":"StructuredDocumentation","src":"386:121:4","text":" @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."},"eventSelector":"c3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62","id":1684,"name":"TransferSingle","nameLocation":"518:14:4","nodeType":"EventDefinition","parameters":{"id":1683,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1674,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"549:8:4","nodeType":"VariableDeclaration","scope":1684,"src":"533:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1673,"name":"address","nodeType":"ElementaryTypeName","src":"533:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1676,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"575:4:4","nodeType":"VariableDeclaration","scope":1684,"src":"559:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1675,"name":"address","nodeType":"ElementaryTypeName","src":"559:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1678,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"597:2:4","nodeType":"VariableDeclaration","scope":1684,"src":"581:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1677,"name":"address","nodeType":"ElementaryTypeName","src":"581:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1680,"indexed":false,"mutability":"mutable","name":"id","nameLocation":"609:2:4","nodeType":"VariableDeclaration","scope":1684,"src":"601:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1679,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1682,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"621:5:4","nodeType":"VariableDeclaration","scope":1684,"src":"613:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1681,"name":"uint256","nodeType":"ElementaryTypeName","src":"613:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"532:95:4"},"src":"512:116:4"},{"anonymous":false,"documentation":{"id":1685,"nodeType":"StructuredDocumentation","src":"634:144:4","text":" @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n transfers."},"eventSelector":"4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb","id":1699,"name":"TransferBatch","nameLocation":"789:13:4","nodeType":"EventDefinition","parameters":{"id":1698,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1687,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"828:8:4","nodeType":"VariableDeclaration","scope":1699,"src":"812:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1686,"name":"address","nodeType":"ElementaryTypeName","src":"812:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1689,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"862:4:4","nodeType":"VariableDeclaration","scope":1699,"src":"846:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1688,"name":"address","nodeType":"ElementaryTypeName","src":"846:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1691,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"892:2:4","nodeType":"VariableDeclaration","scope":1699,"src":"876:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1690,"name":"address","nodeType":"ElementaryTypeName","src":"876:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1694,"indexed":false,"mutability":"mutable","name":"ids","nameLocation":"914:3:4","nodeType":"VariableDeclaration","scope":1699,"src":"904:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1692,"name":"uint256","nodeType":"ElementaryTypeName","src":"904:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1693,"nodeType":"ArrayTypeName","src":"904:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1697,"indexed":false,"mutability":"mutable","name":"values","nameLocation":"937:6:4","nodeType":"VariableDeclaration","scope":1699,"src":"927:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1695,"name":"uint256","nodeType":"ElementaryTypeName","src":"927:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1696,"nodeType":"ArrayTypeName","src":"927:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"802:147:4"},"src":"783:167:4"},{"anonymous":false,"documentation":{"id":1700,"nodeType":"StructuredDocumentation","src":"956:147:4","text":" @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n `approved`."},"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":1708,"name":"ApprovalForAll","nameLocation":"1114:14:4","nodeType":"EventDefinition","parameters":{"id":1707,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1702,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1145:7:4","nodeType":"VariableDeclaration","scope":1708,"src":"1129:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1701,"name":"address","nodeType":"ElementaryTypeName","src":"1129:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1704,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"1170:8:4","nodeType":"VariableDeclaration","scope":1708,"src":"1154:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1703,"name":"address","nodeType":"ElementaryTypeName","src":"1154:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1706,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"1185:8:4","nodeType":"VariableDeclaration","scope":1708,"src":"1180:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1705,"name":"bool","nodeType":"ElementaryTypeName","src":"1180:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1128:66:4"},"src":"1108:87:4"},{"anonymous":false,"documentation":{"id":1709,"nodeType":"StructuredDocumentation","src":"1201:343:4","text":" @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n If an {URI} event was emitted for `id`, the standard\n https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n returned by {IERC1155MetadataURI-uri}."},"eventSelector":"6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b","id":1715,"name":"URI","nameLocation":"1555:3:4","nodeType":"EventDefinition","parameters":{"id":1714,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1711,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"1566:5:4","nodeType":"VariableDeclaration","scope":1715,"src":"1559:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1710,"name":"string","nodeType":"ElementaryTypeName","src":"1559:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1713,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"1589:2:4","nodeType":"VariableDeclaration","scope":1715,"src":"1573:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1712,"name":"uint256","nodeType":"ElementaryTypeName","src":"1573:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1558:34:4"},"src":"1549:44:4"},{"documentation":{"id":1716,"nodeType":"StructuredDocumentation","src":"1599:173:4","text":" @dev Returns the amount of tokens of token type `id` owned by `account`.\n Requirements:\n - `account` cannot be the zero address."},"functionSelector":"00fdd58e","id":1725,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"1786:9:4","nodeType":"FunctionDefinition","parameters":{"id":1721,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1718,"mutability":"mutable","name":"account","nameLocation":"1804:7:4","nodeType":"VariableDeclaration","scope":1725,"src":"1796:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1717,"name":"address","nodeType":"ElementaryTypeName","src":"1796:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1720,"mutability":"mutable","name":"id","nameLocation":"1821:2:4","nodeType":"VariableDeclaration","scope":1725,"src":"1813:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1719,"name":"uint256","nodeType":"ElementaryTypeName","src":"1813:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1795:29:4"},"returnParameters":{"id":1724,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1723,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1725,"src":"1848:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1722,"name":"uint256","nodeType":"ElementaryTypeName","src":"1848:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1847:9:4"},"scope":1787,"src":"1777:80:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1726,"nodeType":"StructuredDocumentation","src":"1863:188:4","text":" @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n Requirements:\n - `accounts` and `ids` must have the same length."},"functionSelector":"4e1273f4","id":1738,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOfBatch","nameLocation":"2065:14:4","nodeType":"FunctionDefinition","parameters":{"id":1733,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1729,"mutability":"mutable","name":"accounts","nameLocation":"2099:8:4","nodeType":"VariableDeclaration","scope":1738,"src":"2080:27:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1727,"name":"address","nodeType":"ElementaryTypeName","src":"2080:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1728,"nodeType":"ArrayTypeName","src":"2080:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":1732,"mutability":"mutable","name":"ids","nameLocation":"2128:3:4","nodeType":"VariableDeclaration","scope":1738,"src":"2109:22:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1730,"name":"uint256","nodeType":"ElementaryTypeName","src":"2109:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1731,"nodeType":"ArrayTypeName","src":"2109:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2079:53:4"},"returnParameters":{"id":1737,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1736,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1738,"src":"2180:16:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1734,"name":"uint256","nodeType":"ElementaryTypeName","src":"2180:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1735,"nodeType":"ArrayTypeName","src":"2180:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2179:18:4"},"scope":1787,"src":"2056:142:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1739,"nodeType":"StructuredDocumentation","src":"2204:248:4","text":" @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n Emits an {ApprovalForAll} event.\n Requirements:\n - `operator` cannot be the caller."},"functionSelector":"a22cb465","id":1746,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"2466:17:4","nodeType":"FunctionDefinition","parameters":{"id":1744,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1741,"mutability":"mutable","name":"operator","nameLocation":"2492:8:4","nodeType":"VariableDeclaration","scope":1746,"src":"2484:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1740,"name":"address","nodeType":"ElementaryTypeName","src":"2484:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1743,"mutability":"mutable","name":"approved","nameLocation":"2507:8:4","nodeType":"VariableDeclaration","scope":1746,"src":"2502:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1742,"name":"bool","nodeType":"ElementaryTypeName","src":"2502:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2483:33:4"},"returnParameters":{"id":1745,"nodeType":"ParameterList","parameters":[],"src":"2525:0:4"},"scope":1787,"src":"2457:69:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1747,"nodeType":"StructuredDocumentation","src":"2532:135:4","text":" @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n See {setApprovalForAll}."},"functionSelector":"e985e9c5","id":1756,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"2681:16:4","nodeType":"FunctionDefinition","parameters":{"id":1752,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1749,"mutability":"mutable","name":"account","nameLocation":"2706:7:4","nodeType":"VariableDeclaration","scope":1756,"src":"2698:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1748,"name":"address","nodeType":"ElementaryTypeName","src":"2698:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1751,"mutability":"mutable","name":"operator","nameLocation":"2723:8:4","nodeType":"VariableDeclaration","scope":1756,"src":"2715:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1750,"name":"address","nodeType":"ElementaryTypeName","src":"2715:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2697:35:4"},"returnParameters":{"id":1755,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1754,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1756,"src":"2756:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1753,"name":"bool","nodeType":"ElementaryTypeName","src":"2756:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2755:6:4"},"scope":1787,"src":"2672:90:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1757,"nodeType":"StructuredDocumentation","src":"2768:556:4","text":" @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n Emits a {TransferSingle} event.\n Requirements:\n - `to` cannot be the zero address.\n - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n - `from` must have a balance of tokens of type `id` of at least `amount`.\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n acceptance magic value."},"functionSelector":"f242432a","id":1770,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"3338:16:4","nodeType":"FunctionDefinition","parameters":{"id":1768,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1759,"mutability":"mutable","name":"from","nameLocation":"3372:4:4","nodeType":"VariableDeclaration","scope":1770,"src":"3364:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1758,"name":"address","nodeType":"ElementaryTypeName","src":"3364:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1761,"mutability":"mutable","name":"to","nameLocation":"3394:2:4","nodeType":"VariableDeclaration","scope":1770,"src":"3386:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1760,"name":"address","nodeType":"ElementaryTypeName","src":"3386:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1763,"mutability":"mutable","name":"id","nameLocation":"3414:2:4","nodeType":"VariableDeclaration","scope":1770,"src":"3406:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1762,"name":"uint256","nodeType":"ElementaryTypeName","src":"3406:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1765,"mutability":"mutable","name":"amount","nameLocation":"3434:6:4","nodeType":"VariableDeclaration","scope":1770,"src":"3426:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1764,"name":"uint256","nodeType":"ElementaryTypeName","src":"3426:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1767,"mutability":"mutable","name":"data","nameLocation":"3465:4:4","nodeType":"VariableDeclaration","scope":1770,"src":"3450:19:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1766,"name":"bytes","nodeType":"ElementaryTypeName","src":"3450:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3354:121:4"},"returnParameters":{"id":1769,"nodeType":"ParameterList","parameters":[],"src":"3484:0:4"},"scope":1787,"src":"3329:156:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1771,"nodeType":"StructuredDocumentation","src":"3491:390:4","text":" @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n Emits a {TransferBatch} event.\n Requirements:\n - `ids` and `amounts` must have the same length.\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n acceptance magic value."},"functionSelector":"2eb2c2d6","id":1786,"implemented":false,"kind":"function","modifiers":[],"name":"safeBatchTransferFrom","nameLocation":"3895:21:4","nodeType":"FunctionDefinition","parameters":{"id":1784,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1773,"mutability":"mutable","name":"from","nameLocation":"3934:4:4","nodeType":"VariableDeclaration","scope":1786,"src":"3926:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1772,"name":"address","nodeType":"ElementaryTypeName","src":"3926:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1775,"mutability":"mutable","name":"to","nameLocation":"3956:2:4","nodeType":"VariableDeclaration","scope":1786,"src":"3948:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1774,"name":"address","nodeType":"ElementaryTypeName","src":"3948:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1778,"mutability":"mutable","name":"ids","nameLocation":"3987:3:4","nodeType":"VariableDeclaration","scope":1786,"src":"3968:22:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1776,"name":"uint256","nodeType":"ElementaryTypeName","src":"3968:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1777,"nodeType":"ArrayTypeName","src":"3968:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1781,"mutability":"mutable","name":"amounts","nameLocation":"4019:7:4","nodeType":"VariableDeclaration","scope":1786,"src":"4000:26:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1779,"name":"uint256","nodeType":"ElementaryTypeName","src":"4000:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1780,"nodeType":"ArrayTypeName","src":"4000:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1783,"mutability":"mutable","name":"data","nameLocation":"4051:4:4","nodeType":"VariableDeclaration","scope":1786,"src":"4036:19:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1782,"name":"bytes","nodeType":"ElementaryTypeName","src":"4036:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3916:145:4"},"returnParameters":{"id":1785,"nodeType":"ParameterList","parameters":[],"src":"4070:0:4"},"scope":1787,"src":"3886:185:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1788,"src":"350:3723:4","usedErrors":[]}],"src":"110:3964:4"},"id":4},"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol","exportedSymbols":{"IERC1155Receiver":[1828],"IERC165":[2986]},"id":1829,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1789,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"118:23:5"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../../utils/introspection/IERC165.sol","id":1790,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1829,"sourceUnit":2987,"src":"143:47:5","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1792,"name":"IERC165","nameLocations":["262:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":2986,"src":"262:7:5"},"id":1793,"nodeType":"InheritanceSpecifier","src":"262:7:5"}],"canonicalName":"IERC1155Receiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":1791,"nodeType":"StructuredDocumentation","src":"192:39:5","text":" @dev _Available since v3.1._"},"fullyImplemented":false,"id":1828,"linearizedBaseContracts":[1828,2986],"name":"IERC1155Receiver","nameLocation":"242:16:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1794,"nodeType":"StructuredDocumentation","src":"276:826:5","text":" @dev Handles the receipt of a single ERC1155 token type. This function is\n called at the end of a `safeTransferFrom` after the balance has been updated.\n NOTE: To accept the transfer, this must return\n `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n (i.e. 0xf23a6e61, or its own function selector).\n @param operator The address which initiated the transfer (i.e. msg.sender)\n @param from The address which previously owned the token\n @param id The ID of the token being transferred\n @param value The amount of tokens being transferred\n @param data Additional data with no specified format\n @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed"},"functionSelector":"f23a6e61","id":1809,"implemented":false,"kind":"function","modifiers":[],"name":"onERC1155Received","nameLocation":"1116:17:5","nodeType":"FunctionDefinition","parameters":{"id":1805,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1796,"mutability":"mutable","name":"operator","nameLocation":"1151:8:5","nodeType":"VariableDeclaration","scope":1809,"src":"1143:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1795,"name":"address","nodeType":"ElementaryTypeName","src":"1143:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1798,"mutability":"mutable","name":"from","nameLocation":"1177:4:5","nodeType":"VariableDeclaration","scope":1809,"src":"1169:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1797,"name":"address","nodeType":"ElementaryTypeName","src":"1169:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1800,"mutability":"mutable","name":"id","nameLocation":"1199:2:5","nodeType":"VariableDeclaration","scope":1809,"src":"1191:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1799,"name":"uint256","nodeType":"ElementaryTypeName","src":"1191:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1802,"mutability":"mutable","name":"value","nameLocation":"1219:5:5","nodeType":"VariableDeclaration","scope":1809,"src":"1211:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1801,"name":"uint256","nodeType":"ElementaryTypeName","src":"1211:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1804,"mutability":"mutable","name":"data","nameLocation":"1249:4:5","nodeType":"VariableDeclaration","scope":1809,"src":"1234:19:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1803,"name":"bytes","nodeType":"ElementaryTypeName","src":"1234:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1133:126:5"},"returnParameters":{"id":1808,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1807,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1809,"src":"1278:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1806,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1278:6:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1277:8:5"},"scope":1828,"src":"1107:179:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1810,"nodeType":"StructuredDocumentation","src":"1292:994:5","text":" @dev Handles the receipt of a multiple ERC1155 token types. This function\n is called at the end of a `safeBatchTransferFrom` after the balances have\n been updated.\n NOTE: To accept the transfer(s), this must return\n `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n (i.e. 0xbc197c81, or its own function selector).\n @param operator The address which initiated the batch transfer (i.e. msg.sender)\n @param from The address which previously owned the token\n @param ids An array containing ids of each token being transferred (order and length must match values array)\n @param values An array containing amounts of each token being transferred (order and length must match ids array)\n @param data Additional data with no specified format\n @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed"},"functionSelector":"bc197c81","id":1827,"implemented":false,"kind":"function","modifiers":[],"name":"onERC1155BatchReceived","nameLocation":"2300:22:5","nodeType":"FunctionDefinition","parameters":{"id":1823,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1812,"mutability":"mutable","name":"operator","nameLocation":"2340:8:5","nodeType":"VariableDeclaration","scope":1827,"src":"2332:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1811,"name":"address","nodeType":"ElementaryTypeName","src":"2332:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1814,"mutability":"mutable","name":"from","nameLocation":"2366:4:5","nodeType":"VariableDeclaration","scope":1827,"src":"2358:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1813,"name":"address","nodeType":"ElementaryTypeName","src":"2358:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1817,"mutability":"mutable","name":"ids","nameLocation":"2399:3:5","nodeType":"VariableDeclaration","scope":1827,"src":"2380:22:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1815,"name":"uint256","nodeType":"ElementaryTypeName","src":"2380:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1816,"nodeType":"ArrayTypeName","src":"2380:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1820,"mutability":"mutable","name":"values","nameLocation":"2431:6:5","nodeType":"VariableDeclaration","scope":1827,"src":"2412:25:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1818,"name":"uint256","nodeType":"ElementaryTypeName","src":"2412:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1819,"nodeType":"ArrayTypeName","src":"2412:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1822,"mutability":"mutable","name":"data","nameLocation":"2462:4:5","nodeType":"VariableDeclaration","scope":1827,"src":"2447:19:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1821,"name":"bytes","nodeType":"ElementaryTypeName","src":"2447:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2322:150:5"},"returnParameters":{"id":1826,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1825,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1827,"src":"2491:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1824,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2491:6:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2490:8:5"},"scope":1828,"src":"2291:208:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1829,"src":"232:2269:5","usedErrors":[]}],"src":"118:2384:5"},"id":5},"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol","exportedSymbols":{"IERC1155":[1787],"IERC1155MetadataURI":[1843],"IERC165":[2986]},"id":1844,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1830,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"117:23:6"},{"absolutePath":"@openzeppelin/contracts/token/ERC1155/IERC1155.sol","file":"../IERC1155.sol","id":1831,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1844,"sourceUnit":1788,"src":"142:25:6","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1833,"name":"IERC1155","nameLocations":["397:8:6"],"nodeType":"IdentifierPath","referencedDeclaration":1787,"src":"397:8:6"},"id":1834,"nodeType":"InheritanceSpecifier","src":"397:8:6"}],"canonicalName":"IERC1155MetadataURI","contractDependencies":[],"contractKind":"interface","documentation":{"id":1832,"nodeType":"StructuredDocumentation","src":"169:194:6","text":" @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n _Available since v3.1._"},"fullyImplemented":false,"id":1843,"linearizedBaseContracts":[1843,1787,2986],"name":"IERC1155MetadataURI","nameLocation":"374:19:6","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1835,"nodeType":"StructuredDocumentation","src":"412:192:6","text":" @dev Returns the URI for token type `id`.\n If the `\\{id\\}` substring is present in the URI, it must be replaced by\n clients with the actual token type ID."},"functionSelector":"0e89341c","id":1842,"implemented":false,"kind":"function","modifiers":[],"name":"uri","nameLocation":"618:3:6","nodeType":"FunctionDefinition","parameters":{"id":1838,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1837,"mutability":"mutable","name":"id","nameLocation":"630:2:6","nodeType":"VariableDeclaration","scope":1842,"src":"622:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1836,"name":"uint256","nodeType":"ElementaryTypeName","src":"622:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"621:12:6"},"returnParameters":{"id":1841,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1840,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1842,"src":"657:13:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1839,"name":"string","nodeType":"ElementaryTypeName","src":"657:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"656:15:6"},"scope":1843,"src":"609:63:6","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1844,"src":"364:310:6","usedErrors":[]}],"src":"117:558:6"},"id":6},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[1921]},"id":1922,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1845,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:7"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":1846,"nodeType":"StructuredDocumentation","src":"131:70:7","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":1921,"linearizedBaseContracts":[1921],"name":"IERC20","nameLocation":"212:6:7","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1847,"nodeType":"StructuredDocumentation","src":"225:158:7","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":1855,"name":"Transfer","nameLocation":"394:8:7","nodeType":"EventDefinition","parameters":{"id":1854,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1849,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"419:4:7","nodeType":"VariableDeclaration","scope":1855,"src":"403:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1848,"name":"address","nodeType":"ElementaryTypeName","src":"403:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1851,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"441:2:7","nodeType":"VariableDeclaration","scope":1855,"src":"425:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1850,"name":"address","nodeType":"ElementaryTypeName","src":"425:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1853,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"453:5:7","nodeType":"VariableDeclaration","scope":1855,"src":"445:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1852,"name":"uint256","nodeType":"ElementaryTypeName","src":"445:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"402:57:7"},"src":"388:72:7"},{"anonymous":false,"documentation":{"id":1856,"nodeType":"StructuredDocumentation","src":"466:148:7","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":1864,"name":"Approval","nameLocation":"625:8:7","nodeType":"EventDefinition","parameters":{"id":1863,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1858,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"650:5:7","nodeType":"VariableDeclaration","scope":1864,"src":"634:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1857,"name":"address","nodeType":"ElementaryTypeName","src":"634:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1860,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"673:7:7","nodeType":"VariableDeclaration","scope":1864,"src":"657:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1859,"name":"address","nodeType":"ElementaryTypeName","src":"657:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1862,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"690:5:7","nodeType":"VariableDeclaration","scope":1864,"src":"682:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1861,"name":"uint256","nodeType":"ElementaryTypeName","src":"682:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"633:63:7"},"src":"619:78:7"},{"documentation":{"id":1865,"nodeType":"StructuredDocumentation","src":"703:66:7","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":1870,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"783:11:7","nodeType":"FunctionDefinition","parameters":{"id":1866,"nodeType":"ParameterList","parameters":[],"src":"794:2:7"},"returnParameters":{"id":1869,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1868,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1870,"src":"820:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1867,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"819:9:7"},"scope":1921,"src":"774:55:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1871,"nodeType":"StructuredDocumentation","src":"835:72:7","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":1878,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"921:9:7","nodeType":"FunctionDefinition","parameters":{"id":1874,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1873,"mutability":"mutable","name":"account","nameLocation":"939:7:7","nodeType":"VariableDeclaration","scope":1878,"src":"931:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1872,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"930:17:7"},"returnParameters":{"id":1877,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1876,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1878,"src":"971:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1875,"name":"uint256","nodeType":"ElementaryTypeName","src":"971:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"970:9:7"},"scope":1921,"src":"912:68:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1879,"nodeType":"StructuredDocumentation","src":"986:202:7","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":1888,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1202:8:7","nodeType":"FunctionDefinition","parameters":{"id":1884,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1881,"mutability":"mutable","name":"to","nameLocation":"1219:2:7","nodeType":"VariableDeclaration","scope":1888,"src":"1211:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1880,"name":"address","nodeType":"ElementaryTypeName","src":"1211:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1883,"mutability":"mutable","name":"amount","nameLocation":"1231:6:7","nodeType":"VariableDeclaration","scope":1888,"src":"1223:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1882,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1210:28:7"},"returnParameters":{"id":1887,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1886,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1888,"src":"1257:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1885,"name":"bool","nodeType":"ElementaryTypeName","src":"1257:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1256:6:7"},"scope":1921,"src":"1193:70:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1889,"nodeType":"StructuredDocumentation","src":"1269:264:7","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":1898,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1547:9:7","nodeType":"FunctionDefinition","parameters":{"id":1894,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1891,"mutability":"mutable","name":"owner","nameLocation":"1565:5:7","nodeType":"VariableDeclaration","scope":1898,"src":"1557:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1890,"name":"address","nodeType":"ElementaryTypeName","src":"1557:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1893,"mutability":"mutable","name":"spender","nameLocation":"1580:7:7","nodeType":"VariableDeclaration","scope":1898,"src":"1572:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1892,"name":"address","nodeType":"ElementaryTypeName","src":"1572:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1556:32:7"},"returnParameters":{"id":1897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1896,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1898,"src":"1612:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1895,"name":"uint256","nodeType":"ElementaryTypeName","src":"1612:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1611:9:7"},"scope":1921,"src":"1538:83:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1899,"nodeType":"StructuredDocumentation","src":"1627:642:7","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":1908,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2283:7:7","nodeType":"FunctionDefinition","parameters":{"id":1904,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1901,"mutability":"mutable","name":"spender","nameLocation":"2299:7:7","nodeType":"VariableDeclaration","scope":1908,"src":"2291:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1900,"name":"address","nodeType":"ElementaryTypeName","src":"2291:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1903,"mutability":"mutable","name":"amount","nameLocation":"2316:6:7","nodeType":"VariableDeclaration","scope":1908,"src":"2308:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1902,"name":"uint256","nodeType":"ElementaryTypeName","src":"2308:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2290:33:7"},"returnParameters":{"id":1907,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1906,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1908,"src":"2342:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1905,"name":"bool","nodeType":"ElementaryTypeName","src":"2342:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2341:6:7"},"scope":1921,"src":"2274:74:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1909,"nodeType":"StructuredDocumentation","src":"2354:287:7","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":1920,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2655:12:7","nodeType":"FunctionDefinition","parameters":{"id":1916,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1911,"mutability":"mutable","name":"from","nameLocation":"2685:4:7","nodeType":"VariableDeclaration","scope":1920,"src":"2677:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1910,"name":"address","nodeType":"ElementaryTypeName","src":"2677:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1913,"mutability":"mutable","name":"to","nameLocation":"2707:2:7","nodeType":"VariableDeclaration","scope":1920,"src":"2699:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1912,"name":"address","nodeType":"ElementaryTypeName","src":"2699:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1915,"mutability":"mutable","name":"amount","nameLocation":"2727:6:7","nodeType":"VariableDeclaration","scope":1920,"src":"2719:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1914,"name":"uint256","nodeType":"ElementaryTypeName","src":"2719:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2667:72:7"},"returnParameters":{"id":1919,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1918,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1920,"src":"2758:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1917,"name":"bool","nodeType":"ElementaryTypeName","src":"2758:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2757:6:7"},"scope":1921,"src":"2646:118:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1922,"src":"202:2564:7","usedErrors":[]}],"src":"106:2661:7"},"id":7},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[2251]},"id":2252,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1923,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:8"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":1924,"nodeType":"StructuredDocumentation","src":"126:67:8","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":2251,"linearizedBaseContracts":[2251],"name":"Address","nameLocation":"202:7:8","nodeType":"ContractDefinition","nodes":[{"body":{"id":1938,"nodeType":"Block","src":"1241:254:8","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1932,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1927,"src":"1465:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1473:4:8","memberName":"code","nodeType":"MemberAccess","src":"1465:12:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1478:6:8","memberName":"length","nodeType":"MemberAccess","src":"1465:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1935,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1487:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1465:23:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1931,"id":1937,"nodeType":"Return","src":"1458:30:8"}]},"documentation":{"id":1925,"nodeType":"StructuredDocumentation","src":"216:954:8","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":1939,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1184:10:8","nodeType":"FunctionDefinition","parameters":{"id":1928,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1927,"mutability":"mutable","name":"account","nameLocation":"1203:7:8","nodeType":"VariableDeclaration","scope":1939,"src":"1195:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1926,"name":"address","nodeType":"ElementaryTypeName","src":"1195:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1194:17:8"},"returnParameters":{"id":1931,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1930,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1939,"src":"1235:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1929,"name":"bool","nodeType":"ElementaryTypeName","src":"1235:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1234:6:8"},"scope":2251,"src":"1175:320:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1972,"nodeType":"Block","src":"2483:241:8","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1950,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2509:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$2251","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$2251","typeString":"library Address"}],"id":1949,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2501:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1948,"name":"address","nodeType":"ElementaryTypeName","src":"2501:7:8","typeDescriptions":{}}},"id":1951,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2501:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2515:7:8","memberName":"balance","nodeType":"MemberAccess","src":"2501:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1953,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1944,"src":"2526:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2501:31:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":1955,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2534:31:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":1947,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2493:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1956,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2493:73:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1957,"nodeType":"ExpressionStatement","src":"2493:73:8"},{"assignments":[1959,null],"declarations":[{"constant":false,"id":1959,"mutability":"mutable","name":"success","nameLocation":"2583:7:8","nodeType":"VariableDeclaration","scope":1972,"src":"2578:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1958,"name":"bool","nodeType":"ElementaryTypeName","src":"2578:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1966,"initialValue":{"arguments":[{"hexValue":"","id":1964,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2626:2:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":1960,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1942,"src":"2596:9:8","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2606:4:8","memberName":"call","nodeType":"MemberAccess","src":"2596:14:8","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1962,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1944,"src":"2618:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2596:29:8","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1965,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2596:33:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2577:52:8"},{"expression":{"arguments":[{"id":1968,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1959,"src":"2647:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":1969,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2656:60:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":1967,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2639:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1970,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2639:78:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1971,"nodeType":"ExpressionStatement","src":"2639:78:8"}]},"documentation":{"id":1940,"nodeType":"StructuredDocumentation","src":"1501:906:8","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":1973,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2421:9:8","nodeType":"FunctionDefinition","parameters":{"id":1945,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1942,"mutability":"mutable","name":"recipient","nameLocation":"2447:9:8","nodeType":"VariableDeclaration","scope":1973,"src":"2431:25:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1941,"name":"address","nodeType":"ElementaryTypeName","src":"2431:15:8","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":1944,"mutability":"mutable","name":"amount","nameLocation":"2466:6:8","nodeType":"VariableDeclaration","scope":1973,"src":"2458:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1943,"name":"uint256","nodeType":"ElementaryTypeName","src":"2458:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2430:43:8"},"returnParameters":{"id":1946,"nodeType":"ParameterList","parameters":[],"src":"2483:0:8"},"scope":2251,"src":"2412:312:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1990,"nodeType":"Block","src":"3555:96:8","statements":[{"expression":{"arguments":[{"id":1984,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1976,"src":"3594:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1985,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1978,"src":"3602:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1986,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3608:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":1987,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3611:32:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":1983,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[2031,2075],"referencedDeclaration":2075,"src":"3572:21:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1988,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3572:72:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1982,"id":1989,"nodeType":"Return","src":"3565:79:8"}]},"documentation":{"id":1974,"nodeType":"StructuredDocumentation","src":"2730:731:8","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":1991,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3475:12:8","nodeType":"FunctionDefinition","parameters":{"id":1979,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1976,"mutability":"mutable","name":"target","nameLocation":"3496:6:8","nodeType":"VariableDeclaration","scope":1991,"src":"3488:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1975,"name":"address","nodeType":"ElementaryTypeName","src":"3488:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1978,"mutability":"mutable","name":"data","nameLocation":"3517:4:8","nodeType":"VariableDeclaration","scope":1991,"src":"3504:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1977,"name":"bytes","nodeType":"ElementaryTypeName","src":"3504:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3487:35:8"},"returnParameters":{"id":1982,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1981,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1991,"src":"3541:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1980,"name":"bytes","nodeType":"ElementaryTypeName","src":"3541:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3540:14:8"},"scope":2251,"src":"3466:185:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2010,"nodeType":"Block","src":"4020:76:8","statements":[{"expression":{"arguments":[{"id":2004,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1994,"src":"4059:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2005,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1996,"src":"4067:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":2006,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4073:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":2007,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1998,"src":"4076:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2003,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[2031,2075],"referencedDeclaration":2075,"src":"4037:21:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":2008,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4037:52:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2002,"id":2009,"nodeType":"Return","src":"4030:59:8"}]},"documentation":{"id":1992,"nodeType":"StructuredDocumentation","src":"3657:211:8","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":2011,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3882:12:8","nodeType":"FunctionDefinition","parameters":{"id":1999,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1994,"mutability":"mutable","name":"target","nameLocation":"3912:6:8","nodeType":"VariableDeclaration","scope":2011,"src":"3904:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1993,"name":"address","nodeType":"ElementaryTypeName","src":"3904:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1996,"mutability":"mutable","name":"data","nameLocation":"3941:4:8","nodeType":"VariableDeclaration","scope":2011,"src":"3928:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1995,"name":"bytes","nodeType":"ElementaryTypeName","src":"3928:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1998,"mutability":"mutable","name":"errorMessage","nameLocation":"3969:12:8","nodeType":"VariableDeclaration","scope":2011,"src":"3955:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1997,"name":"string","nodeType":"ElementaryTypeName","src":"3955:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3894:93:8"},"returnParameters":{"id":2002,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2001,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2011,"src":"4006:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2000,"name":"bytes","nodeType":"ElementaryTypeName","src":"4006:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4005:14:8"},"scope":2251,"src":"3873:223:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2030,"nodeType":"Block","src":"4601:111:8","statements":[{"expression":{"arguments":[{"id":2024,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2014,"src":"4640:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2025,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2016,"src":"4648:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2026,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2018,"src":"4654:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":2027,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4661:43:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":2023,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[2031,2075],"referencedDeclaration":2075,"src":"4618:21:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":2028,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4618:87:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2022,"id":2029,"nodeType":"Return","src":"4611:94:8"}]},"documentation":{"id":2012,"nodeType":"StructuredDocumentation","src":"4102:351:8","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":2031,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4467:21:8","nodeType":"FunctionDefinition","parameters":{"id":2019,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2014,"mutability":"mutable","name":"target","nameLocation":"4506:6:8","nodeType":"VariableDeclaration","scope":2031,"src":"4498:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2013,"name":"address","nodeType":"ElementaryTypeName","src":"4498:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2016,"mutability":"mutable","name":"data","nameLocation":"4535:4:8","nodeType":"VariableDeclaration","scope":2031,"src":"4522:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2015,"name":"bytes","nodeType":"ElementaryTypeName","src":"4522:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2018,"mutability":"mutable","name":"value","nameLocation":"4557:5:8","nodeType":"VariableDeclaration","scope":2031,"src":"4549:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2017,"name":"uint256","nodeType":"ElementaryTypeName","src":"4549:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4488:80:8"},"returnParameters":{"id":2022,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2021,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2031,"src":"4587:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2020,"name":"bytes","nodeType":"ElementaryTypeName","src":"4587:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4586:14:8"},"scope":2251,"src":"4458:254:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2074,"nodeType":"Block","src":"5139:267:8","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2048,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5165:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$2251","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$2251","typeString":"library Address"}],"id":2047,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5157:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2046,"name":"address","nodeType":"ElementaryTypeName","src":"5157:7:8","typeDescriptions":{}}},"id":2049,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5157:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5171:7:8","memberName":"balance","nodeType":"MemberAccess","src":"5157:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2051,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2038,"src":"5182:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5157:30:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":2053,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5189:40:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":2045,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5149:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2054,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5149:81:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2055,"nodeType":"ExpressionStatement","src":"5149:81:8"},{"assignments":[2057,2059],"declarations":[{"constant":false,"id":2057,"mutability":"mutable","name":"success","nameLocation":"5246:7:8","nodeType":"VariableDeclaration","scope":2074,"src":"5241:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2056,"name":"bool","nodeType":"ElementaryTypeName","src":"5241:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2059,"mutability":"mutable","name":"returndata","nameLocation":"5268:10:8","nodeType":"VariableDeclaration","scope":2074,"src":"5255:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2058,"name":"bytes","nodeType":"ElementaryTypeName","src":"5255:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2066,"initialValue":{"arguments":[{"id":2064,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2036,"src":"5308:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2060,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2034,"src":"5282:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5289:4:8","memberName":"call","nodeType":"MemberAccess","src":"5282:11:8","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":2062,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2038,"src":"5301:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5282:25:8","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2065,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5282:31:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5240:73:8"},{"expression":{"arguments":[{"id":2068,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2034,"src":"5357:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2069,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2057,"src":"5365:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2070,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2059,"src":"5374:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2071,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2040,"src":"5386:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2067,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2206,"src":"5330:26:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":2072,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5330:69:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2044,"id":2073,"nodeType":"Return","src":"5323:76:8"}]},"documentation":{"id":2032,"nodeType":"StructuredDocumentation","src":"4718:237:8","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":2075,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4969:21:8","nodeType":"FunctionDefinition","parameters":{"id":2041,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2034,"mutability":"mutable","name":"target","nameLocation":"5008:6:8","nodeType":"VariableDeclaration","scope":2075,"src":"5000:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2033,"name":"address","nodeType":"ElementaryTypeName","src":"5000:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2036,"mutability":"mutable","name":"data","nameLocation":"5037:4:8","nodeType":"VariableDeclaration","scope":2075,"src":"5024:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2035,"name":"bytes","nodeType":"ElementaryTypeName","src":"5024:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2038,"mutability":"mutable","name":"value","nameLocation":"5059:5:8","nodeType":"VariableDeclaration","scope":2075,"src":"5051:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2037,"name":"uint256","nodeType":"ElementaryTypeName","src":"5051:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2040,"mutability":"mutable","name":"errorMessage","nameLocation":"5088:12:8","nodeType":"VariableDeclaration","scope":2075,"src":"5074:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2039,"name":"string","nodeType":"ElementaryTypeName","src":"5074:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4990:116:8"},"returnParameters":{"id":2044,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2043,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2075,"src":"5125:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2042,"name":"bytes","nodeType":"ElementaryTypeName","src":"5125:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5124:14:8"},"scope":2251,"src":"4960:446:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2091,"nodeType":"Block","src":"5683:97:8","statements":[{"expression":{"arguments":[{"id":2086,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2078,"src":"5719:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2087,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2080,"src":"5727:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":2088,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5733:39:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":2085,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[2092,2121],"referencedDeclaration":2121,"src":"5700:18:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":2089,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5700:73:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2084,"id":2090,"nodeType":"Return","src":"5693:80:8"}]},"documentation":{"id":2076,"nodeType":"StructuredDocumentation","src":"5412:166:8","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":2092,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5592:18:8","nodeType":"FunctionDefinition","parameters":{"id":2081,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2078,"mutability":"mutable","name":"target","nameLocation":"5619:6:8","nodeType":"VariableDeclaration","scope":2092,"src":"5611:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2077,"name":"address","nodeType":"ElementaryTypeName","src":"5611:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2080,"mutability":"mutable","name":"data","nameLocation":"5640:4:8","nodeType":"VariableDeclaration","scope":2092,"src":"5627:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2079,"name":"bytes","nodeType":"ElementaryTypeName","src":"5627:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5610:35:8"},"returnParameters":{"id":2084,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2083,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2092,"src":"5669:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2082,"name":"bytes","nodeType":"ElementaryTypeName","src":"5669:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5668:14:8"},"scope":2251,"src":"5583:197:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2120,"nodeType":"Block","src":"6122:168:8","statements":[{"assignments":[2105,2107],"declarations":[{"constant":false,"id":2105,"mutability":"mutable","name":"success","nameLocation":"6138:7:8","nodeType":"VariableDeclaration","scope":2120,"src":"6133:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2104,"name":"bool","nodeType":"ElementaryTypeName","src":"6133:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2107,"mutability":"mutable","name":"returndata","nameLocation":"6160:10:8","nodeType":"VariableDeclaration","scope":2120,"src":"6147:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2106,"name":"bytes","nodeType":"ElementaryTypeName","src":"6147:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2112,"initialValue":{"arguments":[{"id":2110,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2097,"src":"6192:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2108,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2095,"src":"6174:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6181:10:8","memberName":"staticcall","nodeType":"MemberAccess","src":"6174:17:8","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":2111,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6174:23:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6132:65:8"},{"expression":{"arguments":[{"id":2114,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2095,"src":"6241:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2115,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2105,"src":"6249:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2116,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2107,"src":"6258:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2117,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2099,"src":"6270:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2113,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2206,"src":"6214:26:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":2118,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6214:69:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2103,"id":2119,"nodeType":"Return","src":"6207:76:8"}]},"documentation":{"id":2093,"nodeType":"StructuredDocumentation","src":"5786:173:8","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":2121,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5973:18:8","nodeType":"FunctionDefinition","parameters":{"id":2100,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2095,"mutability":"mutable","name":"target","nameLocation":"6009:6:8","nodeType":"VariableDeclaration","scope":2121,"src":"6001:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2094,"name":"address","nodeType":"ElementaryTypeName","src":"6001:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2097,"mutability":"mutable","name":"data","nameLocation":"6038:4:8","nodeType":"VariableDeclaration","scope":2121,"src":"6025:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2096,"name":"bytes","nodeType":"ElementaryTypeName","src":"6025:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2099,"mutability":"mutable","name":"errorMessage","nameLocation":"6066:12:8","nodeType":"VariableDeclaration","scope":2121,"src":"6052:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2098,"name":"string","nodeType":"ElementaryTypeName","src":"6052:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5991:93:8"},"returnParameters":{"id":2103,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2102,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2121,"src":"6108:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2101,"name":"bytes","nodeType":"ElementaryTypeName","src":"6108:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6107:14:8"},"scope":2251,"src":"5964:326:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2137,"nodeType":"Block","src":"6566:101:8","statements":[{"expression":{"arguments":[{"id":2132,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2124,"src":"6604:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2133,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2126,"src":"6612:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":2134,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6618:41:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":2131,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[2138,2167],"referencedDeclaration":2167,"src":"6583:20:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":2135,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6583:77:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2130,"id":2136,"nodeType":"Return","src":"6576:84:8"}]},"documentation":{"id":2122,"nodeType":"StructuredDocumentation","src":"6296:168:8","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":2138,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6478:20:8","nodeType":"FunctionDefinition","parameters":{"id":2127,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2124,"mutability":"mutable","name":"target","nameLocation":"6507:6:8","nodeType":"VariableDeclaration","scope":2138,"src":"6499:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2123,"name":"address","nodeType":"ElementaryTypeName","src":"6499:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2126,"mutability":"mutable","name":"data","nameLocation":"6528:4:8","nodeType":"VariableDeclaration","scope":2138,"src":"6515:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2125,"name":"bytes","nodeType":"ElementaryTypeName","src":"6515:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6498:35:8"},"returnParameters":{"id":2130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2129,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2138,"src":"6552:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2128,"name":"bytes","nodeType":"ElementaryTypeName","src":"6552:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6551:14:8"},"scope":2251,"src":"6469:198:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2166,"nodeType":"Block","src":"7008:170:8","statements":[{"assignments":[2151,2153],"declarations":[{"constant":false,"id":2151,"mutability":"mutable","name":"success","nameLocation":"7024:7:8","nodeType":"VariableDeclaration","scope":2166,"src":"7019:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2150,"name":"bool","nodeType":"ElementaryTypeName","src":"7019:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2153,"mutability":"mutable","name":"returndata","nameLocation":"7046:10:8","nodeType":"VariableDeclaration","scope":2166,"src":"7033:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2152,"name":"bytes","nodeType":"ElementaryTypeName","src":"7033:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2158,"initialValue":{"arguments":[{"id":2156,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2143,"src":"7080:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2154,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2141,"src":"7060:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7067:12:8","memberName":"delegatecall","nodeType":"MemberAccess","src":"7060:19:8","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":2157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7060:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7018:67:8"},{"expression":{"arguments":[{"id":2160,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2141,"src":"7129:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2161,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2151,"src":"7137:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2162,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2153,"src":"7146:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2163,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2145,"src":"7158:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2159,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2206,"src":"7102:26:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":2164,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7102:69:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2149,"id":2165,"nodeType":"Return","src":"7095:76:8"}]},"documentation":{"id":2139,"nodeType":"StructuredDocumentation","src":"6673:175:8","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":2167,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6862:20:8","nodeType":"FunctionDefinition","parameters":{"id":2146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2141,"mutability":"mutable","name":"target","nameLocation":"6900:6:8","nodeType":"VariableDeclaration","scope":2167,"src":"6892:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2140,"name":"address","nodeType":"ElementaryTypeName","src":"6892:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2143,"mutability":"mutable","name":"data","nameLocation":"6929:4:8","nodeType":"VariableDeclaration","scope":2167,"src":"6916:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2142,"name":"bytes","nodeType":"ElementaryTypeName","src":"6916:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2145,"mutability":"mutable","name":"errorMessage","nameLocation":"6957:12:8","nodeType":"VariableDeclaration","scope":2167,"src":"6943:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2144,"name":"string","nodeType":"ElementaryTypeName","src":"6943:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6882:93:8"},"returnParameters":{"id":2149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2148,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2167,"src":"6994:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2147,"name":"bytes","nodeType":"ElementaryTypeName","src":"6994:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6993:14:8"},"scope":2251,"src":"6853:325:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2205,"nodeType":"Block","src":"7660:434:8","statements":[{"condition":{"id":2181,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"7674:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2203,"nodeType":"Block","src":"8030:58:8","statements":[{"expression":{"arguments":[{"id":2199,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2174,"src":"8052:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2200,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2176,"src":"8064:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2198,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"8044:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":2201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8044:33:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2202,"nodeType":"ExpressionStatement","src":"8044:33:8"}]},"id":2204,"nodeType":"IfStatement","src":"7670:418:8","trueBody":{"id":2197,"nodeType":"Block","src":"7683:341:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2182,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2174,"src":"7701:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7712:6:8","memberName":"length","nodeType":"MemberAccess","src":"7701:17:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2184,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7722:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7701:22:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2194,"nodeType":"IfStatement","src":"7697:286:8","trueBody":{"id":2193,"nodeType":"Block","src":"7725:258:8","statements":[{"expression":{"arguments":[{"arguments":[{"id":2188,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2170,"src":"7927:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2187,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"7916:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":2189,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7916:18:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":2190,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7936:31:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":2186,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7908:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2191,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7908:60:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2192,"nodeType":"ExpressionStatement","src":"7908:60:8"}]}},{"expression":{"id":2195,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2174,"src":"8003:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2180,"id":2196,"nodeType":"Return","src":"7996:17:8"}]}}]},"documentation":{"id":2168,"nodeType":"StructuredDocumentation","src":"7184:277:8","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":2206,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7475:26:8","nodeType":"FunctionDefinition","parameters":{"id":2177,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2170,"mutability":"mutable","name":"target","nameLocation":"7519:6:8","nodeType":"VariableDeclaration","scope":2206,"src":"7511:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2169,"name":"address","nodeType":"ElementaryTypeName","src":"7511:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2172,"mutability":"mutable","name":"success","nameLocation":"7540:7:8","nodeType":"VariableDeclaration","scope":2206,"src":"7535:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2171,"name":"bool","nodeType":"ElementaryTypeName","src":"7535:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2174,"mutability":"mutable","name":"returndata","nameLocation":"7570:10:8","nodeType":"VariableDeclaration","scope":2206,"src":"7557:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2173,"name":"bytes","nodeType":"ElementaryTypeName","src":"7557:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2176,"mutability":"mutable","name":"errorMessage","nameLocation":"7604:12:8","nodeType":"VariableDeclaration","scope":2206,"src":"7590:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2175,"name":"string","nodeType":"ElementaryTypeName","src":"7590:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7501:121:8"},"returnParameters":{"id":2180,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2179,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2206,"src":"7646:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2178,"name":"bytes","nodeType":"ElementaryTypeName","src":"7646:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7645:14:8"},"scope":2251,"src":"7466:628:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2229,"nodeType":"Block","src":"8475:135:8","statements":[{"condition":{"id":2218,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2209,"src":"8489:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2227,"nodeType":"Block","src":"8546:58:8","statements":[{"expression":{"arguments":[{"id":2223,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"8568:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2224,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2213,"src":"8580:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2222,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"8560:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":2225,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8560:33:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2226,"nodeType":"ExpressionStatement","src":"8560:33:8"}]},"id":2228,"nodeType":"IfStatement","src":"8485:119:8","trueBody":{"id":2221,"nodeType":"Block","src":"8498:42:8","statements":[{"expression":{"id":2219,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"8519:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2217,"id":2220,"nodeType":"Return","src":"8512:17:8"}]}}]},"documentation":{"id":2207,"nodeType":"StructuredDocumentation","src":"8100:210:8","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":2230,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8324:16:8","nodeType":"FunctionDefinition","parameters":{"id":2214,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2209,"mutability":"mutable","name":"success","nameLocation":"8355:7:8","nodeType":"VariableDeclaration","scope":2230,"src":"8350:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2208,"name":"bool","nodeType":"ElementaryTypeName","src":"8350:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2211,"mutability":"mutable","name":"returndata","nameLocation":"8385:10:8","nodeType":"VariableDeclaration","scope":2230,"src":"8372:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2210,"name":"bytes","nodeType":"ElementaryTypeName","src":"8372:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2213,"mutability":"mutable","name":"errorMessage","nameLocation":"8419:12:8","nodeType":"VariableDeclaration","scope":2230,"src":"8405:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2212,"name":"string","nodeType":"ElementaryTypeName","src":"8405:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8340:97:8"},"returnParameters":{"id":2217,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2216,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2230,"src":"8461:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2215,"name":"bytes","nodeType":"ElementaryTypeName","src":"8461:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8460:14:8"},"scope":2251,"src":"8315:295:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2249,"nodeType":"Block","src":"8699:457:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2237,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2232,"src":"8775:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8786:6:8","memberName":"length","nodeType":"MemberAccess","src":"8775:17:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2239,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8795:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8775:21:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2247,"nodeType":"Block","src":"9105:45:8","statements":[{"expression":{"arguments":[{"id":2244,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2234,"src":"9126:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2243,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9119:6:8","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2245,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9119:20:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2246,"nodeType":"ExpressionStatement","src":"9119:20:8"}]},"id":2248,"nodeType":"IfStatement","src":"8771:379:8","trueBody":{"id":2242,"nodeType":"Block","src":"8798:301:8","statements":[{"AST":{"nodeType":"YulBlock","src":"8956:133:8","statements":[{"nodeType":"YulVariableDeclaration","src":"8974:40:8","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9003:10:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8997:5:8"},"nodeType":"YulFunctionCall","src":"8997:17:8"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"8978:15:8","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9042:2:8","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9046:10:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9038:3:8"},"nodeType":"YulFunctionCall","src":"9038:19:8"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9059:15:8"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9031:6:8"},"nodeType":"YulFunctionCall","src":"9031:44:8"},"nodeType":"YulExpressionStatement","src":"9031:44:8"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2232,"isOffset":false,"isSlot":false,"src":"9003:10:8","valueSize":1},{"declaration":2232,"isOffset":false,"isSlot":false,"src":"9046:10:8","valueSize":1}],"id":2241,"nodeType":"InlineAssembly","src":"8947:142:8"}]}}]},"id":2250,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8625:7:8","nodeType":"FunctionDefinition","parameters":{"id":2235,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2232,"mutability":"mutable","name":"returndata","nameLocation":"8646:10:8","nodeType":"VariableDeclaration","scope":2250,"src":"8633:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2231,"name":"bytes","nodeType":"ElementaryTypeName","src":"8633:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2234,"mutability":"mutable","name":"errorMessage","nameLocation":"8672:12:8","nodeType":"VariableDeclaration","scope":2250,"src":"8658:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2233,"name":"string","nodeType":"ElementaryTypeName","src":"8658:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8632:53:8"},"returnParameters":{"id":2236,"nodeType":"ParameterList","parameters":[],"src":"8699:0:8"},"scope":2251,"src":"8616:540:8","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":2252,"src":"194:8964:8","usedErrors":[]}],"src":"101:9058:8"},"id":8},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[2273]},"id":2274,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2253,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:9"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":2254,"nodeType":"StructuredDocumentation","src":"111:496:9","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":2273,"linearizedBaseContracts":[2273],"name":"Context","nameLocation":"626:7:9","nodeType":"ContractDefinition","nodes":[{"body":{"id":2262,"nodeType":"Block","src":"702:34:9","statements":[{"expression":{"expression":{"id":2259,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:9","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"723:6:9","memberName":"sender","nodeType":"MemberAccess","src":"719:10:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2258,"id":2261,"nodeType":"Return","src":"712:17:9"}]},"id":2263,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:9","nodeType":"FunctionDefinition","parameters":{"id":2255,"nodeType":"ParameterList","parameters":[],"src":"659:2:9"},"returnParameters":{"id":2258,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2257,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2263,"src":"693:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2256,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:9"},"scope":2273,"src":"640:96:9","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2271,"nodeType":"Block","src":"809:32:9","statements":[{"expression":{"expression":{"id":2268,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:9","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"830:4:9","memberName":"data","nodeType":"MemberAccess","src":"826:8:9","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":2267,"id":2270,"nodeType":"Return","src":"819:15:9"}]},"id":2272,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:9","nodeType":"FunctionDefinition","parameters":{"id":2264,"nodeType":"ParameterList","parameters":[],"src":"759:2:9"},"returnParameters":{"id":2267,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2266,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2272,"src":"793:14:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2265,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:9"},"scope":2273,"src":"742:99:9","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":2274,"src":"608:235:9","usedErrors":[]}],"src":"86:758:9"},"id":9},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[3851],"Strings":[2448]},"id":2449,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2275,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:10"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":2276,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2449,"sourceUnit":3852,"src":"126:25:10","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":2277,"nodeType":"StructuredDocumentation","src":"153:34:10","text":" @dev String operations."},"fullyImplemented":true,"id":2448,"linearizedBaseContracts":[2448],"name":"Strings","nameLocation":"196:7:10","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":2280,"mutability":"constant","name":"_SYMBOLS","nameLocation":"235:8:10","nodeType":"VariableDeclaration","scope":2448,"src":"210:54:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":2278,"name":"bytes16","nodeType":"ElementaryTypeName","src":"210:7:10","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":2279,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"246:18:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":2283,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"293:15:10","nodeType":"VariableDeclaration","scope":2448,"src":"270:43:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2281,"name":"uint8","nodeType":"ElementaryTypeName","src":"270:5:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":2282,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"311:2:10","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":2330,"nodeType":"Block","src":"486:625:10","statements":[{"id":2329,"nodeType":"UncheckedBlock","src":"496:609:10","statements":[{"assignments":[2292],"declarations":[{"constant":false,"id":2292,"mutability":"mutable","name":"length","nameLocation":"528:6:10","nodeType":"VariableDeclaration","scope":2329,"src":"520:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2291,"name":"uint256","nodeType":"ElementaryTypeName","src":"520:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2299,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2295,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2286,"src":"548:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2293,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3851,"src":"537:4:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$3851_$","typeString":"type(library Math)"}},"id":2294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"542:5:10","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":3688,"src":"537:10:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2296,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"537:17:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2297,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"557:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"537:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"520:38:10"},{"assignments":[2301],"declarations":[{"constant":false,"id":2301,"mutability":"mutable","name":"buffer","nameLocation":"586:6:10","nodeType":"VariableDeclaration","scope":2329,"src":"572:20:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2300,"name":"string","nodeType":"ElementaryTypeName","src":"572:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":2306,"initialValue":{"arguments":[{"id":2304,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2292,"src":"606:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2303,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"595:10:10","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":2302,"name":"string","nodeType":"ElementaryTypeName","src":"599:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":2305,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"595:18:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"572:41:10"},{"assignments":[2308],"declarations":[{"constant":false,"id":2308,"mutability":"mutable","name":"ptr","nameLocation":"635:3:10","nodeType":"VariableDeclaration","scope":2329,"src":"627:11:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2307,"name":"uint256","nodeType":"ElementaryTypeName","src":"627:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2309,"nodeType":"VariableDeclarationStatement","src":"627:11:10"},{"AST":{"nodeType":"YulBlock","src":"708:67:10","statements":[{"nodeType":"YulAssignment","src":"726:35:10","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"737:6:10"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"749:2:10","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"753:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"745:3:10"},"nodeType":"YulFunctionCall","src":"745:15:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"733:3:10"},"nodeType":"YulFunctionCall","src":"733:28:10"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"726:3:10"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2301,"isOffset":false,"isSlot":false,"src":"737:6:10","valueSize":1},{"declaration":2292,"isOffset":false,"isSlot":false,"src":"753:6:10","valueSize":1},{"declaration":2308,"isOffset":false,"isSlot":false,"src":"726:3:10","valueSize":1}],"id":2310,"nodeType":"InlineAssembly","src":"699:76:10"},{"body":{"id":2325,"nodeType":"Block","src":"801:267:10","statements":[{"expression":{"id":2313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"819:5:10","subExpression":{"id":2312,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2308,"src":"819:3:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2314,"nodeType":"ExpressionStatement","src":"819:5:10"},{"AST":{"nodeType":"YulBlock","src":"902:84:10","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"932:3:10"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"946:5:10"},{"kind":"number","nodeType":"YulLiteral","src":"953:2:10","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"942:3:10"},"nodeType":"YulFunctionCall","src":"942:14:10"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"958:8:10"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"937:4:10"},"nodeType":"YulFunctionCall","src":"937:30:10"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"924:7:10"},"nodeType":"YulFunctionCall","src":"924:44:10"},"nodeType":"YulExpressionStatement","src":"924:44:10"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2280,"isOffset":false,"isSlot":false,"src":"958:8:10","valueSize":1},{"declaration":2308,"isOffset":false,"isSlot":false,"src":"932:3:10","valueSize":1},{"declaration":2286,"isOffset":false,"isSlot":false,"src":"946:5:10","valueSize":1}],"id":2315,"nodeType":"InlineAssembly","src":"893:93:10"},{"expression":{"id":2318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2316,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2286,"src":"1003:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":2317,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1012:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1003:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2319,"nodeType":"ExpressionStatement","src":"1003:11:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2320,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2286,"src":"1036:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2321,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1045:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1036:10:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2324,"nodeType":"IfStatement","src":"1032:21:10","trueBody":{"id":2323,"nodeType":"Break","src":"1048:5:10"}}]},"condition":{"hexValue":"74727565","id":2311,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"795:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":2326,"nodeType":"WhileStatement","src":"788:280:10"},{"expression":{"id":2327,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2301,"src":"1088:6:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2290,"id":2328,"nodeType":"Return","src":"1081:13:10"}]}]},"documentation":{"id":2284,"nodeType":"StructuredDocumentation","src":"320:90:10","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":2331,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"424:8:10","nodeType":"FunctionDefinition","parameters":{"id":2287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2286,"mutability":"mutable","name":"value","nameLocation":"441:5:10","nodeType":"VariableDeclaration","scope":2331,"src":"433:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2285,"name":"uint256","nodeType":"ElementaryTypeName","src":"433:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"432:15:10"},"returnParameters":{"id":2290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2289,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2331,"src":"471:13:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2288,"name":"string","nodeType":"ElementaryTypeName","src":"471:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"470:15:10"},"scope":2448,"src":"415:696:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2350,"nodeType":"Block","src":"1290:100:10","statements":[{"id":2349,"nodeType":"UncheckedBlock","src":"1300:84:10","statements":[{"expression":{"arguments":[{"id":2340,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2334,"src":"1343:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2343,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2334,"src":"1362:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2341,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3851,"src":"1350:4:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$3851_$","typeString":"type(library Math)"}},"id":2342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1355:6:10","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":3811,"src":"1350:11:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2344,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1350:18:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2345,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1371:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1350:22:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2339,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[2351,2427,2447],"referencedDeclaration":2427,"src":"1331:11:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":2347,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1331:42:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2338,"id":2348,"nodeType":"Return","src":"1324:49:10"}]}]},"documentation":{"id":2332,"nodeType":"StructuredDocumentation","src":"1117:94:10","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":2351,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1225:11:10","nodeType":"FunctionDefinition","parameters":{"id":2335,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2334,"mutability":"mutable","name":"value","nameLocation":"1245:5:10","nodeType":"VariableDeclaration","scope":2351,"src":"1237:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2333,"name":"uint256","nodeType":"ElementaryTypeName","src":"1237:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1236:15:10"},"returnParameters":{"id":2338,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2337,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2351,"src":"1275:13:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2336,"name":"string","nodeType":"ElementaryTypeName","src":"1275:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1274:15:10"},"scope":2448,"src":"1216:174:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2426,"nodeType":"Block","src":"1603:347:10","statements":[{"assignments":[2362],"declarations":[{"constant":false,"id":2362,"mutability":"mutable","name":"buffer","nameLocation":"1626:6:10","nodeType":"VariableDeclaration","scope":2426,"src":"1613:19:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2361,"name":"bytes","nodeType":"ElementaryTypeName","src":"1613:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2371,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2367,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1645:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2366,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2356,"src":"1649:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1645:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":2368,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1658:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1645:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2364,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1635:9:10","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":2363,"name":"bytes","nodeType":"ElementaryTypeName","src":"1639:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":2370,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1635:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1613:47:10"},{"expression":{"id":2376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2372,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2362,"src":"1670:6:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2374,"indexExpression":{"hexValue":"30","id":2373,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1677:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1670:9:10","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":2375,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1682:3:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1670:15:10","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2377,"nodeType":"ExpressionStatement","src":"1670:15:10"},{"expression":{"id":2382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2378,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2362,"src":"1695:6:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2380,"indexExpression":{"hexValue":"31","id":2379,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1702:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1695:9:10","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":2381,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1707:3:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"1695:15:10","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2383,"nodeType":"ExpressionStatement","src":"1695:15:10"},{"body":{"id":2412,"nodeType":"Block","src":"1765:83:10","statements":[{"expression":{"id":2406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2398,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2362,"src":"1779:6:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2400,"indexExpression":{"id":2399,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2385,"src":"1786:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1779:9:10","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":2401,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"1791:8:10","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":2405,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2402,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2354,"src":"1800:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":2403,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1808:3:10","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"1800:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1791:21:10","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"1779:33:10","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2407,"nodeType":"ExpressionStatement","src":"1779:33:10"},{"expression":{"id":2410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2408,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2354,"src":"1826:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2409,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1836:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"1826:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2411,"nodeType":"ExpressionStatement","src":"1826:11:10"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2392,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2385,"src":"1753:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":2393,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1757:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1753:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2413,"initializationExpression":{"assignments":[2385],"declarations":[{"constant":false,"id":2385,"mutability":"mutable","name":"i","nameLocation":"1733:1:10","nodeType":"VariableDeclaration","scope":2413,"src":"1725:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2384,"name":"uint256","nodeType":"ElementaryTypeName","src":"1725:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2391,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2386,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1737:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2387,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2356,"src":"1741:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1737:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2389,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1750:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1737:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1725:26:10"},"loopExpression":{"expression":{"id":2396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"1760:3:10","subExpression":{"id":2395,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2385,"src":"1762:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2397,"nodeType":"ExpressionStatement","src":"1760:3:10"},"nodeType":"ForStatement","src":"1720:128:10"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2415,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2354,"src":"1865:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2416,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1874:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1865:10:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":2418,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1877:34:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":2414,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1857:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2419,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1857:55:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2420,"nodeType":"ExpressionStatement","src":"1857:55:10"},{"expression":{"arguments":[{"id":2423,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2362,"src":"1936:6:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2422,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1929:6:10","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":2421,"name":"string","nodeType":"ElementaryTypeName","src":"1929:6:10","typeDescriptions":{}}},"id":2424,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1929:14:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2360,"id":2425,"nodeType":"Return","src":"1922:21:10"}]},"documentation":{"id":2352,"nodeType":"StructuredDocumentation","src":"1396:112:10","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":2427,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1522:11:10","nodeType":"FunctionDefinition","parameters":{"id":2357,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2354,"mutability":"mutable","name":"value","nameLocation":"1542:5:10","nodeType":"VariableDeclaration","scope":2427,"src":"1534:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2353,"name":"uint256","nodeType":"ElementaryTypeName","src":"1534:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2356,"mutability":"mutable","name":"length","nameLocation":"1557:6:10","nodeType":"VariableDeclaration","scope":2427,"src":"1549:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2355,"name":"uint256","nodeType":"ElementaryTypeName","src":"1549:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1533:31:10"},"returnParameters":{"id":2360,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2359,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2427,"src":"1588:13:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2358,"name":"string","nodeType":"ElementaryTypeName","src":"1588:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1587:15:10"},"scope":2448,"src":"1513:437:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2446,"nodeType":"Block","src":"2175:76:10","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":2440,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2430,"src":"2220:4:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2439,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2212:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2438,"name":"uint160","nodeType":"ElementaryTypeName","src":"2212:7:10","typeDescriptions":{}}},"id":2441,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2212:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2437,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2204:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2436,"name":"uint256","nodeType":"ElementaryTypeName","src":"2204:7:10","typeDescriptions":{}}},"id":2442,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2204:22:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2443,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2283,"src":"2228:15:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2435,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[2351,2427,2447],"referencedDeclaration":2427,"src":"2192:11:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":2444,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2192:52:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2434,"id":2445,"nodeType":"Return","src":"2185:59:10"}]},"documentation":{"id":2428,"nodeType":"StructuredDocumentation","src":"1956:141:10","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":2447,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2111:11:10","nodeType":"FunctionDefinition","parameters":{"id":2431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2430,"mutability":"mutable","name":"addr","nameLocation":"2131:4:10","nodeType":"VariableDeclaration","scope":2447,"src":"2123:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2429,"name":"address","nodeType":"ElementaryTypeName","src":"2123:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2122:14:10"},"returnParameters":{"id":2434,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2433,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2447,"src":"2160:13:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2432,"name":"string","nodeType":"ElementaryTypeName","src":"2160:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2159:15:10"},"scope":2448,"src":"2102:149:10","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2449,"src":"188:2065:10","usedErrors":[]}],"src":"101:2153:10"},"id":10},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","exportedSymbols":{"MerkleProof":[2950]},"id":2951,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2450,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"118:23:11"},{"abstract":false,"baseContracts":[],"canonicalName":"MerkleProof","contractDependencies":[],"contractKind":"library","documentation":{"id":2451,"nodeType":"StructuredDocumentation","src":"143:658:11","text":" @dev These functions deal with verification of Merkle Tree proofs.\n The tree and the proofs can be generated using our\n https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n You will find a quickstart guide in the readme.\n WARNING: You should avoid using leaf values that are 64 bytes long prior to\n hashing, or use a hash function other than keccak256 for hashing leaves.\n This is because the concatenation of a sorted pair of internal nodes in\n the merkle tree could be reinterpreted as a leaf value.\n OpenZeppelin's JavaScript library generates merkle trees that are safe\n against this attack out of the box."},"fullyImplemented":true,"id":2950,"linearizedBaseContracts":[2950],"name":"MerkleProof","nameLocation":"810:11:11","nodeType":"ContractDefinition","nodes":[{"body":{"id":2471,"nodeType":"Block","src":"1283:57:11","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2469,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2465,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2455,"src":"1313:5:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":2466,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2459,"src":"1320:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2464,"name":"processProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2533,"src":"1300:12:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bytes32) pure returns (bytes32)"}},"id":2467,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1300:25:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2468,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2457,"src":"1329:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1300:33:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2463,"id":2470,"nodeType":"Return","src":"1293:40:11"}]},"documentation":{"id":2452,"nodeType":"StructuredDocumentation","src":"828:323:11","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted."},"id":2472,"implemented":true,"kind":"function","modifiers":[],"name":"verify","nameLocation":"1165:6:11","nodeType":"FunctionDefinition","parameters":{"id":2460,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2455,"mutability":"mutable","name":"proof","nameLocation":"1198:5:11","nodeType":"VariableDeclaration","scope":2472,"src":"1181:22:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2453,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1181:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2454,"nodeType":"ArrayTypeName","src":"1181:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2457,"mutability":"mutable","name":"root","nameLocation":"1221:4:11","nodeType":"VariableDeclaration","scope":2472,"src":"1213:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2456,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1213:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2459,"mutability":"mutable","name":"leaf","nameLocation":"1243:4:11","nodeType":"VariableDeclaration","scope":2472,"src":"1235:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2458,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1235:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1171:82:11"},"returnParameters":{"id":2463,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2462,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2472,"src":"1277:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2461,"name":"bool","nodeType":"ElementaryTypeName","src":"1277:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1276:6:11"},"scope":2950,"src":"1156:184:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2492,"nodeType":"Block","src":"1578:65:11","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2486,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2476,"src":"1616:5:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":2487,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2480,"src":"1623:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2485,"name":"processProofCalldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2573,"src":"1595:20:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bytes32) pure returns (bytes32)"}},"id":2488,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1595:33:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2489,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2478,"src":"1632:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1595:41:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2484,"id":2491,"nodeType":"Return","src":"1588:48:11"}]},"documentation":{"id":2473,"nodeType":"StructuredDocumentation","src":"1346:90:11","text":" @dev Calldata version of {verify}\n _Available since v4.7._"},"id":2493,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCalldata","nameLocation":"1450:14:11","nodeType":"FunctionDefinition","parameters":{"id":2481,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2476,"mutability":"mutable","name":"proof","nameLocation":"1493:5:11","nodeType":"VariableDeclaration","scope":2493,"src":"1474:24:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2474,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1474:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2475,"nodeType":"ArrayTypeName","src":"1474:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2478,"mutability":"mutable","name":"root","nameLocation":"1516:4:11","nodeType":"VariableDeclaration","scope":2493,"src":"1508:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2477,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1508:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2480,"mutability":"mutable","name":"leaf","nameLocation":"1538:4:11","nodeType":"VariableDeclaration","scope":2493,"src":"1530:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2479,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1530:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1464:84:11"},"returnParameters":{"id":2484,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2483,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2493,"src":"1572:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2482,"name":"bool","nodeType":"ElementaryTypeName","src":"1572:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1571:6:11"},"scope":2950,"src":"1441:202:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2532,"nodeType":"Block","src":"2086:198:11","statements":[{"assignments":[2505],"declarations":[{"constant":false,"id":2505,"mutability":"mutable","name":"computedHash","nameLocation":"2104:12:11","nodeType":"VariableDeclaration","scope":2532,"src":"2096:20:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2504,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2096:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2507,"initialValue":{"id":2506,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2499,"src":"2119:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2096:27:11"},{"body":{"id":2528,"nodeType":"Block","src":"2176:73:11","statements":[{"expression":{"id":2526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2519,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"2190:12:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2521,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"2215:12:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":2522,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2497,"src":"2229:5:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2524,"indexExpression":{"id":2523,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2509,"src":"2235:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2229:8:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2520,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2938,"src":"2205:9:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":2525,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2205:33:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2190:48:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2527,"nodeType":"ExpressionStatement","src":"2190:48:11"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2512,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2509,"src":"2153:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2513,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2497,"src":"2157:5:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2163:6:11","memberName":"length","nodeType":"MemberAccess","src":"2157:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2153:16:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2529,"initializationExpression":{"assignments":[2509],"declarations":[{"constant":false,"id":2509,"mutability":"mutable","name":"i","nameLocation":"2146:1:11","nodeType":"VariableDeclaration","scope":2529,"src":"2138:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2508,"name":"uint256","nodeType":"ElementaryTypeName","src":"2138:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2511,"initialValue":{"hexValue":"30","id":2510,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2150:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2138:13:11"},"loopExpression":{"expression":{"id":2517,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2171:3:11","subExpression":{"id":2516,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2509,"src":"2171:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2518,"nodeType":"ExpressionStatement","src":"2171:3:11"},"nodeType":"ForStatement","src":"2133:116:11"},{"expression":{"id":2530,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"2265:12:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2503,"id":2531,"nodeType":"Return","src":"2258:19:11"}]},"documentation":{"id":2494,"nodeType":"StructuredDocumentation","src":"1649:340:11","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leafs & pre-images are assumed to be sorted.\n _Available since v4.4._"},"id":2533,"implemented":true,"kind":"function","modifiers":[],"name":"processProof","nameLocation":"2003:12:11","nodeType":"FunctionDefinition","parameters":{"id":2500,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2497,"mutability":"mutable","name":"proof","nameLocation":"2033:5:11","nodeType":"VariableDeclaration","scope":2533,"src":"2016:22:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2495,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2016:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2496,"nodeType":"ArrayTypeName","src":"2016:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2499,"mutability":"mutable","name":"leaf","nameLocation":"2048:4:11","nodeType":"VariableDeclaration","scope":2533,"src":"2040:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2498,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2040:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2015:38:11"},"returnParameters":{"id":2503,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2502,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2533,"src":"2077:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2501,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2077:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2076:9:11"},"scope":2950,"src":"1994:290:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2572,"nodeType":"Block","src":"2493:198:11","statements":[{"assignments":[2545],"declarations":[{"constant":false,"id":2545,"mutability":"mutable","name":"computedHash","nameLocation":"2511:12:11","nodeType":"VariableDeclaration","scope":2572,"src":"2503:20:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2544,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2503:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2547,"initialValue":{"id":2546,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2539,"src":"2526:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2503:27:11"},{"body":{"id":2568,"nodeType":"Block","src":"2583:73:11","statements":[{"expression":{"id":2566,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2559,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2545,"src":"2597:12:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2561,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2545,"src":"2622:12:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":2562,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2537,"src":"2636:5:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":2564,"indexExpression":{"id":2563,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2549,"src":"2642:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2636:8:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2560,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2938,"src":"2612:9:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":2565,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2612:33:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2597:48:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2567,"nodeType":"ExpressionStatement","src":"2597:48:11"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2552,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2549,"src":"2560:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2553,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2537,"src":"2564:5:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":2554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2570:6:11","memberName":"length","nodeType":"MemberAccess","src":"2564:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2560:16:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2569,"initializationExpression":{"assignments":[2549],"declarations":[{"constant":false,"id":2549,"mutability":"mutable","name":"i","nameLocation":"2553:1:11","nodeType":"VariableDeclaration","scope":2569,"src":"2545:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2548,"name":"uint256","nodeType":"ElementaryTypeName","src":"2545:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2551,"initialValue":{"hexValue":"30","id":2550,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2557:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2545:13:11"},"loopExpression":{"expression":{"id":2557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2578:3:11","subExpression":{"id":2556,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2549,"src":"2578:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2558,"nodeType":"ExpressionStatement","src":"2578:3:11"},"nodeType":"ForStatement","src":"2540:116:11"},{"expression":{"id":2570,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2545,"src":"2672:12:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2543,"id":2571,"nodeType":"Return","src":"2665:19:11"}]},"documentation":{"id":2534,"nodeType":"StructuredDocumentation","src":"2290:96:11","text":" @dev Calldata version of {processProof}\n _Available since v4.7._"},"id":2573,"implemented":true,"kind":"function","modifiers":[],"name":"processProofCalldata","nameLocation":"2400:20:11","nodeType":"FunctionDefinition","parameters":{"id":2540,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2537,"mutability":"mutable","name":"proof","nameLocation":"2440:5:11","nodeType":"VariableDeclaration","scope":2573,"src":"2421:24:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2535,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2421:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2536,"nodeType":"ArrayTypeName","src":"2421:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2539,"mutability":"mutable","name":"leaf","nameLocation":"2455:4:11","nodeType":"VariableDeclaration","scope":2573,"src":"2447:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2538,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2447:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2420:40:11"},"returnParameters":{"id":2543,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2542,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2573,"src":"2484:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2541,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2484:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2483:9:11"},"scope":2950,"src":"2391:300:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2598,"nodeType":"Block","src":"3234:76:11","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2591,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2577,"src":"3269:5:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":2592,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2580,"src":"3276:10:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},{"id":2593,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2585,"src":"3288:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":2590,"name":"processMultiProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2770,"src":"3251:17:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bool[] memory,bytes32[] memory) pure returns (bytes32)"}},"id":2594,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3251:44:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2595,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2582,"src":"3299:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3251:52:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2589,"id":2597,"nodeType":"Return","src":"3244:59:11"}]},"documentation":{"id":2574,"nodeType":"StructuredDocumentation","src":"2697:350:11","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":2599,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerify","nameLocation":"3061:16:11","nodeType":"FunctionDefinition","parameters":{"id":2586,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2577,"mutability":"mutable","name":"proof","nameLocation":"3104:5:11","nodeType":"VariableDeclaration","scope":2599,"src":"3087:22:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2575,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3087:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2576,"nodeType":"ArrayTypeName","src":"3087:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2580,"mutability":"mutable","name":"proofFlags","nameLocation":"3133:10:11","nodeType":"VariableDeclaration","scope":2599,"src":"3119:24:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":2578,"name":"bool","nodeType":"ElementaryTypeName","src":"3119:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2579,"nodeType":"ArrayTypeName","src":"3119:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":2582,"mutability":"mutable","name":"root","nameLocation":"3161:4:11","nodeType":"VariableDeclaration","scope":2599,"src":"3153:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2581,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3153:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2585,"mutability":"mutable","name":"leaves","nameLocation":"3192:6:11","nodeType":"VariableDeclaration","scope":2599,"src":"3175:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2583,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3175:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2584,"nodeType":"ArrayTypeName","src":"3175:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"3077:127:11"},"returnParameters":{"id":2589,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2588,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2599,"src":"3228:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2587,"name":"bool","nodeType":"ElementaryTypeName","src":"3228:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3227:6:11"},"scope":2950,"src":"3052:258:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2624,"nodeType":"Block","src":"3715:84:11","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2617,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2603,"src":"3758:5:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":2618,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2606,"src":"3765:10:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},{"id":2619,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2611,"src":"3777:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":2616,"name":"processMultiProofCalldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2915,"src":"3732:25:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_bool_$dyn_calldata_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bool[] calldata,bytes32[] memory) pure returns (bytes32)"}},"id":2620,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3732:52:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2621,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2608,"src":"3788:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3732:60:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2615,"id":2623,"nodeType":"Return","src":"3725:67:11"}]},"documentation":{"id":2600,"nodeType":"StructuredDocumentation","src":"3316:200:11","text":" @dev Calldata version of {multiProofVerify}\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":2625,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerifyCalldata","nameLocation":"3530:24:11","nodeType":"FunctionDefinition","parameters":{"id":2612,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2603,"mutability":"mutable","name":"proof","nameLocation":"3583:5:11","nodeType":"VariableDeclaration","scope":2625,"src":"3564:24:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2601,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3564:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2602,"nodeType":"ArrayTypeName","src":"3564:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2606,"mutability":"mutable","name":"proofFlags","nameLocation":"3614:10:11","nodeType":"VariableDeclaration","scope":2625,"src":"3598:26:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":2604,"name":"bool","nodeType":"ElementaryTypeName","src":"3598:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2605,"nodeType":"ArrayTypeName","src":"3598:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":2608,"mutability":"mutable","name":"root","nameLocation":"3642:4:11","nodeType":"VariableDeclaration","scope":2625,"src":"3634:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2607,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3634:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2611,"mutability":"mutable","name":"leaves","nameLocation":"3673:6:11","nodeType":"VariableDeclaration","scope":2625,"src":"3656:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2609,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3656:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2610,"nodeType":"ArrayTypeName","src":"3656:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"3554:131:11"},"returnParameters":{"id":2615,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2614,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2625,"src":"3709:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2613,"name":"bool","nodeType":"ElementaryTypeName","src":"3709:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3708:6:11"},"scope":2950,"src":"3521:278:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2769,"nodeType":"Block","src":"4753:1860:11","statements":[{"assignments":[2641],"declarations":[{"constant":false,"id":2641,"mutability":"mutable","name":"leavesLen","nameLocation":"5144:9:11","nodeType":"VariableDeclaration","scope":2769,"src":"5136:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2640,"name":"uint256","nodeType":"ElementaryTypeName","src":"5136:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2644,"initialValue":{"expression":{"id":2642,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2635,"src":"5156:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5163:6:11","memberName":"length","nodeType":"MemberAccess","src":"5156:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5136:33:11"},{"assignments":[2646],"declarations":[{"constant":false,"id":2646,"mutability":"mutable","name":"totalHashes","nameLocation":"5187:11:11","nodeType":"VariableDeclaration","scope":2769,"src":"5179:19:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2645,"name":"uint256","nodeType":"ElementaryTypeName","src":"5179:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2649,"initialValue":{"expression":{"id":2647,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2632,"src":"5201:10:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":2648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5212:6:11","memberName":"length","nodeType":"MemberAccess","src":"5201:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5179:39:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2651,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2641,"src":"5270:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":2652,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2629,"src":"5282:5:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5288:6:11","memberName":"length","nodeType":"MemberAccess","src":"5282:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5270:24:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2655,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5297:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5270:28:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2657,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2646,"src":"5302:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5270:43:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d65726b6c6550726f6f663a20696e76616c6964206d756c746970726f6f66","id":2659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5315:33:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""},"value":"MerkleProof: invalid multiproof"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""}],"id":2650,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5262:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2660,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5262:87:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2661,"nodeType":"ExpressionStatement","src":"5262:87:11"},{"assignments":[2666],"declarations":[{"constant":false,"id":2666,"mutability":"mutable","name":"hashes","nameLocation":"5611:6:11","nodeType":"VariableDeclaration","scope":2769,"src":"5594:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2664,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5594:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2665,"nodeType":"ArrayTypeName","src":"5594:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":2672,"initialValue":{"arguments":[{"id":2670,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2646,"src":"5634:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2669,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"5620:13:11","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":2667,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5624:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2668,"nodeType":"ArrayTypeName","src":"5624:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":2671,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5620:26:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"5594:52:11"},{"assignments":[2674],"declarations":[{"constant":false,"id":2674,"mutability":"mutable","name":"leafPos","nameLocation":"5664:7:11","nodeType":"VariableDeclaration","scope":2769,"src":"5656:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2673,"name":"uint256","nodeType":"ElementaryTypeName","src":"5656:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2676,"initialValue":{"hexValue":"30","id":2675,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5674:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5656:19:11"},{"assignments":[2678],"declarations":[{"constant":false,"id":2678,"mutability":"mutable","name":"hashPos","nameLocation":"5693:7:11","nodeType":"VariableDeclaration","scope":2769,"src":"5685:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2677,"name":"uint256","nodeType":"ElementaryTypeName","src":"5685:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2680,"initialValue":{"hexValue":"30","id":2679,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5703:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5685:19:11"},{"assignments":[2682],"declarations":[{"constant":false,"id":2682,"mutability":"mutable","name":"proofPos","nameLocation":"5722:8:11","nodeType":"VariableDeclaration","scope":2769,"src":"5714:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2681,"name":"uint256","nodeType":"ElementaryTypeName","src":"5714:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2684,"initialValue":{"hexValue":"30","id":2683,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5733:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5714:20:11"},{"body":{"id":2742,"nodeType":"Block","src":"6151:258:11","statements":[{"assignments":[2696],"declarations":[{"constant":false,"id":2696,"mutability":"mutable","name":"a","nameLocation":"6173:1:11","nodeType":"VariableDeclaration","scope":2742,"src":"6165:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2695,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6165:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2709,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2697,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2674,"src":"6177:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2698,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2641,"src":"6187:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6177:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":2704,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2666,"src":"6219:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2707,"indexExpression":{"id":2706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6226:9:11","subExpression":{"id":2705,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2678,"src":"6226:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6219:17:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6177:59:11","trueExpression":{"baseExpression":{"id":2700,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2635,"src":"6199:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2703,"indexExpression":{"id":2702,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6206:9:11","subExpression":{"id":2701,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2674,"src":"6206:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6199:17:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6165:71:11"},{"assignments":[2711],"declarations":[{"constant":false,"id":2711,"mutability":"mutable","name":"b","nameLocation":"6258:1:11","nodeType":"VariableDeclaration","scope":2742,"src":"6250:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2710,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6250:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2732,"initialValue":{"condition":{"baseExpression":{"id":2712,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2632,"src":"6262:10:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":2714,"indexExpression":{"id":2713,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2686,"src":"6273:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6262:13:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":2727,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2629,"src":"6340:5:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2730,"indexExpression":{"id":2729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6346:10:11","subExpression":{"id":2728,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2682,"src":"6346:8:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6340:17:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2731,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6262:95:11","trueExpression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2715,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2674,"src":"6278:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2716,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2641,"src":"6288:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6278:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":2722,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2666,"src":"6320:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2725,"indexExpression":{"id":2724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6327:9:11","subExpression":{"id":2723,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2678,"src":"6327:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6320:17:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6278:59:11","trueExpression":{"baseExpression":{"id":2718,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2635,"src":"6300:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2721,"indexExpression":{"id":2720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6307:9:11","subExpression":{"id":2719,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2674,"src":"6307:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6300:17:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6250:107:11"},{"expression":{"id":2740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2733,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2666,"src":"6371:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2735,"indexExpression":{"id":2734,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2686,"src":"6378:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6371:9:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2737,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2696,"src":"6393:1:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2738,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2711,"src":"6396:1:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2736,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2938,"src":"6383:9:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":2739,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6383:15:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6371:27:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2741,"nodeType":"ExpressionStatement","src":"6371:27:11"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2689,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2686,"src":"6129:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2690,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2646,"src":"6133:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6129:15:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2743,"initializationExpression":{"assignments":[2686],"declarations":[{"constant":false,"id":2686,"mutability":"mutable","name":"i","nameLocation":"6122:1:11","nodeType":"VariableDeclaration","scope":2743,"src":"6114:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2685,"name":"uint256","nodeType":"ElementaryTypeName","src":"6114:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2688,"initialValue":{"hexValue":"30","id":2687,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6126:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6114:13:11"},"loopExpression":{"expression":{"id":2693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6146:3:11","subExpression":{"id":2692,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2686,"src":"6146:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2694,"nodeType":"ExpressionStatement","src":"6146:3:11"},"nodeType":"ForStatement","src":"6109:300:11"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2744,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2646,"src":"6423:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2745,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6437:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6423:15:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2754,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2641,"src":"6505:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2755,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6517:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6505:13:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2766,"nodeType":"Block","src":"6567:40:11","statements":[{"expression":{"baseExpression":{"id":2762,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2629,"src":"6588:5:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2764,"indexExpression":{"hexValue":"30","id":2763,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6594:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6588:8:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2639,"id":2765,"nodeType":"Return","src":"6581:15:11"}]},"id":2767,"nodeType":"IfStatement","src":"6501:106:11","trueBody":{"id":2761,"nodeType":"Block","src":"6520:41:11","statements":[{"expression":{"baseExpression":{"id":2757,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2635,"src":"6541:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2759,"indexExpression":{"hexValue":"30","id":2758,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6548:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6541:9:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2639,"id":2760,"nodeType":"Return","src":"6534:16:11"}]}},"id":2768,"nodeType":"IfStatement","src":"6419:188:11","trueBody":{"id":2753,"nodeType":"Block","src":"6440:55:11","statements":[{"expression":{"baseExpression":{"id":2747,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2666,"src":"6461:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2751,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2748,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2646,"src":"6468:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2749,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6482:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6468:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6461:23:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2639,"id":2752,"nodeType":"Return","src":"6454:30:11"}]}}]},"documentation":{"id":2626,"nodeType":"StructuredDocumentation","src":"3805:768:11","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n _Available since v4.7._"},"id":2770,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProof","nameLocation":"4587:17:11","nodeType":"FunctionDefinition","parameters":{"id":2636,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2629,"mutability":"mutable","name":"proof","nameLocation":"4631:5:11","nodeType":"VariableDeclaration","scope":2770,"src":"4614:22:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2627,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4614:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2628,"nodeType":"ArrayTypeName","src":"4614:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2632,"mutability":"mutable","name":"proofFlags","nameLocation":"4660:10:11","nodeType":"VariableDeclaration","scope":2770,"src":"4646:24:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":2630,"name":"bool","nodeType":"ElementaryTypeName","src":"4646:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2631,"nodeType":"ArrayTypeName","src":"4646:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":2635,"mutability":"mutable","name":"leaves","nameLocation":"4697:6:11","nodeType":"VariableDeclaration","scope":2770,"src":"4680:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2633,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4680:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2634,"nodeType":"ArrayTypeName","src":"4680:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"4604:105:11"},"returnParameters":{"id":2639,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2638,"mutability":"mutable","name":"merkleRoot","nameLocation":"4741:10:11","nodeType":"VariableDeclaration","scope":2770,"src":"4733:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2637,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4733:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4732:20:11"},"scope":2950,"src":"4578:2035:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2914,"nodeType":"Block","src":"7013:1860:11","statements":[{"assignments":[2786],"declarations":[{"constant":false,"id":2786,"mutability":"mutable","name":"leavesLen","nameLocation":"7404:9:11","nodeType":"VariableDeclaration","scope":2914,"src":"7396:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2785,"name":"uint256","nodeType":"ElementaryTypeName","src":"7396:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2789,"initialValue":{"expression":{"id":2787,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2780,"src":"7416:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7423:6:11","memberName":"length","nodeType":"MemberAccess","src":"7416:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7396:33:11"},{"assignments":[2791],"declarations":[{"constant":false,"id":2791,"mutability":"mutable","name":"totalHashes","nameLocation":"7447:11:11","nodeType":"VariableDeclaration","scope":2914,"src":"7439:19:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2790,"name":"uint256","nodeType":"ElementaryTypeName","src":"7439:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2794,"initialValue":{"expression":{"id":2792,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2777,"src":"7461:10:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":2793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7472:6:11","memberName":"length","nodeType":"MemberAccess","src":"7461:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7439:39:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2796,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2786,"src":"7530:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":2797,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2774,"src":"7542:5:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":2798,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7548:6:11","memberName":"length","nodeType":"MemberAccess","src":"7542:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7530:24:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7557:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7530:28:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2802,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2791,"src":"7562:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7530:43:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d65726b6c6550726f6f663a20696e76616c6964206d756c746970726f6f66","id":2804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7575:33:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""},"value":"MerkleProof: invalid multiproof"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""}],"id":2795,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7522:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2805,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7522:87:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2806,"nodeType":"ExpressionStatement","src":"7522:87:11"},{"assignments":[2811],"declarations":[{"constant":false,"id":2811,"mutability":"mutable","name":"hashes","nameLocation":"7871:6:11","nodeType":"VariableDeclaration","scope":2914,"src":"7854:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2809,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7854:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2810,"nodeType":"ArrayTypeName","src":"7854:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":2817,"initialValue":{"arguments":[{"id":2815,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2791,"src":"7894:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2814,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"7880:13:11","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":2812,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7884:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2813,"nodeType":"ArrayTypeName","src":"7884:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":2816,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7880:26:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"7854:52:11"},{"assignments":[2819],"declarations":[{"constant":false,"id":2819,"mutability":"mutable","name":"leafPos","nameLocation":"7924:7:11","nodeType":"VariableDeclaration","scope":2914,"src":"7916:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2818,"name":"uint256","nodeType":"ElementaryTypeName","src":"7916:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2821,"initialValue":{"hexValue":"30","id":2820,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7934:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7916:19:11"},{"assignments":[2823],"declarations":[{"constant":false,"id":2823,"mutability":"mutable","name":"hashPos","nameLocation":"7953:7:11","nodeType":"VariableDeclaration","scope":2914,"src":"7945:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2822,"name":"uint256","nodeType":"ElementaryTypeName","src":"7945:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2825,"initialValue":{"hexValue":"30","id":2824,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7963:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7945:19:11"},{"assignments":[2827],"declarations":[{"constant":false,"id":2827,"mutability":"mutable","name":"proofPos","nameLocation":"7982:8:11","nodeType":"VariableDeclaration","scope":2914,"src":"7974:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2826,"name":"uint256","nodeType":"ElementaryTypeName","src":"7974:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2829,"initialValue":{"hexValue":"30","id":2828,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7993:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7974:20:11"},{"body":{"id":2887,"nodeType":"Block","src":"8411:258:11","statements":[{"assignments":[2841],"declarations":[{"constant":false,"id":2841,"mutability":"mutable","name":"a","nameLocation":"8433:1:11","nodeType":"VariableDeclaration","scope":2887,"src":"8425:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2840,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8425:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2854,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2842,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2819,"src":"8437:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2843,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2786,"src":"8447:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8437:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":2849,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2811,"src":"8479:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2852,"indexExpression":{"id":2851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8486:9:11","subExpression":{"id":2850,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2823,"src":"8486:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8479:17:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8437:59:11","trueExpression":{"baseExpression":{"id":2845,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2780,"src":"8459:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2848,"indexExpression":{"id":2847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8466:9:11","subExpression":{"id":2846,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2819,"src":"8466:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8459:17:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"8425:71:11"},{"assignments":[2856],"declarations":[{"constant":false,"id":2856,"mutability":"mutable","name":"b","nameLocation":"8518:1:11","nodeType":"VariableDeclaration","scope":2887,"src":"8510:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2855,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8510:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2877,"initialValue":{"condition":{"baseExpression":{"id":2857,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2777,"src":"8522:10:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":2859,"indexExpression":{"id":2858,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2831,"src":"8533:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8522:13:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":2872,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2774,"src":"8600:5:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":2875,"indexExpression":{"id":2874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8606:10:11","subExpression":{"id":2873,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2827,"src":"8606:8:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8600:17:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8522:95:11","trueExpression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2860,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2819,"src":"8538:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2861,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2786,"src":"8548:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8538:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":2867,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2811,"src":"8580:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2870,"indexExpression":{"id":2869,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8587:9:11","subExpression":{"id":2868,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2823,"src":"8587:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8580:17:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2871,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8538:59:11","trueExpression":{"baseExpression":{"id":2863,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2780,"src":"8560:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2866,"indexExpression":{"id":2865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8567:9:11","subExpression":{"id":2864,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2819,"src":"8567:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8560:17:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"8510:107:11"},{"expression":{"id":2885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2878,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2811,"src":"8631:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2880,"indexExpression":{"id":2879,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2831,"src":"8638:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8631:9:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2882,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2841,"src":"8653:1:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2883,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2856,"src":"8656:1:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2881,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2938,"src":"8643:9:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":2884,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8643:15:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"8631:27:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2886,"nodeType":"ExpressionStatement","src":"8631:27:11"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2834,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2831,"src":"8389:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2835,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2791,"src":"8393:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8389:15:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2888,"initializationExpression":{"assignments":[2831],"declarations":[{"constant":false,"id":2831,"mutability":"mutable","name":"i","nameLocation":"8382:1:11","nodeType":"VariableDeclaration","scope":2888,"src":"8374:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2830,"name":"uint256","nodeType":"ElementaryTypeName","src":"8374:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2833,"initialValue":{"hexValue":"30","id":2832,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8386:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8374:13:11"},"loopExpression":{"expression":{"id":2838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8406:3:11","subExpression":{"id":2837,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2831,"src":"8406:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2839,"nodeType":"ExpressionStatement","src":"8406:3:11"},"nodeType":"ForStatement","src":"8369:300:11"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2889,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2791,"src":"8683:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2890,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8697:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8683:15:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2901,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2899,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2786,"src":"8765:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2900,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8777:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8765:13:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2911,"nodeType":"Block","src":"8827:40:11","statements":[{"expression":{"baseExpression":{"id":2907,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2774,"src":"8848:5:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":2909,"indexExpression":{"hexValue":"30","id":2908,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8854:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8848:8:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2784,"id":2910,"nodeType":"Return","src":"8841:15:11"}]},"id":2912,"nodeType":"IfStatement","src":"8761:106:11","trueBody":{"id":2906,"nodeType":"Block","src":"8780:41:11","statements":[{"expression":{"baseExpression":{"id":2902,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2780,"src":"8801:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2904,"indexExpression":{"hexValue":"30","id":2903,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8808:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8801:9:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2784,"id":2905,"nodeType":"Return","src":"8794:16:11"}]}},"id":2913,"nodeType":"IfStatement","src":"8679:188:11","trueBody":{"id":2898,"nodeType":"Block","src":"8700:55:11","statements":[{"expression":{"baseExpression":{"id":2892,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2811,"src":"8721:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2896,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2893,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2791,"src":"8728:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2894,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8742:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8728:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8721:23:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2784,"id":2897,"nodeType":"Return","src":"8714:30:11"}]}}]},"documentation":{"id":2771,"nodeType":"StructuredDocumentation","src":"6619:202:11","text":" @dev Calldata version of {processMultiProof}.\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":2915,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProofCalldata","nameLocation":"6835:25:11","nodeType":"FunctionDefinition","parameters":{"id":2781,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2774,"mutability":"mutable","name":"proof","nameLocation":"6889:5:11","nodeType":"VariableDeclaration","scope":2915,"src":"6870:24:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2772,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6870:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2773,"nodeType":"ArrayTypeName","src":"6870:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2777,"mutability":"mutable","name":"proofFlags","nameLocation":"6920:10:11","nodeType":"VariableDeclaration","scope":2915,"src":"6904:26:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":2775,"name":"bool","nodeType":"ElementaryTypeName","src":"6904:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2776,"nodeType":"ArrayTypeName","src":"6904:6:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":2780,"mutability":"mutable","name":"leaves","nameLocation":"6957:6:11","nodeType":"VariableDeclaration","scope":2915,"src":"6940:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2778,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6940:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2779,"nodeType":"ArrayTypeName","src":"6940:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"6860:109:11"},"returnParameters":{"id":2784,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2783,"mutability":"mutable","name":"merkleRoot","nameLocation":"7001:10:11","nodeType":"VariableDeclaration","scope":2915,"src":"6993:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2782,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6993:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6992:20:11"},"scope":2950,"src":"6826:2047:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2937,"nodeType":"Block","src":"8951:75:11","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2924,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2917,"src":"8968:1:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2925,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2919,"src":"8972:1:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"8968:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":2932,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2919,"src":"9014:1:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2933,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2917,"src":"9017:1:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2931,"name":"_efficientHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2949,"src":"8999:14:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":2934,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8999:20:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8968:51:11","trueExpression":{"arguments":[{"id":2928,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2917,"src":"8991:1:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2929,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2919,"src":"8994:1:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2927,"name":"_efficientHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2949,"src":"8976:14:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":2930,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8976:20:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2923,"id":2936,"nodeType":"Return","src":"8961:58:11"}]},"id":2938,"implemented":true,"kind":"function","modifiers":[],"name":"_hashPair","nameLocation":"8888:9:11","nodeType":"FunctionDefinition","parameters":{"id":2920,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2917,"mutability":"mutable","name":"a","nameLocation":"8906:1:11","nodeType":"VariableDeclaration","scope":2938,"src":"8898:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2916,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8898:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2919,"mutability":"mutable","name":"b","nameLocation":"8917:1:11","nodeType":"VariableDeclaration","scope":2938,"src":"8909:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2918,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8909:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8897:22:11"},"returnParameters":{"id":2923,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2922,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2938,"src":"8942:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2921,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8942:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8941:9:11"},"scope":2950,"src":"8879:147:11","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":2948,"nodeType":"Block","src":"9115:178:11","statements":[{"AST":{"nodeType":"YulBlock","src":"9177:110:11","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9198:4:11","type":"","value":"0x00"},{"name":"a","nodeType":"YulIdentifier","src":"9204:1:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9191:6:11"},"nodeType":"YulFunctionCall","src":"9191:15:11"},"nodeType":"YulExpressionStatement","src":"9191:15:11"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9226:4:11","type":"","value":"0x20"},{"name":"b","nodeType":"YulIdentifier","src":"9232:1:11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9219:6:11"},"nodeType":"YulFunctionCall","src":"9219:15:11"},"nodeType":"YulExpressionStatement","src":"9219:15:11"},{"nodeType":"YulAssignment","src":"9247:30:11","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9266:4:11","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"9272:4:11","type":"","value":"0x40"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"9256:9:11"},"nodeType":"YulFunctionCall","src":"9256:21:11"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"9247:5:11"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2940,"isOffset":false,"isSlot":false,"src":"9204:1:11","valueSize":1},{"declaration":2942,"isOffset":false,"isSlot":false,"src":"9232:1:11","valueSize":1},{"declaration":2945,"isOffset":false,"isSlot":false,"src":"9247:5:11","valueSize":1}],"id":2947,"nodeType":"InlineAssembly","src":"9168:119:11"}]},"id":2949,"implemented":true,"kind":"function","modifiers":[],"name":"_efficientHash","nameLocation":"9041:14:11","nodeType":"FunctionDefinition","parameters":{"id":2943,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2940,"mutability":"mutable","name":"a","nameLocation":"9064:1:11","nodeType":"VariableDeclaration","scope":2949,"src":"9056:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2939,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9056:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2942,"mutability":"mutable","name":"b","nameLocation":"9075:1:11","nodeType":"VariableDeclaration","scope":2949,"src":"9067:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2941,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9067:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9055:22:11"},"returnParameters":{"id":2946,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2945,"mutability":"mutable","name":"value","nameLocation":"9108:5:11","nodeType":"VariableDeclaration","scope":2949,"src":"9100:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2944,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9100:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9099:15:11"},"scope":2950,"src":"9032:261:11","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":2951,"src":"802:8493:11","usedErrors":[]}],"src":"118:9178:11"},"id":11},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","exportedSymbols":{"ERC165":[2974],"IERC165":[2986]},"id":2975,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2952,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"99:23:12"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"./IERC165.sol","id":2953,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2975,"sourceUnit":2987,"src":"124:23:12","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2955,"name":"IERC165","nameLocations":["754:7:12"],"nodeType":"IdentifierPath","referencedDeclaration":2986,"src":"754:7:12"},"id":2956,"nodeType":"InheritanceSpecifier","src":"754:7:12"}],"canonicalName":"ERC165","contractDependencies":[],"contractKind":"contract","documentation":{"id":2954,"nodeType":"StructuredDocumentation","src":"149:576:12","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."},"fullyImplemented":true,"id":2974,"linearizedBaseContracts":[2974,2986],"name":"ERC165","nameLocation":"744:6:12","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[2985],"body":{"id":2972,"nodeType":"Block","src":"920:64:12","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2970,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2965,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2959,"src":"937:11:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":2967,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2986,"src":"957:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$2986_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$2986_$","typeString":"type(contract IERC165)"}],"id":2966,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"952:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2968,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"952:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$2986","typeString":"type(contract IERC165)"}},"id":2969,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"966:11:12","memberName":"interfaceId","nodeType":"MemberAccess","src":"952:25:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"937:40:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2964,"id":2971,"nodeType":"Return","src":"930:47:12"}]},"documentation":{"id":2957,"nodeType":"StructuredDocumentation","src":"768:56:12","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":2973,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"838:17:12","nodeType":"FunctionDefinition","overrides":{"id":2961,"nodeType":"OverrideSpecifier","overrides":[],"src":"896:8:12"},"parameters":{"id":2960,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2959,"mutability":"mutable","name":"interfaceId","nameLocation":"863:11:12","nodeType":"VariableDeclaration","scope":2973,"src":"856:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2958,"name":"bytes4","nodeType":"ElementaryTypeName","src":"856:6:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"855:20:12"},"returnParameters":{"id":2964,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2963,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2973,"src":"914:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2962,"name":"bool","nodeType":"ElementaryTypeName","src":"914:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"913:6:12"},"scope":2974,"src":"829:155:12","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":2975,"src":"726:260:12","usedErrors":[]}],"src":"99:888:12"},"id":12},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[2986]},"id":2987,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2976,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:13"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":2977,"nodeType":"StructuredDocumentation","src":"125:279:13","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":2986,"linearizedBaseContracts":[2986],"name":"IERC165","nameLocation":"415:7:13","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2978,"nodeType":"StructuredDocumentation","src":"429:340:13","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":2985,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"783:17:13","nodeType":"FunctionDefinition","parameters":{"id":2981,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2980,"mutability":"mutable","name":"interfaceId","nameLocation":"808:11:13","nodeType":"VariableDeclaration","scope":2985,"src":"801:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2979,"name":"bytes4","nodeType":"ElementaryTypeName","src":"801:6:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"800:20:13"},"returnParameters":{"id":2984,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2983,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2985,"src":"844:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2982,"name":"bool","nodeType":"ElementaryTypeName","src":"844:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"843:6:13"},"scope":2986,"src":"774:76:13","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2987,"src":"405:447:13","usedErrors":[]}],"src":"100:753:13"},"id":13},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[3851]},"id":3852,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2988,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:14"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":2989,"nodeType":"StructuredDocumentation","src":"128:73:14","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":3851,"linearizedBaseContracts":[3851],"name":"Math","nameLocation":"210:4:14","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":2993,"members":[{"id":2990,"name":"Down","nameLocation":"245:4:14","nodeType":"EnumValue","src":"245:4:14"},{"id":2991,"name":"Up","nameLocation":"287:2:14","nodeType":"EnumValue","src":"287:2:14"},{"id":2992,"name":"Zero","nameLocation":"318:4:14","nodeType":"EnumValue","src":"318:4:14"}],"name":"Rounding","nameLocation":"226:8:14","nodeType":"EnumDefinition","src":"221:122:14"},{"body":{"id":3010,"nodeType":"Block","src":"480:37:14","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3003,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2996,"src":"497:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3004,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2998,"src":"501:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"497:5:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3007,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2998,"src":"509:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"497:13:14","trueExpression":{"id":3006,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2996,"src":"505:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3002,"id":3009,"nodeType":"Return","src":"490:20:14"}]},"documentation":{"id":2994,"nodeType":"StructuredDocumentation","src":"349:59:14","text":" @dev Returns the largest of two numbers."},"id":3011,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"422:3:14","nodeType":"FunctionDefinition","parameters":{"id":2999,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2996,"mutability":"mutable","name":"a","nameLocation":"434:1:14","nodeType":"VariableDeclaration","scope":3011,"src":"426:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2995,"name":"uint256","nodeType":"ElementaryTypeName","src":"426:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2998,"mutability":"mutable","name":"b","nameLocation":"445:1:14","nodeType":"VariableDeclaration","scope":3011,"src":"437:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2997,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"425:22:14"},"returnParameters":{"id":3002,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3001,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3011,"src":"471:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3000,"name":"uint256","nodeType":"ElementaryTypeName","src":"471:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"470:9:14"},"scope":3851,"src":"413:104:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3028,"nodeType":"Block","src":"655:37:14","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3021,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3014,"src":"672:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3022,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3016,"src":"676:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"672:5:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3025,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3016,"src":"684:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3026,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"672:13:14","trueExpression":{"id":3024,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3014,"src":"680:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3020,"id":3027,"nodeType":"Return","src":"665:20:14"}]},"documentation":{"id":3012,"nodeType":"StructuredDocumentation","src":"523:60:14","text":" @dev Returns the smallest of two numbers."},"id":3029,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"597:3:14","nodeType":"FunctionDefinition","parameters":{"id":3017,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3014,"mutability":"mutable","name":"a","nameLocation":"609:1:14","nodeType":"VariableDeclaration","scope":3029,"src":"601:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3013,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3016,"mutability":"mutable","name":"b","nameLocation":"620:1:14","nodeType":"VariableDeclaration","scope":3029,"src":"612:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3015,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:14"},"returnParameters":{"id":3020,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3019,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3029,"src":"646:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3018,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:9:14"},"scope":3851,"src":"588:104:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3051,"nodeType":"Block","src":"876:82:14","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3039,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3032,"src":"931:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":3040,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3034,"src":"935:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"931:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3042,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"930:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3043,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3032,"src":"941:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":3044,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3034,"src":"945:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3046,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"940:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":3047,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"950:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"940:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"930:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3038,"id":3050,"nodeType":"Return","src":"923:28:14"}]},"documentation":{"id":3030,"nodeType":"StructuredDocumentation","src":"698:102:14","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":3052,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"814:7:14","nodeType":"FunctionDefinition","parameters":{"id":3035,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3032,"mutability":"mutable","name":"a","nameLocation":"830:1:14","nodeType":"VariableDeclaration","scope":3052,"src":"822:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3031,"name":"uint256","nodeType":"ElementaryTypeName","src":"822:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3034,"mutability":"mutable","name":"b","nameLocation":"841:1:14","nodeType":"VariableDeclaration","scope":3052,"src":"833:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3033,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"821:22:14"},"returnParameters":{"id":3038,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3037,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3052,"src":"867:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3036,"name":"uint256","nodeType":"ElementaryTypeName","src":"867:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"866:9:14"},"scope":3851,"src":"805:153:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3076,"nodeType":"Block","src":"1228:123:14","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3062,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3055,"src":"1316:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3063,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1321:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1316:6:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3066,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3055,"src":"1330:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3067,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1334:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1330:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3069,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1329:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3070,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"1339:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1329:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3072,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1343:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1329:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1316:28:14","trueExpression":{"hexValue":"30","id":3065,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1325:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3061,"id":3075,"nodeType":"Return","src":"1309:35:14"}]},"documentation":{"id":3053,"nodeType":"StructuredDocumentation","src":"964:188:14","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":3077,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1166:7:14","nodeType":"FunctionDefinition","parameters":{"id":3058,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3055,"mutability":"mutable","name":"a","nameLocation":"1182:1:14","nodeType":"VariableDeclaration","scope":3077,"src":"1174:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3054,"name":"uint256","nodeType":"ElementaryTypeName","src":"1174:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3057,"mutability":"mutable","name":"b","nameLocation":"1193:1:14","nodeType":"VariableDeclaration","scope":3077,"src":"1185:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3056,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1173:22:14"},"returnParameters":{"id":3061,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3060,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3077,"src":"1219:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3059,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1218:9:14"},"scope":3851,"src":"1157:194:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3198,"nodeType":"Block","src":"1795:3797:14","statements":[{"id":3197,"nodeType":"UncheckedBlock","src":"1805:3781:14","statements":[{"assignments":[3090],"declarations":[{"constant":false,"id":3090,"mutability":"mutable","name":"prod0","nameLocation":"2134:5:14","nodeType":"VariableDeclaration","scope":3197,"src":"2126:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3089,"name":"uint256","nodeType":"ElementaryTypeName","src":"2126:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3091,"nodeType":"VariableDeclarationStatement","src":"2126:13:14"},{"assignments":[3093],"declarations":[{"constant":false,"id":3093,"mutability":"mutable","name":"prod1","nameLocation":"2206:5:14","nodeType":"VariableDeclaration","scope":3197,"src":"2198:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3092,"name":"uint256","nodeType":"ElementaryTypeName","src":"2198:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3094,"nodeType":"VariableDeclarationStatement","src":"2198:13:14"},{"AST":{"nodeType":"YulBlock","src":"2278:157:14","statements":[{"nodeType":"YulVariableDeclaration","src":"2296:30:14","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2313:1:14"},{"name":"y","nodeType":"YulIdentifier","src":"2316:1:14"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2323:1:14","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2319:3:14"},"nodeType":"YulFunctionCall","src":"2319:6:14"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2306:6:14"},"nodeType":"YulFunctionCall","src":"2306:20:14"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2300:2:14","type":""}]},{"nodeType":"YulAssignment","src":"2343:18:14","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2356:1:14"},{"name":"y","nodeType":"YulIdentifier","src":"2359:1:14"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2352:3:14"},"nodeType":"YulFunctionCall","src":"2352:9:14"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2343:5:14"}]},{"nodeType":"YulAssignment","src":"2378:43:14","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2395:2:14"},{"name":"prod0","nodeType":"YulIdentifier","src":"2399:5:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2391:3:14"},"nodeType":"YulFunctionCall","src":"2391:14:14"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2410:2:14"},{"name":"prod0","nodeType":"YulIdentifier","src":"2414:5:14"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2407:2:14"},"nodeType":"YulFunctionCall","src":"2407:13:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2387:3:14"},"nodeType":"YulFunctionCall","src":"2387:34:14"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2378:5:14"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3090,"isOffset":false,"isSlot":false,"src":"2343:5:14","valueSize":1},{"declaration":3090,"isOffset":false,"isSlot":false,"src":"2399:5:14","valueSize":1},{"declaration":3090,"isOffset":false,"isSlot":false,"src":"2414:5:14","valueSize":1},{"declaration":3093,"isOffset":false,"isSlot":false,"src":"2378:5:14","valueSize":1},{"declaration":3080,"isOffset":false,"isSlot":false,"src":"2313:1:14","valueSize":1},{"declaration":3080,"isOffset":false,"isSlot":false,"src":"2356:1:14","valueSize":1},{"declaration":3082,"isOffset":false,"isSlot":false,"src":"2316:1:14","valueSize":1},{"declaration":3082,"isOffset":false,"isSlot":false,"src":"2359:1:14","valueSize":1}],"id":3095,"nodeType":"InlineAssembly","src":"2269:166:14"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3096,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3093,"src":"2516:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3097,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2525:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2516:10:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3104,"nodeType":"IfStatement","src":"2512:75:14","trueBody":{"id":3103,"nodeType":"Block","src":"2528:59:14","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3099,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3090,"src":"2553:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3100,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3084,"src":"2561:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2553:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3088,"id":3102,"nodeType":"Return","src":"2546:26:14"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3106,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3084,"src":"2697:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3107,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3093,"src":"2711:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2697:19:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3105,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2689:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":3109,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2689:28:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3110,"nodeType":"ExpressionStatement","src":"2689:28:14"},{"assignments":[3112],"declarations":[{"constant":false,"id":3112,"mutability":"mutable","name":"remainder","nameLocation":"2981:9:14","nodeType":"VariableDeclaration","scope":3197,"src":"2973:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3111,"name":"uint256","nodeType":"ElementaryTypeName","src":"2973:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3113,"nodeType":"VariableDeclarationStatement","src":"2973:17:14"},{"AST":{"nodeType":"YulBlock","src":"3013:291:14","statements":[{"nodeType":"YulAssignment","src":"3082:38:14","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3102:1:14"},{"name":"y","nodeType":"YulIdentifier","src":"3105:1:14"},{"name":"denominator","nodeType":"YulIdentifier","src":"3108:11:14"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3095:6:14"},"nodeType":"YulFunctionCall","src":"3095:25:14"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3082:9:14"}]},{"nodeType":"YulAssignment","src":"3202:41:14","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3215:5:14"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3225:9:14"},{"name":"prod0","nodeType":"YulIdentifier","src":"3236:5:14"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3222:2:14"},"nodeType":"YulFunctionCall","src":"3222:20:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3211:3:14"},"nodeType":"YulFunctionCall","src":"3211:32:14"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3202:5:14"}]},{"nodeType":"YulAssignment","src":"3260:30:14","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3273:5:14"},{"name":"remainder","nodeType":"YulIdentifier","src":"3280:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3269:3:14"},"nodeType":"YulFunctionCall","src":"3269:21:14"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3260:5:14"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3084,"isOffset":false,"isSlot":false,"src":"3108:11:14","valueSize":1},{"declaration":3090,"isOffset":false,"isSlot":false,"src":"3236:5:14","valueSize":1},{"declaration":3090,"isOffset":false,"isSlot":false,"src":"3260:5:14","valueSize":1},{"declaration":3090,"isOffset":false,"isSlot":false,"src":"3273:5:14","valueSize":1},{"declaration":3093,"isOffset":false,"isSlot":false,"src":"3202:5:14","valueSize":1},{"declaration":3093,"isOffset":false,"isSlot":false,"src":"3215:5:14","valueSize":1},{"declaration":3112,"isOffset":false,"isSlot":false,"src":"3082:9:14","valueSize":1},{"declaration":3112,"isOffset":false,"isSlot":false,"src":"3225:9:14","valueSize":1},{"declaration":3112,"isOffset":false,"isSlot":false,"src":"3280:9:14","valueSize":1},{"declaration":3080,"isOffset":false,"isSlot":false,"src":"3102:1:14","valueSize":1},{"declaration":3082,"isOffset":false,"isSlot":false,"src":"3105:1:14","valueSize":1}],"id":3114,"nodeType":"InlineAssembly","src":"3004:300:14"},{"assignments":[3116],"declarations":[{"constant":false,"id":3116,"mutability":"mutable","name":"twos","nameLocation":"3619:4:14","nodeType":"VariableDeclaration","scope":3197,"src":"3611:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3115,"name":"uint256","nodeType":"ElementaryTypeName","src":"3611:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3124,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3117,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3084,"src":"3626:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3641:12:14","subExpression":{"id":3118,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3084,"src":"3642:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3120,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3656:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3641:16:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3122,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3640:18:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3626:32:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3611:47:14"},{"AST":{"nodeType":"YulBlock","src":"3681:362:14","statements":[{"nodeType":"YulAssignment","src":"3746:37:14","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"3765:11:14"},{"name":"twos","nodeType":"YulIdentifier","src":"3778:4:14"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3761:3:14"},"nodeType":"YulFunctionCall","src":"3761:22:14"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"3746:11:14"}]},{"nodeType":"YulAssignment","src":"3850:25:14","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3863:5:14"},{"name":"twos","nodeType":"YulIdentifier","src":"3870:4:14"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3859:3:14"},"nodeType":"YulFunctionCall","src":"3859:16:14"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3850:5:14"}]},{"nodeType":"YulAssignment","src":"3990:39:14","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4010:1:14","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4013:4:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4006:3:14"},"nodeType":"YulFunctionCall","src":"4006:12:14"},{"name":"twos","nodeType":"YulIdentifier","src":"4020:4:14"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4002:3:14"},"nodeType":"YulFunctionCall","src":"4002:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"4027:1:14","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3998:3:14"},"nodeType":"YulFunctionCall","src":"3998:31:14"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"3990:4:14"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3084,"isOffset":false,"isSlot":false,"src":"3746:11:14","valueSize":1},{"declaration":3084,"isOffset":false,"isSlot":false,"src":"3765:11:14","valueSize":1},{"declaration":3090,"isOffset":false,"isSlot":false,"src":"3850:5:14","valueSize":1},{"declaration":3090,"isOffset":false,"isSlot":false,"src":"3863:5:14","valueSize":1},{"declaration":3116,"isOffset":false,"isSlot":false,"src":"3778:4:14","valueSize":1},{"declaration":3116,"isOffset":false,"isSlot":false,"src":"3870:4:14","valueSize":1},{"declaration":3116,"isOffset":false,"isSlot":false,"src":"3990:4:14","valueSize":1},{"declaration":3116,"isOffset":false,"isSlot":false,"src":"4013:4:14","valueSize":1},{"declaration":3116,"isOffset":false,"isSlot":false,"src":"4020:4:14","valueSize":1}],"id":3125,"nodeType":"InlineAssembly","src":"3672:371:14"},{"expression":{"id":3130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3126,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3090,"src":"4109:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3127,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3093,"src":"4118:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3128,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3116,"src":"4126:4:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4118:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4109:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3131,"nodeType":"ExpressionStatement","src":"4109:21:14"},{"assignments":[3133],"declarations":[{"constant":false,"id":3133,"mutability":"mutable","name":"inverse","nameLocation":"4456:7:14","nodeType":"VariableDeclaration","scope":3197,"src":"4448:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3132,"name":"uint256","nodeType":"ElementaryTypeName","src":"4448:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3140,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":3134,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4467:1:14","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3135,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3084,"src":"4471:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4467:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3137,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4466:17:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":3138,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4486:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4466:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4448:39:14"},{"expression":{"id":3147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3141,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3133,"src":"4704:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3142,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4715:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3143,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3084,"src":"4719:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3144,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3133,"src":"4733:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4719:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4715:25:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4704:36:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3148,"nodeType":"ExpressionStatement","src":"4704:36:14"},{"expression":{"id":3155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3149,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3133,"src":"4773:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3150,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4784:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3151,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3084,"src":"4788:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3152,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3133,"src":"4802:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4788:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4784:25:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4773:36:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3156,"nodeType":"ExpressionStatement","src":"4773:36:14"},{"expression":{"id":3163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3157,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3133,"src":"4843:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3158,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4854:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3161,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3159,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3084,"src":"4858:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3160,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3133,"src":"4872:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4858:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4854:25:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4843:36:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3164,"nodeType":"ExpressionStatement","src":"4843:36:14"},{"expression":{"id":3171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3165,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3133,"src":"4913:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4924:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3167,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3084,"src":"4928:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3168,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3133,"src":"4942:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4928:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4924:25:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4913:36:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3172,"nodeType":"ExpressionStatement","src":"4913:36:14"},{"expression":{"id":3179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3173,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3133,"src":"4983:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3174,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4994:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3175,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3084,"src":"4998:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3176,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3133,"src":"5012:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4998:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4994:25:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4983:36:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3180,"nodeType":"ExpressionStatement","src":"4983:36:14"},{"expression":{"id":3187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3181,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3133,"src":"5054:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5065:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3183,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3084,"src":"5069:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3184,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3133,"src":"5083:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5069:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5065:25:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5054:36:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3188,"nodeType":"ExpressionStatement","src":"5054:36:14"},{"expression":{"id":3193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3189,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3087,"src":"5524:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3190,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3090,"src":"5533:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3191,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3133,"src":"5541:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5533:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5524:24:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3194,"nodeType":"ExpressionStatement","src":"5524:24:14"},{"expression":{"id":3195,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3087,"src":"5569:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3088,"id":3196,"nodeType":"Return","src":"5562:13:14"}]}]},"documentation":{"id":3078,"nodeType":"StructuredDocumentation","src":"1357:305:14","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":3199,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1676:6:14","nodeType":"FunctionDefinition","parameters":{"id":3085,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3080,"mutability":"mutable","name":"x","nameLocation":"1700:1:14","nodeType":"VariableDeclaration","scope":3199,"src":"1692:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3079,"name":"uint256","nodeType":"ElementaryTypeName","src":"1692:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3082,"mutability":"mutable","name":"y","nameLocation":"1719:1:14","nodeType":"VariableDeclaration","scope":3199,"src":"1711:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3081,"name":"uint256","nodeType":"ElementaryTypeName","src":"1711:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3084,"mutability":"mutable","name":"denominator","nameLocation":"1738:11:14","nodeType":"VariableDeclaration","scope":3199,"src":"1730:19:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3083,"name":"uint256","nodeType":"ElementaryTypeName","src":"1730:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1682:73:14"},"returnParameters":{"id":3088,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3087,"mutability":"mutable","name":"result","nameLocation":"1787:6:14","nodeType":"VariableDeclaration","scope":3199,"src":"1779:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3086,"name":"uint256","nodeType":"ElementaryTypeName","src":"1779:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1778:16:14"},"scope":3851,"src":"1667:3925:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3242,"nodeType":"Block","src":"5872:189:14","statements":[{"assignments":[3215],"declarations":[{"constant":false,"id":3215,"mutability":"mutable","name":"result","nameLocation":"5890:6:14","nodeType":"VariableDeclaration","scope":3242,"src":"5882:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3214,"name":"uint256","nodeType":"ElementaryTypeName","src":"5882:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3221,"initialValue":{"arguments":[{"id":3217,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3202,"src":"5906:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3218,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3204,"src":"5909:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3219,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3206,"src":"5912:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3216,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[3199,3243],"referencedDeclaration":3199,"src":"5899:6:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":3220,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5899:25:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5882:42:14"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2993","typeString":"enum Math.Rounding"},"id":3225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3222,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3209,"src":"5938:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2993","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3223,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2993,"src":"5950:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2993_$","typeString":"type(enum Math.Rounding)"}},"id":3224,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5959:2:14","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2991,"src":"5950:11:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2993","typeString":"enum Math.Rounding"}},"src":"5938:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3227,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3202,"src":"5972:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3228,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3204,"src":"5975:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3229,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3206,"src":"5978:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3226,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"5965:6:14","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":3230,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5965:25:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3231,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5993:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5965:29:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5938:56:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3239,"nodeType":"IfStatement","src":"5934:98:14","trueBody":{"id":3238,"nodeType":"Block","src":"5996:36:14","statements":[{"expression":{"id":3236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3234,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3215,"src":"6010:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3235,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6020:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6010:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3237,"nodeType":"ExpressionStatement","src":"6010:11:14"}]}},{"expression":{"id":3240,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3215,"src":"6048:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3213,"id":3241,"nodeType":"Return","src":"6041:13:14"}]},"documentation":{"id":3200,"nodeType":"StructuredDocumentation","src":"5598:121:14","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":3243,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"5733:6:14","nodeType":"FunctionDefinition","parameters":{"id":3210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3202,"mutability":"mutable","name":"x","nameLocation":"5757:1:14","nodeType":"VariableDeclaration","scope":3243,"src":"5749:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3201,"name":"uint256","nodeType":"ElementaryTypeName","src":"5749:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3204,"mutability":"mutable","name":"y","nameLocation":"5776:1:14","nodeType":"VariableDeclaration","scope":3243,"src":"5768:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3203,"name":"uint256","nodeType":"ElementaryTypeName","src":"5768:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3206,"mutability":"mutable","name":"denominator","nameLocation":"5795:11:14","nodeType":"VariableDeclaration","scope":3243,"src":"5787:19:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3205,"name":"uint256","nodeType":"ElementaryTypeName","src":"5787:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3209,"mutability":"mutable","name":"rounding","nameLocation":"5825:8:14","nodeType":"VariableDeclaration","scope":3243,"src":"5816:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2993","typeString":"enum Math.Rounding"},"typeName":{"id":3208,"nodeType":"UserDefinedTypeName","pathNode":{"id":3207,"name":"Rounding","nameLocations":["5816:8:14"],"nodeType":"IdentifierPath","referencedDeclaration":2993,"src":"5816:8:14"},"referencedDeclaration":2993,"src":"5816:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2993","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"5739:100:14"},"returnParameters":{"id":3213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3212,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3243,"src":"5863:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3211,"name":"uint256","nodeType":"ElementaryTypeName","src":"5863:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5862:9:14"},"scope":3851,"src":"5724:337:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3354,"nodeType":"Block","src":"6337:1585:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3251,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"6351:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3252,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6356:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6351:6:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3257,"nodeType":"IfStatement","src":"6347:45:14","trueBody":{"id":3256,"nodeType":"Block","src":"6359:33:14","statements":[{"expression":{"hexValue":"30","id":3254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6380:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3250,"id":3255,"nodeType":"Return","src":"6373:8:14"}]}},{"assignments":[3259],"declarations":[{"constant":false,"id":3259,"mutability":"mutable","name":"result","nameLocation":"7079:6:14","nodeType":"VariableDeclaration","scope":3354,"src":"7071:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3258,"name":"uint256","nodeType":"ElementaryTypeName","src":"7071:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3268,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7088:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3262,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"7099:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3261,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[3523,3559],"referencedDeclaration":3523,"src":"7094:4:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3263,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7094:7:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3264,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7105:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7094:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3266,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7093:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7088:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7071:36:14"},{"id":3353,"nodeType":"UncheckedBlock","src":"7508:408:14","statements":[{"expression":{"id":3278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3269,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3259,"src":"7532:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3270,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3259,"src":"7542:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3271,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"7551:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3272,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3259,"src":"7555:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7551:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7542:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3275,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7541:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3276,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7566:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7541:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7532:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3279,"nodeType":"ExpressionStatement","src":"7532:35:14"},{"expression":{"id":3289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3280,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3259,"src":"7581:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3281,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3259,"src":"7591:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3284,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3282,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"7600:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3283,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3259,"src":"7604:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7600:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7591:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3286,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7590:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3287,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7615:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7590:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7581:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3290,"nodeType":"ExpressionStatement","src":"7581:35:14"},{"expression":{"id":3300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3291,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3259,"src":"7630:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3292,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3259,"src":"7640:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3293,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"7649:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3294,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3259,"src":"7653:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7649:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7640:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3297,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7639:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3298,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7664:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7639:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7630:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3301,"nodeType":"ExpressionStatement","src":"7630:35:14"},{"expression":{"id":3311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3302,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3259,"src":"7679:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3303,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3259,"src":"7689:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3304,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"7698:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3305,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3259,"src":"7702:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7698:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7689:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3308,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7688:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3309,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7713:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7688:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7679:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3312,"nodeType":"ExpressionStatement","src":"7679:35:14"},{"expression":{"id":3322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3313,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3259,"src":"7728:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3314,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3259,"src":"7738:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3315,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"7747:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3316,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3259,"src":"7751:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7747:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7738:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3319,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7737:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7762:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7737:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7728:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3323,"nodeType":"ExpressionStatement","src":"7728:35:14"},{"expression":{"id":3333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3324,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3259,"src":"7777:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3325,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3259,"src":"7787:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3326,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"7796:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3327,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3259,"src":"7800:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7796:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7787:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3330,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7786:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3331,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7811:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7786:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7777:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3334,"nodeType":"ExpressionStatement","src":"7777:35:14"},{"expression":{"id":3344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3335,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3259,"src":"7826:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3336,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3259,"src":"7836:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3337,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"7845:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3338,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3259,"src":"7849:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7845:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7836:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3341,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7835:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3342,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7860:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7835:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7826:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3345,"nodeType":"ExpressionStatement","src":"7826:35:14"},{"expression":{"arguments":[{"id":3347,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3259,"src":"7886:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3348,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"7894:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3349,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3259,"src":"7898:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7894:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3346,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3029,"src":"7882:3:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3351,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7882:23:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3250,"id":3352,"nodeType":"Return","src":"7875:30:14"}]}]},"documentation":{"id":3244,"nodeType":"StructuredDocumentation","src":"6067:208:14","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":3355,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6289:4:14","nodeType":"FunctionDefinition","parameters":{"id":3247,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3246,"mutability":"mutable","name":"a","nameLocation":"6302:1:14","nodeType":"VariableDeclaration","scope":3355,"src":"6294:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3245,"name":"uint256","nodeType":"ElementaryTypeName","src":"6294:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6293:11:14"},"returnParameters":{"id":3250,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3249,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3355,"src":"6328:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3248,"name":"uint256","nodeType":"ElementaryTypeName","src":"6328:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6327:9:14"},"scope":3851,"src":"6280:1642:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3390,"nodeType":"Block","src":"8098:161:14","statements":[{"id":3389,"nodeType":"UncheckedBlock","src":"8108:145:14","statements":[{"assignments":[3367],"declarations":[{"constant":false,"id":3367,"mutability":"mutable","name":"result","nameLocation":"8140:6:14","nodeType":"VariableDeclaration","scope":3389,"src":"8132:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3366,"name":"uint256","nodeType":"ElementaryTypeName","src":"8132:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3371,"initialValue":{"arguments":[{"id":3369,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3358,"src":"8154:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3368,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[3355,3391],"referencedDeclaration":3355,"src":"8149:4:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3370,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8149:7:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8132:24:14"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3372,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3367,"src":"8177:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2993","typeString":"enum Math.Rounding"},"id":3376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3373,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3361,"src":"8187:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2993","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3374,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2993,"src":"8199:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2993_$","typeString":"type(enum Math.Rounding)"}},"id":3375,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8208:2:14","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2991,"src":"8199:11:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2993","typeString":"enum Math.Rounding"}},"src":"8187:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3377,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3367,"src":"8214:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3378,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3367,"src":"8223:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8214:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3380,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3358,"src":"8232:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8214:19:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8187:46:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3384,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8240:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8187:54:14","trueExpression":{"hexValue":"31","id":3383,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8236:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3386,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8186:56:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8177:65:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3365,"id":3388,"nodeType":"Return","src":"8170:72:14"}]}]},"documentation":{"id":3356,"nodeType":"StructuredDocumentation","src":"7928:89:14","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":3391,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8031:4:14","nodeType":"FunctionDefinition","parameters":{"id":3362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3358,"mutability":"mutable","name":"a","nameLocation":"8044:1:14","nodeType":"VariableDeclaration","scope":3391,"src":"8036:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3357,"name":"uint256","nodeType":"ElementaryTypeName","src":"8036:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3361,"mutability":"mutable","name":"rounding","nameLocation":"8056:8:14","nodeType":"VariableDeclaration","scope":3391,"src":"8047:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2993","typeString":"enum Math.Rounding"},"typeName":{"id":3360,"nodeType":"UserDefinedTypeName","pathNode":{"id":3359,"name":"Rounding","nameLocations":["8047:8:14"],"nodeType":"IdentifierPath","referencedDeclaration":2993,"src":"8047:8:14"},"referencedDeclaration":2993,"src":"8047:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2993","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8035:30:14"},"returnParameters":{"id":3365,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3364,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3391,"src":"8089:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3363,"name":"uint256","nodeType":"ElementaryTypeName","src":"8089:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8088:9:14"},"scope":3851,"src":"8022:237:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3522,"nodeType":"Block","src":"8444:922:14","statements":[{"assignments":[3400],"declarations":[{"constant":false,"id":3400,"mutability":"mutable","name":"result","nameLocation":"8462:6:14","nodeType":"VariableDeclaration","scope":3522,"src":"8454:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3399,"name":"uint256","nodeType":"ElementaryTypeName","src":"8454:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3402,"initialValue":{"hexValue":"30","id":3401,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8471:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8454:18:14"},{"id":3519,"nodeType":"UncheckedBlock","src":"8482:855:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3403,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"8510:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":3404,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8519:3:14","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8510:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3406,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8525:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8510:16:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3417,"nodeType":"IfStatement","src":"8506:99:14","trueBody":{"id":3416,"nodeType":"Block","src":"8528:77:14","statements":[{"expression":{"id":3410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3408,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"8546:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":3409,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8556:3:14","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8546:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3411,"nodeType":"ExpressionStatement","src":"8546:13:14"},{"expression":{"id":3414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3412,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3400,"src":"8577:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":3413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8587:3:14","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8577:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3415,"nodeType":"ExpressionStatement","src":"8577:13:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3418,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"8622:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":3419,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8631:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8622:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3421,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8636:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8622:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3432,"nodeType":"IfStatement","src":"8618:96:14","trueBody":{"id":3431,"nodeType":"Block","src":"8639:75:14","statements":[{"expression":{"id":3425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3423,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"8657:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":3424,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8667:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8657:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3426,"nodeType":"ExpressionStatement","src":"8657:12:14"},{"expression":{"id":3429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3427,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3400,"src":"8687:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":3428,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8697:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8687:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3430,"nodeType":"ExpressionStatement","src":"8687:12:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3433,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"8731:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":3434,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8740:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8731:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3436,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8745:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8731:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3447,"nodeType":"IfStatement","src":"8727:96:14","trueBody":{"id":3446,"nodeType":"Block","src":"8748:75:14","statements":[{"expression":{"id":3440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3438,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"8766:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":3439,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8776:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8766:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3441,"nodeType":"ExpressionStatement","src":"8766:12:14"},{"expression":{"id":3444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3442,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3400,"src":"8796:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":3443,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8806:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8796:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3445,"nodeType":"ExpressionStatement","src":"8796:12:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3448,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"8840:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":3449,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8849:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8840:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3451,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8854:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8840:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3462,"nodeType":"IfStatement","src":"8836:96:14","trueBody":{"id":3461,"nodeType":"Block","src":"8857:75:14","statements":[{"expression":{"id":3455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3453,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"8875:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":3454,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8885:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8875:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3456,"nodeType":"ExpressionStatement","src":"8875:12:14"},{"expression":{"id":3459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3457,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3400,"src":"8905:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3458,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8915:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8905:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3460,"nodeType":"ExpressionStatement","src":"8905:12:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3463,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"8949:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":3464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8958:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8949:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3466,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8962:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8949:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3477,"nodeType":"IfStatement","src":"8945:93:14","trueBody":{"id":3476,"nodeType":"Block","src":"8965:73:14","statements":[{"expression":{"id":3470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3468,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"8983:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":3469,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8993:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8983:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3471,"nodeType":"ExpressionStatement","src":"8983:11:14"},{"expression":{"id":3474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3472,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3400,"src":"9012:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3473,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9022:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9012:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3475,"nodeType":"ExpressionStatement","src":"9012:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3478,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"9055:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":3479,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9064:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9055:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3481,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9068:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9055:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3492,"nodeType":"IfStatement","src":"9051:93:14","trueBody":{"id":3491,"nodeType":"Block","src":"9071:73:14","statements":[{"expression":{"id":3485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3483,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"9089:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":3484,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9099:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9089:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3486,"nodeType":"ExpressionStatement","src":"9089:11:14"},{"expression":{"id":3489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3487,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3400,"src":"9118:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3488,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9128:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9118:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3490,"nodeType":"ExpressionStatement","src":"9118:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3493,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"9161:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":3494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9170:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9161:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3496,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9174:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9161:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3507,"nodeType":"IfStatement","src":"9157:93:14","trueBody":{"id":3506,"nodeType":"Block","src":"9177:73:14","statements":[{"expression":{"id":3500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3498,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"9195:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":3499,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9205:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9195:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3501,"nodeType":"ExpressionStatement","src":"9195:11:14"},{"expression":{"id":3504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3502,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3400,"src":"9224:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3503,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9234:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9224:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3505,"nodeType":"ExpressionStatement","src":"9224:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3508,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"9267:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9276:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9267:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9280:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9267:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3518,"nodeType":"IfStatement","src":"9263:64:14","trueBody":{"id":3517,"nodeType":"Block","src":"9283:44:14","statements":[{"expression":{"id":3515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3513,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3400,"src":"9301:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3514,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9311:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9301:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3516,"nodeType":"ExpressionStatement","src":"9301:11:14"}]}}]},{"expression":{"id":3520,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3400,"src":"9353:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3398,"id":3521,"nodeType":"Return","src":"9346:13:14"}]},"documentation":{"id":3392,"nodeType":"StructuredDocumentation","src":"8265:113:14","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":3523,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8392:4:14","nodeType":"FunctionDefinition","parameters":{"id":3395,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3394,"mutability":"mutable","name":"value","nameLocation":"8405:5:14","nodeType":"VariableDeclaration","scope":3523,"src":"8397:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3393,"name":"uint256","nodeType":"ElementaryTypeName","src":"8397:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8396:15:14"},"returnParameters":{"id":3398,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3397,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3523,"src":"8435:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3396,"name":"uint256","nodeType":"ElementaryTypeName","src":"8435:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8434:9:14"},"scope":3851,"src":"8383:983:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3558,"nodeType":"Block","src":"9599:165:14","statements":[{"id":3557,"nodeType":"UncheckedBlock","src":"9609:149:14","statements":[{"assignments":[3535],"declarations":[{"constant":false,"id":3535,"mutability":"mutable","name":"result","nameLocation":"9641:6:14","nodeType":"VariableDeclaration","scope":3557,"src":"9633:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3534,"name":"uint256","nodeType":"ElementaryTypeName","src":"9633:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3539,"initialValue":{"arguments":[{"id":3537,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"9655:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3536,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[3523,3559],"referencedDeclaration":3523,"src":"9650:4:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3538,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9650:11:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9633:28:14"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3540,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3535,"src":"9682:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2993","typeString":"enum Math.Rounding"},"id":3544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3541,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"9692:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2993","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3542,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2993,"src":"9704:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2993_$","typeString":"type(enum Math.Rounding)"}},"id":3543,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9713:2:14","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2991,"src":"9704:11:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2993","typeString":"enum Math.Rounding"}},"src":"9692:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3545,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9719:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":3546,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3535,"src":"9724:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9719:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3548,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"9733:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9719:19:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9692:46:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3552,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9745:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9692:54:14","trueExpression":{"hexValue":"31","id":3551,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9741:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3554,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9691:56:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9682:65:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3533,"id":3556,"nodeType":"Return","src":"9675:72:14"}]}]},"documentation":{"id":3524,"nodeType":"StructuredDocumentation","src":"9372:142:14","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3559,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9528:4:14","nodeType":"FunctionDefinition","parameters":{"id":3530,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3526,"mutability":"mutable","name":"value","nameLocation":"9541:5:14","nodeType":"VariableDeclaration","scope":3559,"src":"9533:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3525,"name":"uint256","nodeType":"ElementaryTypeName","src":"9533:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3529,"mutability":"mutable","name":"rounding","nameLocation":"9557:8:14","nodeType":"VariableDeclaration","scope":3559,"src":"9548:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2993","typeString":"enum Math.Rounding"},"typeName":{"id":3528,"nodeType":"UserDefinedTypeName","pathNode":{"id":3527,"name":"Rounding","nameLocations":["9548:8:14"],"nodeType":"IdentifierPath","referencedDeclaration":2993,"src":"9548:8:14"},"referencedDeclaration":2993,"src":"9548:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2993","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"9532:34:14"},"returnParameters":{"id":3533,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3532,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3559,"src":"9590:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3531,"name":"uint256","nodeType":"ElementaryTypeName","src":"9590:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9589:9:14"},"scope":3851,"src":"9519:245:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3687,"nodeType":"Block","src":"9951:828:14","statements":[{"assignments":[3568],"declarations":[{"constant":false,"id":3568,"mutability":"mutable","name":"result","nameLocation":"9969:6:14","nodeType":"VariableDeclaration","scope":3687,"src":"9961:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3567,"name":"uint256","nodeType":"ElementaryTypeName","src":"9961:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3570,"initialValue":{"hexValue":"30","id":3569,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9978:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9961:18:14"},{"id":3684,"nodeType":"UncheckedBlock","src":"9989:761:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3571,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3562,"src":"10017:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":3574,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3572,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10026:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":3573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10030:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10026:6:14","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10017:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3587,"nodeType":"IfStatement","src":"10013:99:14","trueBody":{"id":3586,"nodeType":"Block","src":"10034:78:14","statements":[{"expression":{"id":3580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3576,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3562,"src":"10052:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":3579,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3577,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10061:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":3578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10065:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10061:6:14","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10052:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3581,"nodeType":"ExpressionStatement","src":"10052:15:14"},{"expression":{"id":3584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3582,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"10085:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":3583,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10095:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10085:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3585,"nodeType":"ExpressionStatement","src":"10085:12:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3588,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3562,"src":"10129:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":3591,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3589,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10138:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":3590,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10142:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10138:6:14","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10129:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3604,"nodeType":"IfStatement","src":"10125:99:14","trueBody":{"id":3603,"nodeType":"Block","src":"10146:78:14","statements":[{"expression":{"id":3597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3593,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3562,"src":"10164:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":3596,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3594,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10173:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":3595,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10177:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10173:6:14","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10164:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3598,"nodeType":"ExpressionStatement","src":"10164:15:14"},{"expression":{"id":3601,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3599,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"10197:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":3600,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10207:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10197:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3602,"nodeType":"ExpressionStatement","src":"10197:12:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3605,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3562,"src":"10241:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":3608,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3606,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10250:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":3607,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10254:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10250:6:14","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10241:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3621,"nodeType":"IfStatement","src":"10237:99:14","trueBody":{"id":3620,"nodeType":"Block","src":"10258:78:14","statements":[{"expression":{"id":3614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3610,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3562,"src":"10276:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":3613,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3611,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10285:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":3612,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10289:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10285:6:14","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10276:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3615,"nodeType":"ExpressionStatement","src":"10276:15:14"},{"expression":{"id":3618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3616,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"10309:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3617,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10319:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10309:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3619,"nodeType":"ExpressionStatement","src":"10309:12:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3622,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3562,"src":"10353:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":3625,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3623,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10362:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":3624,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10366:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10362:5:14","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10353:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3638,"nodeType":"IfStatement","src":"10349:96:14","trueBody":{"id":3637,"nodeType":"Block","src":"10369:76:14","statements":[{"expression":{"id":3631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3627,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3562,"src":"10387:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":3630,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3628,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10396:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":3629,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10400:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10396:5:14","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10387:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3632,"nodeType":"ExpressionStatement","src":"10387:14:14"},{"expression":{"id":3635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3633,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"10419:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3634,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10429:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10419:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3636,"nodeType":"ExpressionStatement","src":"10419:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3639,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3562,"src":"10462:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":3642,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3640,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10471:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":3641,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10475:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10471:5:14","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10462:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3655,"nodeType":"IfStatement","src":"10458:96:14","trueBody":{"id":3654,"nodeType":"Block","src":"10478:76:14","statements":[{"expression":{"id":3648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3644,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3562,"src":"10496:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":3647,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3645,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10505:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":3646,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10509:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10505:5:14","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10496:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3649,"nodeType":"ExpressionStatement","src":"10496:14:14"},{"expression":{"id":3652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3650,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"10528:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3651,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10538:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10528:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3653,"nodeType":"ExpressionStatement","src":"10528:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3656,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3562,"src":"10571:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":3659,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3657,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10580:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":3658,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10584:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10580:5:14","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10571:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3672,"nodeType":"IfStatement","src":"10567:96:14","trueBody":{"id":3671,"nodeType":"Block","src":"10587:76:14","statements":[{"expression":{"id":3665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3661,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3562,"src":"10605:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":3664,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3662,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10614:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":3663,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10618:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10614:5:14","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10605:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3666,"nodeType":"ExpressionStatement","src":"10605:14:14"},{"expression":{"id":3669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3667,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"10637:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3668,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10647:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10637:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3670,"nodeType":"ExpressionStatement","src":"10637:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3673,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3562,"src":"10680:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":3676,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3674,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10689:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":3675,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10693:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10689:5:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10680:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3683,"nodeType":"IfStatement","src":"10676:64:14","trueBody":{"id":3682,"nodeType":"Block","src":"10696:44:14","statements":[{"expression":{"id":3680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3678,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"10714:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3679,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10724:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10714:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3681,"nodeType":"ExpressionStatement","src":"10714:11:14"}]}}]},{"expression":{"id":3685,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"10766:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3566,"id":3686,"nodeType":"Return","src":"10759:13:14"}]},"documentation":{"id":3560,"nodeType":"StructuredDocumentation","src":"9770:114:14","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":3688,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"9898:5:14","nodeType":"FunctionDefinition","parameters":{"id":3563,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3562,"mutability":"mutable","name":"value","nameLocation":"9912:5:14","nodeType":"VariableDeclaration","scope":3688,"src":"9904:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3561,"name":"uint256","nodeType":"ElementaryTypeName","src":"9904:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9903:15:14"},"returnParameters":{"id":3566,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3565,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3688,"src":"9942:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3564,"name":"uint256","nodeType":"ElementaryTypeName","src":"9942:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9941:9:14"},"scope":3851,"src":"9889:890:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3723,"nodeType":"Block","src":"11014:165:14","statements":[{"id":3722,"nodeType":"UncheckedBlock","src":"11024:149:14","statements":[{"assignments":[3700],"declarations":[{"constant":false,"id":3700,"mutability":"mutable","name":"result","nameLocation":"11056:6:14","nodeType":"VariableDeclaration","scope":3722,"src":"11048:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3699,"name":"uint256","nodeType":"ElementaryTypeName","src":"11048:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3704,"initialValue":{"arguments":[{"id":3702,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3691,"src":"11071:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3701,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[3688,3724],"referencedDeclaration":3688,"src":"11065:5:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3703,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11065:12:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11048:29:14"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3705,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3700,"src":"11098:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2993","typeString":"enum Math.Rounding"},"id":3709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3706,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3694,"src":"11108:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2993","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3707,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2993,"src":"11120:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2993_$","typeString":"type(enum Math.Rounding)"}},"id":3708,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11129:2:14","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2991,"src":"11120:11:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2993","typeString":"enum Math.Rounding"}},"src":"11108:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3710,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11135:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":3711,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3700,"src":"11139:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11135:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3713,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3691,"src":"11148:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11135:18:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11108:45:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3717,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11160:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11108:53:14","trueExpression":{"hexValue":"31","id":3716,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11156:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3719,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11107:55:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11098:64:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3698,"id":3721,"nodeType":"Return","src":"11091:71:14"}]}]},"documentation":{"id":3689,"nodeType":"StructuredDocumentation","src":"10785:143:14","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3724,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10942:5:14","nodeType":"FunctionDefinition","parameters":{"id":3695,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3691,"mutability":"mutable","name":"value","nameLocation":"10956:5:14","nodeType":"VariableDeclaration","scope":3724,"src":"10948:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3690,"name":"uint256","nodeType":"ElementaryTypeName","src":"10948:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3694,"mutability":"mutable","name":"rounding","nameLocation":"10972:8:14","nodeType":"VariableDeclaration","scope":3724,"src":"10963:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2993","typeString":"enum Math.Rounding"},"typeName":{"id":3693,"nodeType":"UserDefinedTypeName","pathNode":{"id":3692,"name":"Rounding","nameLocations":["10963:8:14"],"nodeType":"IdentifierPath","referencedDeclaration":2993,"src":"10963:8:14"},"referencedDeclaration":2993,"src":"10963:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2993","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"10947:34:14"},"returnParameters":{"id":3698,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3697,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3724,"src":"11005:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3696,"name":"uint256","nodeType":"ElementaryTypeName","src":"11005:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11004:9:14"},"scope":3851,"src":"10933:246:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3810,"nodeType":"Block","src":"11493:600:14","statements":[{"assignments":[3733],"declarations":[{"constant":false,"id":3733,"mutability":"mutable","name":"result","nameLocation":"11511:6:14","nodeType":"VariableDeclaration","scope":3810,"src":"11503:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3732,"name":"uint256","nodeType":"ElementaryTypeName","src":"11503:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3735,"initialValue":{"hexValue":"30","id":3734,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11520:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11503:18:14"},{"id":3807,"nodeType":"UncheckedBlock","src":"11531:533:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3736,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3727,"src":"11559:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":3737,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11568:3:14","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11559:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3739,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11574:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11559:16:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3750,"nodeType":"IfStatement","src":"11555:98:14","trueBody":{"id":3749,"nodeType":"Block","src":"11577:76:14","statements":[{"expression":{"id":3743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3741,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3727,"src":"11595:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":3742,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11605:3:14","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11595:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3744,"nodeType":"ExpressionStatement","src":"11595:13:14"},{"expression":{"id":3747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3745,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3733,"src":"11626:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11636:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11626:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3748,"nodeType":"ExpressionStatement","src":"11626:12:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3751,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3727,"src":"11670:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":3752,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11679:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11670:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3754,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11684:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11670:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3765,"nodeType":"IfStatement","src":"11666:95:14","trueBody":{"id":3764,"nodeType":"Block","src":"11687:74:14","statements":[{"expression":{"id":3758,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3756,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3727,"src":"11705:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":3757,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11715:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11705:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3759,"nodeType":"ExpressionStatement","src":"11705:12:14"},{"expression":{"id":3762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3760,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3733,"src":"11735:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3761,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11745:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11735:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3763,"nodeType":"ExpressionStatement","src":"11735:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3766,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3727,"src":"11778:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":3767,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11787:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11778:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3769,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11792:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11778:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3780,"nodeType":"IfStatement","src":"11774:95:14","trueBody":{"id":3779,"nodeType":"Block","src":"11795:74:14","statements":[{"expression":{"id":3773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3771,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3727,"src":"11813:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":3772,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11823:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11813:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3774,"nodeType":"ExpressionStatement","src":"11813:12:14"},{"expression":{"id":3777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3775,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3733,"src":"11843:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3776,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11853:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11843:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3778,"nodeType":"ExpressionStatement","src":"11843:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3781,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3727,"src":"11886:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":3782,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11895:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11886:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3784,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11900:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11886:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3795,"nodeType":"IfStatement","src":"11882:95:14","trueBody":{"id":3794,"nodeType":"Block","src":"11903:74:14","statements":[{"expression":{"id":3788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3786,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3727,"src":"11921:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":3787,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11931:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11921:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3789,"nodeType":"ExpressionStatement","src":"11921:12:14"},{"expression":{"id":3792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3790,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3733,"src":"11951:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3791,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11961:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11951:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3793,"nodeType":"ExpressionStatement","src":"11951:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3798,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3796,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3727,"src":"11994:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":3797,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12003:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11994:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3799,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12007:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11994:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3806,"nodeType":"IfStatement","src":"11990:64:14","trueBody":{"id":3805,"nodeType":"Block","src":"12010:44:14","statements":[{"expression":{"id":3803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3801,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3733,"src":"12028:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3802,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12038:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12028:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3804,"nodeType":"ExpressionStatement","src":"12028:11:14"}]}}]},{"expression":{"id":3808,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3733,"src":"12080:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3731,"id":3809,"nodeType":"Return","src":"12073:13:14"}]},"documentation":{"id":3725,"nodeType":"StructuredDocumentation","src":"11185:240:14","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":3811,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11439:6:14","nodeType":"FunctionDefinition","parameters":{"id":3728,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3727,"mutability":"mutable","name":"value","nameLocation":"11454:5:14","nodeType":"VariableDeclaration","scope":3811,"src":"11446:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3726,"name":"uint256","nodeType":"ElementaryTypeName","src":"11446:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11445:15:14"},"returnParameters":{"id":3731,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3730,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3811,"src":"11484:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3729,"name":"uint256","nodeType":"ElementaryTypeName","src":"11484:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11483:9:14"},"scope":3851,"src":"11430:663:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3849,"nodeType":"Block","src":"12329:173:14","statements":[{"id":3848,"nodeType":"UncheckedBlock","src":"12339:157:14","statements":[{"assignments":[3823],"declarations":[{"constant":false,"id":3823,"mutability":"mutable","name":"result","nameLocation":"12371:6:14","nodeType":"VariableDeclaration","scope":3848,"src":"12363:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3822,"name":"uint256","nodeType":"ElementaryTypeName","src":"12363:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3827,"initialValue":{"arguments":[{"id":3825,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3814,"src":"12387:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3824,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[3811,3850],"referencedDeclaration":3811,"src":"12380:6:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3826,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12380:13:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12363:30:14"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3828,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3823,"src":"12414:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2993","typeString":"enum Math.Rounding"},"id":3832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3829,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3817,"src":"12424:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2993","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3830,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2993,"src":"12436:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2993_$","typeString":"type(enum Math.Rounding)"}},"id":3831,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12445:2:14","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2991,"src":"12436:11:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2993","typeString":"enum Math.Rounding"}},"src":"12424:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3833,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12451:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3834,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3823,"src":"12457:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"38","id":3835,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12466:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12457:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3837,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12456:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12451:17:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3839,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3814,"src":"12471:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12451:25:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12424:52:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3843,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12483:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12424:60:14","trueExpression":{"hexValue":"31","id":3842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12479:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3845,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12423:62:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12414:71:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3821,"id":3847,"nodeType":"Return","src":"12407:78:14"}]}]},"documentation":{"id":3812,"nodeType":"StructuredDocumentation","src":"12099:143:14","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3850,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12256:6:14","nodeType":"FunctionDefinition","parameters":{"id":3818,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3814,"mutability":"mutable","name":"value","nameLocation":"12271:5:14","nodeType":"VariableDeclaration","scope":3850,"src":"12263:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3813,"name":"uint256","nodeType":"ElementaryTypeName","src":"12263:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3817,"mutability":"mutable","name":"rounding","nameLocation":"12287:8:14","nodeType":"VariableDeclaration","scope":3850,"src":"12278:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2993","typeString":"enum Math.Rounding"},"typeName":{"id":3816,"nodeType":"UserDefinedTypeName","pathNode":{"id":3815,"name":"Rounding","nameLocations":["12278:8:14"],"nodeType":"IdentifierPath","referencedDeclaration":2993,"src":"12278:8:14"},"referencedDeclaration":2993,"src":"12278:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2993","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"12262:34:14"},"returnParameters":{"id":3821,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3820,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3850,"src":"12320:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3819,"name":"uint256","nodeType":"ElementaryTypeName","src":"12320:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12319:9:14"},"scope":3851,"src":"12247:255:14","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3852,"src":"202:12302:14","usedErrors":[]}],"src":"103:12402:14"},"id":14},"contracts/SAFTToken.sol":{"ast":{"absolutePath":"contracts/SAFTToken.sol","exportedSymbols":{"AccessControl":[315],"Address":[2251],"Context":[2273],"ERC1155":[1665],"ERC165":[2974],"IAccessControl":[388],"IERC1155":[1787],"IERC1155MetadataURI":[1843],"IERC1155Receiver":[1828],"IERC165":[2986],"IERC20":[3876],"IExecutorManager":[3864],"ITradingWallet":[3900],"Math":[3851],"MerkleProof":[2950],"SAFTToken":[4434],"Strings":[2448]},"id":4435,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3853,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:15"},{"absolutePath":"@openzeppelin/contracts/token/ERC1155/ERC1155.sol","file":"@openzeppelin/contracts/token/ERC1155/ERC1155.sol","id":3854,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4435,"sourceUnit":1666,"src":"57:59:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","file":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","id":3855,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4435,"sourceUnit":2951,"src":"117:68:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/AccessControl.sol","file":"@openzeppelin/contracts/access/AccessControl.sol","id":3856,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4435,"sourceUnit":316,"src":"186:58:15","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IExecutorManager","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":3864,"linearizedBaseContracts":[3864],"name":"IExecutorManager","nameLocation":"256:16:15","nodeType":"ContractDefinition","nodes":[{"functionSelector":"debfda30","id":3863,"implemented":false,"kind":"function","modifiers":[],"name":"isExecutor","nameLocation":"285:10:15","nodeType":"FunctionDefinition","parameters":{"id":3859,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3858,"mutability":"mutable","name":"_address","nameLocation":"304:8:15","nodeType":"VariableDeclaration","scope":3863,"src":"296:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3857,"name":"address","nodeType":"ElementaryTypeName","src":"296:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"295:18:15"},"returnParameters":{"id":3862,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3861,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3863,"src":"337:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3860,"name":"bool","nodeType":"ElementaryTypeName","src":"337:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"336:6:15"},"scope":3864,"src":"276:67:15","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4435,"src":"246:99:15","usedErrors":[]},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":3876,"linearizedBaseContracts":[3876],"name":"IERC20","nameLocation":"357:6:15","nodeType":"ContractDefinition","nodes":[{"functionSelector":"23b872dd","id":3875,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"376:12:15","nodeType":"FunctionDefinition","parameters":{"id":3871,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3866,"mutability":"mutable","name":"sender","nameLocation":"400:6:15","nodeType":"VariableDeclaration","scope":3875,"src":"392:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3865,"name":"address","nodeType":"ElementaryTypeName","src":"392:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3868,"mutability":"mutable","name":"recipient","nameLocation":"418:9:15","nodeType":"VariableDeclaration","scope":3875,"src":"410:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3867,"name":"address","nodeType":"ElementaryTypeName","src":"410:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3870,"mutability":"mutable","name":"amount","nameLocation":"439:6:15","nodeType":"VariableDeclaration","scope":3875,"src":"431:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3869,"name":"uint256","nodeType":"ElementaryTypeName","src":"431:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"388:60:15"},"returnParameters":{"id":3874,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3873,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3875,"src":"467:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3872,"name":"bool","nodeType":"ElementaryTypeName","src":"467:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"466:6:15"},"scope":3876,"src":"367:106:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":4435,"src":"347:128:15","usedErrors":[]},{"abstract":false,"baseContracts":[],"canonicalName":"ITradingWallet","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":3900,"linearizedBaseContracts":[3900],"name":"ITradingWallet","nameLocation":"487:14:15","nodeType":"ContractDefinition","nodes":[{"functionSelector":"38419104","id":3890,"implemented":false,"kind":"function","modifiers":[],"name":"batchUpdateBalances","nameLocation":"514:19:15","nodeType":"FunctionDefinition","parameters":{"id":3888,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3879,"mutability":"mutable","name":"fromAddresses","nameLocation":"554:13:15","nodeType":"VariableDeclaration","scope":3890,"src":"537:30:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3877,"name":"address","nodeType":"ElementaryTypeName","src":"537:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3878,"nodeType":"ArrayTypeName","src":"537:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":3882,"mutability":"mutable","name":"toAddresses","nameLocation":"588:11:15","nodeType":"VariableDeclaration","scope":3890,"src":"571:28:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3880,"name":"address","nodeType":"ElementaryTypeName","src":"571:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3881,"nodeType":"ArrayTypeName","src":"571:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":3884,"mutability":"mutable","name":"token","nameLocation":"611:5:15","nodeType":"VariableDeclaration","scope":3890,"src":"603:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3883,"name":"address","nodeType":"ElementaryTypeName","src":"603:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3887,"mutability":"mutable","name":"amounts","nameLocation":"637:7:15","nodeType":"VariableDeclaration","scope":3890,"src":"620:24:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3885,"name":"uint256","nodeType":"ElementaryTypeName","src":"620:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3886,"nodeType":"ArrayTypeName","src":"620:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"533:114:15"},"returnParameters":{"id":3889,"nodeType":"ParameterList","parameters":[],"src":"656:0:15"},"scope":3900,"src":"505:152:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"c3a8962c","id":3899,"implemented":false,"kind":"function","modifiers":[],"name":"getERC20Balance","nameLocation":"669:15:15","nodeType":"FunctionDefinition","parameters":{"id":3895,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3892,"mutability":"mutable","name":"user","nameLocation":"696:4:15","nodeType":"VariableDeclaration","scope":3899,"src":"688:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3891,"name":"address","nodeType":"ElementaryTypeName","src":"688:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3894,"mutability":"mutable","name":"token","nameLocation":"712:5:15","nodeType":"VariableDeclaration","scope":3899,"src":"704:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3893,"name":"address","nodeType":"ElementaryTypeName","src":"704:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"684:36:15"},"returnParameters":{"id":3898,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3897,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3899,"src":"744:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3896,"name":"uint256","nodeType":"ElementaryTypeName","src":"744:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"743:9:15"},"scope":3900,"src":"660:93:15","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4435,"src":"477:278:15","usedErrors":[]},{"abstract":false,"baseContracts":[{"baseName":{"id":3901,"name":"ERC1155","nameLocations":["779:7:15"],"nodeType":"IdentifierPath","referencedDeclaration":1665,"src":"779:7:15"},"id":3902,"nodeType":"InheritanceSpecifier","src":"779:7:15"},{"baseName":{"id":3903,"name":"AccessControl","nameLocations":["788:13:15"],"nodeType":"IdentifierPath","referencedDeclaration":315,"src":"788:13:15"},"id":3904,"nodeType":"InheritanceSpecifier","src":"788:13:15"}],"canonicalName":"SAFTToken","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4434,"linearizedBaseContracts":[4434,315,1665,1843,1787,2974,2986,388,2273],"name":"SAFTToken","nameLocation":"766:9:15","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"2eb4a7ab","id":3906,"mutability":"mutable","name":"merkleRoot","nameLocation":"820:10:15","nodeType":"VariableDeclaration","scope":4434,"src":"805:25:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3905,"name":"bytes32","nodeType":"ElementaryTypeName","src":"805:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":false,"functionSelector":"2ecc6160","id":3910,"mutability":"mutable","name":"lockingFlags","nameLocation":"865:12:15","nodeType":"VariableDeclaration","scope":4434,"src":"833:44:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"},"typeName":{"id":3909,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3907,"name":"uint256","nodeType":"ElementaryTypeName","src":"841:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"833:24:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3908,"name":"bool","nodeType":"ElementaryTypeName","src":"852:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"constant":false,"id":3912,"mutability":"mutable","name":"tokenIdCounter","nameLocation":"928:14:15","nodeType":"VariableDeclaration","scope":4434,"src":"912:30:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3911,"name":"uint256","nodeType":"ElementaryTypeName","src":"912:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"functionSelector":"7b1b1de6","id":3914,"mutability":"mutable","name":"pricePerToken","nameLocation":"957:13:15","nodeType":"VariableDeclaration","scope":4434,"src":"945:25:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3913,"name":"uint","nodeType":"ElementaryTypeName","src":"945:4:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"8abdf5aa","id":3916,"mutability":"mutable","name":"serviceFee","nameLocation":"985:10:15","nodeType":"VariableDeclaration","scope":4434,"src":"973:22:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3915,"name":"uint","nodeType":"ElementaryTypeName","src":"973:4:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"26232a2e","id":3918,"mutability":"mutable","name":"platformFee","nameLocation":"1010:11:15","nodeType":"VariableDeclaration","scope":4434,"src":"998:23:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3917,"name":"uint","nodeType":"ElementaryTypeName","src":"998:4:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":true,"functionSelector":"07bd0265","id":3923,"mutability":"constant","name":"EXECUTOR_ROLE","nameLocation":"1048:13:15","nodeType":"VariableDeclaration","scope":4434,"src":"1024:66:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3919,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1024:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"4558454355544f525f524f4c45","id":3921,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1074:15:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_d8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63","typeString":"literal_string \"EXECUTOR_ROLE\""},"value":"EXECUTOR_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_d8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63","typeString":"literal_string \"EXECUTOR_ROLE\""}],"id":3920,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1064:9:15","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3922,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1064:26:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":false,"functionSelector":"c55dae63","id":3926,"mutability":"mutable","name":"baseToken","nameLocation":"1107:9:15","nodeType":"VariableDeclaration","scope":4434,"src":"1093:23:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3876","typeString":"contract IERC20"},"typeName":{"id":3925,"nodeType":"UserDefinedTypeName","pathNode":{"id":3924,"name":"IERC20","nameLocations":["1093:6:15"],"nodeType":"IdentifierPath","referencedDeclaration":3876,"src":"1093:6:15"},"referencedDeclaration":3876,"src":"1093:6:15","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3876","typeString":"contract IERC20"}},"visibility":"public"},{"constant":false,"functionSelector":"c0883b92","id":3929,"mutability":"mutable","name":"executorManager","nameLocation":"1143:15:15","nodeType":"VariableDeclaration","scope":4434,"src":"1119:39:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IExecutorManager_$3864","typeString":"contract IExecutorManager"},"typeName":{"id":3928,"nodeType":"UserDefinedTypeName","pathNode":{"id":3927,"name":"IExecutorManager","nameLocations":["1119:16:15"],"nodeType":"IdentifierPath","referencedDeclaration":3864,"src":"1119:16:15"},"referencedDeclaration":3864,"src":"1119:16:15","typeDescriptions":{"typeIdentifier":"t_contract$_IExecutorManager_$3864","typeString":"contract IExecutorManager"}},"visibility":"public"},{"constant":false,"functionSelector":"207f1850","id":3932,"mutability":"mutable","name":"tradingWallet","nameLocation":"1183:13:15","nodeType":"VariableDeclaration","scope":4434,"src":"1161:35:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ITradingWallet_$3900","typeString":"contract ITradingWallet"},"typeName":{"id":3931,"nodeType":"UserDefinedTypeName","pathNode":{"id":3930,"name":"ITradingWallet","nameLocations":["1161:14:15"],"nodeType":"IdentifierPath","referencedDeclaration":3900,"src":"1161:14:15"},"referencedDeclaration":3900,"src":"1161:14:15","typeDescriptions":{"typeIdentifier":"t_contract$_ITradingWallet_$3900","typeString":"contract ITradingWallet"}},"visibility":"public"},{"constant":false,"functionSelector":"e138818c","id":3934,"mutability":"mutable","name":"platformTreasury","nameLocation":"1214:16:15","nodeType":"VariableDeclaration","scope":4434,"src":"1199:31:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3933,"name":"address","nodeType":"ElementaryTypeName","src":"1199:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"anonymous":false,"eventSelector":"78202e946262627c432f6c5b92fee2a7224c9aabdb3c71f747fccbad2fb470a4","id":3944,"name":"BundleProcessed","nameLocation":"1240:15:15","nodeType":"EventDefinition","parameters":{"id":3943,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3936,"indexed":true,"mutability":"mutable","name":"executor","nameLocation":"1275:8:15","nodeType":"VariableDeclaration","scope":3944,"src":"1259:24:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3935,"name":"address","nodeType":"ElementaryTypeName","src":"1259:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3938,"indexed":true,"mutability":"mutable","name":"bundleNonce","nameLocation":"1303:11:15","nodeType":"VariableDeclaration","scope":3944,"src":"1287:27:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3937,"name":"uint256","nodeType":"ElementaryTypeName","src":"1287:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3940,"indexed":false,"mutability":"mutable","name":"bundleHash","nameLocation":"1326:10:15","nodeType":"VariableDeclaration","scope":3944,"src":"1318:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3939,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1318:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3942,"indexed":false,"mutability":"mutable","name":"timestamp","nameLocation":"1348:9:15","nodeType":"VariableDeclaration","scope":3944,"src":"1340:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3941,"name":"uint256","nodeType":"ElementaryTypeName","src":"1340:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1255:105:15"},"src":"1234:127:15"},{"body":{"id":4035,"nodeType":"Block","src":"1659:472:15","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3973,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3946,"src":"1671:6:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3976,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1689:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3975,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1681:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3974,"name":"address","nodeType":"ElementaryTypeName","src":"1681:7:15","typeDescriptions":{}}},"id":3977,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1681:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1671:20:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e657220616464726573732063616e6e6f7420626520656d707479","id":3979,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1693:31:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_5ce500c9dc2e59e02700829a3ac6c4c1e7fc183d658cfaf2fdd6892d9a845f30","typeString":"literal_string \"Owner address cannot be empty\""},"value":"Owner address cannot be empty"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5ce500c9dc2e59e02700829a3ac6c4c1e7fc183d658cfaf2fdd6892d9a845f30","typeString":"literal_string \"Owner address cannot be empty\""}],"id":3972,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1663:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3980,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1663:62:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3981,"nodeType":"ExpressionStatement","src":"1663:62:15"},{"expression":{"arguments":[{"expression":{"id":3983,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1735:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1739:6:15","memberName":"sender","nodeType":"MemberAccess","src":"1735:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1747:16:15","subExpression":{"id":3985,"name":"tokenIdCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3912,"src":"1747:14:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3987,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3952,"src":"1765:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":3988,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1778:2:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":3982,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1099,"src":"1729:5:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,uint256,bytes memory)"}},"id":3989,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1729:52:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3990,"nodeType":"ExpressionStatement","src":"1729:52:15"},{"expression":{"arguments":[{"id":3992,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"1796:18:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":3993,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1816:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3994,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1820:6:15","memberName":"sender","nodeType":"MemberAccess","src":"1816:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3991,"name":"_setupRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":223,"src":"1785:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":3995,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1785:42:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3996,"nodeType":"ExpressionStatement","src":"1785:42:15"},{"expression":{"id":3999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3997,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3906,"src":"1831:10:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3998,"name":"_merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3948,"src":"1844:11:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1831:24:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4000,"nodeType":"ExpressionStatement","src":"1831:24:15"},{"expression":{"id":4003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4001,"name":"serviceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3916,"src":"1859:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4002,"name":"_serviceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3958,"src":"1872:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1859:24:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4004,"nodeType":"ExpressionStatement","src":"1859:24:15"},{"expression":{"id":4007,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4005,"name":"platformFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3918,"src":"1887:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4006,"name":"_platformFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3960,"src":"1901:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1887:26:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4008,"nodeType":"ExpressionStatement","src":"1887:26:15"},{"expression":{"id":4011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4009,"name":"pricePerToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3914,"src":"1917:13:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4010,"name":"_pricePerToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3954,"src":"1933:14:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1917:30:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4012,"nodeType":"ExpressionStatement","src":"1917:30:15"},{"expression":{"id":4015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4013,"name":"platformTreasury","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3934,"src":"1951:16:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4014,"name":"_platformTreasury","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3964,"src":"1970:17:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1951:36:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4016,"nodeType":"ExpressionStatement","src":"1951:36:15"},{"expression":{"id":4021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4017,"name":"executorManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3929,"src":"1991:15:15","typeDescriptions":{"typeIdentifier":"t_contract$_IExecutorManager_$3864","typeString":"contract IExecutorManager"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4019,"name":"_executorManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3956,"src":"2026:16:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4018,"name":"IExecutorManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3864,"src":"2009:16:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IExecutorManager_$3864_$","typeString":"type(contract IExecutorManager)"}},"id":4020,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2009:34:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IExecutorManager_$3864","typeString":"contract IExecutorManager"}},"src":"1991:52:15","typeDescriptions":{"typeIdentifier":"t_contract$_IExecutorManager_$3864","typeString":"contract IExecutorManager"}},"id":4022,"nodeType":"ExpressionStatement","src":"1991:52:15"},{"expression":{"id":4027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4023,"name":"baseToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3926,"src":"2047:9:15","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3876","typeString":"contract IERC20"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4025,"name":"_baseToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3962,"src":"2066:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4024,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3876,"src":"2059:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$3876_$","typeString":"type(contract IERC20)"}},"id":4026,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2059:18:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3876","typeString":"contract IERC20"}},"src":"2047:30:15","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3876","typeString":"contract IERC20"}},"id":4028,"nodeType":"ExpressionStatement","src":"2047:30:15"},{"expression":{"id":4033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4029,"name":"tradingWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3932,"src":"2081:13:15","typeDescriptions":{"typeIdentifier":"t_contract$_ITradingWallet_$3900","typeString":"contract ITradingWallet"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4031,"name":"_tradingWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3966,"src":"2112:14:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4030,"name":"ITradingWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3900,"src":"2097:14:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ITradingWallet_$3900_$","typeString":"type(contract ITradingWallet)"}},"id":4032,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2097:30:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ITradingWallet_$3900","typeString":"contract ITradingWallet"}},"src":"2081:46:15","typeDescriptions":{"typeIdentifier":"t_contract$_ITradingWallet_$3900","typeString":"contract ITradingWallet"}},"id":4034,"nodeType":"ExpressionStatement","src":"2081:46:15"}]},"id":4036,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":3969,"name":"metadataUri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3950,"src":"1646:11:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"id":3970,"kind":"baseConstructorSpecifier","modifierName":{"id":3968,"name":"ERC1155","nameLocations":["1638:7:15"],"nodeType":"IdentifierPath","referencedDeclaration":1665,"src":"1638:7:15"},"nodeType":"ModifierInvocation","src":"1638:20:15"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3967,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3946,"mutability":"mutable","name":"_owner","nameLocation":"1387:6:15","nodeType":"VariableDeclaration","scope":4036,"src":"1379:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3945,"name":"address","nodeType":"ElementaryTypeName","src":"1379:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3948,"mutability":"mutable","name":"_merkleRoot","nameLocation":"1405:11:15","nodeType":"VariableDeclaration","scope":4036,"src":"1397:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3947,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1397:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3950,"mutability":"mutable","name":"metadataUri","nameLocation":"1434:11:15","nodeType":"VariableDeclaration","scope":4036,"src":"1420:25:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3949,"name":"string","nodeType":"ElementaryTypeName","src":"1420:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3952,"mutability":"mutable","name":"totalSupply","nameLocation":"1454:11:15","nodeType":"VariableDeclaration","scope":4036,"src":"1449:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3951,"name":"uint","nodeType":"ElementaryTypeName","src":"1449:4:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3954,"mutability":"mutable","name":"_pricePerToken","nameLocation":"1474:14:15","nodeType":"VariableDeclaration","scope":4036,"src":"1469:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3953,"name":"uint","nodeType":"ElementaryTypeName","src":"1469:4:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3956,"mutability":"mutable","name":"_executorManager","nameLocation":"1500:16:15","nodeType":"VariableDeclaration","scope":4036,"src":"1492:24:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3955,"name":"address","nodeType":"ElementaryTypeName","src":"1492:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3958,"mutability":"mutable","name":"_serviceFee","nameLocation":"1525:11:15","nodeType":"VariableDeclaration","scope":4036,"src":"1520:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3957,"name":"uint","nodeType":"ElementaryTypeName","src":"1520:4:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3960,"mutability":"mutable","name":"_platformFee","nameLocation":"1545:12:15","nodeType":"VariableDeclaration","scope":4036,"src":"1540:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3959,"name":"uint","nodeType":"ElementaryTypeName","src":"1540:4:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3962,"mutability":"mutable","name":"_baseToken","nameLocation":"1569:10:15","nodeType":"VariableDeclaration","scope":4036,"src":"1561:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3961,"name":"address","nodeType":"ElementaryTypeName","src":"1561:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3964,"mutability":"mutable","name":"_platformTreasury","nameLocation":"1591:17:15","nodeType":"VariableDeclaration","scope":4036,"src":"1583:25:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3963,"name":"address","nodeType":"ElementaryTypeName","src":"1583:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3966,"mutability":"mutable","name":"_tradingWallet","nameLocation":"1620:14:15","nodeType":"VariableDeclaration","scope":4036,"src":"1612:22:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3965,"name":"address","nodeType":"ElementaryTypeName","src":"1612:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1375:262:15"},"returnParameters":{"id":3971,"nodeType":"ParameterList","parameters":[],"src":"1659:0:15"},"scope":4434,"src":"1364:767:15","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[657],"body":{"id":4056,"nodeType":"Block","src":"2236:86:15","statements":[{"condition":{"arguments":[{"id":4048,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4040,"src":"2271:8:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4046,"name":"executorManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3929,"src":"2244:15:15","typeDescriptions":{"typeIdentifier":"t_contract$_IExecutorManager_$3864","typeString":"contract IExecutorManager"}},"id":4047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2260:10:15","memberName":"isExecutor","nodeType":"MemberAccess","referencedDeclaration":3863,"src":"2244:26:15","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view external returns (bool)"}},"id":4049,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2244:36:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4053,"nodeType":"IfStatement","src":"2240:63:15","trueBody":{"id":4052,"nodeType":"Block","src":"2282:21:15","statements":[{"expression":{"hexValue":"74727565","id":4050,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2294:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":4045,"id":4051,"nodeType":"Return","src":"2287:11:15"}]}},{"expression":{"hexValue":"66616c7365","id":4054,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2313:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":4045,"id":4055,"nodeType":"Return","src":"2306:12:15"}]},"functionSelector":"e985e9c5","id":4057,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"2143:16:15","nodeType":"FunctionDefinition","overrides":{"id":4042,"nodeType":"OverrideSpecifier","overrides":[],"src":"2212:8:15"},"parameters":{"id":4041,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4038,"mutability":"mutable","name":"owner","nameLocation":"2171:5:15","nodeType":"VariableDeclaration","scope":4057,"src":"2163:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4037,"name":"address","nodeType":"ElementaryTypeName","src":"2163:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4040,"mutability":"mutable","name":"operator","nameLocation":"2188:8:15","nodeType":"VariableDeclaration","scope":4057,"src":"2180:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4039,"name":"address","nodeType":"ElementaryTypeName","src":"2180:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2159:40:15"},"returnParameters":{"id":4045,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4044,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4057,"src":"2230:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4043,"name":"bool","nodeType":"ElementaryTypeName","src":"2230:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2229:6:15"},"scope":4434,"src":"2134:188:15","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[1489],"body":{"id":4094,"nodeType":"Block","src":"2499:144:15","statements":[{"expression":{"arguments":[{"arguments":[{"id":4077,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4061,"src":"2528:4:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4078,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4059,"src":"2534:8:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4076,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[4057],"referencedDeclaration":4057,"src":"2511:16:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":4079,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2511:32:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5472616e73666572206e6f7420617070726f766564","id":4080,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2545:23:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_9bd124d272f06141b15552f4450bbed70049ce5ab0bcee1bad3c2f0f7ff9f544","typeString":"literal_string \"Transfer not approved\""},"value":"Transfer not approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9bd124d272f06141b15552f4450bbed70049ce5ab0bcee1bad3c2f0f7ff9f544","typeString":"literal_string \"Transfer not approved\""}],"id":4075,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2503:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4081,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2503:66:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4082,"nodeType":"ExpressionStatement","src":"2503:66:15"},{"expression":{"arguments":[{"id":4086,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4059,"src":"2600:8:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4087,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4061,"src":"2610:4:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4088,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4063,"src":"2616:2:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4089,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4066,"src":"2620:3:15","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":4090,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4069,"src":"2625:7:15","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":4091,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4071,"src":"2634:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":4083,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2573:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_SAFTToken_$4434_$","typeString":"type(contract super SAFTToken)"}},"id":4085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2579:20:15","memberName":"_beforeTokenTransfer","nodeType":"MemberAccess","referencedDeclaration":1489,"src":"2573:26:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":4092,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2573:66:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4093,"nodeType":"ExpressionStatement","src":"2573:66:15"}]},"id":4095,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"2334:20:15","nodeType":"FunctionDefinition","overrides":{"id":4073,"nodeType":"OverrideSpecifier","overrides":[],"src":"2490:8:15"},"parameters":{"id":4072,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4059,"mutability":"mutable","name":"operator","nameLocation":"2366:8:15","nodeType":"VariableDeclaration","scope":4095,"src":"2358:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4058,"name":"address","nodeType":"ElementaryTypeName","src":"2358:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4061,"mutability":"mutable","name":"from","nameLocation":"2386:4:15","nodeType":"VariableDeclaration","scope":4095,"src":"2378:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4060,"name":"address","nodeType":"ElementaryTypeName","src":"2378:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4063,"mutability":"mutable","name":"to","nameLocation":"2402:2:15","nodeType":"VariableDeclaration","scope":4095,"src":"2394:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4062,"name":"address","nodeType":"ElementaryTypeName","src":"2394:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4066,"mutability":"mutable","name":"ids","nameLocation":"2425:3:15","nodeType":"VariableDeclaration","scope":4095,"src":"2408:20:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4064,"name":"uint256","nodeType":"ElementaryTypeName","src":"2408:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4065,"nodeType":"ArrayTypeName","src":"2408:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":4069,"mutability":"mutable","name":"amounts","nameLocation":"2449:7:15","nodeType":"VariableDeclaration","scope":4095,"src":"2432:24:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4067,"name":"uint256","nodeType":"ElementaryTypeName","src":"2432:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4068,"nodeType":"ArrayTypeName","src":"2432:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":4071,"mutability":"mutable","name":"data","nameLocation":"2473:4:15","nodeType":"VariableDeclaration","scope":4095,"src":"2460:17:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4070,"name":"bytes","nodeType":"ElementaryTypeName","src":"2460:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2354:126:15"},"returnParameters":{"id":4074,"nodeType":"ParameterList","parameters":[],"src":"2499:0:15"},"scope":4434,"src":"2325:318:15","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4147,"nodeType":"Block","src":"2752:478:15","statements":[{"assignments":[4106],"declarations":[{"constant":false,"id":4106,"mutability":"mutable","name":"id","nameLocation":"2764:2:15","nodeType":"VariableDeclaration","scope":4147,"src":"2756:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4105,"name":"uint256","nodeType":"ElementaryTypeName","src":"2756:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4108,"initialValue":{"id":4107,"name":"tokenIdCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3912,"src":"2769:14:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2756:27:15"},{"expression":{"arguments":[{"id":4113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2795:17:15","subExpression":{"baseExpression":{"id":4110,"name":"lockingFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3910,"src":"2796:12:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"}},"id":4112,"indexExpression":{"id":4111,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4106,"src":"2809:2:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2796:16:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"546f6b656e2069732063757272656e746c79206c6f636b656420666f72206d696e74696e67","id":4114,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2814:39:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_c05b6e35da5e61f1d7b3ef7e615ddf60dfc35de37aba5dd75608f23dd6e104fb","typeString":"literal_string \"Token is currently locked for minting\""},"value":"Token is currently locked for minting"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c05b6e35da5e61f1d7b3ef7e615ddf60dfc35de37aba5dd75608f23dd6e104fb","typeString":"literal_string \"Token is currently locked for minting\""}],"id":4109,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2787:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4115,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2787:67:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4116,"nodeType":"ExpressionStatement","src":"2787:67:15"},{"expression":{"arguments":[{"arguments":[{"id":4119,"name":"merkleProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4102,"src":"2928:11:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}],"id":4118,"name":"isWhitelisted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4174,"src":"2914:13:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_bytes32_$dyn_calldata_ptr_$returns$_t_bool_$","typeString":"function (bytes32[] calldata) view returns (bool)"}},"id":4120,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2914:26:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"43616c6c6572206973206e6f742077686974656c6973746564","id":4121,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2942:27:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_60304f7258d86aaa1cc1138fb2f6bbc524adfb91bc7985c5cde7fccc8aa6045a","typeString":"literal_string \"Caller is not whitelisted\""},"value":"Caller is not whitelisted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_60304f7258d86aaa1cc1138fb2f6bbc524adfb91bc7985c5cde7fccc8aa6045a","typeString":"literal_string \"Caller is not whitelisted\""}],"id":4117,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2906:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4122,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2906:64:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4123,"nodeType":"ExpressionStatement","src":"2906:64:15"},{"expression":{"id":4128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4124,"name":"lockingFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3910,"src":"2975:12:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"}},"id":4126,"indexExpression":{"id":4125,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4106,"src":"2988:2:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2975:16:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":4127,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2994:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2975:23:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4129,"nodeType":"ExpressionStatement","src":"2975:23:15"},{"expression":{"arguments":[{"expression":{"id":4131,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3113:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3117:6:15","memberName":"sender","nodeType":"MemberAccess","src":"3113:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4133,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4106,"src":"3125:2:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4134,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4097,"src":"3129:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4135,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4099,"src":"3137:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4130,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1099,"src":"3107:5:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,uint256,bytes memory)"}},"id":4136,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3107:35:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4137,"nodeType":"ExpressionStatement","src":"3107:35:15"},{"expression":{"id":4142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4138,"name":"lockingFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3910,"src":"3147:12:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"}},"id":4140,"indexExpression":{"id":4139,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4106,"src":"3160:2:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3147:16:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":4141,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3166:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3147:24:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4143,"nodeType":"ExpressionStatement","src":"3147:24:15"},{"expression":{"id":4145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3210:16:15","subExpression":{"id":4144,"name":"tokenIdCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3912,"src":"3210:14:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4146,"nodeType":"ExpressionStatement","src":"3210:16:15"}]},"functionSelector":"c3ae2b78","id":4148,"implemented":true,"kind":"function","modifiers":[],"name":"whitelistMint","nameLocation":"2655:13:15","nodeType":"FunctionDefinition","parameters":{"id":4103,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4097,"mutability":"mutable","name":"amount","nameLocation":"2680:6:15","nodeType":"VariableDeclaration","scope":4148,"src":"2672:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4096,"name":"uint256","nodeType":"ElementaryTypeName","src":"2672:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4099,"mutability":"mutable","name":"data","nameLocation":"2703:4:15","nodeType":"VariableDeclaration","scope":4148,"src":"2690:17:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4098,"name":"bytes","nodeType":"ElementaryTypeName","src":"2690:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4102,"mutability":"mutable","name":"merkleProof","nameLocation":"2730:11:15","nodeType":"VariableDeclaration","scope":4148,"src":"2711:30:15","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4100,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2711:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4101,"nodeType":"ArrayTypeName","src":"2711:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"2668:76:15"},"returnParameters":{"id":4104,"nodeType":"ParameterList","parameters":[],"src":"2752:0:15"},"scope":4434,"src":"2646:584:15","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4173,"nodeType":"Block","src":"3320:122:15","statements":[{"assignments":[4157],"declarations":[{"constant":false,"id":4157,"mutability":"mutable","name":"leaf","nameLocation":"3332:4:15","nodeType":"VariableDeclaration","scope":4173,"src":"3324:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4156,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3324:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4165,"initialValue":{"arguments":[{"arguments":[{"expression":{"id":4161,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3366:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3370:6:15","memberName":"sender","nodeType":"MemberAccess","src":"3366:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4159,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3349:3:15","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4160,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3353:12:15","memberName":"encodePacked","nodeType":"MemberAccess","src":"3349:16:15","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4163,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3349:28:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4158,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3339:9:15","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4164,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3339:39:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3324:54:15"},{"expression":{"arguments":[{"id":4168,"name":"merkleProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4151,"src":"3408:11:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":4169,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3906,"src":"3421:10:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4170,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4157,"src":"3433:4:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4166,"name":"MerkleProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2950,"src":"3389:11:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MerkleProof_$2950_$","typeString":"type(library MerkleProof)"}},"id":4167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3401:6:15","memberName":"verify","nodeType":"MemberAccess","referencedDeclaration":2472,"src":"3389:18:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$","typeString":"function (bytes32[] memory,bytes32,bytes32) pure returns (bool)"}},"id":4171,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3389:49:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4155,"id":4172,"nodeType":"Return","src":"3382:56:15"}]},"functionSelector":"069824fb","id":4174,"implemented":true,"kind":"function","modifiers":[],"name":"isWhitelisted","nameLocation":"3242:13:15","nodeType":"FunctionDefinition","parameters":{"id":4152,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4151,"mutability":"mutable","name":"merkleProof","nameLocation":"3278:11:15","nodeType":"VariableDeclaration","scope":4174,"src":"3259:30:15","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4149,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3259:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4150,"nodeType":"ArrayTypeName","src":"3259:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"3255:37:15"},"returnParameters":{"id":4155,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4154,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4174,"src":"3314:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4153,"name":"bool","nodeType":"ElementaryTypeName","src":"3314:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3313:6:15"},"scope":4434,"src":"3233:209:15","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":4186,"nodeType":"Block","src":"3530:32:15","statements":[{"expression":{"id":4184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4182,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3906,"src":"3534:10:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4183,"name":"_merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4176,"src":"3547:11:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3534:24:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4185,"nodeType":"ExpressionStatement","src":"3534:24:15"}]},"functionSelector":"7cb64759","id":4187,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4179,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"3510:18:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4180,"kind":"modifierInvocation","modifierName":{"id":4178,"name":"onlyRole","nameLocations":["3501:8:15"],"nodeType":"IdentifierPath","referencedDeclaration":38,"src":"3501:8:15"},"nodeType":"ModifierInvocation","src":"3501:28:15"}],"name":"setMerkleRoot","nameLocation":"3454:13:15","nodeType":"FunctionDefinition","parameters":{"id":4177,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4176,"mutability":"mutable","name":"_merkleRoot","nameLocation":"3479:11:15","nodeType":"VariableDeclaration","scope":4187,"src":"3471:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4175,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3471:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3467:26:15"},"returnParameters":{"id":4181,"nodeType":"ParameterList","parameters":[],"src":"3530:0:15"},"scope":4434,"src":"3445:117:15","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[60,518],"body":{"id":4207,"nodeType":"Block","src":"3685:107:15","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4199,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4189,"src":"3725:11:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":4197,"name":"ERC1155","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1665,"src":"3699:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC1155_$1665_$","typeString":"type(contract ERC1155)"}},"id":4198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3707:17:15","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":518,"src":"3699:25:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":4200,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3699:38:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":4203,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4189,"src":"3776:11:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":4201,"name":"AccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":315,"src":"3744:13:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControl_$315_$","typeString":"type(contract AccessControl)"}},"id":4202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3758:17:15","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":60,"src":"3744:31:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":4204,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3744:44:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3699:89:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4196,"id":4206,"nodeType":"Return","src":"3689:99:15"}]},"functionSelector":"01ffc9a7","id":4208,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"3574:17:15","nodeType":"FunctionDefinition","overrides":{"id":4193,"nodeType":"OverrideSpecifier","overrides":[{"id":4191,"name":"ERC1155","nameLocations":["3646:7:15"],"nodeType":"IdentifierPath","referencedDeclaration":1665,"src":"3646:7:15"},{"id":4192,"name":"AccessControl","nameLocations":["3655:13:15"],"nodeType":"IdentifierPath","referencedDeclaration":315,"src":"3655:13:15"}],"src":"3637:32:15"},"parameters":{"id":4190,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4189,"mutability":"mutable","name":"interfaceId","nameLocation":"3602:11:15","nodeType":"VariableDeclaration","scope":4208,"src":"3595:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":4188,"name":"bytes4","nodeType":"ElementaryTypeName","src":"3595:6:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"3591:25:15"},"returnParameters":{"id":4196,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4195,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4208,"src":"3679:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4194,"name":"bool","nodeType":"ElementaryTypeName","src":"3679:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3678:6:15"},"scope":4434,"src":"3565:227:15","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":4222,"nodeType":"Block","src":"3890:60:15","statements":[{"expression":{"id":4220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4216,"name":"executorManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3929,"src":"3894:15:15","typeDescriptions":{"typeIdentifier":"t_contract$_IExecutorManager_$3864","typeString":"contract IExecutorManager"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4218,"name":"_executorManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4210,"src":"3929:16:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4217,"name":"IExecutorManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3864,"src":"3912:16:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IExecutorManager_$3864_$","typeString":"type(contract IExecutorManager)"}},"id":4219,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3912:34:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IExecutorManager_$3864","typeString":"contract IExecutorManager"}},"src":"3894:52:15","typeDescriptions":{"typeIdentifier":"t_contract$_IExecutorManager_$3864","typeString":"contract IExecutorManager"}},"id":4221,"nodeType":"ExpressionStatement","src":"3894:52:15"}]},"functionSelector":"ef0d4572","id":4223,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4213,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"3870:18:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4214,"kind":"modifierInvocation","modifierName":{"id":4212,"name":"onlyRole","nameLocations":["3861:8:15"],"nodeType":"IdentifierPath","referencedDeclaration":38,"src":"3861:8:15"},"nodeType":"ModifierInvocation","src":"3861:28:15"}],"name":"setExecutorManager","nameLocation":"3804:18:15","nodeType":"FunctionDefinition","parameters":{"id":4211,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4210,"mutability":"mutable","name":"_executorManager","nameLocation":"3834:16:15","nodeType":"VariableDeclaration","scope":4223,"src":"3826:24:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4209,"name":"address","nodeType":"ElementaryTypeName","src":"3826:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3822:31:15"},"returnParameters":{"id":4215,"nodeType":"ParameterList","parameters":[],"src":"3890:0:15"},"scope":4434,"src":"3795:155:15","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4432,"nodeType":"Block","src":"4038:2010:15","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":4233,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4081:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4085:6:15","memberName":"sender","nodeType":"MemberAccess","src":"4081:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4231,"name":"executorManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3929,"src":"4054:15:15","typeDescriptions":{"typeIdentifier":"t_contract$_IExecutorManager_$3864","typeString":"contract IExecutorManager"}},"id":4232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4070:10:15","memberName":"isExecutor","nodeType":"MemberAccess","referencedDeclaration":3863,"src":"4054:26:15","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view external returns (bool)"}},"id":4235,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4054:38:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"43616c6c6572206973206e6f7420616e20617574686f72697a6564206578656375746f72","id":4236,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4097:38:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_691e84db20482a4c42ba7a4aa341855d8289774d9698451740209f85cbb09b0a","typeString":"literal_string \"Caller is not an authorized executor\""},"value":"Caller is not an authorized executor"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_691e84db20482a4c42ba7a4aa341855d8289774d9698451740209f85cbb09b0a","typeString":"literal_string \"Caller is not an authorized executor\""}],"id":4230,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4042:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4237,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4042:97:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4238,"nodeType":"ExpressionStatement","src":"4042:97:15"},{"body":{"id":4415,"nodeType":"Block","src":"4249:1558:15","statements":[{"assignments":[4252,4254,4256,4258],"declarations":[{"constant":false,"id":4252,"mutability":"mutable","name":"buyer","nameLocation":"4268:5:15","nodeType":"VariableDeclaration","scope":4415,"src":"4260:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4251,"name":"address","nodeType":"ElementaryTypeName","src":"4260:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4254,"mutability":"mutable","name":"seller","nameLocation":"4287:6:15","nodeType":"VariableDeclaration","scope":4415,"src":"4279:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4253,"name":"address","nodeType":"ElementaryTypeName","src":"4279:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4256,"mutability":"mutable","name":"tokenId","nameLocation":"4307:7:15","nodeType":"VariableDeclaration","scope":4415,"src":"4299:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4255,"name":"uint256","nodeType":"ElementaryTypeName","src":"4299:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4258,"mutability":"mutable","name":"amount","nameLocation":"4328:6:15","nodeType":"VariableDeclaration","scope":4415,"src":"4320:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4257,"name":"uint256","nodeType":"ElementaryTypeName","src":"4320:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4277,"initialValue":{"arguments":[{"baseExpression":{"id":4261,"name":"bundleData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4225,"src":"4386:10:15","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"endExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4263,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4240,"src":"4399:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"313034","id":4264,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4403:3:15","typeDescriptions":{"typeIdentifier":"t_rational_104_by_1","typeString":"int_const 104"},"value":"104"},"src":"4399:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4266,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexRangeAccess","src":"4386:21:15","startExpression":{"id":4262,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4240,"src":"4397:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"}},{"components":[{"id":4268,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4415:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4267,"name":"address","nodeType":"ElementaryTypeName","src":"4415:7:15","typeDescriptions":{}}},{"id":4270,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4424:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4269,"name":"address","nodeType":"ElementaryTypeName","src":"4424:7:15","typeDescriptions":{}}},{"id":4272,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4433:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4271,"name":"uint256","nodeType":"ElementaryTypeName","src":"4433:7:15","typeDescriptions":{}}},{"id":4274,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4442:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4273,"name":"uint256","nodeType":"ElementaryTypeName","src":"4442:7:15","typeDescriptions":{}}}],"id":4275,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"4414:36:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_address_$_$_t_type$_t_address_$_$_t_type$_t_uint256_$_$_t_type$_t_uint256_$_$","typeString":"tuple(type(address),type(address),type(uint256),type(uint256))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"},{"typeIdentifier":"t_tuple$_t_type$_t_address_$_$_t_type$_t_address_$_$_t_type$_t_uint256_$_$_t_type$_t_uint256_$_$","typeString":"tuple(type(address),type(address),type(uint256),type(uint256))"}],"expression":{"id":4259,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4369:3:15","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4260,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4373:6:15","memberName":"decode","nodeType":"MemberAccess","src":"4369:10:15","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":4276,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4369:87:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_payable_$_t_address_payable_$_t_uint256_$_t_uint256_$","typeString":"tuple(address payable,address payable,uint256,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"4254:202:15"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4284,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4280,"name":"seller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4254,"src":"4532:6:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4281,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4256,"src":"4540:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4279,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":558,"src":"4522:9:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,uint256) view returns (uint256)"}},"id":4282,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4522:26:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4283,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4258,"src":"4552:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4522:36:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53656c6c657220646f6573206e6f74206861766520656e6f75676820746f6b656e73","id":4285,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4564:36:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_acc775314033618014c4c79559957baf417931f6e8d18e4684d327a6a76d2e7e","typeString":"literal_string \"Seller does not have enough tokens\""},"value":"Seller does not have enough tokens"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_acc775314033618014c4c79559957baf417931f6e8d18e4684d327a6a76d2e7e","typeString":"literal_string \"Seller does not have enough tokens\""}],"id":4278,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4509:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4286,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4509:96:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4287,"nodeType":"ExpressionStatement","src":"4509:96:15"},{"assignments":[4289],"declarations":[{"constant":false,"id":4289,"mutability":"mutable","name":"totalPayment","nameLocation":"4687:12:15","nodeType":"VariableDeclaration","scope":4415,"src":"4679:20:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4288,"name":"uint256","nodeType":"ElementaryTypeName","src":"4679:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4293,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4290,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4258,"src":"4702:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4291,"name":"pricePerToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3914,"src":"4711:13:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4702:22:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4679:45:15"},{"assignments":[4295],"declarations":[{"constant":false,"id":4295,"mutability":"mutable","name":"serviceFeeAmount","nameLocation":"4780:16:15","nodeType":"VariableDeclaration","scope":4415,"src":"4775:21:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4294,"name":"uint","nodeType":"ElementaryTypeName","src":"4775:4:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4302,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4296,"name":"totalPayment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4289,"src":"4800:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4297,"name":"serviceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3916,"src":"4815:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4800:25:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4299,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4799:27:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"313030","id":4300,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4829:3:15","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"src":"4799:33:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4775:57:15"},{"assignments":[4304],"declarations":[{"constant":false,"id":4304,"mutability":"mutable","name":"platformFeeAmount","nameLocation":"4842:17:15","nodeType":"VariableDeclaration","scope":4415,"src":"4837:22:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4303,"name":"uint","nodeType":"ElementaryTypeName","src":"4837:4:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4311,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4305,"name":"totalPayment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4289,"src":"4863:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4306,"name":"platformFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3918,"src":"4878:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4863:26:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4308,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4862:28:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"313030","id":4309,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4893:3:15","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"src":"4862:34:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4837:59:15"},{"assignments":[4313],"declarations":[{"constant":false,"id":4313,"mutability":"mutable","name":"totalCost","nameLocation":"4964:9:15","nodeType":"VariableDeclaration","scope":4415,"src":"4956:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4312,"name":"uint256","nodeType":"ElementaryTypeName","src":"4956:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4319,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4314,"name":"totalPayment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4289,"src":"4976:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":4315,"name":"serviceFeeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4295,"src":"4995:16:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4976:35:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":4317,"name":"platformFeeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4304,"src":"5018:17:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4976:59:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4956:79:15"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4323,"name":"buyer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4252,"src":"5121:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":4326,"name":"baseToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3926,"src":"5136:9:15","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3876","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$3876","typeString":"contract IERC20"}],"id":4325,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5128:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4324,"name":"address","nodeType":"ElementaryTypeName","src":"5128:7:15","typeDescriptions":{}}},"id":4327,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5128:18:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4321,"name":"tradingWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3932,"src":"5091:13:15","typeDescriptions":{"typeIdentifier":"t_contract$_ITradingWallet_$3900","typeString":"contract ITradingWallet"}},"id":4322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5105:15:15","memberName":"getERC20Balance","nodeType":"MemberAccess","referencedDeclaration":3899,"src":"5091:29:15","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":4328,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5091:56:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4329,"name":"totalCost","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4313,"src":"5156:9:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5091:74:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"427579657220646f6573206e6f74206861766520656e6f75676820746f6b656e73","id":4331,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5171:35:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_0d206f3891ed4fd63de4d8461a7a83b378123281d9065e8c00f16b46057d8c2c","typeString":"literal_string \"Buyer does not have enough tokens\""},"value":"Buyer does not have enough tokens"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0d206f3891ed4fd63de4d8461a7a83b378123281d9065e8c00f16b46057d8c2c","typeString":"literal_string \"Buyer does not have enough tokens\""}],"id":4320,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5078:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4332,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5078:133:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4333,"nodeType":"ExpressionStatement","src":"5078:133:15"},{"assignments":[4338],"declarations":[{"constant":false,"id":4338,"mutability":"mutable","name":"fromAddresses","nameLocation":"5280:13:15","nodeType":"VariableDeclaration","scope":4415,"src":"5263:30:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":4336,"name":"address","nodeType":"ElementaryTypeName","src":"5263:7:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4337,"nodeType":"ArrayTypeName","src":"5263:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"id":4344,"initialValue":{"arguments":[{"hexValue":"32","id":4342,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5310:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"}],"id":4341,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"5296:13:15","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_address_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (address[] memory)"},"typeName":{"baseType":{"id":4339,"name":"address","nodeType":"ElementaryTypeName","src":"5300:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4340,"nodeType":"ArrayTypeName","src":"5300:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}}},"id":4343,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5296:16:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"nodeType":"VariableDeclarationStatement","src":"5263:49:15"},{"expression":{"id":4349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4345,"name":"fromAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4338,"src":"5317:13:15","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":4347,"indexExpression":{"hexValue":"30","id":4346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5331:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5317:16:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4348,"name":"buyer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4252,"src":"5336:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5317:24:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4350,"nodeType":"ExpressionStatement","src":"5317:24:15"},{"expression":{"id":4355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4351,"name":"fromAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4338,"src":"5346:13:15","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":4353,"indexExpression":{"hexValue":"31","id":4352,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5360:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5346:16:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4354,"name":"buyer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4252,"src":"5365:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5346:24:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4356,"nodeType":"ExpressionStatement","src":"5346:24:15"},{"assignments":[4361],"declarations":[{"constant":false,"id":4361,"mutability":"mutable","name":"toAddresses","nameLocation":"5393:11:15","nodeType":"VariableDeclaration","scope":4415,"src":"5376:28:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":4359,"name":"address","nodeType":"ElementaryTypeName","src":"5376:7:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4360,"nodeType":"ArrayTypeName","src":"5376:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"id":4367,"initialValue":{"arguments":[{"hexValue":"32","id":4365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5421:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"}],"id":4364,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"5407:13:15","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_address_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (address[] memory)"},"typeName":{"baseType":{"id":4362,"name":"address","nodeType":"ElementaryTypeName","src":"5411:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4363,"nodeType":"ArrayTypeName","src":"5411:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}}},"id":4366,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5407:16:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"nodeType":"VariableDeclarationStatement","src":"5376:47:15"},{"expression":{"id":4372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4368,"name":"toAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4361,"src":"5428:11:15","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":4370,"indexExpression":{"hexValue":"30","id":4369,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5440:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5428:14:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4371,"name":"seller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4254,"src":"5445:6:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5428:23:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4373,"nodeType":"ExpressionStatement","src":"5428:23:15"},{"expression":{"id":4378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4374,"name":"toAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4361,"src":"5456:11:15","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":4376,"indexExpression":{"hexValue":"31","id":4375,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5468:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5456:14:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4377,"name":"platformTreasury","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3934,"src":"5473:16:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5456:33:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4379,"nodeType":"ExpressionStatement","src":"5456:33:15"},{"assignments":[4384],"declarations":[{"constant":false,"id":4384,"mutability":"mutable","name":"amounts","nameLocation":"5509:7:15","nodeType":"VariableDeclaration","scope":4415,"src":"5495:21:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4382,"name":"uint","nodeType":"ElementaryTypeName","src":"5495:4:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4383,"nodeType":"ArrayTypeName","src":"5495:6:15","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":4390,"initialValue":{"arguments":[{"hexValue":"32","id":4388,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5530:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"}],"id":4387,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"5519:10:15","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":4385,"name":"uint","nodeType":"ElementaryTypeName","src":"5523:4:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4386,"nodeType":"ArrayTypeName","src":"5523:6:15","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":4389,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5519:13:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"5495:37:15"},{"expression":{"id":4395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4391,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4384,"src":"5537:7:15","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4393,"indexExpression":{"hexValue":"30","id":4392,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5545:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5537:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4394,"name":"serviceFeeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4295,"src":"5550:16:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5537:29:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4396,"nodeType":"ExpressionStatement","src":"5537:29:15"},{"expression":{"id":4401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4397,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4384,"src":"5571:7:15","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4399,"indexExpression":{"hexValue":"31","id":4398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5579:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5571:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4400,"name":"platformFeeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4304,"src":"5584:17:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5571:30:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4402,"nodeType":"ExpressionStatement","src":"5571:30:15"},{"expression":{"arguments":[{"id":4406,"name":"fromAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4338,"src":"5688:13:15","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},{"id":4407,"name":"toAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4361,"src":"5707:11:15","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},{"arguments":[{"id":4410,"name":"baseToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3926,"src":"5732:9:15","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3876","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$3876","typeString":"contract IERC20"}],"id":4409,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5724:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4408,"name":"address","nodeType":"ElementaryTypeName","src":"5724:7:15","typeDescriptions":{}}},"id":4411,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5724:18:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4412,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4384,"src":"5748:7:15","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"},{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"expression":{"id":4403,"name":"tradingWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3932,"src":"5649:13:15","typeDescriptions":{"typeIdentifier":"t_contract$_ITradingWallet_$3900","typeString":"contract ITradingWallet"}},"id":4405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5663:19:15","memberName":"batchUpdateBalances","nodeType":"MemberAccess","referencedDeclaration":3890,"src":"5649:33:15","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_array$_t_address_$dyn_memory_ptr_$_t_array$_t_address_$dyn_memory_ptr_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address[] memory,address[] memory,address,uint256[] memory) external"}},"id":4413,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5649:111:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4414,"nodeType":"ExpressionStatement","src":"5649:111:15"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4243,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4240,"src":"4216:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":4244,"name":"bundleData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4225,"src":"4220:10:15","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":4245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4231:6:15","memberName":"length","nodeType":"MemberAccess","src":"4220:17:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4216:21:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4416,"initializationExpression":{"assignments":[4240],"declarations":[{"constant":false,"id":4240,"mutability":"mutable","name":"i","nameLocation":"4209:1:15","nodeType":"VariableDeclaration","scope":4416,"src":"4204:6:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4239,"name":"uint","nodeType":"ElementaryTypeName","src":"4204:4:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4242,"initialValue":{"hexValue":"30","id":4241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4213:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"4204:10:15"},"loopExpression":{"expression":{"id":4249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4247,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4240,"src":"4239:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313034","id":4248,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4244:3:15","typeDescriptions":{"typeIdentifier":"t_rational_104_by_1","typeString":"int_const 104"},"value":"104"},"src":"4239:8:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4250,"nodeType":"ExpressionStatement","src":"4239:8:15"},"nodeType":"ForStatement","src":"4199:1608:15"},{"assignments":[4418],"declarations":[{"constant":false,"id":4418,"mutability":"mutable","name":"bundleHash","nameLocation":"5872:10:15","nodeType":"VariableDeclaration","scope":4432,"src":"5864:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4417,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5864:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4422,"initialValue":{"arguments":[{"id":4420,"name":"bundleData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4225,"src":"5895:10:15","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":4419,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"5885:9:15","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4421,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5885:21:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"5864:42:15"},{"eventCall":{"arguments":[{"expression":{"id":4424,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5979:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5983:6:15","memberName":"sender","nodeType":"MemberAccess","src":"5979:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4426,"name":"bundleNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4227,"src":"5994:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4427,"name":"bundleHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4418,"src":"6010:10:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":4428,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"6025:5:15","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6031:9:15","memberName":"timestamp","nodeType":"MemberAccess","src":"6025:15:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4423,"name":"BundleProcessed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3944,"src":"5959:15:15","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (address,uint256,bytes32,uint256)"}},"id":4430,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5959:85:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4431,"nodeType":"EmitStatement","src":"5954:90:15"}]},"functionSelector":"3e352e62","id":4433,"implemented":true,"kind":"function","modifiers":[],"name":"processBundle","nameLocation":"3962:13:15","nodeType":"FunctionDefinition","parameters":{"id":4228,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4225,"mutability":"mutable","name":"bundleData","nameLocation":"3994:10:15","nodeType":"VariableDeclaration","scope":4433,"src":"3979:25:15","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4224,"name":"bytes","nodeType":"ElementaryTypeName","src":"3979:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4227,"mutability":"mutable","name":"bundleNonce","nameLocation":"4016:11:15","nodeType":"VariableDeclaration","scope":4433,"src":"4008:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4226,"name":"uint256","nodeType":"ElementaryTypeName","src":"4008:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3975:55:15"},"returnParameters":{"id":4229,"nodeType":"ParameterList","parameters":[],"src":"4038:0:15"},"scope":4434,"src":"3953:2095:15","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":4435,"src":"757:5293:15","usedErrors":[]}],"src":"32:6019:15"},"id":15},"contracts/TradingWallet.sol":{"ast":{"absolutePath":"contracts/TradingWallet.sol","exportedSymbols":{"IERC20":[1921],"IExecutorManager":[4446],"ReentrancyGuard":[442],"TradingWallet":[4755]},"id":4756,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4436,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:16"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":4437,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4756,"sourceUnit":1922,"src":"57:56:16","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/security/ReentrancyGuard.sol","file":"@openzeppelin/contracts/security/ReentrancyGuard.sol","id":4438,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4756,"sourceUnit":443,"src":"114:62:16","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IExecutorManager","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":4446,"linearizedBaseContracts":[4446],"name":"IExecutorManager","nameLocation":"188:16:16","nodeType":"ContractDefinition","nodes":[{"functionSelector":"debfda30","id":4445,"implemented":false,"kind":"function","modifiers":[],"name":"isExecutor","nameLocation":"217:10:16","nodeType":"FunctionDefinition","parameters":{"id":4441,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4440,"mutability":"mutable","name":"_address","nameLocation":"236:8:16","nodeType":"VariableDeclaration","scope":4445,"src":"228:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4439,"name":"address","nodeType":"ElementaryTypeName","src":"228:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"227:18:16"},"returnParameters":{"id":4444,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4443,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4445,"src":"269:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4442,"name":"bool","nodeType":"ElementaryTypeName","src":"269:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"268:6:16"},"scope":4446,"src":"208:67:16","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4756,"src":"178:99:16","usedErrors":[]},{"abstract":false,"baseContracts":[{"baseName":{"id":4447,"name":"ReentrancyGuard","nameLocations":["305:15:16"],"nodeType":"IdentifierPath","referencedDeclaration":442,"src":"305:15:16"},"id":4448,"nodeType":"InheritanceSpecifier","src":"305:15:16"}],"canonicalName":"TradingWallet","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4755,"linearizedBaseContracts":[4755,442],"name":"TradingWallet","nameLocation":"288:13:16","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":4454,"mutability":"mutable","name":"_balances","nameLocation":"422:9:16","nodeType":"VariableDeclaration","scope":4755,"src":"366:65:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"typeName":{"id":4453,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4449,"name":"address","nodeType":"ElementaryTypeName","src":"374:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"366:47:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4452,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4450,"name":"address","nodeType":"ElementaryTypeName","src":"393:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"385:27:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4451,"name":"uint256","nodeType":"ElementaryTypeName","src":"404:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"constant":false,"functionSelector":"c0883b92","id":4457,"mutability":"mutable","name":"executorManager","nameLocation":"458:15:16","nodeType":"VariableDeclaration","scope":4755,"src":"434:39:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IExecutorManager_$4446","typeString":"contract IExecutorManager"},"typeName":{"id":4456,"nodeType":"UserDefinedTypeName","pathNode":{"id":4455,"name":"IExecutorManager","nameLocations":["434:16:16"],"nodeType":"IdentifierPath","referencedDeclaration":4446,"src":"434:16:16"},"referencedDeclaration":4446,"src":"434:16:16","typeDescriptions":{"typeIdentifier":"t_contract$_IExecutorManager_$4446","typeString":"contract IExecutorManager"}},"visibility":"public"},{"anonymous":false,"eventSelector":"5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62","id":4465,"name":"Deposit","nameLocation":"524:7:16","nodeType":"EventDefinition","parameters":{"id":4464,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4459,"indexed":true,"mutability":"mutable","name":"user","nameLocation":"548:4:16","nodeType":"VariableDeclaration","scope":4465,"src":"532:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4458,"name":"address","nodeType":"ElementaryTypeName","src":"532:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4461,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"570:5:16","nodeType":"VariableDeclaration","scope":4465,"src":"554:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4460,"name":"address","nodeType":"ElementaryTypeName","src":"554:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4463,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"585:6:16","nodeType":"VariableDeclaration","scope":4465,"src":"577:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4462,"name":"uint256","nodeType":"ElementaryTypeName","src":"577:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"531:61:16"},"src":"518:75:16"},{"anonymous":false,"eventSelector":"2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b6398","id":4473,"name":"Withdrawal","nameLocation":"645:10:16","nodeType":"EventDefinition","parameters":{"id":4472,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4467,"indexed":true,"mutability":"mutable","name":"user","nameLocation":"675:4:16","nodeType":"VariableDeclaration","scope":4473,"src":"659:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4466,"name":"address","nodeType":"ElementaryTypeName","src":"659:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4469,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"699:5:16","nodeType":"VariableDeclaration","scope":4473,"src":"683:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4468,"name":"address","nodeType":"ElementaryTypeName","src":"683:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4471,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"716:6:16","nodeType":"VariableDeclaration","scope":4473,"src":"708:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4470,"name":"uint256","nodeType":"ElementaryTypeName","src":"708:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"655:70:16"},"src":"639:87:16"},{"anonymous":false,"eventSelector":"574df9673a0ccb6b90a7b340bd6334f98323bd2b74c515ae8aa95243de848c48","id":4483,"name":"UpdateBalance","nameLocation":"782:13:16","nodeType":"EventDefinition","parameters":{"id":4482,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4475,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"815:4:16","nodeType":"VariableDeclaration","scope":4483,"src":"799:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4474,"name":"address","nodeType":"ElementaryTypeName","src":"799:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4477,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"839:2:16","nodeType":"VariableDeclaration","scope":4483,"src":"823:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4476,"name":"address","nodeType":"ElementaryTypeName","src":"823:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4479,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"861:5:16","nodeType":"VariableDeclaration","scope":4483,"src":"845:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4478,"name":"address","nodeType":"ElementaryTypeName","src":"845:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4481,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"878:6:16","nodeType":"VariableDeclaration","scope":4483,"src":"870:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4480,"name":"uint256","nodeType":"ElementaryTypeName","src":"870:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"795:92:16"},"src":"776:112:16"},{"body":{"id":4494,"nodeType":"Block","src":"929:60:16","statements":[{"expression":{"id":4492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4488,"name":"executorManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4457,"src":"933:15:16","typeDescriptions":{"typeIdentifier":"t_contract$_IExecutorManager_$4446","typeString":"contract IExecutorManager"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4490,"name":"_executorManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4485,"src":"968:16:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4489,"name":"IExecutorManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4446,"src":"951:16:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IExecutorManager_$4446_$","typeString":"type(contract IExecutorManager)"}},"id":4491,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"951:34:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IExecutorManager_$4446","typeString":"contract IExecutorManager"}},"src":"933:52:16","typeDescriptions":{"typeIdentifier":"t_contract$_IExecutorManager_$4446","typeString":"contract IExecutorManager"}},"id":4493,"nodeType":"ExpressionStatement","src":"933:52:16"}]},"id":4495,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4485,"mutability":"mutable","name":"_executorManager","nameLocation":"911:16:16","nodeType":"VariableDeclaration","scope":4495,"src":"903:24:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4484,"name":"address","nodeType":"ElementaryTypeName","src":"903:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"902:26:16"},"returnParameters":{"id":4487,"nodeType":"ParameterList","parameters":[],"src":"929:0:16"},"scope":4755,"src":"891:98:16","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4543,"nodeType":"Block","src":"1102:256:16","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4505,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4499,"src":"1114:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4506,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1123:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1114:10:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4465706f73697420616d6f756e74206d7573742062652067726561746572207468616e2030","id":4508,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1126:39:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_1cf5370f25734823c5feac6853b836d05520862485f150310f24689e28c1f9e6","typeString":"literal_string \"Deposit amount must be greater than 0\""},"value":"Deposit amount must be greater than 0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1cf5370f25734823c5feac6853b836d05520862485f150310f24689e28c1f9e6","typeString":"literal_string \"Deposit amount must be greater than 0\""}],"id":4504,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1106:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4509,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1106:60:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4510,"nodeType":"ExpressionStatement","src":"1106:60:16"},{"expression":{"arguments":[{"arguments":[{"expression":{"id":4516,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1209:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4517,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1213:6:16","memberName":"sender","nodeType":"MemberAccess","src":"1209:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":4520,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1229:4:16","typeDescriptions":{"typeIdentifier":"t_contract$_TradingWallet_$4755","typeString":"contract TradingWallet"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_TradingWallet_$4755","typeString":"contract TradingWallet"}],"id":4519,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1221:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4518,"name":"address","nodeType":"ElementaryTypeName","src":"1221:7:16","typeDescriptions":{}}},"id":4521,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1221:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4522,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4499,"src":"1236:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":4513,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4497,"src":"1189:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4512,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1921,"src":"1182:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$1921_$","typeString":"type(contract IERC20)"}},"id":4514,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1182:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1921","typeString":"contract IERC20"}},"id":4515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1196:12:16","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":1920,"src":"1182:26:16","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":4523,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1182:61:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5472616e73666572206661696c6564","id":4524,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1248:17:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51","typeString":"literal_string \"Transfer failed\""},"value":"Transfer failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51","typeString":"literal_string \"Transfer failed\""}],"id":4511,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1170:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4525,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1170:99:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4526,"nodeType":"ExpressionStatement","src":"1170:99:16"},{"expression":{"id":4534,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":4527,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4454,"src":"1273:9:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":4531,"indexExpression":{"expression":{"id":4528,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1283:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1287:6:16","memberName":"sender","nodeType":"MemberAccess","src":"1283:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1273:21:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4532,"indexExpression":{"id":4530,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4497,"src":"1295:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1273:28:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4533,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4499,"src":"1305:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1273:38:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4535,"nodeType":"ExpressionStatement","src":"1273:38:16"},{"eventCall":{"arguments":[{"expression":{"id":4537,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1328:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1332:6:16","memberName":"sender","nodeType":"MemberAccess","src":"1328:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4539,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4497,"src":"1340:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4540,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4499,"src":"1347:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4536,"name":"Deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4465,"src":"1320:7:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4541,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1320:34:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4542,"nodeType":"EmitStatement","src":"1315:39:16"}]},"functionSelector":"97feb926","id":4544,"implemented":true,"kind":"function","modifiers":[{"id":4502,"kind":"modifierInvocation","modifierName":{"id":4501,"name":"nonReentrant","nameLocations":["1089:12:16"],"nodeType":"IdentifierPath","referencedDeclaration":418,"src":"1089:12:16"},"nodeType":"ModifierInvocation","src":"1089:12:16"}],"name":"depositERC20","nameLocation":"1038:12:16","nodeType":"FunctionDefinition","parameters":{"id":4500,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4497,"mutability":"mutable","name":"token","nameLocation":"1059:5:16","nodeType":"VariableDeclaration","scope":4544,"src":"1051:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4496,"name":"address","nodeType":"ElementaryTypeName","src":"1051:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4499,"mutability":"mutable","name":"amount","nameLocation":"1074:6:16","nodeType":"VariableDeclaration","scope":4544,"src":"1066:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4498,"name":"uint256","nodeType":"ElementaryTypeName","src":"1066:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1050:31:16"},"returnParameters":{"id":4503,"nodeType":"ParameterList","parameters":[],"src":"1102:0:16"},"scope":4755,"src":"1029:329:16","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4593,"nodeType":"Block","src":"1473:241:16","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"baseExpression":{"id":4554,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4454,"src":"1485:9:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":4557,"indexExpression":{"expression":{"id":4555,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1495:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1499:6:16","memberName":"sender","nodeType":"MemberAccess","src":"1495:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1485:21:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4559,"indexExpression":{"id":4558,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4546,"src":"1507:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1485:28:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4560,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4548,"src":"1517:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1485:38:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e73756666696369656e742062616c616e6365","id":4562,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1525:22:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5","typeString":"literal_string \"Insufficient balance\""},"value":"Insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5","typeString":"literal_string \"Insufficient balance\""}],"id":4553,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1477:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4563,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1477:71:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4564,"nodeType":"ExpressionStatement","src":"1477:71:16"},{"expression":{"id":4572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":4565,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4454,"src":"1552:9:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":4569,"indexExpression":{"expression":{"id":4566,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1562:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1566:6:16","memberName":"sender","nodeType":"MemberAccess","src":"1562:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1552:21:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4570,"indexExpression":{"id":4568,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4546,"src":"1574:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1552:28:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":4571,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4548,"src":"1584:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1552:38:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4573,"nodeType":"ExpressionStatement","src":"1552:38:16"},{"expression":{"arguments":[{"arguments":[{"expression":{"id":4579,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1625:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1629:6:16","memberName":"sender","nodeType":"MemberAccess","src":"1625:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4581,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4548,"src":"1637:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":4576,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4546,"src":"1609:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4575,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1921,"src":"1602:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$1921_$","typeString":"type(contract IERC20)"}},"id":4577,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1602:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1921","typeString":"contract IERC20"}},"id":4578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1616:8:16","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":1888,"src":"1602:22:16","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":4582,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1602:42:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5472616e73666572206661696c6564","id":4583,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1646:17:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51","typeString":"literal_string \"Transfer failed\""},"value":"Transfer failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51","typeString":"literal_string \"Transfer failed\""}],"id":4574,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1594:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4584,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1594:70:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4585,"nodeType":"ExpressionStatement","src":"1594:70:16"},{"eventCall":{"arguments":[{"expression":{"id":4587,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1684:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1688:6:16","memberName":"sender","nodeType":"MemberAccess","src":"1684:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4589,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4546,"src":"1696:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4590,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4548,"src":"1703:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4586,"name":"Withdrawal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4473,"src":"1673:10:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4591,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1673:37:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4592,"nodeType":"EmitStatement","src":"1668:42:16"}]},"functionSelector":"a1db9782","id":4594,"implemented":true,"kind":"function","modifiers":[{"id":4551,"kind":"modifierInvocation","modifierName":{"id":4550,"name":"nonReentrant","nameLocations":["1460:12:16"],"nodeType":"IdentifierPath","referencedDeclaration":418,"src":"1460:12:16"},"nodeType":"ModifierInvocation","src":"1460:12:16"}],"name":"withdrawERC20","nameLocation":"1408:13:16","nodeType":"FunctionDefinition","parameters":{"id":4549,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4546,"mutability":"mutable","name":"token","nameLocation":"1430:5:16","nodeType":"VariableDeclaration","scope":4594,"src":"1422:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4545,"name":"address","nodeType":"ElementaryTypeName","src":"1422:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4548,"mutability":"mutable","name":"amount","nameLocation":"1445:6:16","nodeType":"VariableDeclaration","scope":4594,"src":"1437:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4547,"name":"uint256","nodeType":"ElementaryTypeName","src":"1437:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1421:31:16"},"returnParameters":{"id":4552,"nodeType":"ParameterList","parameters":[],"src":"1473:0:16"},"scope":4755,"src":"1399:315:16","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4631,"nodeType":"Block","src":"1825:172:16","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4600,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1837:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4601,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1841:5:16","memberName":"value","nodeType":"MemberAccess","src":"1837:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4602,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1849:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1837:13:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4465706f73697420616d6f756e74206d7573742062652067726561746572207468616e2030","id":4604,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1852:39:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_1cf5370f25734823c5feac6853b836d05520862485f150310f24689e28c1f9e6","typeString":"literal_string \"Deposit amount must be greater than 0\""},"value":"Deposit amount must be greater than 0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1cf5370f25734823c5feac6853b836d05520862485f150310f24689e28c1f9e6","typeString":"literal_string \"Deposit amount must be greater than 0\""}],"id":4599,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1829:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4605,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1829:63:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4606,"nodeType":"ExpressionStatement","src":"1829:63:16"},{"expression":{"id":4618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":4607,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4454,"src":"1896:9:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":4614,"indexExpression":{"expression":{"id":4608,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1906:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1910:6:16","memberName":"sender","nodeType":"MemberAccess","src":"1906:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1896:21:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4615,"indexExpression":{"arguments":[{"hexValue":"30","id":4612,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1926:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4611,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1918:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4610,"name":"address","nodeType":"ElementaryTypeName","src":"1918:7:16","typeDescriptions":{}}},"id":4613,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1918:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1896:33:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"expression":{"id":4616,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1933:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1937:5:16","memberName":"value","nodeType":"MemberAccess","src":"1933:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1896:46:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4619,"nodeType":"ExpressionStatement","src":"1896:46:16"},{"eventCall":{"arguments":[{"expression":{"id":4621,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1959:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1963:6:16","memberName":"sender","nodeType":"MemberAccess","src":"1959:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":4625,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1979:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4624,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1971:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4623,"name":"address","nodeType":"ElementaryTypeName","src":"1971:7:16","typeDescriptions":{}}},"id":4626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1971:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":4627,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1983:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1987:5:16","memberName":"value","nodeType":"MemberAccess","src":"1983:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4620,"name":"Deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4465,"src":"1951:7:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4629,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1951:42:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4630,"nodeType":"EmitStatement","src":"1946:47:16"}]},"functionSelector":"f6326fb3","id":4632,"implemented":true,"kind":"function","modifiers":[{"id":4597,"kind":"modifierInvocation","modifierName":{"id":4596,"name":"nonReentrant","nameLocations":["1812:12:16"],"nodeType":"IdentifierPath","referencedDeclaration":418,"src":"1812:12:16"},"nodeType":"ModifierInvocation","src":"1812:12:16"}],"name":"depositETH","nameLocation":"1784:10:16","nodeType":"FunctionDefinition","parameters":{"id":4595,"nodeType":"ParameterList","parameters":[],"src":"1794:2:16"},"returnParameters":{"id":4598,"nodeType":"ParameterList","parameters":[],"src":"1825:0:16"},"scope":4755,"src":"1775:222:16","stateMutability":"payable","virtual":false,"visibility":"public"},{"body":{"id":4647,"nodeType":"Block","src":"2133:37:16","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":4641,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4454,"src":"2144:9:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":4643,"indexExpression":{"id":4642,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4634,"src":"2154:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2144:15:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4645,"indexExpression":{"id":4644,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4636,"src":"2160:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2144:22:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4640,"id":4646,"nodeType":"Return","src":"2137:29:16"}]},"functionSelector":"c3a8962c","id":4648,"implemented":true,"kind":"function","modifiers":[],"name":"getERC20Balance","nameLocation":"2049:15:16","nodeType":"FunctionDefinition","parameters":{"id":4637,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4634,"mutability":"mutable","name":"user","nameLocation":"2076:4:16","nodeType":"VariableDeclaration","scope":4648,"src":"2068:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4633,"name":"address","nodeType":"ElementaryTypeName","src":"2068:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4636,"mutability":"mutable","name":"token","nameLocation":"2092:5:16","nodeType":"VariableDeclaration","scope":4648,"src":"2084:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4635,"name":"address","nodeType":"ElementaryTypeName","src":"2084:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2064:36:16"},"returnParameters":{"id":4640,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4639,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4648,"src":"2124:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4638,"name":"uint256","nodeType":"ElementaryTypeName","src":"2124:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2123:9:16"},"scope":4755,"src":"2040:130:16","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":4753,"nodeType":"Block","src":"2376:626:16","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":4667,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2419:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2423:6:16","memberName":"sender","nodeType":"MemberAccess","src":"2419:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4665,"name":"executorManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4457,"src":"2392:15:16","typeDescriptions":{"typeIdentifier":"t_contract$_IExecutorManager_$4446","typeString":"contract IExecutorManager"}},"id":4666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2408:10:16","memberName":"isExecutor","nodeType":"MemberAccess","referencedDeclaration":4445,"src":"2392:26:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view external returns (bool)"}},"id":4669,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2392:38:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5065726d697373696f6e2064656e69656420666f72206e6f6e2d6578656375746f72","id":4670,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2435:36:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_13a95f22afc3675625865cebfeaad090cf74d28c398c97ca0506a9b656468077","typeString":"literal_string \"Permission denied for non-executor\""},"value":"Permission denied for non-executor"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_13a95f22afc3675625865cebfeaad090cf74d28c398c97ca0506a9b656468077","typeString":"literal_string \"Permission denied for non-executor\""}],"id":4664,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2380:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4671,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2380:95:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4672,"nodeType":"ExpressionStatement","src":"2380:95:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4674,"name":"fromAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4651,"src":"2491:13:16","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":4675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2505:6:16","memberName":"length","nodeType":"MemberAccess","src":"2491:20:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4676,"name":"toAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4654,"src":"2515:11:16","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":4677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2527:6:16","memberName":"length","nodeType":"MemberAccess","src":"2515:18:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2491:42:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4679,"name":"toAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4654,"src":"2541:11:16","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":4680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2553:6:16","memberName":"length","nodeType":"MemberAccess","src":"2541:18:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4681,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4659,"src":"2563:7:16","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2571:6:16","memberName":"length","nodeType":"MemberAccess","src":"2563:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2541:36:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2491:86:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"417272617973206d7573742068617665207468652073616d65206c656e677468","id":4685,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2582:34:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_23c363817f9879f3888017ece213d7d3388c222537fa7decb7e0d1ac65953f19","typeString":"literal_string \"Arrays must have the same length\""},"value":"Arrays must have the same length"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_23c363817f9879f3888017ece213d7d3388c222537fa7decb7e0d1ac65953f19","typeString":"literal_string \"Arrays must have the same length\""}],"id":4673,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2479:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4686,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2479:141:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4687,"nodeType":"ExpressionStatement","src":"2479:141:16"},{"body":{"id":4751,"nodeType":"Block","src":"2676:323:16","statements":[{"assignments":[4700],"declarations":[{"constant":false,"id":4700,"mutability":"mutable","name":"from","nameLocation":"2689:4:16","nodeType":"VariableDeclaration","scope":4751,"src":"2681:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4699,"name":"address","nodeType":"ElementaryTypeName","src":"2681:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4704,"initialValue":{"baseExpression":{"id":4701,"name":"fromAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4651,"src":"2696:13:16","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":4703,"indexExpression":{"id":4702,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4689,"src":"2710:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2696:16:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2681:31:16"},{"assignments":[4706],"declarations":[{"constant":false,"id":4706,"mutability":"mutable","name":"to","nameLocation":"2725:2:16","nodeType":"VariableDeclaration","scope":4751,"src":"2717:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4705,"name":"address","nodeType":"ElementaryTypeName","src":"2717:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4710,"initialValue":{"baseExpression":{"id":4707,"name":"toAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4654,"src":"2730:11:16","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":4709,"indexExpression":{"id":4708,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4689,"src":"2742:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2730:14:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2717:27:16"},{"assignments":[4712],"declarations":[{"constant":false,"id":4712,"mutability":"mutable","name":"amount","nameLocation":"2757:6:16","nodeType":"VariableDeclaration","scope":4751,"src":"2749:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4711,"name":"uint256","nodeType":"ElementaryTypeName","src":"2749:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4716,"initialValue":{"baseExpression":{"id":4713,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4659,"src":"2766:7:16","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4715,"indexExpression":{"id":4714,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4689,"src":"2774:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2766:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2749:27:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"baseExpression":{"id":4718,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4454,"src":"2795:9:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":4720,"indexExpression":{"id":4719,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4700,"src":"2805:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2795:15:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4722,"indexExpression":{"id":4721,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4656,"src":"2811:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2795:22:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4723,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4712,"src":"2821:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2795:32:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e73756666696369656e742062616c616e636520666f72207472616e73666572","id":4725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2833:35:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_67b053d9c7b868e69c4855c461316e09c6febeb899c9666d9ec16f8fca1d60a8","typeString":"literal_string \"Insufficient balance for transfer\""},"value":"Insufficient balance for transfer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_67b053d9c7b868e69c4855c461316e09c6febeb899c9666d9ec16f8fca1d60a8","typeString":"literal_string \"Insufficient balance for transfer\""}],"id":4717,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2782:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4726,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2782:91:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4727,"nodeType":"ExpressionStatement","src":"2782:91:16"},{"expression":{"id":4734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":4728,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4454,"src":"2878:9:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":4731,"indexExpression":{"id":4729,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4700,"src":"2888:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2878:15:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4732,"indexExpression":{"id":4730,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4656,"src":"2894:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2878:22:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":4733,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4712,"src":"2904:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2878:32:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4735,"nodeType":"ExpressionStatement","src":"2878:32:16"},{"expression":{"id":4742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":4736,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4454,"src":"2915:9:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":4739,"indexExpression":{"id":4737,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4706,"src":"2925:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2915:13:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4740,"indexExpression":{"id":4738,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4656,"src":"2929:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2915:20:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4741,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4712,"src":"2939:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2915:30:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4743,"nodeType":"ExpressionStatement","src":"2915:30:16"},{"eventCall":{"arguments":[{"id":4745,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4700,"src":"2970:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4746,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4706,"src":"2976:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4747,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4656,"src":"2980:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4748,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4712,"src":"2987:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4744,"name":"UpdateBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4483,"src":"2956:13:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256)"}},"id":4749,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2956:38:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4750,"nodeType":"EmitStatement","src":"2951:43:16"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4695,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4692,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4689,"src":"2645:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":4693,"name":"fromAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4651,"src":"2649:13:16","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":4694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2663:6:16","memberName":"length","nodeType":"MemberAccess","src":"2649:20:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2645:24:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4752,"initializationExpression":{"assignments":[4689],"declarations":[{"constant":false,"id":4689,"mutability":"mutable","name":"i","nameLocation":"2638:1:16","nodeType":"VariableDeclaration","scope":4752,"src":"2630:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4688,"name":"uint256","nodeType":"ElementaryTypeName","src":"2630:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4691,"initialValue":{"hexValue":"30","id":4690,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2642:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2630:13:16"},"loopExpression":{"expression":{"id":4697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2671:3:16","subExpression":{"id":4696,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4689,"src":"2671:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4698,"nodeType":"ExpressionStatement","src":"2671:3:16"},"nodeType":"ForStatement","src":"2625:374:16"}]},"functionSelector":"38419104","id":4754,"implemented":true,"kind":"function","modifiers":[{"id":4662,"kind":"modifierInvocation","modifierName":{"id":4661,"name":"nonReentrant","nameLocations":["2363:12:16"],"nodeType":"IdentifierPath","referencedDeclaration":418,"src":"2363:12:16"},"nodeType":"ModifierInvocation","src":"2363:12:16"}],"name":"batchUpdateBalances","nameLocation":"2220:19:16","nodeType":"FunctionDefinition","parameters":{"id":4660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4651,"mutability":"mutable","name":"fromAddresses","nameLocation":"2260:13:16","nodeType":"VariableDeclaration","scope":4754,"src":"2243:30:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":4649,"name":"address","nodeType":"ElementaryTypeName","src":"2243:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4650,"nodeType":"ArrayTypeName","src":"2243:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":4654,"mutability":"mutable","name":"toAddresses","nameLocation":"2294:11:16","nodeType":"VariableDeclaration","scope":4754,"src":"2277:28:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":4652,"name":"address","nodeType":"ElementaryTypeName","src":"2277:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4653,"nodeType":"ArrayTypeName","src":"2277:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":4656,"mutability":"mutable","name":"token","nameLocation":"2317:5:16","nodeType":"VariableDeclaration","scope":4754,"src":"2309:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4655,"name":"address","nodeType":"ElementaryTypeName","src":"2309:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4659,"mutability":"mutable","name":"amounts","nameLocation":"2343:7:16","nodeType":"VariableDeclaration","scope":4754,"src":"2326:24:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4657,"name":"uint256","nodeType":"ElementaryTypeName","src":"2326:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4658,"nodeType":"ArrayTypeName","src":"2326:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2239:114:16"},"returnParameters":{"id":4663,"nodeType":"ParameterList","parameters":[],"src":"2376:0:16"},"scope":4755,"src":"2211:791:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":4756,"src":"279:2725:16","usedErrors":[]}],"src":"32:2973:16"},"id":16}},"contracts":{"@openzeppelin/contracts/access/AccessControl.sol":{"AccessControl":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ``` bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ``` function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it.","events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ``` bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ``` function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it.\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/AccessControl.sol\":\"AccessControl\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":24,"contract":"@openzeppelin/contracts/access/AccessControl.sol:AccessControl","label":"_roles","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_struct(RoleData)19_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(RoleData)19_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControl.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)19_storage"},"t_struct(RoleData)19_storage":{"encoding":"inplace","label":"struct AccessControl.RoleData","members":[{"astId":16,"contract":"@openzeppelin/contracts/access/AccessControl.sol:AccessControl","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":18,"contract":"@openzeppelin/contracts/access/AccessControl.sol:AccessControl","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/access/IAccessControl.sol":{"IAccessControl":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"External interface of AccessControl declared to support ERC165 detection.","events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControl declared to support ERC165 detection.\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":\"IAccessControl\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/security/ReentrancyGuard.sol":{"ReentrancyGuard":{"abi":[],"devdoc":{"details":"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":399,"contract":"@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard","label":"_status","offset":0,"slot":"0","type":"t_uint256"}],"types":{"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC1155/ERC1155.sol":{"ERC1155":{"abi":[{"inputs":[{"internalType":"string","name":"uri_","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the basic standard multi-token. See https://eips.ethereum.org/EIPS/eip-1155 Originally based on code by Enjin: https://github.com/enjin/erc-1155 _Available since v3.1._","events":{"ApprovalForAll(address,address,bool)":{"details":"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."},"TransferBatch(address,address,address,uint256[],uint256[])":{"details":"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."},"TransferSingle(address,address,address,uint256,uint256)":{"details":"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."},"URI(string,uint256)":{"details":"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."}},"kind":"dev","methods":{"balanceOf(address,uint256)":{"details":"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."},"balanceOfBatch(address[],uint256[])":{"details":"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."},"constructor":{"details":"See {_setURI}."},"isApprovedForAll(address,address)":{"details":"See {IERC1155-isApprovedForAll}."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"See {IERC1155-safeBatchTransferFrom}."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"See {IERC1155-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC1155-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"uri(uint256)":{"details":"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_487":{"entryPoint":null,"id":487,"parameterSlots":1,"returnSlots":0},"@_setURI_998":{"entryPoint":70,"id":998,"parameterSlots":1,"returnSlots":0},"abi_decode_tuple_t_string_memory_ptr_fromMemory":{"entryPoint":110,"id":null,"parameterSlots":2,"returnSlots":1},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":383,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":466,"id":null,"parameterSlots":2,"returnSlots":0},"extract_byte_array_length":{"entryPoint":323,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x41":{"entryPoint":88,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:3779:17","statements":[{"nodeType":"YulBlock","src":"6:3:17","statements":[]},{"body":{"nodeType":"YulBlock","src":"46:95:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"63:1:17","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"70:3:17","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"75:10:17","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"66:3:17"},"nodeType":"YulFunctionCall","src":"66:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56:6:17"},"nodeType":"YulFunctionCall","src":"56:31:17"},"nodeType":"YulExpressionStatement","src":"56:31:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:1:17","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"106:4:17","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"96:6:17"},"nodeType":"YulFunctionCall","src":"96:15:17"},"nodeType":"YulExpressionStatement","src":"96:15:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"127:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"130:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"120:6:17"},"nodeType":"YulFunctionCall","src":"120:15:17"},"nodeType":"YulExpressionStatement","src":"120:15:17"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"14:127:17"},{"body":{"nodeType":"YulBlock","src":"237:951:17","statements":[{"nodeType":"YulVariableDeclaration","src":"247:12:17","value":{"kind":"number","nodeType":"YulLiteral","src":"257:2:17","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"251:2:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"304:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"313:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"316:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"306:6:17"},"nodeType":"YulFunctionCall","src":"306:12:17"},"nodeType":"YulExpressionStatement","src":"306:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"279:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"288:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"275:3:17"},"nodeType":"YulFunctionCall","src":"275:23:17"},{"name":"_1","nodeType":"YulIdentifier","src":"300:2:17"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"271:3:17"},"nodeType":"YulFunctionCall","src":"271:32:17"},"nodeType":"YulIf","src":"268:52:17"},{"nodeType":"YulVariableDeclaration","src":"329:30:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"349:9:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"343:5:17"},"nodeType":"YulFunctionCall","src":"343:16:17"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"333:6:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"368:28:17","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"386:2:17","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"390:1:17","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"382:3:17"},"nodeType":"YulFunctionCall","src":"382:10:17"},{"kind":"number","nodeType":"YulLiteral","src":"394:1:17","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"378:3:17"},"nodeType":"YulFunctionCall","src":"378:18:17"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"372:2:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"423:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"432:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"435:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"425:6:17"},"nodeType":"YulFunctionCall","src":"425:12:17"},"nodeType":"YulExpressionStatement","src":"425:12:17"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"411:6:17"},{"name":"_2","nodeType":"YulIdentifier","src":"419:2:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"408:2:17"},"nodeType":"YulFunctionCall","src":"408:14:17"},"nodeType":"YulIf","src":"405:34:17"},{"nodeType":"YulVariableDeclaration","src":"448:32:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"462:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"473:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"458:3:17"},"nodeType":"YulFunctionCall","src":"458:22:17"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"452:2:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"528:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"537:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"540:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"530:6:17"},"nodeType":"YulFunctionCall","src":"530:12:17"},"nodeType":"YulExpressionStatement","src":"530:12:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"507:2:17"},{"kind":"number","nodeType":"YulLiteral","src":"511:4:17","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"503:3:17"},"nodeType":"YulFunctionCall","src":"503:13:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"518:7:17"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"499:3:17"},"nodeType":"YulFunctionCall","src":"499:27:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"492:6:17"},"nodeType":"YulFunctionCall","src":"492:35:17"},"nodeType":"YulIf","src":"489:55:17"},{"nodeType":"YulVariableDeclaration","src":"553:19:17","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"569:2:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"563:5:17"},"nodeType":"YulFunctionCall","src":"563:9:17"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"557:2:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"595:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"597:16:17"},"nodeType":"YulFunctionCall","src":"597:18:17"},"nodeType":"YulExpressionStatement","src":"597:18:17"}]},"condition":{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"587:2:17"},{"name":"_2","nodeType":"YulIdentifier","src":"591:2:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"584:2:17"},"nodeType":"YulFunctionCall","src":"584:10:17"},"nodeType":"YulIf","src":"581:36:17"},{"nodeType":"YulVariableDeclaration","src":"626:17:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"640:2:17","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"636:3:17"},"nodeType":"YulFunctionCall","src":"636:7:17"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"630:2:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"652:23:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"672:2:17","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"666:5:17"},"nodeType":"YulFunctionCall","src":"666:9:17"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"656:6:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"684:71:17","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"706:6:17"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"730:2:17"},{"kind":"number","nodeType":"YulLiteral","src":"734:4:17","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"726:3:17"},"nodeType":"YulFunctionCall","src":"726:13:17"},{"name":"_5","nodeType":"YulIdentifier","src":"741:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"722:3:17"},"nodeType":"YulFunctionCall","src":"722:22:17"},{"kind":"number","nodeType":"YulLiteral","src":"746:2:17","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"718:3:17"},"nodeType":"YulFunctionCall","src":"718:31:17"},{"name":"_5","nodeType":"YulIdentifier","src":"751:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"714:3:17"},"nodeType":"YulFunctionCall","src":"714:40:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"702:3:17"},"nodeType":"YulFunctionCall","src":"702:53:17"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"688:10:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"814:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"816:16:17"},"nodeType":"YulFunctionCall","src":"816:18:17"},"nodeType":"YulExpressionStatement","src":"816:18:17"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"773:10:17"},{"name":"_2","nodeType":"YulIdentifier","src":"785:2:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"770:2:17"},"nodeType":"YulFunctionCall","src":"770:18:17"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"793:10:17"},{"name":"memPtr","nodeType":"YulIdentifier","src":"805:6:17"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"790:2:17"},"nodeType":"YulFunctionCall","src":"790:22:17"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"767:2:17"},"nodeType":"YulFunctionCall","src":"767:46:17"},"nodeType":"YulIf","src":"764:72:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"852:2:17","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"856:10:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"845:6:17"},"nodeType":"YulFunctionCall","src":"845:22:17"},"nodeType":"YulExpressionStatement","src":"845:22:17"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"883:6:17"},{"name":"_4","nodeType":"YulIdentifier","src":"891:2:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"876:6:17"},"nodeType":"YulFunctionCall","src":"876:18:17"},"nodeType":"YulExpressionStatement","src":"876:18:17"},{"body":{"nodeType":"YulBlock","src":"940:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"949:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"952:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"942:6:17"},"nodeType":"YulFunctionCall","src":"942:12:17"},"nodeType":"YulExpressionStatement","src":"942:12:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"917:2:17"},{"name":"_4","nodeType":"YulIdentifier","src":"921:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"913:3:17"},"nodeType":"YulFunctionCall","src":"913:11:17"},{"name":"_1","nodeType":"YulIdentifier","src":"926:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"909:3:17"},"nodeType":"YulFunctionCall","src":"909:20:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"931:7:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"906:2:17"},"nodeType":"YulFunctionCall","src":"906:33:17"},"nodeType":"YulIf","src":"903:53:17"},{"nodeType":"YulVariableDeclaration","src":"965:10:17","value":{"kind":"number","nodeType":"YulLiteral","src":"974:1:17","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"969:1:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"1030:83:17","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1059:6:17"},{"name":"i","nodeType":"YulIdentifier","src":"1067:1:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1055:3:17"},"nodeType":"YulFunctionCall","src":"1055:14:17"},{"name":"_1","nodeType":"YulIdentifier","src":"1071:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1051:3:17"},"nodeType":"YulFunctionCall","src":"1051:23:17"},{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1090:2:17"},{"name":"i","nodeType":"YulIdentifier","src":"1094:1:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1086:3:17"},"nodeType":"YulFunctionCall","src":"1086:10:17"},{"name":"_1","nodeType":"YulIdentifier","src":"1098:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1082:3:17"},"nodeType":"YulFunctionCall","src":"1082:19:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1076:5:17"},"nodeType":"YulFunctionCall","src":"1076:26:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1044:6:17"},"nodeType":"YulFunctionCall","src":"1044:59:17"},"nodeType":"YulExpressionStatement","src":"1044:59:17"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"995:1:17"},{"name":"_4","nodeType":"YulIdentifier","src":"998:2:17"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"992:2:17"},"nodeType":"YulFunctionCall","src":"992:9:17"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1002:19:17","statements":[{"nodeType":"YulAssignment","src":"1004:15:17","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1013:1:17"},{"name":"_1","nodeType":"YulIdentifier","src":"1016:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1009:3:17"},"nodeType":"YulFunctionCall","src":"1009:10:17"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1004:1:17"}]}]},"pre":{"nodeType":"YulBlock","src":"988:3:17","statements":[]},"src":"984:129:17"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1137:6:17"},{"name":"_4","nodeType":"YulIdentifier","src":"1145:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1133:3:17"},"nodeType":"YulFunctionCall","src":"1133:15:17"},{"name":"_1","nodeType":"YulIdentifier","src":"1150:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1129:3:17"},"nodeType":"YulFunctionCall","src":"1129:24:17"},{"kind":"number","nodeType":"YulLiteral","src":"1155:1:17","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1122:6:17"},"nodeType":"YulFunctionCall","src":"1122:35:17"},"nodeType":"YulExpressionStatement","src":"1122:35:17"},{"nodeType":"YulAssignment","src":"1166:16:17","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"1176:6:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1166:6:17"}]}]},"name":"abi_decode_tuple_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"203:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"214:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"226:6:17","type":""}],"src":"146:1042:17"},{"body":{"nodeType":"YulBlock","src":"1248:325:17","statements":[{"nodeType":"YulAssignment","src":"1258:22:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1272:1:17","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"1275:4:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1268:3:17"},"nodeType":"YulFunctionCall","src":"1268:12:17"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1258:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"1289:38:17","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1319:4:17"},{"kind":"number","nodeType":"YulLiteral","src":"1325:1:17","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1315:3:17"},"nodeType":"YulFunctionCall","src":"1315:12:17"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"1293:18:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"1366:31:17","statements":[{"nodeType":"YulAssignment","src":"1368:27:17","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1382:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"1390:4:17","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1378:3:17"},"nodeType":"YulFunctionCall","src":"1378:17:17"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1368:6:17"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"1346:18:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1339:6:17"},"nodeType":"YulFunctionCall","src":"1339:26:17"},"nodeType":"YulIf","src":"1336:61:17"},{"body":{"nodeType":"YulBlock","src":"1456:111:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1477:1:17","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1484:3:17","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"1489:10:17","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1480:3:17"},"nodeType":"YulFunctionCall","src":"1480:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1470:6:17"},"nodeType":"YulFunctionCall","src":"1470:31:17"},"nodeType":"YulExpressionStatement","src":"1470:31:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1521:1:17","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1524:4:17","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1514:6:17"},"nodeType":"YulFunctionCall","src":"1514:15:17"},"nodeType":"YulExpressionStatement","src":"1514:15:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1549:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1552:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1542:6:17"},"nodeType":"YulFunctionCall","src":"1542:15:17"},"nodeType":"YulExpressionStatement","src":"1542:15:17"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"1412:18:17"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1435:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"1443:2:17","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1432:2:17"},"nodeType":"YulFunctionCall","src":"1432:14:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1409:2:17"},"nodeType":"YulFunctionCall","src":"1409:38:17"},"nodeType":"YulIf","src":"1406:161:17"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"1228:4:17","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1237:6:17","type":""}],"src":"1193:380:17"},{"body":{"nodeType":"YulBlock","src":"1634:65:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1651:1:17","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"1654:3:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1644:6:17"},"nodeType":"YulFunctionCall","src":"1644:14:17"},"nodeType":"YulExpressionStatement","src":"1644:14:17"},{"nodeType":"YulAssignment","src":"1667:26:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1685:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1688:4:17","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"1675:9:17"},"nodeType":"YulFunctionCall","src":"1675:18:17"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"1667:4:17"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"1617:3:17","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"1625:4:17","type":""}],"src":"1578:121:17"},{"body":{"nodeType":"YulBlock","src":"1785:464:17","statements":[{"body":{"nodeType":"YulBlock","src":"1818:425:17","statements":[{"nodeType":"YulVariableDeclaration","src":"1832:11:17","value":{"kind":"number","nodeType":"YulLiteral","src":"1842:1:17","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1836:2:17","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"1863:2:17"},{"name":"array","nodeType":"YulIdentifier","src":"1867:5:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1856:6:17"},"nodeType":"YulFunctionCall","src":"1856:17:17"},"nodeType":"YulExpressionStatement","src":"1856:17:17"},{"nodeType":"YulVariableDeclaration","src":"1886:31:17","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"1908:2:17"},{"kind":"number","nodeType":"YulLiteral","src":"1912:4:17","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"1898:9:17"},"nodeType":"YulFunctionCall","src":"1898:19:17"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"1890:4:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1930:57:17","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1953:4:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1963:1:17","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"1970:10:17"},{"kind":"number","nodeType":"YulLiteral","src":"1982:2:17","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1966:3:17"},"nodeType":"YulFunctionCall","src":"1966:19:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1959:3:17"},"nodeType":"YulFunctionCall","src":"1959:27:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1949:3:17"},"nodeType":"YulFunctionCall","src":"1949:38:17"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"1934:11:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"2024:23:17","statements":[{"nodeType":"YulAssignment","src":"2026:19:17","value":{"name":"data","nodeType":"YulIdentifier","src":"2041:4:17"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"2026:11:17"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"2006:10:17"},{"kind":"number","nodeType":"YulLiteral","src":"2018:4:17","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2003:2:17"},"nodeType":"YulFunctionCall","src":"2003:20:17"},"nodeType":"YulIf","src":"2000:47:17"},{"nodeType":"YulVariableDeclaration","src":"2060:41:17","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2074:4:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2084:1:17","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"2091:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"2096:2:17","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2087:3:17"},"nodeType":"YulFunctionCall","src":"2087:12:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2080:3:17"},"nodeType":"YulFunctionCall","src":"2080:20:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2070:3:17"},"nodeType":"YulFunctionCall","src":"2070:31:17"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"2064:2:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2114:24:17","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"2127:11:17"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"2118:5:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"2212:21:17","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2221:5:17"},{"name":"_1","nodeType":"YulIdentifier","src":"2228:2:17"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2214:6:17"},"nodeType":"YulFunctionCall","src":"2214:17:17"},"nodeType":"YulExpressionStatement","src":"2214:17:17"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2162:5:17"},{"name":"_2","nodeType":"YulIdentifier","src":"2169:2:17"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2159:2:17"},"nodeType":"YulFunctionCall","src":"2159:13:17"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2173:26:17","statements":[{"nodeType":"YulAssignment","src":"2175:22:17","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2188:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"2195:1:17","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2184:3:17"},"nodeType":"YulFunctionCall","src":"2184:13:17"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"2175:5:17"}]}]},"pre":{"nodeType":"YulBlock","src":"2155:3:17","statements":[]},"src":"2151:82:17"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"1801:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"1806:2:17","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1798:2:17"},"nodeType":"YulFunctionCall","src":"1798:11:17"},"nodeType":"YulIf","src":"1795:448:17"}]},"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"1757:5:17","type":""},{"name":"len","nodeType":"YulTypedName","src":"1764:3:17","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"1769:10:17","type":""}],"src":"1704:545:17"},{"body":{"nodeType":"YulBlock","src":"2339:81:17","statements":[{"nodeType":"YulAssignment","src":"2349:65:17","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2364:4:17"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2382:1:17","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"2385:3:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2378:3:17"},"nodeType":"YulFunctionCall","src":"2378:11:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2395:1:17","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2391:3:17"},"nodeType":"YulFunctionCall","src":"2391:6:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2374:3:17"},"nodeType":"YulFunctionCall","src":"2374:24:17"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2370:3:17"},"nodeType":"YulFunctionCall","src":"2370:29:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2360:3:17"},"nodeType":"YulFunctionCall","src":"2360:40:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2406:1:17","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"2409:3:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2402:3:17"},"nodeType":"YulFunctionCall","src":"2402:11:17"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2357:2:17"},"nodeType":"YulFunctionCall","src":"2357:57:17"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"2349:4:17"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"2316:4:17","type":""},{"name":"len","nodeType":"YulTypedName","src":"2322:3:17","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"2330:4:17","type":""}],"src":"2254:166:17"},{"body":{"nodeType":"YulBlock","src":"2521:1256:17","statements":[{"nodeType":"YulVariableDeclaration","src":"2531:24:17","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2551:3:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2545:5:17"},"nodeType":"YulFunctionCall","src":"2545:10:17"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"2535:6:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"2598:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2600:16:17"},"nodeType":"YulFunctionCall","src":"2600:18:17"},"nodeType":"YulExpressionStatement","src":"2600:18:17"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"2570:6:17"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2586:2:17","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"2590:1:17","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2582:3:17"},"nodeType":"YulFunctionCall","src":"2582:10:17"},{"kind":"number","nodeType":"YulLiteral","src":"2594:1:17","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2578:3:17"},"nodeType":"YulFunctionCall","src":"2578:18:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2567:2:17"},"nodeType":"YulFunctionCall","src":"2567:30:17"},"nodeType":"YulIf","src":"2564:56:17"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2673:4:17"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2711:4:17"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"2705:5:17"},"nodeType":"YulFunctionCall","src":"2705:11:17"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"2679:25:17"},"nodeType":"YulFunctionCall","src":"2679:38:17"},{"name":"newLen","nodeType":"YulIdentifier","src":"2719:6:17"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"2629:43:17"},"nodeType":"YulFunctionCall","src":"2629:97:17"},"nodeType":"YulExpressionStatement","src":"2629:97:17"},{"nodeType":"YulVariableDeclaration","src":"2735:18:17","value":{"kind":"number","nodeType":"YulLiteral","src":"2752:1:17","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"2739:9:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2762:23:17","value":{"kind":"number","nodeType":"YulLiteral","src":"2781:4:17","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"2766:11:17","type":""}]},{"nodeType":"YulAssignment","src":"2794:24:17","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"2807:11:17"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"2794:9:17"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"2864:656:17","statements":[{"nodeType":"YulVariableDeclaration","src":"2878:35:17","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"2897:6:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2909:2:17","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2905:3:17"},"nodeType":"YulFunctionCall","src":"2905:7:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2893:3:17"},"nodeType":"YulFunctionCall","src":"2893:20:17"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"2882:7:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2926:49:17","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2970:4:17"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"2940:29:17"},"nodeType":"YulFunctionCall","src":"2940:35:17"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"2930:6:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2988:10:17","value":{"kind":"number","nodeType":"YulLiteral","src":"2997:1:17","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"2992:1:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"3075:172:17","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3100:6:17"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3118:3:17"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"3123:9:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3114:3:17"},"nodeType":"YulFunctionCall","src":"3114:19:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3108:5:17"},"nodeType":"YulFunctionCall","src":"3108:26:17"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3093:6:17"},"nodeType":"YulFunctionCall","src":"3093:42:17"},"nodeType":"YulExpressionStatement","src":"3093:42:17"},{"nodeType":"YulAssignment","src":"3152:24:17","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3166:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"3174:1:17","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3162:3:17"},"nodeType":"YulFunctionCall","src":"3162:14:17"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3152:6:17"}]},{"nodeType":"YulAssignment","src":"3193:40:17","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3210:9:17"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3221:11:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3206:3:17"},"nodeType":"YulFunctionCall","src":"3206:27:17"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3193:9:17"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3022:1:17"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"3025:7:17"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3019:2:17"},"nodeType":"YulFunctionCall","src":"3019:14:17"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3034:28:17","statements":[{"nodeType":"YulAssignment","src":"3036:24:17","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3045:1:17"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3048:11:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3041:3:17"},"nodeType":"YulFunctionCall","src":"3041:19:17"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"3036:1:17"}]}]},"pre":{"nodeType":"YulBlock","src":"3015:3:17","statements":[]},"src":"3011:236:17"},{"body":{"nodeType":"YulBlock","src":"3295:166:17","statements":[{"nodeType":"YulVariableDeclaration","src":"3313:43:17","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3340:3:17"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"3345:9:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3336:3:17"},"nodeType":"YulFunctionCall","src":"3336:19:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3330:5:17"},"nodeType":"YulFunctionCall","src":"3330:26:17"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"3317:9:17","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3380:6:17"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"3392:9:17"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3419:1:17","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"3422:6:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3415:3:17"},"nodeType":"YulFunctionCall","src":"3415:14:17"},{"kind":"number","nodeType":"YulLiteral","src":"3431:3:17","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3411:3:17"},"nodeType":"YulFunctionCall","src":"3411:24:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3441:1:17","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3437:3:17"},"nodeType":"YulFunctionCall","src":"3437:6:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3407:3:17"},"nodeType":"YulFunctionCall","src":"3407:37:17"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3403:3:17"},"nodeType":"YulFunctionCall","src":"3403:42:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3388:3:17"},"nodeType":"YulFunctionCall","src":"3388:58:17"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3373:6:17"},"nodeType":"YulFunctionCall","src":"3373:74:17"},"nodeType":"YulExpressionStatement","src":"3373:74:17"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"3266:7:17"},{"name":"newLen","nodeType":"YulIdentifier","src":"3275:6:17"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3263:2:17"},"nodeType":"YulFunctionCall","src":"3263:19:17"},"nodeType":"YulIf","src":"3260:201:17"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3481:4:17"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3495:1:17","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"3498:6:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3491:3:17"},"nodeType":"YulFunctionCall","src":"3491:14:17"},{"kind":"number","nodeType":"YulLiteral","src":"3507:1:17","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3487:3:17"},"nodeType":"YulFunctionCall","src":"3487:22:17"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3474:6:17"},"nodeType":"YulFunctionCall","src":"3474:36:17"},"nodeType":"YulExpressionStatement","src":"3474:36:17"}]},"nodeType":"YulCase","src":"2857:663:17","value":{"kind":"number","nodeType":"YulLiteral","src":"2862:1:17","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"3537:234:17","statements":[{"nodeType":"YulVariableDeclaration","src":"3551:14:17","value":{"kind":"number","nodeType":"YulLiteral","src":"3564:1:17","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3555:5:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"3600:67:17","statements":[{"nodeType":"YulAssignment","src":"3618:35:17","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3637:3:17"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"3642:9:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3633:3:17"},"nodeType":"YulFunctionCall","src":"3633:19:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3627:5:17"},"nodeType":"YulFunctionCall","src":"3627:26:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3618:5:17"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"3581:6:17"},"nodeType":"YulIf","src":"3578:89:17"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3687:4:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3746:5:17"},{"name":"newLen","nodeType":"YulIdentifier","src":"3753:6:17"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"3693:52:17"},"nodeType":"YulFunctionCall","src":"3693:67:17"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3680:6:17"},"nodeType":"YulFunctionCall","src":"3680:81:17"},"nodeType":"YulExpressionStatement","src":"3680:81:17"}]},"nodeType":"YulCase","src":"3529:242:17","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"2837:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"2845:2:17","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2834:2:17"},"nodeType":"YulFunctionCall","src":"2834:14:17"},"nodeType":"YulSwitch","src":"2827:944:17"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"2506:4:17","type":""},{"name":"src","nodeType":"YulTypedName","src":"2512:3:17","type":""}],"src":"2425:1352:17"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        let _1 := 32\n        if slt(sub(dataEnd, headStart), _1) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(offset, _2) { revert(0, 0) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(0, 0) }\n        let _4 := mload(_3)\n        if gt(_4, _2) { panic_error_0x41() }\n        let _5 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_4, 0x1f), _5), 63), _5))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _4)\n        if gt(add(add(_3, _4), _1), dataEnd) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _4) { i := add(i, _1) }\n        {\n            mstore(add(add(memPtr, i), _1), mload(add(add(_3, i), _1)))\n        }\n        mstore(add(add(memPtr, _4), _1), 0)\n        value0 := memPtr\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n}","id":17,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b506040516200162b3803806200162b83398101604081905262000034916200006e565b6200003f8162000046565b506200029e565b6002620000548282620001d2565b5050565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156200008257600080fd5b82516001600160401b03808211156200009a57600080fd5b818501915085601f830112620000af57600080fd5b815181811115620000c457620000c462000058565b604051601f8201601f19908116603f01168101908382118183101715620000ef57620000ef62000058565b8160405282815288868487010111156200010857600080fd5b600093505b828410156200012c57848401860151818501870152928501926200010d565b600086848301015280965050505050505092915050565b600181811c908216806200015857607f821691505b6020821081036200017957634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001cd57600081815260208120601f850160051c81016020861015620001a85750805b601f850160051c820191505b81811015620001c957828155600101620001b4565b5050505b505050565b81516001600160401b03811115620001ee57620001ee62000058565b6200020681620001ff845462000143565b846200017f565b602080601f8311600181146200023e5760008415620002255750858301515b600019600386901b1c1916600185901b178555620001c9565b600085815260208120601f198616915b828110156200026f578886015182559484019460019091019084016200024e565b50858210156200028e5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61137d80620002ae6000396000f3fe608060405234801561001057600080fd5b50600436106100875760003560e01c80634e1273f41161005b5780634e1273f41461010a578063a22cb4651461012a578063e985e9c51461013d578063f242432a1461017957600080fd5b8062fdd58e1461008c57806301ffc9a7146100b25780630e89341c146100d55780632eb2c2d6146100f5575b600080fd5b61009f61009a366004610b40565b61018c565b6040519081526020015b60405180910390f35b6100c56100c0366004610b83565b610225565b60405190151581526020016100a9565b6100e86100e3366004610ba7565b610275565b6040516100a99190610c06565b610108610103366004610d65565b610309565b005b61011d610118366004610e0f565b610355565b6040516100a99190610f15565b610108610138366004610f28565b61047f565b6100c561014b366004610f64565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b610108610187366004610f97565b61048e565b60006001600160a01b0383166101fc5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b148061025657506001600160e01b031982166303a24d0760e21b145b8061021f57506301ffc9a760e01b6001600160e01b031983161461021f565b60606002805461028490610ffc565b80601f01602080910402602001604051908101604052809291908181526020018280546102b090610ffc565b80156102fd5780601f106102d2576101008083540402835291602001916102fd565b820191906000526020600020905b8154815290600101906020018083116102e057829003601f168201915b50505050509050919050565b6001600160a01b0385163314806103255750610325853361014b565b6103415760405162461bcd60e51b81526004016101f390611036565b61034e85858585856104d3565b5050505050565b606081518351146103ba5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016101f3565b6000835167ffffffffffffffff8111156103d6576103d6610c19565b6040519080825280602002602001820160405280156103ff578160200160208202803683370190505b50905060005b84518110156104775761044a85828151811061042357610423611084565b602002602001015185838151811061043d5761043d611084565b602002602001015161018c565b82828151811061045c5761045c611084565b6020908102919091010152610470816110b0565b9050610405565b509392505050565b61048a3383836106b0565b5050565b6001600160a01b0385163314806104aa57506104aa853361014b565b6104c65760405162461bcd60e51b81526004016101f390611036565b61034e8585858585610790565b81518351146105355760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016101f3565b6001600160a01b03841661055b5760405162461bcd60e51b81526004016101f3906110c9565b3360005b845181101561064257600085828151811061057c5761057c611084565b60200260200101519050600085838151811061059a5761059a611084565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156105ea5760405162461bcd60e51b81526004016101f39061110e565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290610627908490611158565b925050819055505050508061063b906110b0565b905061055f565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161069292919061116b565b60405180910390a46106a88187878787876108ba565b505050505050565b816001600160a01b0316836001600160a01b0316036107235760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016101f3565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166107b65760405162461bcd60e51b81526004016101f3906110c9565b3360006107c285610a1e565b905060006107cf85610a1e565b90506000868152602081815260408083206001600160a01b038c168452909152902054858110156108125760405162461bcd60e51b81526004016101f39061110e565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a1682528120805488929061084f908490611158565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46108af848a8a8a8a8a610a69565b505050505050505050565b6001600160a01b0384163b156106a85760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906108fe9089908990889088908890600401611199565b6020604051808303816000875af1925050508015610939575060408051601f3d908101601f19168201909252610936918101906111f7565b60015b6109e557610945611214565b806308c379a00361097e5750610959611230565b806109645750610980565b8060405162461bcd60e51b81526004016101f39190610c06565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016101f3565b6001600160e01b0319811663bc197c8160e01b14610a155760405162461bcd60e51b81526004016101f3906112ba565b50505050505050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110610a5857610a58611084565b602090810291909101015292915050565b6001600160a01b0384163b156106a85760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190610aad9089908990889088908890600401611302565b6020604051808303816000875af1925050508015610ae8575060408051601f3d908101601f19168201909252610ae5918101906111f7565b60015b610af457610945611214565b6001600160e01b0319811663f23a6e6160e01b14610a155760405162461bcd60e51b81526004016101f3906112ba565b80356001600160a01b0381168114610b3b57600080fd5b919050565b60008060408385031215610b5357600080fd5b610b5c83610b24565b946020939093013593505050565b6001600160e01b031981168114610b8057600080fd5b50565b600060208284031215610b9557600080fd5b8135610ba081610b6a565b9392505050565b600060208284031215610bb957600080fd5b5035919050565b6000815180845260005b81811015610be657602081850181015186830182015201610bca565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610ba06020830184610bc0565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715610c5557610c55610c19565b6040525050565b600067ffffffffffffffff821115610c7657610c76610c19565b5060051b60200190565b600082601f830112610c9157600080fd5b81356020610c9e82610c5c565b604051610cab8282610c2f565b83815260059390931b8501820192828101915086841115610ccb57600080fd5b8286015b84811015610ce65780358352918301918301610ccf565b509695505050505050565b600082601f830112610d0257600080fd5b813567ffffffffffffffff811115610d1c57610d1c610c19565b604051610d33601f8301601f191660200182610c2f565b818152846020838601011115610d4857600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215610d7d57600080fd5b610d8686610b24565b9450610d9460208701610b24565b9350604086013567ffffffffffffffff80821115610db157600080fd5b610dbd89838a01610c80565b94506060880135915080821115610dd357600080fd5b610ddf89838a01610c80565b93506080880135915080821115610df557600080fd5b50610e0288828901610cf1565b9150509295509295909350565b60008060408385031215610e2257600080fd5b823567ffffffffffffffff80821115610e3a57600080fd5b818501915085601f830112610e4e57600080fd5b81356020610e5b82610c5c565b604051610e688282610c2f565b83815260059390931b8501820192828101915089841115610e8857600080fd5b948201945b83861015610ead57610e9e86610b24565b82529482019490820190610e8d565b96505086013592505080821115610ec357600080fd5b50610ed085828601610c80565b9150509250929050565b600081518084526020808501945080840160005b83811015610f0a57815187529582019590820190600101610eee565b509495945050505050565b602081526000610ba06020830184610eda565b60008060408385031215610f3b57600080fd5b610f4483610b24565b915060208301358015158114610f5957600080fd5b809150509250929050565b60008060408385031215610f7757600080fd5b610f8083610b24565b9150610f8e60208401610b24565b90509250929050565b600080600080600060a08688031215610faf57600080fd5b610fb886610b24565b9450610fc660208701610b24565b93506040860135925060608601359150608086013567ffffffffffffffff811115610ff057600080fd5b610e0288828901610cf1565b600181811c9082168061101057607f821691505b60208210810361103057634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016110c2576110c261109a565b5060010190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b8082018082111561021f5761021f61109a565b60408152600061117e6040830185610eda565b82810360208401526111908185610eda565b95945050505050565b6001600160a01b0386811682528516602082015260a0604082018190526000906111c590830186610eda565b82810360608401526111d78186610eda565b905082810360808401526111eb8185610bc0565b98975050505050505050565b60006020828403121561120957600080fd5b8151610ba081610b6a565b600060033d111561122d5760046000803e5060005160e01c5b90565b600060443d101561123e5790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561126e57505050505090565b82850191508151818111156112865750505050505090565b843d87010160208285010111156112a05750505050505090565b6112af60208286010187610c2f565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061133c90830184610bc0565b97965050505050505056fea26469706673582212201f8129b224788397df0c5f09917775ce6ce61a7043347f0af6c7e17d72af4bc964736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x162B CODESIZE SUB DUP1 PUSH3 0x162B DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x6E JUMP JUMPDEST PUSH3 0x3F DUP2 PUSH3 0x46 JUMP JUMPDEST POP PUSH3 0x29E JUMP JUMPDEST PUSH1 0x2 PUSH3 0x54 DUP3 DUP3 PUSH3 0x1D2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH3 0xAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH3 0xC4 JUMPI PUSH3 0xC4 PUSH3 0x58 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0xEF JUMPI PUSH3 0xEF PUSH3 0x58 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 DUP7 DUP5 DUP8 ADD ADD GT ISZERO PUSH3 0x108 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP4 POP JUMPDEST DUP3 DUP5 LT ISZERO PUSH3 0x12C JUMPI DUP5 DUP5 ADD DUP7 ADD MLOAD DUP2 DUP6 ADD DUP8 ADD MSTORE SWAP3 DUP6 ADD SWAP3 PUSH3 0x10D JUMP JUMPDEST PUSH1 0x0 DUP7 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP7 POP POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x158 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x179 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x1CD JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x1A8 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x1C9 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x1B4 JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x1EE JUMPI PUSH3 0x1EE PUSH3 0x58 JUMP JUMPDEST PUSH3 0x206 DUP2 PUSH3 0x1FF DUP5 SLOAD PUSH3 0x143 JUMP JUMPDEST DUP5 PUSH3 0x17F JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x23E JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x225 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x1C9 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x26F JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x24E JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x28E JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x137D DUP1 PUSH3 0x2AE PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x87 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4E1273F4 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x4E1273F4 EQ PUSH2 0x10A JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x12A JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x13D JUMPI DUP1 PUSH4 0xF242432A EQ PUSH2 0x179 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0xFDD58E EQ PUSH2 0x8C JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xB2 JUMPI DUP1 PUSH4 0xE89341C EQ PUSH2 0xD5 JUMPI DUP1 PUSH4 0x2EB2C2D6 EQ PUSH2 0xF5 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9F PUSH2 0x9A CALLDATASIZE PUSH1 0x4 PUSH2 0xB40 JUMP JUMPDEST PUSH2 0x18C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC5 PUSH2 0xC0 CALLDATASIZE PUSH1 0x4 PUSH2 0xB83 JUMP JUMPDEST PUSH2 0x225 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xA9 JUMP JUMPDEST PUSH2 0xE8 PUSH2 0xE3 CALLDATASIZE PUSH1 0x4 PUSH2 0xBA7 JUMP JUMPDEST PUSH2 0x275 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA9 SWAP2 SWAP1 PUSH2 0xC06 JUMP JUMPDEST PUSH2 0x108 PUSH2 0x103 CALLDATASIZE PUSH1 0x4 PUSH2 0xD65 JUMP JUMPDEST PUSH2 0x309 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x11D PUSH2 0x118 CALLDATASIZE PUSH1 0x4 PUSH2 0xE0F JUMP JUMPDEST PUSH2 0x355 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA9 SWAP2 SWAP1 PUSH2 0xF15 JUMP JUMPDEST PUSH2 0x108 PUSH2 0x138 CALLDATASIZE PUSH1 0x4 PUSH2 0xF28 JUMP JUMPDEST PUSH2 0x47F JUMP JUMPDEST PUSH2 0xC5 PUSH2 0x14B CALLDATASIZE PUSH1 0x4 PUSH2 0xF64 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x108 PUSH2 0x187 CALLDATASIZE PUSH1 0x4 PUSH2 0xF97 JUMP JUMPDEST PUSH2 0x48E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1FC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2061646472657373207A65726F206973206E6F7420612076 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x30B634B21037BBB732B9 PUSH1 0xB1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x6CDB3D13 PUSH1 0xE1 SHL EQ DUP1 PUSH2 0x256 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x3A24D07 PUSH1 0xE2 SHL EQ JUMPDEST DUP1 PUSH2 0x21F JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x21F JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x284 SWAP1 PUSH2 0xFFC JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2B0 SWAP1 PUSH2 0xFFC JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2FD JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2D2 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2FD JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2E0 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER EQ DUP1 PUSH2 0x325 JUMPI POP PUSH2 0x325 DUP6 CALLER PUSH2 0x14B JUMP JUMPDEST PUSH2 0x341 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x1036 JUMP JUMPDEST PUSH2 0x34E DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x4D3 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x3BA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A206163636F756E747320616E6420696473206C656E677468 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x40DAD2E6DAC2E8C6D PUSH1 0xBB SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3D6 JUMPI PUSH2 0x3D6 PUSH2 0xC19 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3FF JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x477 JUMPI PUSH2 0x44A DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x423 JUMPI PUSH2 0x423 PUSH2 0x1084 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x43D JUMPI PUSH2 0x43D PUSH2 0x1084 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x18C JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x45C JUMPI PUSH2 0x45C PUSH2 0x1084 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH2 0x470 DUP2 PUSH2 0x10B0 JUMP JUMPDEST SWAP1 POP PUSH2 0x405 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x48A CALLER DUP4 DUP4 PUSH2 0x6B0 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER EQ DUP1 PUSH2 0x4AA JUMPI POP PUSH2 0x4AA DUP6 CALLER PUSH2 0x14B JUMP JUMPDEST PUSH2 0x4C6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x1036 JUMP JUMPDEST PUSH2 0x34E DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x790 JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x535 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2069647320616E6420616D6F756E7473206C656E67746820 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0xDAD2E6DAC2E8C6D PUSH1 0xC3 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x55B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x10C9 JUMP JUMPDEST CALLER PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x642 JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x57C JUMPI PUSH2 0x57C PUSH2 0x1084 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x59A JUMPI PUSH2 0x59A PUSH2 0x1084 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x0 DUP5 DUP2 MSTORE DUP1 DUP4 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 AND DUP4 MSTORE SWAP1 SWAP4 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP2 DUP2 LT ISZERO PUSH2 0x5EA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x110E JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP1 DUP12 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x627 SWAP1 DUP5 SWAP1 PUSH2 0x1158 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP POP POP DUP1 PUSH2 0x63B SWAP1 PUSH2 0x10B0 JUMP JUMPDEST SWAP1 POP PUSH2 0x55F JUMP JUMPDEST POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x692 SWAP3 SWAP2 SWAP1 PUSH2 0x116B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x6A8 DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x8BA JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x723 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2073657474696E6720617070726F76616C20737461747573 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x103337B91039B2B633 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x7B6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x10C9 JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0x7C2 DUP6 PUSH2 0xA1E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7CF DUP6 PUSH2 0xA1E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP6 DUP2 LT ISZERO PUSH2 0x812 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x110E JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP10 DUP6 SUB SWAP1 SSTORE SWAP1 DUP11 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP9 SWAP3 SWAP1 PUSH2 0x84F SWAP1 DUP5 SWAP1 PUSH2 0x1158 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP9 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP12 AND SWAP3 DUP13 DUP3 AND SWAP3 SWAP2 DUP9 AND SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x8AF DUP5 DUP11 DUP11 DUP11 DUP11 DUP11 PUSH2 0xA69 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x6A8 JUMPI PUSH1 0x40 MLOAD PUSH4 0xBC197C81 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xBC197C81 SWAP1 PUSH2 0x8FE SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1199 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x939 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x936 SWAP2 DUP2 ADD SWAP1 PUSH2 0x11F7 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x9E5 JUMPI PUSH2 0x945 PUSH2 0x1214 JUMP JUMPDEST DUP1 PUSH4 0x8C379A0 SUB PUSH2 0x97E JUMPI POP PUSH2 0x959 PUSH2 0x1230 JUMP JUMPDEST DUP1 PUSH2 0x964 JUMPI POP PUSH2 0x980 JUMP JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP2 SWAP1 PUSH2 0xC06 JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x34 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F206E6F6E2D45524331313535 PUSH1 0x44 DUP3 ADD MSTORE PUSH20 0x2932B1B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x61 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xBC197C81 PUSH1 0xE0 SHL EQ PUSH2 0xA15 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x12BA JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP3 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xA58 JUMPI PUSH2 0xA58 PUSH2 0x1084 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x6A8 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF23A6E61 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xF23A6E61 SWAP1 PUSH2 0xAAD SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1302 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xAE8 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xAE5 SWAP2 DUP2 ADD SWAP1 PUSH2 0x11F7 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xAF4 JUMPI PUSH2 0x945 PUSH2 0x1214 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xF23A6E61 PUSH1 0xE0 SHL EQ PUSH2 0xA15 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x12BA JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xB3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB53 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB5C DUP4 PUSH2 0xB24 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xB80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB95 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xBA0 DUP2 PUSH2 0xB6A JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xBE6 JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0xBCA JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xBA0 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xBC0 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xC55 JUMPI PUSH2 0xC55 PUSH2 0xC19 JUMP JUMPDEST PUSH1 0x40 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xC76 JUMPI PUSH2 0xC76 PUSH2 0xC19 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xC91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0xC9E DUP3 PUSH2 0xC5C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCAB DUP3 DUP3 PUSH2 0xC2F JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x5 SWAP4 SWAP1 SWAP4 SHL DUP6 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP2 POP DUP7 DUP5 GT ISZERO PUSH2 0xCCB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xCE6 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0xCCF JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xD02 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xD1C JUMPI PUSH2 0xD1C PUSH2 0xC19 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD33 PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 PUSH2 0xC2F JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0xD48 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xD7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD86 DUP7 PUSH2 0xB24 JUMP JUMPDEST SWAP5 POP PUSH2 0xD94 PUSH1 0x20 DUP8 ADD PUSH2 0xB24 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xDB1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDBD DUP10 DUP4 DUP11 ADD PUSH2 0xC80 JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xDD3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDDF DUP10 DUP4 DUP11 ADD PUSH2 0xC80 JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xDF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE02 DUP9 DUP3 DUP10 ADD PUSH2 0xCF1 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xE3A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xE4E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0xE5B DUP3 PUSH2 0xC5C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE68 DUP3 DUP3 PUSH2 0xC2F JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x5 SWAP4 SWAP1 SWAP4 SHL DUP6 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP2 POP DUP10 DUP5 GT ISZERO PUSH2 0xE88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 DUP3 ADD SWAP5 JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0xEAD JUMPI PUSH2 0xE9E DUP7 PUSH2 0xB24 JUMP JUMPDEST DUP3 MSTORE SWAP5 DUP3 ADD SWAP5 SWAP1 DUP3 ADD SWAP1 PUSH2 0xE8D JUMP JUMPDEST SWAP7 POP POP DUP7 ADD CALLDATALOAD SWAP3 POP POP DUP1 DUP3 GT ISZERO PUSH2 0xEC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xED0 DUP6 DUP3 DUP7 ADD PUSH2 0xC80 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xF0A JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xEEE JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xBA0 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xEDA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF44 DUP4 PUSH2 0xB24 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xF59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF77 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF80 DUP4 PUSH2 0xB24 JUMP JUMPDEST SWAP2 POP PUSH2 0xF8E PUSH1 0x20 DUP5 ADD PUSH2 0xB24 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xFAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xFB8 DUP7 PUSH2 0xB24 JUMP JUMPDEST SWAP5 POP PUSH2 0xFC6 PUSH1 0x20 DUP8 ADD PUSH2 0xB24 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xFF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE02 DUP9 DUP3 DUP10 ADD PUSH2 0xCF1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1010 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1030 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A2063616C6C6572206973206E6F7420746F6B656E206F776E PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x195C881BDC88185C1C1C9BDD9959 PUSH1 0x92 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x10C2 JUMPI PUSH2 0x10C2 PUSH2 0x109A JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F20746865207A65726F206164 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2A SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A20696E73756666696369656E742062616C616E636520666F PUSH1 0x40 DUP3 ADD MSTORE PUSH10 0x39103A3930B739B332B9 PUSH1 0xB1 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x21F JUMPI PUSH2 0x21F PUSH2 0x109A JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x117E PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0xEDA JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1190 DUP2 DUP6 PUSH2 0xEDA JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x11C5 SWAP1 DUP4 ADD DUP7 PUSH2 0xEDA JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x11D7 DUP2 DUP7 PUSH2 0xEDA JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x11EB DUP2 DUP6 PUSH2 0xBC0 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1209 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xBA0 DUP2 PUSH2 0xB6A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 RETURNDATASIZE GT ISZERO PUSH2 0x122D JUMPI PUSH1 0x4 PUSH1 0x0 DUP1 RETURNDATACOPY POP PUSH1 0x0 MLOAD PUSH1 0xE0 SHR JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x44 RETURNDATASIZE LT ISZERO PUSH2 0x123E JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x3 NOT RETURNDATASIZE DUP2 ADD PUSH1 0x4 DUP4 RETURNDATACOPY DUP2 MLOAD RETURNDATASIZE PUSH8 0xFFFFFFFFFFFFFFFF DUP2 PUSH1 0x24 DUP5 ADD GT DUP2 DUP5 GT OR ISZERO PUSH2 0x126E JUMPI POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP3 DUP6 ADD SWAP2 POP DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x1286 JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP5 RETURNDATASIZE DUP8 ADD ADD PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x12A0 JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x12AF PUSH1 0x20 DUP3 DUP7 ADD ADD DUP8 PUSH2 0xC2F JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x28 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A204552433131353552656365697665722072656A65637465 PUSH1 0x40 DUP3 ADD MSTORE PUSH8 0x6420746F6B656E73 PUSH1 0xC0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x133C SWAP1 DUP4 ADD DUP5 PUSH2 0xBC0 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x1F DUP2 0x29 0xB2 0x24 PUSH25 0x8397DF0C5F09917775CE6CE61A7043347F0AF6C7E17D72AF4B 0xC9 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"570:16689:3:-:0;;;1107:62;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1149:13;1157:4;1149:7;:13::i;:::-;1107:62;570:16689;;8171:86;8237:4;:13;8244:6;8237:4;:13;:::i;:::-;;8171:86;:::o;14:127:17:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:1042;226:6;257:2;300;288:9;279:7;275:23;271:32;268:52;;;316:1;313;306:12;268:52;343:16;;-1:-1:-1;;;;;408:14:17;;;405:34;;;435:1;432;425:12;405:34;473:6;462:9;458:22;448:32;;518:7;511:4;507:2;503:13;499:27;489:55;;540:1;537;530:12;489:55;569:2;563:9;591:2;587;584:10;581:36;;;597:18;;:::i;:::-;672:2;666:9;640:2;726:13;;-1:-1:-1;;722:22:17;;;746:2;718:31;714:40;702:53;;;770:18;;;790:22;;;767:46;764:72;;;816:18;;:::i;:::-;856:10;852:2;845:22;891:2;883:6;876:18;931:7;926:2;921;917;913:11;909:20;906:33;903:53;;;952:1;949;942:12;903:53;974:1;965:10;;984:129;998:2;995:1;992:9;984:129;;;1086:10;;;1082:19;;1076:26;1055:14;;;1051:23;;1044:59;1009:10;;;;984:129;;;1155:1;1150:2;1145;1137:6;1133:15;1129:24;1122:35;1176:6;1166:16;;;;;;;;146:1042;;;;:::o;1193:380::-;1272:1;1268:12;;;;1315;;;1336:61;;1390:4;1382:6;1378:17;1368:27;;1336:61;1443:2;1435:6;1432:14;1412:18;1409:38;1406:161;;1489:10;1484:3;1480:20;1477:1;1470:31;1524:4;1521:1;1514:15;1552:4;1549:1;1542:15;1406:161;;1193:380;;;:::o;1704:545::-;1806:2;1801:3;1798:11;1795:448;;;1842:1;1867:5;1863:2;1856:17;1912:4;1908:2;1898:19;1982:2;1970:10;1966:19;1963:1;1959:27;1953:4;1949:38;2018:4;2006:10;2003:20;2000:47;;;-1:-1:-1;2041:4:17;2000:47;2096:2;2091:3;2087:12;2084:1;2080:20;2074:4;2070:31;2060:41;;2151:82;2169:2;2162:5;2159:13;2151:82;;;2214:17;;;2195:1;2184:13;2151:82;;;2155:3;;;1795:448;1704:545;;;:::o;2425:1352::-;2545:10;;-1:-1:-1;;;;;2567:30:17;;2564:56;;;2600:18;;:::i;:::-;2629:97;2719:6;2679:38;2711:4;2705:11;2679:38;:::i;:::-;2673:4;2629:97;:::i;:::-;2781:4;;2845:2;2834:14;;2862:1;2857:663;;;;3564:1;3581:6;3578:89;;;-1:-1:-1;3633:19:17;;;3627:26;3578:89;-1:-1:-1;;2382:1:17;2378:11;;;2374:24;2370:29;2360:40;2406:1;2402:11;;;2357:57;3680:81;;2827:944;;2857:663;1651:1;1644:14;;;1688:4;1675:18;;-1:-1:-1;;2893:20:17;;;3011:236;3025:7;3022:1;3019:14;3011:236;;;3114:19;;;3108:26;3093:42;;3206:27;;;;3174:1;3162:14;;;;3041:19;;3011:236;;;3015:3;3275:6;3266:7;3263:19;3260:201;;;3336:19;;;3330:26;-1:-1:-1;;3419:1:17;3415:14;;;3431:3;3411:24;3407:37;3403:42;3388:58;3373:74;;3260:201;-1:-1:-1;;;;;3507:1:17;3491:14;;;3487:22;3474:36;;-1:-1:-1;2425:1352:17:o;:::-;570:16689:3;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_1508":{"entryPoint":null,"id":1508,"parameterSlots":6,"returnSlots":0},"@_asSingletonArray_1664":{"entryPoint":2590,"id":1664,"parameterSlots":1,"returnSlots":1},"@_beforeTokenTransfer_1489":{"entryPoint":null,"id":1489,"parameterSlots":6,"returnSlots":0},"@_doSafeBatchTransferAcceptanceCheck_1636":{"entryPoint":2234,"id":1636,"parameterSlots":6,"returnSlots":0},"@_doSafeTransferAcceptanceCheck_1571":{"entryPoint":2665,"id":1571,"parameterSlots":6,"returnSlots":0},"@_msgSender_2263":{"entryPoint":null,"id":2263,"parameterSlots":0,"returnSlots":1},"@_safeBatchTransferFrom_987":{"entryPoint":1235,"id":987,"parameterSlots":5,"returnSlots":0},"@_safeTransferFrom_852":{"entryPoint":1936,"id":852,"parameterSlots":5,"returnSlots":0},"@_setApprovalForAll_1470":{"entryPoint":1712,"id":1470,"parameterSlots":3,"returnSlots":0},"@balanceOfBatch_622":{"entryPoint":853,"id":622,"parameterSlots":2,"returnSlots":1},"@balanceOf_558":{"entryPoint":396,"id":558,"parameterSlots":2,"returnSlots":1},"@isApprovedForAll_657":{"entryPoint":null,"id":657,"parameterSlots":2,"returnSlots":1},"@isContract_1939":{"entryPoint":null,"id":1939,"parameterSlots":1,"returnSlots":1},"@safeBatchTransferFrom_735":{"entryPoint":777,"id":735,"parameterSlots":5,"returnSlots":0},"@safeTransferFrom_695":{"entryPoint":1166,"id":695,"parameterSlots":5,"returnSlots":0},"@setApprovalForAll_639":{"entryPoint":1151,"id":639,"parameterSlots":2,"returnSlots":0},"@supportsInterface_2973":{"entryPoint":null,"id":2973,"parameterSlots":1,"returnSlots":1},"@supportsInterface_518":{"entryPoint":549,"id":518,"parameterSlots":1,"returnSlots":1},"@uri_530":{"entryPoint":629,"id":530,"parameterSlots":1,"returnSlots":1},"abi_decode_address":{"entryPoint":2852,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_uint256_dyn":{"entryPoint":3200,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes":{"entryPoint":3313,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":3940,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr":{"entryPoint":3429,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr":{"entryPoint":3991,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_bool":{"entryPoint":3880,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":2880,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":3599,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":2947,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":4599,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":2983,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_array_uint256_dyn":{"entryPoint":3802,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string":{"entryPoint":3008,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":4505,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":4866,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":3861,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":4459,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3078,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4794,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4150,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4297,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4366,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"array_allocation_size_array_uint256_dyn":{"entryPoint":3164,"id":null,"parameterSlots":1,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":4440,"id":null,"parameterSlots":2,"returnSlots":1},"extract_byte_array_length":{"entryPoint":4092,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":3119,"id":null,"parameterSlots":2,"returnSlots":0},"increment_t_uint256":{"entryPoint":4272,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":4250,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":4228,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":3097,"id":null,"parameterSlots":0,"returnSlots":0},"return_data_selector":{"entryPoint":4628,"id":null,"parameterSlots":0,"returnSlots":1},"try_decode_error_message":{"entryPoint":4656,"id":null,"parameterSlots":0,"returnSlots":1},"validator_revert_bytes4":{"entryPoint":2922,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:15860:17","statements":[{"nodeType":"YulBlock","src":"6:3:17","statements":[]},{"body":{"nodeType":"YulBlock","src":"63:124:17","statements":[{"nodeType":"YulAssignment","src":"73:29:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"95:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"82:12:17"},"nodeType":"YulFunctionCall","src":"82:20:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"73:5:17"}]},{"body":{"nodeType":"YulBlock","src":"165:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"174:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"177:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"167:6:17"},"nodeType":"YulFunctionCall","src":"167:12:17"},"nodeType":"YulExpressionStatement","src":"167:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"124:5:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"135:5:17"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"150:3:17","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"155:1:17","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"146:3:17"},"nodeType":"YulFunctionCall","src":"146:11:17"},{"kind":"number","nodeType":"YulLiteral","src":"159:1:17","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"142:3:17"},"nodeType":"YulFunctionCall","src":"142:19:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"131:3:17"},"nodeType":"YulFunctionCall","src":"131:31:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"121:2:17"},"nodeType":"YulFunctionCall","src":"121:42:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"114:6:17"},"nodeType":"YulFunctionCall","src":"114:50:17"},"nodeType":"YulIf","src":"111:70:17"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"42:6:17","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"53:5:17","type":""}],"src":"14:173:17"},{"body":{"nodeType":"YulBlock","src":"279:167:17","statements":[{"body":{"nodeType":"YulBlock","src":"325:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"334:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"337:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"327:6:17"},"nodeType":"YulFunctionCall","src":"327:12:17"},"nodeType":"YulExpressionStatement","src":"327:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"300:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"309:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"296:3:17"},"nodeType":"YulFunctionCall","src":"296:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"321:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"292:3:17"},"nodeType":"YulFunctionCall","src":"292:32:17"},"nodeType":"YulIf","src":"289:52:17"},{"nodeType":"YulAssignment","src":"350:39:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"379:9:17"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"360:18:17"},"nodeType":"YulFunctionCall","src":"360:29:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"350:6:17"}]},{"nodeType":"YulAssignment","src":"398:42:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"425:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"436:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"421:3:17"},"nodeType":"YulFunctionCall","src":"421:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"408:12:17"},"nodeType":"YulFunctionCall","src":"408:32:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"398:6:17"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"237:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"248:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"260:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"268:6:17","type":""}],"src":"192:254:17"},{"body":{"nodeType":"YulBlock","src":"552:76:17","statements":[{"nodeType":"YulAssignment","src":"562:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"574:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"585:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"570:3:17"},"nodeType":"YulFunctionCall","src":"570:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"562:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"604:9:17"},{"name":"value0","nodeType":"YulIdentifier","src":"615:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"597:6:17"},"nodeType":"YulFunctionCall","src":"597:25:17"},"nodeType":"YulExpressionStatement","src":"597:25:17"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"521:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"532:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"543:4:17","type":""}],"src":"451:177:17"},{"body":{"nodeType":"YulBlock","src":"677:87:17","statements":[{"body":{"nodeType":"YulBlock","src":"742:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"751:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"754:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"744:6:17"},"nodeType":"YulFunctionCall","src":"744:12:17"},"nodeType":"YulExpressionStatement","src":"744:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"700:5:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"711:5:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"722:3:17","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"727:10:17","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"718:3:17"},"nodeType":"YulFunctionCall","src":"718:20:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"707:3:17"},"nodeType":"YulFunctionCall","src":"707:32:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"697:2:17"},"nodeType":"YulFunctionCall","src":"697:43:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"690:6:17"},"nodeType":"YulFunctionCall","src":"690:51:17"},"nodeType":"YulIf","src":"687:71:17"}]},"name":"validator_revert_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"666:5:17","type":""}],"src":"633:131:17"},{"body":{"nodeType":"YulBlock","src":"838:176:17","statements":[{"body":{"nodeType":"YulBlock","src":"884:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"893:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"896:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"886:6:17"},"nodeType":"YulFunctionCall","src":"886:12:17"},"nodeType":"YulExpressionStatement","src":"886:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"859:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"868:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"855:3:17"},"nodeType":"YulFunctionCall","src":"855:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"880:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"851:3:17"},"nodeType":"YulFunctionCall","src":"851:32:17"},"nodeType":"YulIf","src":"848:52:17"},{"nodeType":"YulVariableDeclaration","src":"909:36:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"935:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"922:12:17"},"nodeType":"YulFunctionCall","src":"922:23:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"913:5:17","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"978:5:17"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"954:23:17"},"nodeType":"YulFunctionCall","src":"954:30:17"},"nodeType":"YulExpressionStatement","src":"954:30:17"},{"nodeType":"YulAssignment","src":"993:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"1003:5:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"993:6:17"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"804:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"815:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"827:6:17","type":""}],"src":"769:245:17"},{"body":{"nodeType":"YulBlock","src":"1114:92:17","statements":[{"nodeType":"YulAssignment","src":"1124:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1136:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"1147:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1132:3:17"},"nodeType":"YulFunctionCall","src":"1132:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1124:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1166:9:17"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1191:6:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1184:6:17"},"nodeType":"YulFunctionCall","src":"1184:14:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1177:6:17"},"nodeType":"YulFunctionCall","src":"1177:22:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1159:6:17"},"nodeType":"YulFunctionCall","src":"1159:41:17"},"nodeType":"YulExpressionStatement","src":"1159:41:17"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1083:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1094:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1105:4:17","type":""}],"src":"1019:187:17"},{"body":{"nodeType":"YulBlock","src":"1281:110:17","statements":[{"body":{"nodeType":"YulBlock","src":"1327:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1336:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1339:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1329:6:17"},"nodeType":"YulFunctionCall","src":"1329:12:17"},"nodeType":"YulExpressionStatement","src":"1329:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1302:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"1311:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1298:3:17"},"nodeType":"YulFunctionCall","src":"1298:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"1323:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1294:3:17"},"nodeType":"YulFunctionCall","src":"1294:32:17"},"nodeType":"YulIf","src":"1291:52:17"},{"nodeType":"YulAssignment","src":"1352:33:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1375:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1362:12:17"},"nodeType":"YulFunctionCall","src":"1362:23:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1352:6:17"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1247:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1258:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1270:6:17","type":""}],"src":"1211:180:17"},{"body":{"nodeType":"YulBlock","src":"1446:373:17","statements":[{"nodeType":"YulVariableDeclaration","src":"1456:26:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1476:5:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1470:5:17"},"nodeType":"YulFunctionCall","src":"1470:12:17"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1460:6:17","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1498:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"1503:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1491:6:17"},"nodeType":"YulFunctionCall","src":"1491:19:17"},"nodeType":"YulExpressionStatement","src":"1491:19:17"},{"nodeType":"YulVariableDeclaration","src":"1519:10:17","value":{"kind":"number","nodeType":"YulLiteral","src":"1528:1:17","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1523:1:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"1590:110:17","statements":[{"nodeType":"YulVariableDeclaration","src":"1604:14:17","value":{"kind":"number","nodeType":"YulLiteral","src":"1614:4:17","type":"","value":"0x20"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1608:2:17","type":""}]},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1646:3:17"},{"name":"i","nodeType":"YulIdentifier","src":"1651:1:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1642:3:17"},"nodeType":"YulFunctionCall","src":"1642:11:17"},{"name":"_1","nodeType":"YulIdentifier","src":"1655:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1638:3:17"},"nodeType":"YulFunctionCall","src":"1638:20:17"},{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1674:5:17"},{"name":"i","nodeType":"YulIdentifier","src":"1681:1:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1670:3:17"},"nodeType":"YulFunctionCall","src":"1670:13:17"},{"name":"_1","nodeType":"YulIdentifier","src":"1685:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1666:3:17"},"nodeType":"YulFunctionCall","src":"1666:22:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1660:5:17"},"nodeType":"YulFunctionCall","src":"1660:29:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1631:6:17"},"nodeType":"YulFunctionCall","src":"1631:59:17"},"nodeType":"YulExpressionStatement","src":"1631:59:17"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1549:1:17"},{"name":"length","nodeType":"YulIdentifier","src":"1552:6:17"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1546:2:17"},"nodeType":"YulFunctionCall","src":"1546:13:17"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1560:21:17","statements":[{"nodeType":"YulAssignment","src":"1562:17:17","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1571:1:17"},{"kind":"number","nodeType":"YulLiteral","src":"1574:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1567:3:17"},"nodeType":"YulFunctionCall","src":"1567:12:17"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1562:1:17"}]}]},"pre":{"nodeType":"YulBlock","src":"1542:3:17","statements":[]},"src":"1538:162:17"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1724:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"1729:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1720:3:17"},"nodeType":"YulFunctionCall","src":"1720:16:17"},{"kind":"number","nodeType":"YulLiteral","src":"1738:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1716:3:17"},"nodeType":"YulFunctionCall","src":"1716:27:17"},{"kind":"number","nodeType":"YulLiteral","src":"1745:1:17","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1709:6:17"},"nodeType":"YulFunctionCall","src":"1709:38:17"},"nodeType":"YulExpressionStatement","src":"1709:38:17"},{"nodeType":"YulAssignment","src":"1756:57:17","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1771:3:17"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1784:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"1792:2:17","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1780:3:17"},"nodeType":"YulFunctionCall","src":"1780:15:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1801:2:17","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1797:3:17"},"nodeType":"YulFunctionCall","src":"1797:7:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1776:3:17"},"nodeType":"YulFunctionCall","src":"1776:29:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1767:3:17"},"nodeType":"YulFunctionCall","src":"1767:39:17"},{"kind":"number","nodeType":"YulLiteral","src":"1808:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1763:3:17"},"nodeType":"YulFunctionCall","src":"1763:50:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1756:3:17"}]}]},"name":"abi_encode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1423:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1430:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"1438:3:17","type":""}],"src":"1396:423:17"},{"body":{"nodeType":"YulBlock","src":"1945:99:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1962:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"1973:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1955:6:17"},"nodeType":"YulFunctionCall","src":"1955:21:17"},"nodeType":"YulExpressionStatement","src":"1955:21:17"},{"nodeType":"YulAssignment","src":"1985:53:17","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2011:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2023:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"2034:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2019:3:17"},"nodeType":"YulFunctionCall","src":"2019:18:17"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"1993:17:17"},"nodeType":"YulFunctionCall","src":"1993:45:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1985:4:17"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1914:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1925:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1936:4:17","type":""}],"src":"1824:220:17"},{"body":{"nodeType":"YulBlock","src":"2081:95:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2098:1:17","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2105:3:17","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2110:10:17","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2101:3:17"},"nodeType":"YulFunctionCall","src":"2101:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2091:6:17"},"nodeType":"YulFunctionCall","src":"2091:31:17"},"nodeType":"YulExpressionStatement","src":"2091:31:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2138:1:17","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2141:4:17","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2131:6:17"},"nodeType":"YulFunctionCall","src":"2131:15:17"},"nodeType":"YulExpressionStatement","src":"2131:15:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2162:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2165:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2155:6:17"},"nodeType":"YulFunctionCall","src":"2155:15:17"},"nodeType":"YulExpressionStatement","src":"2155:15:17"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"2049:127:17"},{"body":{"nodeType":"YulBlock","src":"2228:202:17","statements":[{"nodeType":"YulVariableDeclaration","src":"2238:58:17","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2260:6:17"},{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"2276:4:17"},{"kind":"number","nodeType":"YulLiteral","src":"2282:2:17","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2272:3:17"},"nodeType":"YulFunctionCall","src":"2272:13:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2291:2:17","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2287:3:17"},"nodeType":"YulFunctionCall","src":"2287:7:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2268:3:17"},"nodeType":"YulFunctionCall","src":"2268:27:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2256:3:17"},"nodeType":"YulFunctionCall","src":"2256:40:17"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"2242:10:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"2371:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2373:16:17"},"nodeType":"YulFunctionCall","src":"2373:18:17"},"nodeType":"YulExpressionStatement","src":"2373:18:17"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2314:10:17"},{"kind":"number","nodeType":"YulLiteral","src":"2326:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2311:2:17"},"nodeType":"YulFunctionCall","src":"2311:34:17"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2350:10:17"},{"name":"memPtr","nodeType":"YulIdentifier","src":"2362:6:17"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2347:2:17"},"nodeType":"YulFunctionCall","src":"2347:22:17"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2308:2:17"},"nodeType":"YulFunctionCall","src":"2308:62:17"},"nodeType":"YulIf","src":"2305:88:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2409:2:17","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2413:10:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2402:6:17"},"nodeType":"YulFunctionCall","src":"2402:22:17"},"nodeType":"YulExpressionStatement","src":"2402:22:17"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"2210:6:17","type":""},{"name":"size","nodeType":"YulTypedName","src":"2218:4:17","type":""}],"src":"2181:249:17"},{"body":{"nodeType":"YulBlock","src":"2504:114:17","statements":[{"body":{"nodeType":"YulBlock","src":"2548:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2550:16:17"},"nodeType":"YulFunctionCall","src":"2550:18:17"},"nodeType":"YulExpressionStatement","src":"2550:18:17"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2520:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"2528:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2517:2:17"},"nodeType":"YulFunctionCall","src":"2517:30:17"},"nodeType":"YulIf","src":"2514:56:17"},{"nodeType":"YulAssignment","src":"2579:33:17","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2595:1:17","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"2598:6:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2591:3:17"},"nodeType":"YulFunctionCall","src":"2591:14:17"},{"kind":"number","nodeType":"YulLiteral","src":"2607:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2587:3:17"},"nodeType":"YulFunctionCall","src":"2587:25:17"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"2579:4:17"}]}]},"name":"array_allocation_size_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"2484:6:17","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"2495:4:17","type":""}],"src":"2435:183:17"},{"body":{"nodeType":"YulBlock","src":"2687:660:17","statements":[{"body":{"nodeType":"YulBlock","src":"2736:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2745:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2748:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2738:6:17"},"nodeType":"YulFunctionCall","src":"2738:12:17"},"nodeType":"YulExpressionStatement","src":"2738:12:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2715:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"2723:4:17","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2711:3:17"},"nodeType":"YulFunctionCall","src":"2711:17:17"},{"name":"end","nodeType":"YulIdentifier","src":"2730:3:17"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2707:3:17"},"nodeType":"YulFunctionCall","src":"2707:27:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2700:6:17"},"nodeType":"YulFunctionCall","src":"2700:35:17"},"nodeType":"YulIf","src":"2697:55:17"},{"nodeType":"YulVariableDeclaration","src":"2761:30:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2784:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2771:12:17"},"nodeType":"YulFunctionCall","src":"2771:20:17"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2765:2:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2800:14:17","value":{"kind":"number","nodeType":"YulLiteral","src":"2810:4:17","type":"","value":"0x20"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"2804:2:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2823:53:17","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2873:2:17"}],"functionName":{"name":"array_allocation_size_array_uint256_dyn","nodeType":"YulIdentifier","src":"2833:39:17"},"nodeType":"YulFunctionCall","src":"2833:43:17"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"2827:2:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2885:23:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2905:2:17","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2899:5:17"},"nodeType":"YulFunctionCall","src":"2899:9:17"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"2889:6:17","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2937:6:17"},{"name":"_3","nodeType":"YulIdentifier","src":"2945:2:17"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"2917:19:17"},"nodeType":"YulFunctionCall","src":"2917:31:17"},"nodeType":"YulExpressionStatement","src":"2917:31:17"},{"nodeType":"YulVariableDeclaration","src":"2957:17:17","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"2968:6:17"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"2961:3:17","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2990:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"2998:2:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2983:6:17"},"nodeType":"YulFunctionCall","src":"2983:18:17"},"nodeType":"YulExpressionStatement","src":"2983:18:17"},{"nodeType":"YulAssignment","src":"3010:22:17","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3021:6:17"},{"name":"_2","nodeType":"YulIdentifier","src":"3029:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3017:3:17"},"nodeType":"YulFunctionCall","src":"3017:15:17"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3010:3:17"}]},{"nodeType":"YulVariableDeclaration","src":"3041:46:17","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3063:6:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3075:1:17","type":"","value":"5"},{"name":"_1","nodeType":"YulIdentifier","src":"3078:2:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3071:3:17"},"nodeType":"YulFunctionCall","src":"3071:10:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3059:3:17"},"nodeType":"YulFunctionCall","src":"3059:23:17"},{"name":"_2","nodeType":"YulIdentifier","src":"3084:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3055:3:17"},"nodeType":"YulFunctionCall","src":"3055:32:17"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"3045:6:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"3115:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3124:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3127:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3117:6:17"},"nodeType":"YulFunctionCall","src":"3117:12:17"},"nodeType":"YulExpressionStatement","src":"3117:12:17"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"3102:6:17"},{"name":"end","nodeType":"YulIdentifier","src":"3110:3:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3099:2:17"},"nodeType":"YulFunctionCall","src":"3099:15:17"},"nodeType":"YulIf","src":"3096:35:17"},{"nodeType":"YulVariableDeclaration","src":"3140:26:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3155:6:17"},{"name":"_2","nodeType":"YulIdentifier","src":"3163:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3151:3:17"},"nodeType":"YulFunctionCall","src":"3151:15:17"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"3144:3:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"3231:86:17","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3252:3:17"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3270:3:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3257:12:17"},"nodeType":"YulFunctionCall","src":"3257:17:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3245:6:17"},"nodeType":"YulFunctionCall","src":"3245:30:17"},"nodeType":"YulExpressionStatement","src":"3245:30:17"},{"nodeType":"YulAssignment","src":"3288:19:17","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3299:3:17"},{"name":"_2","nodeType":"YulIdentifier","src":"3304:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3295:3:17"},"nodeType":"YulFunctionCall","src":"3295:12:17"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3288:3:17"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3186:3:17"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"3191:6:17"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3183:2:17"},"nodeType":"YulFunctionCall","src":"3183:15:17"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3199:23:17","statements":[{"nodeType":"YulAssignment","src":"3201:19:17","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3212:3:17"},{"name":"_2","nodeType":"YulIdentifier","src":"3217:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3208:3:17"},"nodeType":"YulFunctionCall","src":"3208:12:17"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"3201:3:17"}]}]},"pre":{"nodeType":"YulBlock","src":"3179:3:17","statements":[]},"src":"3175:142:17"},{"nodeType":"YulAssignment","src":"3326:15:17","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"3335:6:17"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3326:5:17"}]}]},"name":"abi_decode_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2661:6:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"2669:3:17","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2677:5:17","type":""}],"src":"2623:724:17"},{"body":{"nodeType":"YulBlock","src":"3404:503:17","statements":[{"body":{"nodeType":"YulBlock","src":"3453:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3462:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3465:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3455:6:17"},"nodeType":"YulFunctionCall","src":"3455:12:17"},"nodeType":"YulExpressionStatement","src":"3455:12:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3432:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"3440:4:17","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3428:3:17"},"nodeType":"YulFunctionCall","src":"3428:17:17"},{"name":"end","nodeType":"YulIdentifier","src":"3447:3:17"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3424:3:17"},"nodeType":"YulFunctionCall","src":"3424:27:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3417:6:17"},"nodeType":"YulFunctionCall","src":"3417:35:17"},"nodeType":"YulIf","src":"3414:55:17"},{"nodeType":"YulVariableDeclaration","src":"3478:30:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3501:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3488:12:17"},"nodeType":"YulFunctionCall","src":"3488:20:17"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3482:2:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"3547:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3549:16:17"},"nodeType":"YulFunctionCall","src":"3549:18:17"},"nodeType":"YulExpressionStatement","src":"3549:18:17"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"3523:2:17"},{"kind":"number","nodeType":"YulLiteral","src":"3527:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3520:2:17"},"nodeType":"YulFunctionCall","src":"3520:26:17"},"nodeType":"YulIf","src":"3517:52:17"},{"nodeType":"YulVariableDeclaration","src":"3578:23:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3598:2:17","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3592:5:17"},"nodeType":"YulFunctionCall","src":"3592:9:17"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"3582:6:17","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3630:6:17"},{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"3650:2:17"},{"kind":"number","nodeType":"YulLiteral","src":"3654:4:17","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3646:3:17"},"nodeType":"YulFunctionCall","src":"3646:13:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3665:2:17","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3661:3:17"},"nodeType":"YulFunctionCall","src":"3661:7:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3642:3:17"},"nodeType":"YulFunctionCall","src":"3642:27:17"},{"kind":"number","nodeType":"YulLiteral","src":"3671:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3638:3:17"},"nodeType":"YulFunctionCall","src":"3638:38:17"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"3610:19:17"},"nodeType":"YulFunctionCall","src":"3610:67:17"},"nodeType":"YulExpressionStatement","src":"3610:67:17"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3693:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"3701:2:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3686:6:17"},"nodeType":"YulFunctionCall","src":"3686:18:17"},"nodeType":"YulExpressionStatement","src":"3686:18:17"},{"body":{"nodeType":"YulBlock","src":"3752:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3761:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3764:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3754:6:17"},"nodeType":"YulFunctionCall","src":"3754:12:17"},"nodeType":"YulExpressionStatement","src":"3754:12:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3727:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"3735:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3723:3:17"},"nodeType":"YulFunctionCall","src":"3723:15:17"},{"kind":"number","nodeType":"YulLiteral","src":"3740:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3719:3:17"},"nodeType":"YulFunctionCall","src":"3719:26:17"},{"name":"end","nodeType":"YulIdentifier","src":"3747:3:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3716:2:17"},"nodeType":"YulFunctionCall","src":"3716:35:17"},"nodeType":"YulIf","src":"3713:55:17"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3794:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"3802:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3790:3:17"},"nodeType":"YulFunctionCall","src":"3790:17:17"},{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3813:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"3821:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3809:3:17"},"nodeType":"YulFunctionCall","src":"3809:17:17"},{"name":"_1","nodeType":"YulIdentifier","src":"3828:2:17"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"3777:12:17"},"nodeType":"YulFunctionCall","src":"3777:54:17"},"nodeType":"YulExpressionStatement","src":"3777:54:17"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3855:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"3863:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3851:3:17"},"nodeType":"YulFunctionCall","src":"3851:15:17"},{"kind":"number","nodeType":"YulLiteral","src":"3868:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3847:3:17"},"nodeType":"YulFunctionCall","src":"3847:26:17"},{"kind":"number","nodeType":"YulLiteral","src":"3875:1:17","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3840:6:17"},"nodeType":"YulFunctionCall","src":"3840:37:17"},"nodeType":"YulExpressionStatement","src":"3840:37:17"},{"nodeType":"YulAssignment","src":"3886:15:17","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"3895:6:17"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3886:5:17"}]}]},"name":"abi_decode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3378:6:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"3386:3:17","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3394:5:17","type":""}],"src":"3352:555:17"},{"body":{"nodeType":"YulBlock","src":"4109:746:17","statements":[{"body":{"nodeType":"YulBlock","src":"4156:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4165:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4168:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4158:6:17"},"nodeType":"YulFunctionCall","src":"4158:12:17"},"nodeType":"YulExpressionStatement","src":"4158:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4130:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"4139:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4126:3:17"},"nodeType":"YulFunctionCall","src":"4126:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"4151:3:17","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4122:3:17"},"nodeType":"YulFunctionCall","src":"4122:33:17"},"nodeType":"YulIf","src":"4119:53:17"},{"nodeType":"YulAssignment","src":"4181:39:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4210:9:17"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4191:18:17"},"nodeType":"YulFunctionCall","src":"4191:29:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4181:6:17"}]},{"nodeType":"YulAssignment","src":"4229:48:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4262:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"4273:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4258:3:17"},"nodeType":"YulFunctionCall","src":"4258:18:17"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4239:18:17"},"nodeType":"YulFunctionCall","src":"4239:38:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4229:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"4286:46:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4317:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"4328:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4313:3:17"},"nodeType":"YulFunctionCall","src":"4313:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4300:12:17"},"nodeType":"YulFunctionCall","src":"4300:32:17"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4290:6:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4341:28:17","value":{"kind":"number","nodeType":"YulLiteral","src":"4351:18:17","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4345:2:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"4396:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4405:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4408:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4398:6:17"},"nodeType":"YulFunctionCall","src":"4398:12:17"},"nodeType":"YulExpressionStatement","src":"4398:12:17"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4384:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"4392:2:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4381:2:17"},"nodeType":"YulFunctionCall","src":"4381:14:17"},"nodeType":"YulIf","src":"4378:34:17"},{"nodeType":"YulAssignment","src":"4421:71:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4464:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"4475:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4460:3:17"},"nodeType":"YulFunctionCall","src":"4460:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4484:7:17"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"4431:28:17"},"nodeType":"YulFunctionCall","src":"4431:61:17"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4421:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"4501:48:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4534:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"4545:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4530:3:17"},"nodeType":"YulFunctionCall","src":"4530:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4517:12:17"},"nodeType":"YulFunctionCall","src":"4517:32:17"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"4505:8:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"4578:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4587:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4590:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4580:6:17"},"nodeType":"YulFunctionCall","src":"4580:12:17"},"nodeType":"YulExpressionStatement","src":"4580:12:17"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"4564:8:17"},{"name":"_1","nodeType":"YulIdentifier","src":"4574:2:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4561:2:17"},"nodeType":"YulFunctionCall","src":"4561:16:17"},"nodeType":"YulIf","src":"4558:36:17"},{"nodeType":"YulAssignment","src":"4603:73:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4646:9:17"},{"name":"offset_1","nodeType":"YulIdentifier","src":"4657:8:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4642:3:17"},"nodeType":"YulFunctionCall","src":"4642:24:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4668:7:17"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"4613:28:17"},"nodeType":"YulFunctionCall","src":"4613:63:17"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"4603:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"4685:49:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4718:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"4729:3:17","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4714:3:17"},"nodeType":"YulFunctionCall","src":"4714:19:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4701:12:17"},"nodeType":"YulFunctionCall","src":"4701:33:17"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"4689:8:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"4763:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4772:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4775:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4765:6:17"},"nodeType":"YulFunctionCall","src":"4765:12:17"},"nodeType":"YulExpressionStatement","src":"4765:12:17"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"4749:8:17"},{"name":"_1","nodeType":"YulIdentifier","src":"4759:2:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4746:2:17"},"nodeType":"YulFunctionCall","src":"4746:16:17"},"nodeType":"YulIf","src":"4743:36:17"},{"nodeType":"YulAssignment","src":"4788:61:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4819:9:17"},{"name":"offset_2","nodeType":"YulIdentifier","src":"4830:8:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4815:3:17"},"nodeType":"YulFunctionCall","src":"4815:24:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4841:7:17"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"4798:16:17"},"nodeType":"YulFunctionCall","src":"4798:51:17"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"4788:6:17"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4043:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4054:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4066:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4074:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4082:6:17","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4090:6:17","type":""},{"name":"value4","nodeType":"YulTypedName","src":"4098:6:17","type":""}],"src":"3912:943:17"},{"body":{"nodeType":"YulBlock","src":"4997:1071:17","statements":[{"body":{"nodeType":"YulBlock","src":"5043:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5052:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5055:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5045:6:17"},"nodeType":"YulFunctionCall","src":"5045:12:17"},"nodeType":"YulExpressionStatement","src":"5045:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5018:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"5027:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5014:3:17"},"nodeType":"YulFunctionCall","src":"5014:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"5039:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5010:3:17"},"nodeType":"YulFunctionCall","src":"5010:32:17"},"nodeType":"YulIf","src":"5007:52:17"},{"nodeType":"YulVariableDeclaration","src":"5068:37:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5095:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5082:12:17"},"nodeType":"YulFunctionCall","src":"5082:23:17"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5072:6:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5114:28:17","value":{"kind":"number","nodeType":"YulLiteral","src":"5124:18:17","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5118:2:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"5169:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5178:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5181:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5171:6:17"},"nodeType":"YulFunctionCall","src":"5171:12:17"},"nodeType":"YulExpressionStatement","src":"5171:12:17"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5157:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"5165:2:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5154:2:17"},"nodeType":"YulFunctionCall","src":"5154:14:17"},"nodeType":"YulIf","src":"5151:34:17"},{"nodeType":"YulVariableDeclaration","src":"5194:32:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5208:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"5219:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5204:3:17"},"nodeType":"YulFunctionCall","src":"5204:22:17"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"5198:2:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"5274:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5283:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5286:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5276:6:17"},"nodeType":"YulFunctionCall","src":"5276:12:17"},"nodeType":"YulExpressionStatement","src":"5276:12:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"5253:2:17"},{"kind":"number","nodeType":"YulLiteral","src":"5257:4:17","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5249:3:17"},"nodeType":"YulFunctionCall","src":"5249:13:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5264:7:17"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5245:3:17"},"nodeType":"YulFunctionCall","src":"5245:27:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5238:6:17"},"nodeType":"YulFunctionCall","src":"5238:35:17"},"nodeType":"YulIf","src":"5235:55:17"},{"nodeType":"YulVariableDeclaration","src":"5299:26:17","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"5322:2:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5309:12:17"},"nodeType":"YulFunctionCall","src":"5309:16:17"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"5303:2:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5334:14:17","value":{"kind":"number","nodeType":"YulLiteral","src":"5344:4:17","type":"","value":"0x20"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"5338:2:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5357:53:17","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"5407:2:17"}],"functionName":{"name":"array_allocation_size_array_uint256_dyn","nodeType":"YulIdentifier","src":"5367:39:17"},"nodeType":"YulFunctionCall","src":"5367:43:17"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"5361:2:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5419:23:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5439:2:17","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5433:5:17"},"nodeType":"YulFunctionCall","src":"5433:9:17"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"5423:6:17","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5471:6:17"},{"name":"_5","nodeType":"YulIdentifier","src":"5479:2:17"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"5451:19:17"},"nodeType":"YulFunctionCall","src":"5451:31:17"},"nodeType":"YulExpressionStatement","src":"5451:31:17"},{"nodeType":"YulVariableDeclaration","src":"5491:17:17","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"5502:6:17"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"5495:3:17","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5524:6:17"},{"name":"_3","nodeType":"YulIdentifier","src":"5532:2:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5517:6:17"},"nodeType":"YulFunctionCall","src":"5517:18:17"},"nodeType":"YulExpressionStatement","src":"5517:18:17"},{"nodeType":"YulAssignment","src":"5544:22:17","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5555:6:17"},{"name":"_4","nodeType":"YulIdentifier","src":"5563:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5551:3:17"},"nodeType":"YulFunctionCall","src":"5551:15:17"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"5544:3:17"}]},{"nodeType":"YulVariableDeclaration","src":"5575:42:17","value":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"5597:2:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5605:1:17","type":"","value":"5"},{"name":"_3","nodeType":"YulIdentifier","src":"5608:2:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5601:3:17"},"nodeType":"YulFunctionCall","src":"5601:10:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5593:3:17"},"nodeType":"YulFunctionCall","src":"5593:19:17"},{"name":"_4","nodeType":"YulIdentifier","src":"5614:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5589:3:17"},"nodeType":"YulFunctionCall","src":"5589:28:17"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"5579:6:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"5649:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5658:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5661:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5651:6:17"},"nodeType":"YulFunctionCall","src":"5651:12:17"},"nodeType":"YulExpressionStatement","src":"5651:12:17"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"5632:6:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5640:7:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5629:2:17"},"nodeType":"YulFunctionCall","src":"5629:19:17"},"nodeType":"YulIf","src":"5626:39:17"},{"nodeType":"YulVariableDeclaration","src":"5674:22:17","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"5689:2:17"},{"name":"_4","nodeType":"YulIdentifier","src":"5693:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5685:3:17"},"nodeType":"YulFunctionCall","src":"5685:11:17"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"5678:3:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"5761:92:17","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"5782:3:17"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5806:3:17"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"5787:18:17"},"nodeType":"YulFunctionCall","src":"5787:23:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5775:6:17"},"nodeType":"YulFunctionCall","src":"5775:36:17"},"nodeType":"YulExpressionStatement","src":"5775:36:17"},{"nodeType":"YulAssignment","src":"5824:19:17","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"5835:3:17"},{"name":"_4","nodeType":"YulIdentifier","src":"5840:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5831:3:17"},"nodeType":"YulFunctionCall","src":"5831:12:17"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"5824:3:17"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5716:3:17"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"5721:6:17"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5713:2:17"},"nodeType":"YulFunctionCall","src":"5713:15:17"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"5729:23:17","statements":[{"nodeType":"YulAssignment","src":"5731:19:17","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5742:3:17"},{"name":"_4","nodeType":"YulIdentifier","src":"5747:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5738:3:17"},"nodeType":"YulFunctionCall","src":"5738:12:17"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"5731:3:17"}]}]},"pre":{"nodeType":"YulBlock","src":"5709:3:17","statements":[]},"src":"5705:148:17"},{"nodeType":"YulAssignment","src":"5862:16:17","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"5872:6:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5862:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"5887:48:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5920:9:17"},{"name":"_4","nodeType":"YulIdentifier","src":"5931:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5916:3:17"},"nodeType":"YulFunctionCall","src":"5916:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5903:12:17"},"nodeType":"YulFunctionCall","src":"5903:32:17"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"5891:8:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"5964:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5973:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5976:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5966:6:17"},"nodeType":"YulFunctionCall","src":"5966:12:17"},"nodeType":"YulExpressionStatement","src":"5966:12:17"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"5950:8:17"},{"name":"_1","nodeType":"YulIdentifier","src":"5960:2:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5947:2:17"},"nodeType":"YulFunctionCall","src":"5947:16:17"},"nodeType":"YulIf","src":"5944:36:17"},{"nodeType":"YulAssignment","src":"5989:73:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6032:9:17"},{"name":"offset_1","nodeType":"YulIdentifier","src":"6043:8:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6028:3:17"},"nodeType":"YulFunctionCall","src":"6028:24:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6054:7:17"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"5999:28:17"},"nodeType":"YulFunctionCall","src":"5999:63:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5989:6:17"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4955:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4966:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4978:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4986:6:17","type":""}],"src":"4860:1208:17"},{"body":{"nodeType":"YulBlock","src":"6134:374:17","statements":[{"nodeType":"YulVariableDeclaration","src":"6144:26:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6164:5:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6158:5:17"},"nodeType":"YulFunctionCall","src":"6158:12:17"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"6148:6:17","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6186:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"6191:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6179:6:17"},"nodeType":"YulFunctionCall","src":"6179:19:17"},"nodeType":"YulExpressionStatement","src":"6179:19:17"},{"nodeType":"YulVariableDeclaration","src":"6207:14:17","value":{"kind":"number","nodeType":"YulLiteral","src":"6217:4:17","type":"","value":"0x20"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"6211:2:17","type":""}]},{"nodeType":"YulAssignment","src":"6230:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6241:3:17"},{"name":"_1","nodeType":"YulIdentifier","src":"6246:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6237:3:17"},"nodeType":"YulFunctionCall","src":"6237:12:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6230:3:17"}]},{"nodeType":"YulVariableDeclaration","src":"6258:28:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6276:5:17"},{"name":"_1","nodeType":"YulIdentifier","src":"6283:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6272:3:17"},"nodeType":"YulFunctionCall","src":"6272:14:17"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"6262:6:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6295:10:17","value":{"kind":"number","nodeType":"YulLiteral","src":"6304:1:17","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"6299:1:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"6363:120:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6384:3:17"},{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"6395:6:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6389:5:17"},"nodeType":"YulFunctionCall","src":"6389:13:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6377:6:17"},"nodeType":"YulFunctionCall","src":"6377:26:17"},"nodeType":"YulExpressionStatement","src":"6377:26:17"},{"nodeType":"YulAssignment","src":"6416:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6427:3:17"},{"name":"_1","nodeType":"YulIdentifier","src":"6432:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6423:3:17"},"nodeType":"YulFunctionCall","src":"6423:12:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6416:3:17"}]},{"nodeType":"YulAssignment","src":"6448:25:17","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"6462:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"6470:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6458:3:17"},"nodeType":"YulFunctionCall","src":"6458:15:17"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"6448:6:17"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6325:1:17"},{"name":"length","nodeType":"YulIdentifier","src":"6328:6:17"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6322:2:17"},"nodeType":"YulFunctionCall","src":"6322:13:17"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"6336:18:17","statements":[{"nodeType":"YulAssignment","src":"6338:14:17","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6347:1:17"},{"kind":"number","nodeType":"YulLiteral","src":"6350:1:17","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6343:3:17"},"nodeType":"YulFunctionCall","src":"6343:9:17"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"6338:1:17"}]}]},"pre":{"nodeType":"YulBlock","src":"6318:3:17","statements":[]},"src":"6314:169:17"},{"nodeType":"YulAssignment","src":"6492:10:17","value":{"name":"pos","nodeType":"YulIdentifier","src":"6499:3:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"6492:3:17"}]}]},"name":"abi_encode_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6111:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6118:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6126:3:17","type":""}],"src":"6073:435:17"},{"body":{"nodeType":"YulBlock","src":"6664:110:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6681:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"6692:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6674:6:17"},"nodeType":"YulFunctionCall","src":"6674:21:17"},"nodeType":"YulExpressionStatement","src":"6674:21:17"},{"nodeType":"YulAssignment","src":"6704:64:17","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6741:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6753:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"6764:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6749:3:17"},"nodeType":"YulFunctionCall","src":"6749:18:17"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"6712:28:17"},"nodeType":"YulFunctionCall","src":"6712:56:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6704:4:17"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6633:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6644:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6655:4:17","type":""}],"src":"6513:261:17"},{"body":{"nodeType":"YulBlock","src":"6863:263:17","statements":[{"body":{"nodeType":"YulBlock","src":"6909:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6918:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6921:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6911:6:17"},"nodeType":"YulFunctionCall","src":"6911:12:17"},"nodeType":"YulExpressionStatement","src":"6911:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6884:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"6893:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6880:3:17"},"nodeType":"YulFunctionCall","src":"6880:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"6905:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6876:3:17"},"nodeType":"YulFunctionCall","src":"6876:32:17"},"nodeType":"YulIf","src":"6873:52:17"},{"nodeType":"YulAssignment","src":"6934:39:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6963:9:17"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"6944:18:17"},"nodeType":"YulFunctionCall","src":"6944:29:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6934:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"6982:45:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7012:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"7023:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7008:3:17"},"nodeType":"YulFunctionCall","src":"7008:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6995:12:17"},"nodeType":"YulFunctionCall","src":"6995:32:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"6986:5:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"7080:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7089:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7092:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7082:6:17"},"nodeType":"YulFunctionCall","src":"7082:12:17"},"nodeType":"YulExpressionStatement","src":"7082:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7049:5:17"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7070:5:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7063:6:17"},"nodeType":"YulFunctionCall","src":"7063:13:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7056:6:17"},"nodeType":"YulFunctionCall","src":"7056:21:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"7046:2:17"},"nodeType":"YulFunctionCall","src":"7046:32:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7039:6:17"},"nodeType":"YulFunctionCall","src":"7039:40:17"},"nodeType":"YulIf","src":"7036:60:17"},{"nodeType":"YulAssignment","src":"7105:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"7115:5:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7105:6:17"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6821:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6832:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6844:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6852:6:17","type":""}],"src":"6779:347:17"},{"body":{"nodeType":"YulBlock","src":"7218:173:17","statements":[{"body":{"nodeType":"YulBlock","src":"7264:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7273:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7276:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7266:6:17"},"nodeType":"YulFunctionCall","src":"7266:12:17"},"nodeType":"YulExpressionStatement","src":"7266:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7239:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"7248:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7235:3:17"},"nodeType":"YulFunctionCall","src":"7235:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"7260:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7231:3:17"},"nodeType":"YulFunctionCall","src":"7231:32:17"},"nodeType":"YulIf","src":"7228:52:17"},{"nodeType":"YulAssignment","src":"7289:39:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7318:9:17"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"7299:18:17"},"nodeType":"YulFunctionCall","src":"7299:29:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7289:6:17"}]},{"nodeType":"YulAssignment","src":"7337:48:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7370:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"7381:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7366:3:17"},"nodeType":"YulFunctionCall","src":"7366:18:17"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"7347:18:17"},"nodeType":"YulFunctionCall","src":"7347:38:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7337:6:17"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7176:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7187:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7199:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7207:6:17","type":""}],"src":"7131:260:17"},{"body":{"nodeType":"YulBlock","src":"7543:459:17","statements":[{"body":{"nodeType":"YulBlock","src":"7590:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7599:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7602:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7592:6:17"},"nodeType":"YulFunctionCall","src":"7592:12:17"},"nodeType":"YulExpressionStatement","src":"7592:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7564:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"7573:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7560:3:17"},"nodeType":"YulFunctionCall","src":"7560:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"7585:3:17","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7556:3:17"},"nodeType":"YulFunctionCall","src":"7556:33:17"},"nodeType":"YulIf","src":"7553:53:17"},{"nodeType":"YulAssignment","src":"7615:39:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7644:9:17"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"7625:18:17"},"nodeType":"YulFunctionCall","src":"7625:29:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7615:6:17"}]},{"nodeType":"YulAssignment","src":"7663:48:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7696:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"7707:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7692:3:17"},"nodeType":"YulFunctionCall","src":"7692:18:17"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"7673:18:17"},"nodeType":"YulFunctionCall","src":"7673:38:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7663:6:17"}]},{"nodeType":"YulAssignment","src":"7720:42:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7747:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"7758:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7743:3:17"},"nodeType":"YulFunctionCall","src":"7743:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7730:12:17"},"nodeType":"YulFunctionCall","src":"7730:32:17"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"7720:6:17"}]},{"nodeType":"YulAssignment","src":"7771:42:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7798:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"7809:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7794:3:17"},"nodeType":"YulFunctionCall","src":"7794:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7781:12:17"},"nodeType":"YulFunctionCall","src":"7781:32:17"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"7771:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"7822:47:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7853:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"7864:3:17","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7849:3:17"},"nodeType":"YulFunctionCall","src":"7849:19:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7836:12:17"},"nodeType":"YulFunctionCall","src":"7836:33:17"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7826:6:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"7912:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7921:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7924:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7914:6:17"},"nodeType":"YulFunctionCall","src":"7914:12:17"},"nodeType":"YulExpressionStatement","src":"7914:12:17"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7884:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"7892:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7881:2:17"},"nodeType":"YulFunctionCall","src":"7881:30:17"},"nodeType":"YulIf","src":"7878:50:17"},{"nodeType":"YulAssignment","src":"7937:59:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7968:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"7979:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7964:3:17"},"nodeType":"YulFunctionCall","src":"7964:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7988:7:17"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"7947:16:17"},"nodeType":"YulFunctionCall","src":"7947:49:17"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"7937:6:17"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7477:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7488:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7500:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7508:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7516:6:17","type":""},{"name":"value3","nodeType":"YulTypedName","src":"7524:6:17","type":""},{"name":"value4","nodeType":"YulTypedName","src":"7532:6:17","type":""}],"src":"7396:606:17"},{"body":{"nodeType":"YulBlock","src":"8181:232:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8198:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"8209:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8191:6:17"},"nodeType":"YulFunctionCall","src":"8191:21:17"},"nodeType":"YulExpressionStatement","src":"8191:21:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8232:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"8243:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8228:3:17"},"nodeType":"YulFunctionCall","src":"8228:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"8248:2:17","type":"","value":"42"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8221:6:17"},"nodeType":"YulFunctionCall","src":"8221:30:17"},"nodeType":"YulExpressionStatement","src":"8221:30:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8271:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"8282:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8267:3:17"},"nodeType":"YulFunctionCall","src":"8267:18:17"},{"hexValue":"455243313135353a2061646472657373207a65726f206973206e6f7420612076","kind":"string","nodeType":"YulLiteral","src":"8287:34:17","type":"","value":"ERC1155: address zero is not a v"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8260:6:17"},"nodeType":"YulFunctionCall","src":"8260:62:17"},"nodeType":"YulExpressionStatement","src":"8260:62:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8342:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"8353:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8338:3:17"},"nodeType":"YulFunctionCall","src":"8338:18:17"},{"hexValue":"616c6964206f776e6572","kind":"string","nodeType":"YulLiteral","src":"8358:12:17","type":"","value":"alid owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8331:6:17"},"nodeType":"YulFunctionCall","src":"8331:40:17"},"nodeType":"YulExpressionStatement","src":"8331:40:17"},{"nodeType":"YulAssignment","src":"8380:27:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8392:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"8403:3:17","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8388:3:17"},"nodeType":"YulFunctionCall","src":"8388:19:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8380:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8158:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8172:4:17","type":""}],"src":"8007:406:17"},{"body":{"nodeType":"YulBlock","src":"8473:325:17","statements":[{"nodeType":"YulAssignment","src":"8483:22:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8497:1:17","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"8500:4:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"8493:3:17"},"nodeType":"YulFunctionCall","src":"8493:12:17"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"8483:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"8514:38:17","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"8544:4:17"},{"kind":"number","nodeType":"YulLiteral","src":"8550:1:17","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8540:3:17"},"nodeType":"YulFunctionCall","src":"8540:12:17"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"8518:18:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"8591:31:17","statements":[{"nodeType":"YulAssignment","src":"8593:27:17","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8607:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"8615:4:17","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8603:3:17"},"nodeType":"YulFunctionCall","src":"8603:17:17"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"8593:6:17"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"8571:18:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8564:6:17"},"nodeType":"YulFunctionCall","src":"8564:26:17"},"nodeType":"YulIf","src":"8561:61:17"},{"body":{"nodeType":"YulBlock","src":"8681:111:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8702:1:17","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8709:3:17","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"8714:10:17","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8705:3:17"},"nodeType":"YulFunctionCall","src":"8705:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8695:6:17"},"nodeType":"YulFunctionCall","src":"8695:31:17"},"nodeType":"YulExpressionStatement","src":"8695:31:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8746:1:17","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"8749:4:17","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8739:6:17"},"nodeType":"YulFunctionCall","src":"8739:15:17"},"nodeType":"YulExpressionStatement","src":"8739:15:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8774:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8777:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8767:6:17"},"nodeType":"YulFunctionCall","src":"8767:15:17"},"nodeType":"YulExpressionStatement","src":"8767:15:17"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"8637:18:17"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8660:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"8668:2:17","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8657:2:17"},"nodeType":"YulFunctionCall","src":"8657:14:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"8634:2:17"},"nodeType":"YulFunctionCall","src":"8634:38:17"},"nodeType":"YulIf","src":"8631:161:17"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"8453:4:17","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"8462:6:17","type":""}],"src":"8418:380:17"},{"body":{"nodeType":"YulBlock","src":"8977:236:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8994:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"9005:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8987:6:17"},"nodeType":"YulFunctionCall","src":"8987:21:17"},"nodeType":"YulExpressionStatement","src":"8987:21:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9028:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"9039:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9024:3:17"},"nodeType":"YulFunctionCall","src":"9024:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"9044:2:17","type":"","value":"46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9017:6:17"},"nodeType":"YulFunctionCall","src":"9017:30:17"},"nodeType":"YulExpressionStatement","src":"9017:30:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9067:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"9078:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9063:3:17"},"nodeType":"YulFunctionCall","src":"9063:18:17"},{"hexValue":"455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e","kind":"string","nodeType":"YulLiteral","src":"9083:34:17","type":"","value":"ERC1155: caller is not token own"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9056:6:17"},"nodeType":"YulFunctionCall","src":"9056:62:17"},"nodeType":"YulExpressionStatement","src":"9056:62:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9138:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"9149:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9134:3:17"},"nodeType":"YulFunctionCall","src":"9134:18:17"},{"hexValue":"6572206f7220617070726f766564","kind":"string","nodeType":"YulLiteral","src":"9154:16:17","type":"","value":"er or approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9127:6:17"},"nodeType":"YulFunctionCall","src":"9127:44:17"},"nodeType":"YulExpressionStatement","src":"9127:44:17"},{"nodeType":"YulAssignment","src":"9180:27:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9192:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"9203:3:17","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9188:3:17"},"nodeType":"YulFunctionCall","src":"9188:19:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9180:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8954:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8968:4:17","type":""}],"src":"8803:410:17"},{"body":{"nodeType":"YulBlock","src":"9392:231:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9409:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"9420:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9402:6:17"},"nodeType":"YulFunctionCall","src":"9402:21:17"},"nodeType":"YulExpressionStatement","src":"9402:21:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9443:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"9454:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9439:3:17"},"nodeType":"YulFunctionCall","src":"9439:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"9459:2:17","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9432:6:17"},"nodeType":"YulFunctionCall","src":"9432:30:17"},"nodeType":"YulExpressionStatement","src":"9432:30:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9482:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"9493:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9478:3:17"},"nodeType":"YulFunctionCall","src":"9478:18:17"},{"hexValue":"455243313135353a206163636f756e747320616e6420696473206c656e677468","kind":"string","nodeType":"YulLiteral","src":"9498:34:17","type":"","value":"ERC1155: accounts and ids length"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9471:6:17"},"nodeType":"YulFunctionCall","src":"9471:62:17"},"nodeType":"YulExpressionStatement","src":"9471:62:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9553:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"9564:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9549:3:17"},"nodeType":"YulFunctionCall","src":"9549:18:17"},{"hexValue":"206d69736d61746368","kind":"string","nodeType":"YulLiteral","src":"9569:11:17","type":"","value":" mismatch"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9542:6:17"},"nodeType":"YulFunctionCall","src":"9542:39:17"},"nodeType":"YulExpressionStatement","src":"9542:39:17"},{"nodeType":"YulAssignment","src":"9590:27:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9602:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"9613:3:17","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9598:3:17"},"nodeType":"YulFunctionCall","src":"9598:19:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9590:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9369:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9383:4:17","type":""}],"src":"9218:405:17"},{"body":{"nodeType":"YulBlock","src":"9660:95:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9677:1:17","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9684:3:17","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"9689:10:17","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9680:3:17"},"nodeType":"YulFunctionCall","src":"9680:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9670:6:17"},"nodeType":"YulFunctionCall","src":"9670:31:17"},"nodeType":"YulExpressionStatement","src":"9670:31:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9717:1:17","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9720:4:17","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9710:6:17"},"nodeType":"YulFunctionCall","src":"9710:15:17"},"nodeType":"YulExpressionStatement","src":"9710:15:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9741:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9744:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9734:6:17"},"nodeType":"YulFunctionCall","src":"9734:15:17"},"nodeType":"YulExpressionStatement","src":"9734:15:17"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"9628:127:17"},{"body":{"nodeType":"YulBlock","src":"9792:95:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9809:1:17","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9816:3:17","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"9821:10:17","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9812:3:17"},"nodeType":"YulFunctionCall","src":"9812:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9802:6:17"},"nodeType":"YulFunctionCall","src":"9802:31:17"},"nodeType":"YulExpressionStatement","src":"9802:31:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9849:1:17","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9852:4:17","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9842:6:17"},"nodeType":"YulFunctionCall","src":"9842:15:17"},"nodeType":"YulExpressionStatement","src":"9842:15:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9873:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9876:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9866:6:17"},"nodeType":"YulFunctionCall","src":"9866:15:17"},"nodeType":"YulExpressionStatement","src":"9866:15:17"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"9760:127:17"},{"body":{"nodeType":"YulBlock","src":"9939:88:17","statements":[{"body":{"nodeType":"YulBlock","src":"9970:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"9972:16:17"},"nodeType":"YulFunctionCall","src":"9972:18:17"},"nodeType":"YulExpressionStatement","src":"9972:18:17"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9955:5:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9966:1:17","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"9962:3:17"},"nodeType":"YulFunctionCall","src":"9962:6:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"9952:2:17"},"nodeType":"YulFunctionCall","src":"9952:17:17"},"nodeType":"YulIf","src":"9949:43:17"},{"nodeType":"YulAssignment","src":"10001:20:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10012:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"10019:1:17","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10008:3:17"},"nodeType":"YulFunctionCall","src":"10008:13:17"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"10001:3:17"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9921:5:17","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"9931:3:17","type":""}],"src":"9892:135:17"},{"body":{"nodeType":"YulBlock","src":"10206:230:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10223:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"10234:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10216:6:17"},"nodeType":"YulFunctionCall","src":"10216:21:17"},"nodeType":"YulExpressionStatement","src":"10216:21:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10257:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"10268:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10253:3:17"},"nodeType":"YulFunctionCall","src":"10253:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"10273:2:17","type":"","value":"40"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10246:6:17"},"nodeType":"YulFunctionCall","src":"10246:30:17"},"nodeType":"YulExpressionStatement","src":"10246:30:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10296:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"10307:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10292:3:17"},"nodeType":"YulFunctionCall","src":"10292:18:17"},{"hexValue":"455243313135353a2069647320616e6420616d6f756e7473206c656e67746820","kind":"string","nodeType":"YulLiteral","src":"10312:34:17","type":"","value":"ERC1155: ids and amounts length "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10285:6:17"},"nodeType":"YulFunctionCall","src":"10285:62:17"},"nodeType":"YulExpressionStatement","src":"10285:62:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10367:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"10378:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10363:3:17"},"nodeType":"YulFunctionCall","src":"10363:18:17"},{"hexValue":"6d69736d61746368","kind":"string","nodeType":"YulLiteral","src":"10383:10:17","type":"","value":"mismatch"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10356:6:17"},"nodeType":"YulFunctionCall","src":"10356:38:17"},"nodeType":"YulExpressionStatement","src":"10356:38:17"},{"nodeType":"YulAssignment","src":"10403:27:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10415:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"10426:3:17","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10411:3:17"},"nodeType":"YulFunctionCall","src":"10411:19:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10403:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10183:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10197:4:17","type":""}],"src":"10032:404:17"},{"body":{"nodeType":"YulBlock","src":"10615:227:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10632:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"10643:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10625:6:17"},"nodeType":"YulFunctionCall","src":"10625:21:17"},"nodeType":"YulExpressionStatement","src":"10625:21:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10666:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"10677:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10662:3:17"},"nodeType":"YulFunctionCall","src":"10662:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"10682:2:17","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10655:6:17"},"nodeType":"YulFunctionCall","src":"10655:30:17"},"nodeType":"YulExpressionStatement","src":"10655:30:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10705:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"10716:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10701:3:17"},"nodeType":"YulFunctionCall","src":"10701:18:17"},{"hexValue":"455243313135353a207472616e7366657220746f20746865207a65726f206164","kind":"string","nodeType":"YulLiteral","src":"10721:34:17","type":"","value":"ERC1155: transfer to the zero ad"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10694:6:17"},"nodeType":"YulFunctionCall","src":"10694:62:17"},"nodeType":"YulExpressionStatement","src":"10694:62:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10776:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"10787:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10772:3:17"},"nodeType":"YulFunctionCall","src":"10772:18:17"},{"hexValue":"6472657373","kind":"string","nodeType":"YulLiteral","src":"10792:7:17","type":"","value":"dress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10765:6:17"},"nodeType":"YulFunctionCall","src":"10765:35:17"},"nodeType":"YulExpressionStatement","src":"10765:35:17"},{"nodeType":"YulAssignment","src":"10809:27:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10821:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"10832:3:17","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10817:3:17"},"nodeType":"YulFunctionCall","src":"10817:19:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10809:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10592:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10606:4:17","type":""}],"src":"10441:401:17"},{"body":{"nodeType":"YulBlock","src":"11021:232:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11038:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"11049:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11031:6:17"},"nodeType":"YulFunctionCall","src":"11031:21:17"},"nodeType":"YulExpressionStatement","src":"11031:21:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11072:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"11083:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11068:3:17"},"nodeType":"YulFunctionCall","src":"11068:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"11088:2:17","type":"","value":"42"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11061:6:17"},"nodeType":"YulFunctionCall","src":"11061:30:17"},"nodeType":"YulExpressionStatement","src":"11061:30:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11111:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"11122:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11107:3:17"},"nodeType":"YulFunctionCall","src":"11107:18:17"},{"hexValue":"455243313135353a20696e73756666696369656e742062616c616e636520666f","kind":"string","nodeType":"YulLiteral","src":"11127:34:17","type":"","value":"ERC1155: insufficient balance fo"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11100:6:17"},"nodeType":"YulFunctionCall","src":"11100:62:17"},"nodeType":"YulExpressionStatement","src":"11100:62:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11182:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"11193:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11178:3:17"},"nodeType":"YulFunctionCall","src":"11178:18:17"},{"hexValue":"72207472616e73666572","kind":"string","nodeType":"YulLiteral","src":"11198:12:17","type":"","value":"r transfer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11171:6:17"},"nodeType":"YulFunctionCall","src":"11171:40:17"},"nodeType":"YulExpressionStatement","src":"11171:40:17"},{"nodeType":"YulAssignment","src":"11220:27:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11232:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"11243:3:17","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11228:3:17"},"nodeType":"YulFunctionCall","src":"11228:19:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11220:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10998:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11012:4:17","type":""}],"src":"10847:406:17"},{"body":{"nodeType":"YulBlock","src":"11306:77:17","statements":[{"nodeType":"YulAssignment","src":"11316:16:17","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11327:1:17"},{"name":"y","nodeType":"YulIdentifier","src":"11330:1:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11323:3:17"},"nodeType":"YulFunctionCall","src":"11323:9:17"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"11316:3:17"}]},{"body":{"nodeType":"YulBlock","src":"11355:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"11357:16:17"},"nodeType":"YulFunctionCall","src":"11357:18:17"},"nodeType":"YulExpressionStatement","src":"11357:18:17"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11347:1:17"},{"name":"sum","nodeType":"YulIdentifier","src":"11350:3:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11344:2:17"},"nodeType":"YulFunctionCall","src":"11344:10:17"},"nodeType":"YulIf","src":"11341:36:17"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"11289:1:17","type":""},{"name":"y","nodeType":"YulTypedName","src":"11292:1:17","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"11298:3:17","type":""}],"src":"11258:125:17"},{"body":{"nodeType":"YulBlock","src":"11617:236:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11634:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"11645:2:17","type":"","value":"64"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11627:6:17"},"nodeType":"YulFunctionCall","src":"11627:21:17"},"nodeType":"YulExpressionStatement","src":"11627:21:17"},{"nodeType":"YulVariableDeclaration","src":"11657:70:17","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11700:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11712:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"11723:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11708:3:17"},"nodeType":"YulFunctionCall","src":"11708:18:17"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"11671:28:17"},"nodeType":"YulFunctionCall","src":"11671:56:17"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"11661:6:17","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11747:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"11758:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11743:3:17"},"nodeType":"YulFunctionCall","src":"11743:18:17"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"11767:6:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"11775:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11763:3:17"},"nodeType":"YulFunctionCall","src":"11763:22:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11736:6:17"},"nodeType":"YulFunctionCall","src":"11736:50:17"},"nodeType":"YulExpressionStatement","src":"11736:50:17"},{"nodeType":"YulAssignment","src":"11795:52:17","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"11832:6:17"},{"name":"tail_1","nodeType":"YulIdentifier","src":"11840:6:17"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"11803:28:17"},"nodeType":"YulFunctionCall","src":"11803:44:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11795:4:17"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11578:9:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11589:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11597:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11608:4:17","type":""}],"src":"11388:465:17"},{"body":{"nodeType":"YulBlock","src":"12032:231:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12049:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"12060:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12042:6:17"},"nodeType":"YulFunctionCall","src":"12042:21:17"},"nodeType":"YulExpressionStatement","src":"12042:21:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12083:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"12094:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12079:3:17"},"nodeType":"YulFunctionCall","src":"12079:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"12099:2:17","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12072:6:17"},"nodeType":"YulFunctionCall","src":"12072:30:17"},"nodeType":"YulExpressionStatement","src":"12072:30:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12122:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"12133:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12118:3:17"},"nodeType":"YulFunctionCall","src":"12118:18:17"},{"hexValue":"455243313135353a2073657474696e6720617070726f76616c20737461747573","kind":"string","nodeType":"YulLiteral","src":"12138:34:17","type":"","value":"ERC1155: setting approval status"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12111:6:17"},"nodeType":"YulFunctionCall","src":"12111:62:17"},"nodeType":"YulExpressionStatement","src":"12111:62:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12193:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"12204:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12189:3:17"},"nodeType":"YulFunctionCall","src":"12189:18:17"},{"hexValue":"20666f722073656c66","kind":"string","nodeType":"YulLiteral","src":"12209:11:17","type":"","value":" for self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12182:6:17"},"nodeType":"YulFunctionCall","src":"12182:39:17"},"nodeType":"YulExpressionStatement","src":"12182:39:17"},{"nodeType":"YulAssignment","src":"12230:27:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12242:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"12253:3:17","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12238:3:17"},"nodeType":"YulFunctionCall","src":"12238:19:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12230:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12009:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12023:4:17","type":""}],"src":"11858:405:17"},{"body":{"nodeType":"YulBlock","src":"12397:119:17","statements":[{"nodeType":"YulAssignment","src":"12407:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12419:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"12430:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12415:3:17"},"nodeType":"YulFunctionCall","src":"12415:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12407:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12449:9:17"},{"name":"value0","nodeType":"YulIdentifier","src":"12460:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12442:6:17"},"nodeType":"YulFunctionCall","src":"12442:25:17"},"nodeType":"YulExpressionStatement","src":"12442:25:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12487:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"12498:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12483:3:17"},"nodeType":"YulFunctionCall","src":"12483:18:17"},{"name":"value1","nodeType":"YulIdentifier","src":"12503:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12476:6:17"},"nodeType":"YulFunctionCall","src":"12476:34:17"},"nodeType":"YulExpressionStatement","src":"12476:34:17"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12358:9:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12369:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12377:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12388:4:17","type":""}],"src":"12268:248:17"},{"body":{"nodeType":"YulBlock","src":"12852:496:17","statements":[{"nodeType":"YulVariableDeclaration","src":"12862:29:17","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12880:3:17","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"12885:1:17","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12876:3:17"},"nodeType":"YulFunctionCall","src":"12876:11:17"},{"kind":"number","nodeType":"YulLiteral","src":"12889:1:17","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12872:3:17"},"nodeType":"YulFunctionCall","src":"12872:19:17"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"12866:2:17","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12907:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12922:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"12930:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12918:3:17"},"nodeType":"YulFunctionCall","src":"12918:15:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12900:6:17"},"nodeType":"YulFunctionCall","src":"12900:34:17"},"nodeType":"YulExpressionStatement","src":"12900:34:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12954:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"12965:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12950:3:17"},"nodeType":"YulFunctionCall","src":"12950:18:17"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"12974:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"12982:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12970:3:17"},"nodeType":"YulFunctionCall","src":"12970:15:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12943:6:17"},"nodeType":"YulFunctionCall","src":"12943:43:17"},"nodeType":"YulExpressionStatement","src":"12943:43:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13006:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"13017:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13002:3:17"},"nodeType":"YulFunctionCall","src":"13002:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"13022:3:17","type":"","value":"160"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12995:6:17"},"nodeType":"YulFunctionCall","src":"12995:31:17"},"nodeType":"YulExpressionStatement","src":"12995:31:17"},{"nodeType":"YulVariableDeclaration","src":"13035:71:17","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"13078:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13090:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"13101:3:17","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13086:3:17"},"nodeType":"YulFunctionCall","src":"13086:19:17"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"13049:28:17"},"nodeType":"YulFunctionCall","src":"13049:57:17"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"13039:6:17","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13126:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"13137:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13122:3:17"},"nodeType":"YulFunctionCall","src":"13122:18:17"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"13146:6:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"13154:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13142:3:17"},"nodeType":"YulFunctionCall","src":"13142:22:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13115:6:17"},"nodeType":"YulFunctionCall","src":"13115:50:17"},"nodeType":"YulExpressionStatement","src":"13115:50:17"},{"nodeType":"YulVariableDeclaration","src":"13174:58:17","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"13217:6:17"},{"name":"tail_1","nodeType":"YulIdentifier","src":"13225:6:17"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"13188:28:17"},"nodeType":"YulFunctionCall","src":"13188:44:17"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"13178:6:17","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13252:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"13263:3:17","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13248:3:17"},"nodeType":"YulFunctionCall","src":"13248:19:17"},{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"13273:6:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"13281:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13269:3:17"},"nodeType":"YulFunctionCall","src":"13269:22:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13241:6:17"},"nodeType":"YulFunctionCall","src":"13241:51:17"},"nodeType":"YulExpressionStatement","src":"13241:51:17"},{"nodeType":"YulAssignment","src":"13301:41:17","value":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"13327:6:17"},{"name":"tail_2","nodeType":"YulIdentifier","src":"13335:6:17"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"13309:17:17"},"nodeType":"YulFunctionCall","src":"13309:33:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13301:4:17"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12789:9:17","type":""},{"name":"value4","nodeType":"YulTypedName","src":"12800:6:17","type":""},{"name":"value3","nodeType":"YulTypedName","src":"12808:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"12816:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12824:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12832:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12843:4:17","type":""}],"src":"12521:827:17"},{"body":{"nodeType":"YulBlock","src":"13433:169:17","statements":[{"body":{"nodeType":"YulBlock","src":"13479:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13488:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13491:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13481:6:17"},"nodeType":"YulFunctionCall","src":"13481:12:17"},"nodeType":"YulExpressionStatement","src":"13481:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"13454:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"13463:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13450:3:17"},"nodeType":"YulFunctionCall","src":"13450:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"13475:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"13446:3:17"},"nodeType":"YulFunctionCall","src":"13446:32:17"},"nodeType":"YulIf","src":"13443:52:17"},{"nodeType":"YulVariableDeclaration","src":"13504:29:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13523:9:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13517:5:17"},"nodeType":"YulFunctionCall","src":"13517:16:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"13508:5:17","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13566:5:17"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"13542:23:17"},"nodeType":"YulFunctionCall","src":"13542:30:17"},"nodeType":"YulExpressionStatement","src":"13542:30:17"},{"nodeType":"YulAssignment","src":"13581:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"13591:5:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"13581:6:17"}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13399:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"13410:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"13422:6:17","type":""}],"src":"13353:249:17"},{"body":{"nodeType":"YulBlock","src":"13650:136:17","statements":[{"body":{"nodeType":"YulBlock","src":"13695:85:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13724:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13727:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13730:1:17","type":"","value":"4"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"13709:14:17"},"nodeType":"YulFunctionCall","src":"13709:23:17"},"nodeType":"YulExpressionStatement","src":"13709:23:17"},{"nodeType":"YulAssignment","src":"13745:25:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13756:3:17","type":"","value":"224"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13767:1:17","type":"","value":"0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13761:5:17"},"nodeType":"YulFunctionCall","src":"13761:8:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"13752:3:17"},"nodeType":"YulFunctionCall","src":"13752:18:17"},"variableNames":[{"name":"sig","nodeType":"YulIdentifier","src":"13745:3:17"}]}]},"condition":{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"13666:14:17"},"nodeType":"YulFunctionCall","src":"13666:16:17"},{"kind":"number","nodeType":"YulLiteral","src":"13684:1:17","type":"","value":"3"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"13663:2:17"},"nodeType":"YulFunctionCall","src":"13663:23:17"},"nodeType":"YulIf","src":"13660:120:17"}]},"name":"return_data_selector","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"sig","nodeType":"YulTypedName","src":"13642:3:17","type":""}],"src":"13607:179:17"},{"body":{"nodeType":"YulBlock","src":"13838:624:17","statements":[{"body":{"nodeType":"YulBlock","src":"13878:9:17","statements":[{"nodeType":"YulLeave","src":"13880:5:17"}]},"condition":{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"13854:14:17"},"nodeType":"YulFunctionCall","src":"13854:16:17"},{"kind":"number","nodeType":"YulLiteral","src":"13872:4:17","type":"","value":"0x44"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"13851:2:17"},"nodeType":"YulFunctionCall","src":"13851:26:17"},"nodeType":"YulIf","src":"13848:39:17"},{"nodeType":"YulVariableDeclaration","src":"13896:21:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13914:2:17","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13908:5:17"},"nodeType":"YulFunctionCall","src":"13908:9:17"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"13900:4:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"13926:16:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13940:1:17","type":"","value":"3"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"13936:3:17"},"nodeType":"YulFunctionCall","src":"13936:6:17"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"13930:2:17","type":""}]},{"expression":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"13966:4:17"},{"kind":"number","nodeType":"YulLiteral","src":"13972:1:17","type":"","value":"4"},{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"13979:14:17"},"nodeType":"YulFunctionCall","src":"13979:16:17"},{"name":"_1","nodeType":"YulIdentifier","src":"13997:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13975:3:17"},"nodeType":"YulFunctionCall","src":"13975:25:17"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"13951:14:17"},"nodeType":"YulFunctionCall","src":"13951:50:17"},"nodeType":"YulExpressionStatement","src":"13951:50:17"},{"nodeType":"YulVariableDeclaration","src":"14010:25:17","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"14030:4:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14024:5:17"},"nodeType":"YulFunctionCall","src":"14024:11:17"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"14014:6:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"14044:26:17","value":{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"14054:14:17"},"nodeType":"YulFunctionCall","src":"14054:16:17"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"14048:2:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"14079:28:17","value":{"kind":"number","nodeType":"YulLiteral","src":"14089:18:17","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"14083:2:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"14165:9:17","statements":[{"nodeType":"YulLeave","src":"14167:5:17"}]},"condition":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14125:6:17"},{"name":"_3","nodeType":"YulIdentifier","src":"14133:2:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14122:2:17"},"nodeType":"YulFunctionCall","src":"14122:14:17"},{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14145:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"14153:4:17","type":"","value":"0x24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14141:3:17"},"nodeType":"YulFunctionCall","src":"14141:17:17"},{"name":"_2","nodeType":"YulIdentifier","src":"14160:2:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14138:2:17"},"nodeType":"YulFunctionCall","src":"14138:25:17"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"14119:2:17"},"nodeType":"YulFunctionCall","src":"14119:45:17"},"nodeType":"YulIf","src":"14116:58:17"},{"nodeType":"YulVariableDeclaration","src":"14183:28:17","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"14198:4:17"},{"name":"offset","nodeType":"YulIdentifier","src":"14204:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14194:3:17"},"nodeType":"YulFunctionCall","src":"14194:17:17"},"variables":[{"name":"msg","nodeType":"YulTypedName","src":"14187:3:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"14220:24:17","value":{"arguments":[{"name":"msg","nodeType":"YulIdentifier","src":"14240:3:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14234:5:17"},"nodeType":"YulFunctionCall","src":"14234:10:17"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"14224:6:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"14271:9:17","statements":[{"nodeType":"YulLeave","src":"14273:5:17"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"14259:6:17"},{"name":"_3","nodeType":"YulIdentifier","src":"14267:2:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14256:2:17"},"nodeType":"YulFunctionCall","src":"14256:14:17"},"nodeType":"YulIf","src":"14253:27:17"},{"body":{"nodeType":"YulBlock","src":"14362:9:17","statements":[{"nodeType":"YulLeave","src":"14364:5:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"msg","nodeType":"YulIdentifier","src":"14303:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"14308:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14299:3:17"},"nodeType":"YulFunctionCall","src":"14299:16:17"},{"kind":"number","nodeType":"YulLiteral","src":"14317:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14295:3:17"},"nodeType":"YulFunctionCall","src":"14295:27:17"},{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"14332:4:17"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"14338:14:17"},"nodeType":"YulFunctionCall","src":"14338:16:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14328:3:17"},"nodeType":"YulFunctionCall","src":"14328:27:17"},{"name":"_1","nodeType":"YulIdentifier","src":"14357:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14324:3:17"},"nodeType":"YulFunctionCall","src":"14324:36:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14292:2:17"},"nodeType":"YulFunctionCall","src":"14292:69:17"},"nodeType":"YulIf","src":"14289:82:17"},{"expression":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"14400:4:17"},{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14414:6:17"},{"name":"length","nodeType":"YulIdentifier","src":"14422:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14410:3:17"},"nodeType":"YulFunctionCall","src":"14410:19:17"},{"kind":"number","nodeType":"YulLiteral","src":"14431:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14406:3:17"},"nodeType":"YulFunctionCall","src":"14406:30:17"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"14380:19:17"},"nodeType":"YulFunctionCall","src":"14380:57:17"},"nodeType":"YulExpressionStatement","src":"14380:57:17"},{"nodeType":"YulAssignment","src":"14446:10:17","value":{"name":"msg","nodeType":"YulIdentifier","src":"14453:3:17"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"14446:3:17"}]}]},"name":"try_decode_error_message","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"13830:3:17","type":""}],"src":"13791:671:17"},{"body":{"nodeType":"YulBlock","src":"14641:242:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14658:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"14669:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14651:6:17"},"nodeType":"YulFunctionCall","src":"14651:21:17"},"nodeType":"YulExpressionStatement","src":"14651:21:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14692:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"14703:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14688:3:17"},"nodeType":"YulFunctionCall","src":"14688:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"14708:2:17","type":"","value":"52"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14681:6:17"},"nodeType":"YulFunctionCall","src":"14681:30:17"},"nodeType":"YulExpressionStatement","src":"14681:30:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14731:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"14742:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14727:3:17"},"nodeType":"YulFunctionCall","src":"14727:18:17"},{"hexValue":"455243313135353a207472616e7366657220746f206e6f6e2d45524331313535","kind":"string","nodeType":"YulLiteral","src":"14747:34:17","type":"","value":"ERC1155: transfer to non-ERC1155"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14720:6:17"},"nodeType":"YulFunctionCall","src":"14720:62:17"},"nodeType":"YulExpressionStatement","src":"14720:62:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14802:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"14813:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14798:3:17"},"nodeType":"YulFunctionCall","src":"14798:18:17"},{"hexValue":"526563656976657220696d706c656d656e746572","kind":"string","nodeType":"YulLiteral","src":"14818:22:17","type":"","value":"Receiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14791:6:17"},"nodeType":"YulFunctionCall","src":"14791:50:17"},"nodeType":"YulExpressionStatement","src":"14791:50:17"},{"nodeType":"YulAssignment","src":"14850:27:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14862:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"14873:3:17","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14858:3:17"},"nodeType":"YulFunctionCall","src":"14858:19:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14850:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14618:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14632:4:17","type":""}],"src":"14467:416:17"},{"body":{"nodeType":"YulBlock","src":"15062:230:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15079:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"15090:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15072:6:17"},"nodeType":"YulFunctionCall","src":"15072:21:17"},"nodeType":"YulExpressionStatement","src":"15072:21:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15113:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"15124:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15109:3:17"},"nodeType":"YulFunctionCall","src":"15109:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"15129:2:17","type":"","value":"40"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15102:6:17"},"nodeType":"YulFunctionCall","src":"15102:30:17"},"nodeType":"YulExpressionStatement","src":"15102:30:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15152:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"15163:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15148:3:17"},"nodeType":"YulFunctionCall","src":"15148:18:17"},{"hexValue":"455243313135353a204552433131353552656365697665722072656a65637465","kind":"string","nodeType":"YulLiteral","src":"15168:34:17","type":"","value":"ERC1155: ERC1155Receiver rejecte"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15141:6:17"},"nodeType":"YulFunctionCall","src":"15141:62:17"},"nodeType":"YulExpressionStatement","src":"15141:62:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15223:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"15234:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15219:3:17"},"nodeType":"YulFunctionCall","src":"15219:18:17"},{"hexValue":"6420746f6b656e73","kind":"string","nodeType":"YulLiteral","src":"15239:10:17","type":"","value":"d tokens"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15212:6:17"},"nodeType":"YulFunctionCall","src":"15212:38:17"},"nodeType":"YulExpressionStatement","src":"15212:38:17"},{"nodeType":"YulAssignment","src":"15259:27:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15271:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"15282:3:17","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15267:3:17"},"nodeType":"YulFunctionCall","src":"15267:19:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15259:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15039:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15053:4:17","type":""}],"src":"14888:404:17"},{"body":{"nodeType":"YulBlock","src":"15528:330:17","statements":[{"nodeType":"YulVariableDeclaration","src":"15538:29:17","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15556:3:17","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"15561:1:17","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"15552:3:17"},"nodeType":"YulFunctionCall","src":"15552:11:17"},{"kind":"number","nodeType":"YulLiteral","src":"15565:1:17","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15548:3:17"},"nodeType":"YulFunctionCall","src":"15548:19:17"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"15542:2:17","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15583:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"15598:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"15606:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15594:3:17"},"nodeType":"YulFunctionCall","src":"15594:15:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15576:6:17"},"nodeType":"YulFunctionCall","src":"15576:34:17"},"nodeType":"YulExpressionStatement","src":"15576:34:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15630:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"15641:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15626:3:17"},"nodeType":"YulFunctionCall","src":"15626:18:17"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"15650:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"15658:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15646:3:17"},"nodeType":"YulFunctionCall","src":"15646:15:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15619:6:17"},"nodeType":"YulFunctionCall","src":"15619:43:17"},"nodeType":"YulExpressionStatement","src":"15619:43:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15682:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"15693:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15678:3:17"},"nodeType":"YulFunctionCall","src":"15678:18:17"},{"name":"value2","nodeType":"YulIdentifier","src":"15698:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15671:6:17"},"nodeType":"YulFunctionCall","src":"15671:34:17"},"nodeType":"YulExpressionStatement","src":"15671:34:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15725:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"15736:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15721:3:17"},"nodeType":"YulFunctionCall","src":"15721:18:17"},{"name":"value3","nodeType":"YulIdentifier","src":"15741:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15714:6:17"},"nodeType":"YulFunctionCall","src":"15714:34:17"},"nodeType":"YulExpressionStatement","src":"15714:34:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15768:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"15779:3:17","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15764:3:17"},"nodeType":"YulFunctionCall","src":"15764:19:17"},{"kind":"number","nodeType":"YulLiteral","src":"15785:3:17","type":"","value":"160"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15757:6:17"},"nodeType":"YulFunctionCall","src":"15757:32:17"},"nodeType":"YulExpressionStatement","src":"15757:32:17"},{"nodeType":"YulAssignment","src":"15798:54:17","value":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"15824:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15836:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"15847:3:17","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15832:3:17"},"nodeType":"YulFunctionCall","src":"15832:19:17"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"15806:17:17"},"nodeType":"YulFunctionCall","src":"15806:46:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15798:4:17"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15465:9:17","type":""},{"name":"value4","nodeType":"YulTypedName","src":"15476:6:17","type":""},{"name":"value3","nodeType":"YulTypedName","src":"15484:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"15492:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"15500:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"15508:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15519:4:17","type":""}],"src":"15297:561:17"}]},"contents":"{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 0x20) }\n        {\n            let _1 := 0x20\n            mstore(add(add(pos, i), _1), mload(add(add(value, i), _1)))\n        }\n        mstore(add(add(pos, length), 0x20), 0)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function finalize_allocation(memPtr, size)\n    {\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_array_uint256_dyn(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(shl(5, length), 0x20)\n    }\n    function abi_decode_array_uint256_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let _3 := array_allocation_size_array_uint256_dyn(_1)\n        let memPtr := mload(64)\n        finalize_allocation(memPtr, _3)\n        let dst := memPtr\n        mstore(memPtr, _1)\n        dst := add(memPtr, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _2)\n        }\n        array := memPtr\n    }\n    function abi_decode_bytes(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        if gt(_1, 0xffffffffffffffff) { panic_error_0x41() }\n        let memPtr := mload(64)\n        finalize_allocation(memPtr, add(and(add(_1, 0x1f), not(31)), 0x20))\n        mstore(memPtr, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(memPtr, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(memPtr, _1), 0x20), 0)\n        array := memPtr\n    }\n    function abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value2 := abi_decode_array_uint256_dyn(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 96))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value3 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n        let offset_2 := calldataload(add(headStart, 128))\n        if gt(offset_2, _1) { revert(0, 0) }\n        value4 := abi_decode_bytes(add(headStart, offset_2), dataEnd)\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        let _4 := 0x20\n        let _5 := array_allocation_size_array_uint256_dyn(_3)\n        let memPtr := mload(64)\n        finalize_allocation(memPtr, _5)\n        let dst := memPtr\n        mstore(memPtr, _3)\n        dst := add(memPtr, _4)\n        let srcEnd := add(add(_2, shl(5, _3)), _4)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_2, _4)\n        for { } lt(src, srcEnd) { src := add(src, _4) }\n        {\n            mstore(dst, abi_decode_address(src))\n            dst := add(dst, _4)\n        }\n        value0 := memPtr\n        let offset_1 := calldataload(add(headStart, _4))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n    }\n    function abi_encode_array_uint256_dyn(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let _1 := 0x20\n        pos := add(pos, _1)\n        let srcPtr := add(value, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        end := pos\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_array_uint256_dyn(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value1 := value\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let offset := calldataload(add(headStart, 128))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value4 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"ERC1155: address zero is not a v\")\n        mstore(add(headStart, 96), \"alid owner\")\n        tail := add(headStart, 128)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"ERC1155: caller is not token own\")\n        mstore(add(headStart, 96), \"er or approved\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC1155: accounts and ids length\")\n        mstore(add(headStart, 96), \" mismatch\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 40)\n        mstore(add(headStart, 64), \"ERC1155: ids and amounts length \")\n        mstore(add(headStart, 96), \"mismatch\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC1155: transfer to the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"ERC1155: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r transfer\")\n        tail := add(headStart, 128)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        let tail_1 := abi_encode_array_uint256_dyn(value0, add(headStart, 64))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        tail := abi_encode_array_uint256_dyn(value1, tail_1)\n    }\n    function abi_encode_tuple_t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC1155: setting approval status\")\n        mstore(add(headStart, 96), \" for self\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), 160)\n        let tail_1 := abi_encode_array_uint256_dyn(value2, add(headStart, 160))\n        mstore(add(headStart, 96), sub(tail_1, headStart))\n        let tail_2 := abi_encode_array_uint256_dyn(value3, tail_1)\n        mstore(add(headStart, 128), sub(tail_2, headStart))\n        tail := abi_encode_string(value4, tail_2)\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function return_data_selector() -> sig\n    {\n        if gt(returndatasize(), 3)\n        {\n            returndatacopy(0, 0, 4)\n            sig := shr(224, mload(0))\n        }\n    }\n    function try_decode_error_message() -> ret\n    {\n        if lt(returndatasize(), 0x44) { leave }\n        let data := mload(64)\n        let _1 := not(3)\n        returndatacopy(data, 4, add(returndatasize(), _1))\n        let offset := mload(data)\n        let _2 := returndatasize()\n        let _3 := 0xffffffffffffffff\n        if or(gt(offset, _3), gt(add(offset, 0x24), _2)) { leave }\n        let msg := add(data, offset)\n        let length := mload(msg)\n        if gt(length, _3) { leave }\n        if gt(add(add(msg, length), 0x20), add(add(data, returndatasize()), _1)) { leave }\n        finalize_allocation(data, add(add(offset, length), 0x20))\n        ret := msg\n    }\n    function abi_encode_tuple_t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 52)\n        mstore(add(headStart, 64), \"ERC1155: transfer to non-ERC1155\")\n        mstore(add(headStart, 96), \"Receiver implementer\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 40)\n        mstore(add(headStart, 64), \"ERC1155: ERC1155Receiver rejecte\")\n        mstore(add(headStart, 96), \"d tokens\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), 160)\n        tail := abi_encode_string(value4, add(headStart, 160))\n    }\n}","id":17,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100875760003560e01c80634e1273f41161005b5780634e1273f41461010a578063a22cb4651461012a578063e985e9c51461013d578063f242432a1461017957600080fd5b8062fdd58e1461008c57806301ffc9a7146100b25780630e89341c146100d55780632eb2c2d6146100f5575b600080fd5b61009f61009a366004610b40565b61018c565b6040519081526020015b60405180910390f35b6100c56100c0366004610b83565b610225565b60405190151581526020016100a9565b6100e86100e3366004610ba7565b610275565b6040516100a99190610c06565b610108610103366004610d65565b610309565b005b61011d610118366004610e0f565b610355565b6040516100a99190610f15565b610108610138366004610f28565b61047f565b6100c561014b366004610f64565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b610108610187366004610f97565b61048e565b60006001600160a01b0383166101fc5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b148061025657506001600160e01b031982166303a24d0760e21b145b8061021f57506301ffc9a760e01b6001600160e01b031983161461021f565b60606002805461028490610ffc565b80601f01602080910402602001604051908101604052809291908181526020018280546102b090610ffc565b80156102fd5780601f106102d2576101008083540402835291602001916102fd565b820191906000526020600020905b8154815290600101906020018083116102e057829003601f168201915b50505050509050919050565b6001600160a01b0385163314806103255750610325853361014b565b6103415760405162461bcd60e51b81526004016101f390611036565b61034e85858585856104d3565b5050505050565b606081518351146103ba5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016101f3565b6000835167ffffffffffffffff8111156103d6576103d6610c19565b6040519080825280602002602001820160405280156103ff578160200160208202803683370190505b50905060005b84518110156104775761044a85828151811061042357610423611084565b602002602001015185838151811061043d5761043d611084565b602002602001015161018c565b82828151811061045c5761045c611084565b6020908102919091010152610470816110b0565b9050610405565b509392505050565b61048a3383836106b0565b5050565b6001600160a01b0385163314806104aa57506104aa853361014b565b6104c65760405162461bcd60e51b81526004016101f390611036565b61034e8585858585610790565b81518351146105355760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016101f3565b6001600160a01b03841661055b5760405162461bcd60e51b81526004016101f3906110c9565b3360005b845181101561064257600085828151811061057c5761057c611084565b60200260200101519050600085838151811061059a5761059a611084565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156105ea5760405162461bcd60e51b81526004016101f39061110e565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290610627908490611158565b925050819055505050508061063b906110b0565b905061055f565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161069292919061116b565b60405180910390a46106a88187878787876108ba565b505050505050565b816001600160a01b0316836001600160a01b0316036107235760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016101f3565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166107b65760405162461bcd60e51b81526004016101f3906110c9565b3360006107c285610a1e565b905060006107cf85610a1e565b90506000868152602081815260408083206001600160a01b038c168452909152902054858110156108125760405162461bcd60e51b81526004016101f39061110e565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a1682528120805488929061084f908490611158565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46108af848a8a8a8a8a610a69565b505050505050505050565b6001600160a01b0384163b156106a85760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906108fe9089908990889088908890600401611199565b6020604051808303816000875af1925050508015610939575060408051601f3d908101601f19168201909252610936918101906111f7565b60015b6109e557610945611214565b806308c379a00361097e5750610959611230565b806109645750610980565b8060405162461bcd60e51b81526004016101f39190610c06565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016101f3565b6001600160e01b0319811663bc197c8160e01b14610a155760405162461bcd60e51b81526004016101f3906112ba565b50505050505050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110610a5857610a58611084565b602090810291909101015292915050565b6001600160a01b0384163b156106a85760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190610aad9089908990889088908890600401611302565b6020604051808303816000875af1925050508015610ae8575060408051601f3d908101601f19168201909252610ae5918101906111f7565b60015b610af457610945611214565b6001600160e01b0319811663f23a6e6160e01b14610a155760405162461bcd60e51b81526004016101f3906112ba565b80356001600160a01b0381168114610b3b57600080fd5b919050565b60008060408385031215610b5357600080fd5b610b5c83610b24565b946020939093013593505050565b6001600160e01b031981168114610b8057600080fd5b50565b600060208284031215610b9557600080fd5b8135610ba081610b6a565b9392505050565b600060208284031215610bb957600080fd5b5035919050565b6000815180845260005b81811015610be657602081850181015186830182015201610bca565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610ba06020830184610bc0565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715610c5557610c55610c19565b6040525050565b600067ffffffffffffffff821115610c7657610c76610c19565b5060051b60200190565b600082601f830112610c9157600080fd5b81356020610c9e82610c5c565b604051610cab8282610c2f565b83815260059390931b8501820192828101915086841115610ccb57600080fd5b8286015b84811015610ce65780358352918301918301610ccf565b509695505050505050565b600082601f830112610d0257600080fd5b813567ffffffffffffffff811115610d1c57610d1c610c19565b604051610d33601f8301601f191660200182610c2f565b818152846020838601011115610d4857600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215610d7d57600080fd5b610d8686610b24565b9450610d9460208701610b24565b9350604086013567ffffffffffffffff80821115610db157600080fd5b610dbd89838a01610c80565b94506060880135915080821115610dd357600080fd5b610ddf89838a01610c80565b93506080880135915080821115610df557600080fd5b50610e0288828901610cf1565b9150509295509295909350565b60008060408385031215610e2257600080fd5b823567ffffffffffffffff80821115610e3a57600080fd5b818501915085601f830112610e4e57600080fd5b81356020610e5b82610c5c565b604051610e688282610c2f565b83815260059390931b8501820192828101915089841115610e8857600080fd5b948201945b83861015610ead57610e9e86610b24565b82529482019490820190610e8d565b96505086013592505080821115610ec357600080fd5b50610ed085828601610c80565b9150509250929050565b600081518084526020808501945080840160005b83811015610f0a57815187529582019590820190600101610eee565b509495945050505050565b602081526000610ba06020830184610eda565b60008060408385031215610f3b57600080fd5b610f4483610b24565b915060208301358015158114610f5957600080fd5b809150509250929050565b60008060408385031215610f7757600080fd5b610f8083610b24565b9150610f8e60208401610b24565b90509250929050565b600080600080600060a08688031215610faf57600080fd5b610fb886610b24565b9450610fc660208701610b24565b93506040860135925060608601359150608086013567ffffffffffffffff811115610ff057600080fd5b610e0288828901610cf1565b600181811c9082168061101057607f821691505b60208210810361103057634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016110c2576110c261109a565b5060010190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b8082018082111561021f5761021f61109a565b60408152600061117e6040830185610eda565b82810360208401526111908185610eda565b95945050505050565b6001600160a01b0386811682528516602082015260a0604082018190526000906111c590830186610eda565b82810360608401526111d78186610eda565b905082810360808401526111eb8185610bc0565b98975050505050505050565b60006020828403121561120957600080fd5b8151610ba081610b6a565b600060033d111561122d5760046000803e5060005160e01c5b90565b600060443d101561123e5790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561126e57505050505090565b82850191508151818111156112865750505050505090565b843d87010160208285010111156112a05750505050505090565b6112af60208286010187610c2f565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061133c90830184610bc0565b97965050505050505056fea26469706673582212201f8129b224788397df0c5f09917775ce6ce61a7043347f0af6c7e17d72af4bc964736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x87 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4E1273F4 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x4E1273F4 EQ PUSH2 0x10A JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x12A JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x13D JUMPI DUP1 PUSH4 0xF242432A EQ PUSH2 0x179 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0xFDD58E EQ PUSH2 0x8C JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xB2 JUMPI DUP1 PUSH4 0xE89341C EQ PUSH2 0xD5 JUMPI DUP1 PUSH4 0x2EB2C2D6 EQ PUSH2 0xF5 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9F PUSH2 0x9A CALLDATASIZE PUSH1 0x4 PUSH2 0xB40 JUMP JUMPDEST PUSH2 0x18C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC5 PUSH2 0xC0 CALLDATASIZE PUSH1 0x4 PUSH2 0xB83 JUMP JUMPDEST PUSH2 0x225 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xA9 JUMP JUMPDEST PUSH2 0xE8 PUSH2 0xE3 CALLDATASIZE PUSH1 0x4 PUSH2 0xBA7 JUMP JUMPDEST PUSH2 0x275 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA9 SWAP2 SWAP1 PUSH2 0xC06 JUMP JUMPDEST PUSH2 0x108 PUSH2 0x103 CALLDATASIZE PUSH1 0x4 PUSH2 0xD65 JUMP JUMPDEST PUSH2 0x309 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x11D PUSH2 0x118 CALLDATASIZE PUSH1 0x4 PUSH2 0xE0F JUMP JUMPDEST PUSH2 0x355 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA9 SWAP2 SWAP1 PUSH2 0xF15 JUMP JUMPDEST PUSH2 0x108 PUSH2 0x138 CALLDATASIZE PUSH1 0x4 PUSH2 0xF28 JUMP JUMPDEST PUSH2 0x47F JUMP JUMPDEST PUSH2 0xC5 PUSH2 0x14B CALLDATASIZE PUSH1 0x4 PUSH2 0xF64 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x108 PUSH2 0x187 CALLDATASIZE PUSH1 0x4 PUSH2 0xF97 JUMP JUMPDEST PUSH2 0x48E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1FC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2061646472657373207A65726F206973206E6F7420612076 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x30B634B21037BBB732B9 PUSH1 0xB1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x6CDB3D13 PUSH1 0xE1 SHL EQ DUP1 PUSH2 0x256 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x3A24D07 PUSH1 0xE2 SHL EQ JUMPDEST DUP1 PUSH2 0x21F JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x21F JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x284 SWAP1 PUSH2 0xFFC JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2B0 SWAP1 PUSH2 0xFFC JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2FD JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2D2 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2FD JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2E0 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER EQ DUP1 PUSH2 0x325 JUMPI POP PUSH2 0x325 DUP6 CALLER PUSH2 0x14B JUMP JUMPDEST PUSH2 0x341 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x1036 JUMP JUMPDEST PUSH2 0x34E DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x4D3 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x3BA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A206163636F756E747320616E6420696473206C656E677468 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x40DAD2E6DAC2E8C6D PUSH1 0xBB SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3D6 JUMPI PUSH2 0x3D6 PUSH2 0xC19 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3FF JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x477 JUMPI PUSH2 0x44A DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x423 JUMPI PUSH2 0x423 PUSH2 0x1084 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x43D JUMPI PUSH2 0x43D PUSH2 0x1084 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x18C JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x45C JUMPI PUSH2 0x45C PUSH2 0x1084 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH2 0x470 DUP2 PUSH2 0x10B0 JUMP JUMPDEST SWAP1 POP PUSH2 0x405 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x48A CALLER DUP4 DUP4 PUSH2 0x6B0 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER EQ DUP1 PUSH2 0x4AA JUMPI POP PUSH2 0x4AA DUP6 CALLER PUSH2 0x14B JUMP JUMPDEST PUSH2 0x4C6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x1036 JUMP JUMPDEST PUSH2 0x34E DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x790 JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x535 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2069647320616E6420616D6F756E7473206C656E67746820 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0xDAD2E6DAC2E8C6D PUSH1 0xC3 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x55B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x10C9 JUMP JUMPDEST CALLER PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x642 JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x57C JUMPI PUSH2 0x57C PUSH2 0x1084 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x59A JUMPI PUSH2 0x59A PUSH2 0x1084 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x0 DUP5 DUP2 MSTORE DUP1 DUP4 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 AND DUP4 MSTORE SWAP1 SWAP4 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP2 DUP2 LT ISZERO PUSH2 0x5EA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x110E JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP1 DUP12 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x627 SWAP1 DUP5 SWAP1 PUSH2 0x1158 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP POP POP DUP1 PUSH2 0x63B SWAP1 PUSH2 0x10B0 JUMP JUMPDEST SWAP1 POP PUSH2 0x55F JUMP JUMPDEST POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x692 SWAP3 SWAP2 SWAP1 PUSH2 0x116B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x6A8 DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x8BA JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x723 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2073657474696E6720617070726F76616C20737461747573 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x103337B91039B2B633 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x7B6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x10C9 JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0x7C2 DUP6 PUSH2 0xA1E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7CF DUP6 PUSH2 0xA1E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP6 DUP2 LT ISZERO PUSH2 0x812 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x110E JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP10 DUP6 SUB SWAP1 SSTORE SWAP1 DUP11 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP9 SWAP3 SWAP1 PUSH2 0x84F SWAP1 DUP5 SWAP1 PUSH2 0x1158 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP9 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP12 AND SWAP3 DUP13 DUP3 AND SWAP3 SWAP2 DUP9 AND SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x8AF DUP5 DUP11 DUP11 DUP11 DUP11 DUP11 PUSH2 0xA69 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x6A8 JUMPI PUSH1 0x40 MLOAD PUSH4 0xBC197C81 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xBC197C81 SWAP1 PUSH2 0x8FE SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1199 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x939 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x936 SWAP2 DUP2 ADD SWAP1 PUSH2 0x11F7 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x9E5 JUMPI PUSH2 0x945 PUSH2 0x1214 JUMP JUMPDEST DUP1 PUSH4 0x8C379A0 SUB PUSH2 0x97E JUMPI POP PUSH2 0x959 PUSH2 0x1230 JUMP JUMPDEST DUP1 PUSH2 0x964 JUMPI POP PUSH2 0x980 JUMP JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP2 SWAP1 PUSH2 0xC06 JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x34 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F206E6F6E2D45524331313535 PUSH1 0x44 DUP3 ADD MSTORE PUSH20 0x2932B1B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x61 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xBC197C81 PUSH1 0xE0 SHL EQ PUSH2 0xA15 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x12BA JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP3 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xA58 JUMPI PUSH2 0xA58 PUSH2 0x1084 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x6A8 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF23A6E61 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xF23A6E61 SWAP1 PUSH2 0xAAD SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1302 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xAE8 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xAE5 SWAP2 DUP2 ADD SWAP1 PUSH2 0x11F7 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xAF4 JUMPI PUSH2 0x945 PUSH2 0x1214 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xF23A6E61 PUSH1 0xE0 SHL EQ PUSH2 0xA15 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x12BA JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xB3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB53 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB5C DUP4 PUSH2 0xB24 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xB80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB95 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xBA0 DUP2 PUSH2 0xB6A JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xBE6 JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0xBCA JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xBA0 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xBC0 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xC55 JUMPI PUSH2 0xC55 PUSH2 0xC19 JUMP JUMPDEST PUSH1 0x40 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xC76 JUMPI PUSH2 0xC76 PUSH2 0xC19 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xC91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0xC9E DUP3 PUSH2 0xC5C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCAB DUP3 DUP3 PUSH2 0xC2F JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x5 SWAP4 SWAP1 SWAP4 SHL DUP6 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP2 POP DUP7 DUP5 GT ISZERO PUSH2 0xCCB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xCE6 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0xCCF JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xD02 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xD1C JUMPI PUSH2 0xD1C PUSH2 0xC19 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD33 PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 PUSH2 0xC2F JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0xD48 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xD7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD86 DUP7 PUSH2 0xB24 JUMP JUMPDEST SWAP5 POP PUSH2 0xD94 PUSH1 0x20 DUP8 ADD PUSH2 0xB24 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xDB1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDBD DUP10 DUP4 DUP11 ADD PUSH2 0xC80 JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xDD3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDDF DUP10 DUP4 DUP11 ADD PUSH2 0xC80 JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xDF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE02 DUP9 DUP3 DUP10 ADD PUSH2 0xCF1 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xE3A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xE4E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0xE5B DUP3 PUSH2 0xC5C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE68 DUP3 DUP3 PUSH2 0xC2F JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x5 SWAP4 SWAP1 SWAP4 SHL DUP6 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP2 POP DUP10 DUP5 GT ISZERO PUSH2 0xE88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 DUP3 ADD SWAP5 JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0xEAD JUMPI PUSH2 0xE9E DUP7 PUSH2 0xB24 JUMP JUMPDEST DUP3 MSTORE SWAP5 DUP3 ADD SWAP5 SWAP1 DUP3 ADD SWAP1 PUSH2 0xE8D JUMP JUMPDEST SWAP7 POP POP DUP7 ADD CALLDATALOAD SWAP3 POP POP DUP1 DUP3 GT ISZERO PUSH2 0xEC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xED0 DUP6 DUP3 DUP7 ADD PUSH2 0xC80 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xF0A JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xEEE JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xBA0 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xEDA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF44 DUP4 PUSH2 0xB24 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xF59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF77 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF80 DUP4 PUSH2 0xB24 JUMP JUMPDEST SWAP2 POP PUSH2 0xF8E PUSH1 0x20 DUP5 ADD PUSH2 0xB24 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xFAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xFB8 DUP7 PUSH2 0xB24 JUMP JUMPDEST SWAP5 POP PUSH2 0xFC6 PUSH1 0x20 DUP8 ADD PUSH2 0xB24 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xFF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE02 DUP9 DUP3 DUP10 ADD PUSH2 0xCF1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1010 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1030 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A2063616C6C6572206973206E6F7420746F6B656E206F776E PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x195C881BDC88185C1C1C9BDD9959 PUSH1 0x92 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x10C2 JUMPI PUSH2 0x10C2 PUSH2 0x109A JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F20746865207A65726F206164 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2A SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A20696E73756666696369656E742062616C616E636520666F PUSH1 0x40 DUP3 ADD MSTORE PUSH10 0x39103A3930B739B332B9 PUSH1 0xB1 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x21F JUMPI PUSH2 0x21F PUSH2 0x109A JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x117E PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0xEDA JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1190 DUP2 DUP6 PUSH2 0xEDA JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x11C5 SWAP1 DUP4 ADD DUP7 PUSH2 0xEDA JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x11D7 DUP2 DUP7 PUSH2 0xEDA JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x11EB DUP2 DUP6 PUSH2 0xBC0 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1209 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xBA0 DUP2 PUSH2 0xB6A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 RETURNDATASIZE GT ISZERO PUSH2 0x122D JUMPI PUSH1 0x4 PUSH1 0x0 DUP1 RETURNDATACOPY POP PUSH1 0x0 MLOAD PUSH1 0xE0 SHR JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x44 RETURNDATASIZE LT ISZERO PUSH2 0x123E JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x3 NOT RETURNDATASIZE DUP2 ADD PUSH1 0x4 DUP4 RETURNDATACOPY DUP2 MLOAD RETURNDATASIZE PUSH8 0xFFFFFFFFFFFFFFFF DUP2 PUSH1 0x24 DUP5 ADD GT DUP2 DUP5 GT OR ISZERO PUSH2 0x126E JUMPI POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP3 DUP6 ADD SWAP2 POP DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x1286 JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP5 RETURNDATASIZE DUP8 ADD ADD PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x12A0 JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x12AF PUSH1 0x20 DUP3 DUP7 ADD ADD DUP8 PUSH2 0xC2F JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x28 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A204552433131353552656365697665722072656A65637465 PUSH1 0x40 DUP3 ADD MSTORE PUSH8 0x6420746F6B656E73 PUSH1 0xC0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x133C SWAP1 DUP4 ADD DUP5 PUSH2 0xBC0 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x1F DUP2 0x29 0xB2 0x24 PUSH25 0x8397DF0C5F09917775CE6CE61A7043347F0AF6C7E17D72AF4B 0xC9 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"570:16689:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2185:227;;;;;;:::i;:::-;;:::i;:::-;;;597:25:17;;;585:2;570:18;2185:227:3;;;;;;;;1236:305;;;;;;:::i;:::-;;:::i;:::-;;;1184:14:17;;1177:22;1159:41;;1147:2;1132:18;1236:305:3;1019:187:17;1940:103:3;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;4064:426::-;;;;;;:::i;:::-;;:::i;:::-;;2569:508;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3145:153::-;;;;;;:::i;:::-;;:::i;3365:166::-;;;;;;:::i;:::-;-1:-1:-1;;;;;3487:27:3;;;3464:4;3487:27;;;:18;:27;;;;;;;;:37;;;;;;;;;;;;;;;3365:166;3598:394;;;;;;:::i;:::-;;:::i;2185:227::-;2271:7;-1:-1:-1;;;;;2298:21:3;;2290:76;;;;-1:-1:-1;;;2290:76:3;;8209:2:17;2290:76:3;;;8191:21:17;8248:2;8228:18;;;8221:30;8287:34;8267:18;;;8260:62;-1:-1:-1;;;8338:18:17;;;8331:40;8388:19;;2290:76:3;;;;;;;;;-1:-1:-1;2383:9:3;:13;;;;;;;;;;;-1:-1:-1;;;;;2383:22:3;;;;;;;;;;2185:227;;;;;:::o;1236:305::-;1338:4;-1:-1:-1;;;;;;1373:41:3;;-1:-1:-1;;;1373:41:3;;:109;;-1:-1:-1;;;;;;;1430:52:3;;-1:-1:-1;;;1430:52:3;1373:109;:161;;;-1:-1:-1;;;;;;;;;;937:40:12;;;1498:36:3;829:155:12;1940:103:3;2000:13;2032:4;2025:11;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1940:103;;;:::o;4064:426::-;-1:-1:-1;;;;;4289:20:3;;719:10:9;4289:20:3;;:60;;-1:-1:-1;4313:36:3;4330:4;719:10:9;3365:166:3;:::i;4313:36::-;4268:153;;;;-1:-1:-1;;;4268:153:3;;;;;;;:::i;:::-;4431:52;4454:4;4460:2;4464:3;4469:7;4478:4;4431:22;:52::i;:::-;4064:426;;;;;:::o;2569:508::-;2720:16;2779:3;:10;2760:8;:15;:29;2752:83;;;;-1:-1:-1;;;2752:83:3;;9420:2:17;2752:83:3;;;9402:21:17;9459:2;9439:18;;;9432:30;9498:34;9478:18;;;9471:62;-1:-1:-1;;;9549:18:17;;;9542:39;9598:19;;2752:83:3;9218:405:17;2752:83:3;2846:30;2893:8;:15;2879:30;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2879:30:3;;2846:63;;2925:9;2920:120;2944:8;:15;2940:1;:19;2920:120;;;2999:30;3009:8;3018:1;3009:11;;;;;;;;:::i;:::-;;;;;;;3022:3;3026:1;3022:6;;;;;;;;:::i;:::-;;;;;;;2999:9;:30::i;:::-;2980:13;2994:1;2980:16;;;;;;;;:::i;:::-;;;;;;;;;;:49;2961:3;;;:::i;:::-;;;2920:120;;;-1:-1:-1;3057:13:3;2569:508;-1:-1:-1;;;2569:508:3:o;3145:153::-;3239:52;719:10:9;3272:8:3;3282;3239:18;:52::i;:::-;3145:153;;:::o;3598:394::-;-1:-1:-1;;;;;3798:20:3;;719:10:9;3798:20:3;;:60;;-1:-1:-1;3822:36:3;3839:4;719:10:9;3365:166:3;:::i;3822:36::-;3777:153;;;;-1:-1:-1;;;3777:153:3;;;;;;;:::i;:::-;3940:45;3958:4;3964:2;3968;3972:6;3980:4;3940:17;:45::i;6233:1115::-;6453:7;:14;6439:3;:10;:28;6431:81;;;;-1:-1:-1;;;6431:81:3;;10234:2:17;6431:81:3;;;10216:21:17;10273:2;10253:18;;;10246:30;10312:34;10292:18;;;10285:62;-1:-1:-1;;;10363:18:17;;;10356:38;10411:19;;6431:81:3;10032:404:17;6431:81:3;-1:-1:-1;;;;;6530:16:3;;6522:66;;;;-1:-1:-1;;;6522:66:3;;;;;;;:::i;:::-;719:10:9;6599:16:3;6712:411;6736:3;:10;6732:1;:14;6712:411;;;6767:10;6780:3;6784:1;6780:6;;;;;;;;:::i;:::-;;;;;;;6767:19;;6800:14;6817:7;6825:1;6817:10;;;;;;;;:::i;:::-;;;;;;;;;;;;6842:19;6864:13;;;;;;;;;;-1:-1:-1;;;;;6864:19:3;;;;;;;;;;;;6817:10;;-1:-1:-1;6905:21:3;;;;6897:76;;;;-1:-1:-1;;;6897:76:3;;;;;;;:::i;:::-;7015:9;:13;;;;;;;;;;;-1:-1:-1;;;;;7015:19:3;;;;;;;;;;7037:20;;;7015:42;;7085:17;;;;;;;:27;;7037:20;;7015:9;7085:27;;7037:20;;7085:27;:::i;:::-;;;;;;;;6753:370;;;6748:3;;;;:::i;:::-;;;6712:411;;;;7168:2;-1:-1:-1;;;;;7138:47:3;7162:4;-1:-1:-1;;;;;7138:47:3;7152:8;-1:-1:-1;;;;;7138:47:3;;7172:3;7177:7;7138:47;;;;;;;:::i;:::-;;;;;;;;7266:75;7302:8;7312:4;7318:2;7322:3;7327:7;7336:4;7266:35;:75::i;:::-;6421:927;6233:1115;;;;;:::o;12910:323::-;13060:8;-1:-1:-1;;;;;13051:17:3;:5;-1:-1:-1;;;;;13051:17:3;;13043:71;;;;-1:-1:-1;;;13043:71:3;;12060:2:17;13043:71:3;;;12042:21:17;12099:2;12079:18;;;12072:30;12138:34;12118:18;;;12111:62;-1:-1:-1;;;12189:18:17;;;12182:39;12238:19;;13043:71:3;11858:405:17;13043:71:3;-1:-1:-1;;;;;13124:25:3;;;;;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;:46;;-1:-1:-1;;13124:46:3;;;;;;;;;;13185:41;;1159::17;;;13185::3;;1132:18:17;13185:41:3;;;;;;;12910:323;;;:::o;4940:947::-;-1:-1:-1;;;;;5121:16:3;;5113:66;;;;-1:-1:-1;;;5113:66:3;;;;;;;:::i;:::-;719:10:9;5190:16:3;5254:21;5272:2;5254:17;:21::i;:::-;5231:44;;5285:24;5312:25;5330:6;5312:17;:25::i;:::-;5285:52;;5419:19;5441:13;;;;;;;;;;;-1:-1:-1;;;;;5441:19:3;;;;;;;;;;5478:21;;;;5470:76;;;;-1:-1:-1;;;5470:76:3;;;;;;;:::i;:::-;5580:9;:13;;;;;;;;;;;-1:-1:-1;;;;;5580:19:3;;;;;;;;;;5602:20;;;5580:42;;5642:17;;;;;;;:27;;5602:20;;5580:9;5642:27;;5602:20;;5642:27;:::i;:::-;;;;-1:-1:-1;;5685:46:3;;;12442:25:17;;;12498:2;12483:18;;12476:34;;;-1:-1:-1;;;;;5685:46:3;;;;;;;;;;;;;;12415:18:17;5685:46:3;;;;;;;5812:68;5843:8;5853:4;5859:2;5863;5867:6;5875:4;5812:30;:68::i;:::-;5103:784;;;;4940:947;;;;;:::o;16266:792::-;-1:-1:-1;;;;;16498:13:3;;1465:19:8;:23;16494:558:3;;16533:79;;-1:-1:-1;;;16533:79:3;;-1:-1:-1;;;;;16533:43:3;;;;;:79;;16577:8;;16587:4;;16593:3;;16598:7;;16607:4;;16533:79;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;16533:79:3;;;;;;;;-1:-1:-1;;16533:79:3;;;;;;;;;;;;:::i;:::-;;;16529:513;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;16918:6;16911:14;;-1:-1:-1;;;16911:14:3;;;;;;;;:::i;16529:513::-;;;16965:62;;-1:-1:-1;;;16965:62:3;;14669:2:17;16965:62:3;;;14651:21:17;14708:2;14688:18;;;14681:30;14747:34;14727:18;;;14720:62;-1:-1:-1;;;14798:18:17;;;14791:50;14858:19;;16965:62:3;14467:416:17;16529:513:3;-1:-1:-1;;;;;;16691:60:3;;-1:-1:-1;;;16691:60:3;16687:157;;16775:50;;-1:-1:-1;;;16775:50:3;;;;;;;:::i;16687:157::-;16613:245;16266:792;;;;;;:::o;17064:193::-;17183:16;;;17197:1;17183:16;;;;;;;;;17130;;17158:22;;17183:16;;;;;;;;;;;;-1:-1:-1;17183:16:3;17158:41;;17220:7;17209:5;17215:1;17209:8;;;;;;;;:::i;:::-;;;;;;;;;;:18;17245:5;17064:193;-1:-1:-1;;17064:193:3:o;15535:725::-;-1:-1:-1;;;;;15742:13:3;;1465:19:8;:23;15738:516:3;;15777:72;;-1:-1:-1;;;15777:72:3;;-1:-1:-1;;;;;15777:38:3;;;;;:72;;15816:8;;15826:4;;15832:2;;15836:6;;15844:4;;15777:72;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;15777:72:3;;;;;;;;-1:-1:-1;;15777:72:3;;;;;;;;;;;;:::i;:::-;;;15773:471;;;;:::i;:::-;-1:-1:-1;;;;;;15898:55:3;;-1:-1:-1;;;15898:55:3;15894:152;;15977:50;;-1:-1:-1;;;15977:50:3;;;;;;;:::i;14:173:17:-;82:20;;-1:-1:-1;;;;;131:31:17;;121:42;;111:70;;177:1;174;167:12;111:70;14:173;;;:::o;192:254::-;260:6;268;321:2;309:9;300:7;296:23;292:32;289:52;;;337:1;334;327:12;289:52;360:29;379:9;360:29;:::i;:::-;350:39;436:2;421:18;;;;408:32;;-1:-1:-1;;;192:254:17:o;633:131::-;-1:-1:-1;;;;;;707:32:17;;697:43;;687:71;;754:1;751;744:12;687:71;633:131;:::o;769:245::-;827:6;880:2;868:9;859:7;855:23;851:32;848:52;;;896:1;893;886:12;848:52;935:9;922:23;954:30;978:5;954:30;:::i;:::-;1003:5;769:245;-1:-1:-1;;;769:245:17:o;1211:180::-;1270:6;1323:2;1311:9;1302:7;1298:23;1294:32;1291:52;;;1339:1;1336;1329:12;1291:52;-1:-1:-1;1362:23:17;;1211:180;-1:-1:-1;1211:180:17:o;1396:423::-;1438:3;1476:5;1470:12;1503:6;1498:3;1491:19;1528:1;1538:162;1552:6;1549:1;1546:13;1538:162;;;1614:4;1670:13;;;1666:22;;1660:29;1642:11;;;1638:20;;1631:59;1567:12;1538:162;;;1542:3;1745:1;1738:4;1729:6;1724:3;1720:16;1716:27;1709:38;1808:4;1801:2;1797:7;1792:2;1784:6;1780:15;1776:29;1771:3;1767:39;1763:50;1756:57;;;1396:423;;;;:::o;1824:220::-;1973:2;1962:9;1955:21;1936:4;1993:45;2034:2;2023:9;2019:18;2011:6;1993:45;:::i;2049:127::-;2110:10;2105:3;2101:20;2098:1;2091:31;2141:4;2138:1;2131:15;2165:4;2162:1;2155:15;2181:249;2291:2;2272:13;;-1:-1:-1;;2268:27:17;2256:40;;2326:18;2311:34;;2347:22;;;2308:62;2305:88;;;2373:18;;:::i;:::-;2409:2;2402:22;-1:-1:-1;;2181:249:17:o;2435:183::-;2495:4;2528:18;2520:6;2517:30;2514:56;;;2550:18;;:::i;:::-;-1:-1:-1;2595:1:17;2591:14;2607:4;2587:25;;2435:183::o;2623:724::-;2677:5;2730:3;2723:4;2715:6;2711:17;2707:27;2697:55;;2748:1;2745;2738:12;2697:55;2784:6;2771:20;2810:4;2833:43;2873:2;2833:43;:::i;:::-;2905:2;2899:9;2917:31;2945:2;2937:6;2917:31;:::i;:::-;2983:18;;;3075:1;3071:10;;;;3059:23;;3055:32;;;3017:15;;;;-1:-1:-1;3099:15:17;;;3096:35;;;3127:1;3124;3117:12;3096:35;3163:2;3155:6;3151:15;3175:142;3191:6;3186:3;3183:15;3175:142;;;3257:17;;3245:30;;3295:12;;;;3208;;3175:142;;;-1:-1:-1;3335:6:17;2623:724;-1:-1:-1;;;;;;2623:724:17:o;3352:555::-;3394:5;3447:3;3440:4;3432:6;3428:17;3424:27;3414:55;;3465:1;3462;3455:12;3414:55;3501:6;3488:20;3527:18;3523:2;3520:26;3517:52;;;3549:18;;:::i;:::-;3598:2;3592:9;3610:67;3665:2;3646:13;;-1:-1:-1;;3642:27:17;3671:4;3638:38;3592:9;3610:67;:::i;:::-;3701:2;3693:6;3686:18;3747:3;3740:4;3735:2;3727:6;3723:15;3719:26;3716:35;3713:55;;;3764:1;3761;3754:12;3713:55;3828:2;3821:4;3813:6;3809:17;3802:4;3794:6;3790:17;3777:54;3875:1;3851:15;;;3868:4;3847:26;3840:37;;;;3855:6;3352:555;-1:-1:-1;;;3352:555:17:o;3912:943::-;4066:6;4074;4082;4090;4098;4151:3;4139:9;4130:7;4126:23;4122:33;4119:53;;;4168:1;4165;4158:12;4119:53;4191:29;4210:9;4191:29;:::i;:::-;4181:39;;4239:38;4273:2;4262:9;4258:18;4239:38;:::i;:::-;4229:48;;4328:2;4317:9;4313:18;4300:32;4351:18;4392:2;4384:6;4381:14;4378:34;;;4408:1;4405;4398:12;4378:34;4431:61;4484:7;4475:6;4464:9;4460:22;4431:61;:::i;:::-;4421:71;;4545:2;4534:9;4530:18;4517:32;4501:48;;4574:2;4564:8;4561:16;4558:36;;;4590:1;4587;4580:12;4558:36;4613:63;4668:7;4657:8;4646:9;4642:24;4613:63;:::i;:::-;4603:73;;4729:3;4718:9;4714:19;4701:33;4685:49;;4759:2;4749:8;4746:16;4743:36;;;4775:1;4772;4765:12;4743:36;;4798:51;4841:7;4830:8;4819:9;4815:24;4798:51;:::i;:::-;4788:61;;;3912:943;;;;;;;;:::o;4860:1208::-;4978:6;4986;5039:2;5027:9;5018:7;5014:23;5010:32;5007:52;;;5055:1;5052;5045:12;5007:52;5095:9;5082:23;5124:18;5165:2;5157:6;5154:14;5151:34;;;5181:1;5178;5171:12;5151:34;5219:6;5208:9;5204:22;5194:32;;5264:7;5257:4;5253:2;5249:13;5245:27;5235:55;;5286:1;5283;5276:12;5235:55;5322:2;5309:16;5344:4;5367:43;5407:2;5367:43;:::i;:::-;5439:2;5433:9;5451:31;5479:2;5471:6;5451:31;:::i;:::-;5517:18;;;5605:1;5601:10;;;;5593:19;;5589:28;;;5551:15;;;;-1:-1:-1;5629:19:17;;;5626:39;;;5661:1;5658;5651:12;5626:39;5685:11;;;;5705:148;5721:6;5716:3;5713:15;5705:148;;;5787:23;5806:3;5787:23;:::i;:::-;5775:36;;5738:12;;;;5831;;;;5705:148;;;5872:6;-1:-1:-1;;5916:18:17;;5903:32;;-1:-1:-1;;5947:16:17;;;5944:36;;;5976:1;5973;5966:12;5944:36;;5999:63;6054:7;6043:8;6032:9;6028:24;5999:63;:::i;:::-;5989:73;;;4860:1208;;;;;:::o;6073:435::-;6126:3;6164:5;6158:12;6191:6;6186:3;6179:19;6217:4;6246:2;6241:3;6237:12;6230:19;;6283:2;6276:5;6272:14;6304:1;6314:169;6328:6;6325:1;6322:13;6314:169;;;6389:13;;6377:26;;6423:12;;;;6458:15;;;;6350:1;6343:9;6314:169;;;-1:-1:-1;6499:3:17;;6073:435;-1:-1:-1;;;;;6073:435:17:o;6513:261::-;6692:2;6681:9;6674:21;6655:4;6712:56;6764:2;6753:9;6749:18;6741:6;6712:56;:::i;6779:347::-;6844:6;6852;6905:2;6893:9;6884:7;6880:23;6876:32;6873:52;;;6921:1;6918;6911:12;6873:52;6944:29;6963:9;6944:29;:::i;:::-;6934:39;;7023:2;7012:9;7008:18;6995:32;7070:5;7063:13;7056:21;7049:5;7046:32;7036:60;;7092:1;7089;7082:12;7036:60;7115:5;7105:15;;;6779:347;;;;;:::o;7131:260::-;7199:6;7207;7260:2;7248:9;7239:7;7235:23;7231:32;7228:52;;;7276:1;7273;7266:12;7228:52;7299:29;7318:9;7299:29;:::i;:::-;7289:39;;7347:38;7381:2;7370:9;7366:18;7347:38;:::i;:::-;7337:48;;7131:260;;;;;:::o;7396:606::-;7500:6;7508;7516;7524;7532;7585:3;7573:9;7564:7;7560:23;7556:33;7553:53;;;7602:1;7599;7592:12;7553:53;7625:29;7644:9;7625:29;:::i;:::-;7615:39;;7673:38;7707:2;7696:9;7692:18;7673:38;:::i;:::-;7663:48;;7758:2;7747:9;7743:18;7730:32;7720:42;;7809:2;7798:9;7794:18;7781:32;7771:42;;7864:3;7853:9;7849:19;7836:33;7892:18;7884:6;7881:30;7878:50;;;7924:1;7921;7914:12;7878:50;7947:49;7988:7;7979:6;7968:9;7964:22;7947:49;:::i;8418:380::-;8497:1;8493:12;;;;8540;;;8561:61;;8615:4;8607:6;8603:17;8593:27;;8561:61;8668:2;8660:6;8657:14;8637:18;8634:38;8631:161;;8714:10;8709:3;8705:20;8702:1;8695:31;8749:4;8746:1;8739:15;8777:4;8774:1;8767:15;8631:161;;8418:380;;;:::o;8803:410::-;9005:2;8987:21;;;9044:2;9024:18;;;9017:30;9083:34;9078:2;9063:18;;9056:62;-1:-1:-1;;;9149:2:17;9134:18;;9127:44;9203:3;9188:19;;8803:410::o;9628:127::-;9689:10;9684:3;9680:20;9677:1;9670:31;9720:4;9717:1;9710:15;9744:4;9741:1;9734:15;9760:127;9821:10;9816:3;9812:20;9809:1;9802:31;9852:4;9849:1;9842:15;9876:4;9873:1;9866:15;9892:135;9931:3;9952:17;;;9949:43;;9972:18;;:::i;:::-;-1:-1:-1;10019:1:17;10008:13;;9892:135::o;10441:401::-;10643:2;10625:21;;;10682:2;10662:18;;;10655:30;10721:34;10716:2;10701:18;;10694:62;-1:-1:-1;;;10787:2:17;10772:18;;10765:35;10832:3;10817:19;;10441:401::o;10847:406::-;11049:2;11031:21;;;11088:2;11068:18;;;11061:30;11127:34;11122:2;11107:18;;11100:62;-1:-1:-1;;;11193:2:17;11178:18;;11171:40;11243:3;11228:19;;10847:406::o;11258:125::-;11323:9;;;11344:10;;;11341:36;;;11357:18;;:::i;11388:465::-;11645:2;11634:9;11627:21;11608:4;11671:56;11723:2;11712:9;11708:18;11700:6;11671:56;:::i;:::-;11775:9;11767:6;11763:22;11758:2;11747:9;11743:18;11736:50;11803:44;11840:6;11832;11803:44;:::i;:::-;11795:52;11388:465;-1:-1:-1;;;;;11388:465:17:o;12521:827::-;-1:-1:-1;;;;;12918:15:17;;;12900:34;;12970:15;;12965:2;12950:18;;12943:43;12880:3;13017:2;13002:18;;12995:31;;;12843:4;;13049:57;;13086:19;;13078:6;13049:57;:::i;:::-;13154:9;13146:6;13142:22;13137:2;13126:9;13122:18;13115:50;13188:44;13225:6;13217;13188:44;:::i;:::-;13174:58;;13281:9;13273:6;13269:22;13263:3;13252:9;13248:19;13241:51;13309:33;13335:6;13327;13309:33;:::i;:::-;13301:41;12521:827;-1:-1:-1;;;;;;;;12521:827:17:o;13353:249::-;13422:6;13475:2;13463:9;13454:7;13450:23;13446:32;13443:52;;;13491:1;13488;13481:12;13443:52;13523:9;13517:16;13542:30;13566:5;13542:30;:::i;13607:179::-;13642:3;13684:1;13666:16;13663:23;13660:120;;;13730:1;13727;13724;13709:23;-1:-1:-1;13767:1:17;13761:8;13756:3;13752:18;13660:120;13607:179;:::o;13791:671::-;13830:3;13872:4;13854:16;13851:26;13848:39;;;13791:671;:::o;13848:39::-;13914:2;13908:9;-1:-1:-1;;13979:16:17;13975:25;;13972:1;13908:9;13951:50;14030:4;14024:11;14054:16;14089:18;14160:2;14153:4;14145:6;14141:17;14138:25;14133:2;14125:6;14122:14;14119:45;14116:58;;;14167:5;;;;;13791:671;:::o;14116:58::-;14204:6;14198:4;14194:17;14183:28;;14240:3;14234:10;14267:2;14259:6;14256:14;14253:27;;;14273:5;;;;;;13791:671;:::o;14253:27::-;14357:2;14338:16;14332:4;14328:27;14324:36;14317:4;14308:6;14303:3;14299:16;14295:27;14292:69;14289:82;;;14364:5;;;;;;13791:671;:::o;14289:82::-;14380:57;14431:4;14422:6;14414;14410:19;14406:30;14400:4;14380:57;:::i;:::-;-1:-1:-1;14453:3:17;;13791:671;-1:-1:-1;;;;;13791:671:17:o;14888:404::-;15090:2;15072:21;;;15129:2;15109:18;;;15102:30;15168:34;15163:2;15148:18;;15141:62;-1:-1:-1;;;15234:2:17;15219:18;;15212:38;15282:3;15267:19;;14888:404::o;15297:561::-;-1:-1:-1;;;;;15594:15:17;;;15576:34;;15646:15;;15641:2;15626:18;;15619:43;15693:2;15678:18;;15671:34;;;15736:2;15721:18;;15714:34;;;15556:3;15779;15764:19;;15757:32;;;15519:4;;15806:46;;15832:19;;15824:6;15806:46;:::i;:::-;15798:54;15297:561;-1:-1:-1;;;;;;;15297:561:17:o"},"gasEstimates":{"creation":{"codeDepositCost":"997800","executionCost":"infinite","totalCost":"infinite"},"external":{"balanceOf(address,uint256)":"2677","balanceOfBatch(address[],uint256[])":"infinite","isApprovedForAll(address,address)":"infinite","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"infinite","safeTransferFrom(address,address,uint256,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"26705","supportsInterface(bytes4)":"555","uri(uint256)":"infinite"},"internal":{"_afterTokenTransfer(address,address,address,uint256[] memory,uint256[] memory,bytes memory)":"infinite","_asSingletonArray(uint256)":"infinite","_beforeTokenTransfer(address,address,address,uint256[] memory,uint256[] memory,bytes memory)":"infinite","_burn(address,uint256,uint256)":"infinite","_burnBatch(address,uint256[] memory,uint256[] memory)":"infinite","_doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[] memory,uint256[] memory,bytes memory)":"infinite","_doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes memory)":"infinite","_mint(address,uint256,uint256,bytes memory)":"infinite","_mintBatch(address,uint256[] memory,uint256[] memory,bytes memory)":"infinite","_safeBatchTransferFrom(address,address,uint256[] memory,uint256[] memory,bytes memory)":"infinite","_safeTransferFrom(address,address,uint256,uint256,bytes memory)":"infinite","_setApprovalForAll(address,address,bool)":"infinite","_setURI(string memory)":"infinite"}},"methodIdentifiers":{"balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","isApprovedForAll(address,address)":"e985e9c5","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","uri(uint256)":"0e89341c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the basic standard multi-token. See https://eips.ethereum.org/EIPS/eip-1155 Originally based on code by Enjin: https://github.com/enjin/erc-1155 _Available since v3.1._\",\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"constructor\":{\"details\":\"See {_setURI}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":\"ERC1155\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xd917747dc87f189c6779b894f367a028f9dca4be930283cccec8f312966af820\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":468,"contract":"@openzeppelin/contracts/token/ERC1155/ERC1155.sol:ERC1155","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_uint256,t_mapping(t_address,t_uint256))"},{"astId":474,"contract":"@openzeppelin/contracts/token/ERC1155/ERC1155.sol:ERC1155","label":"_operatorApprovals","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":476,"contract":"@openzeppelin/contracts/token/ERC1155/ERC1155.sol:ERC1155","label":"_uri","offset":0,"slot":"2","type":"t_string_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC1155/IERC1155.sol":{"IERC1155":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Required interface of an ERC1155 compliant contract, as defined in the https://eips.ethereum.org/EIPS/eip-1155[EIP]. _Available since v3.1._","events":{"ApprovalForAll(address,address,bool)":{"details":"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."},"TransferBatch(address,address,address,uint256[],uint256[])":{"details":"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."},"TransferSingle(address,address,address,uint256,uint256)":{"details":"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."},"URI(string,uint256)":{"details":"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."}},"kind":"dev","methods":{"balanceOf(address,uint256)":{"details":"Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address."},"balanceOfBatch(address[],uint256[])":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length."},"isApprovedForAll(address,address)":{"details":"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value."},"setApprovalForAll(address,bool)":{"details":"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","isApprovedForAll(address,address)":"e985e9c5","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC1155 compliant contract, as defined in the https://eips.ethereum.org/EIPS/eip-1155[EIP]. _Available since v3.1._\",\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":\"IERC1155\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol":{"IERC1155Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"_Available since v3.1._","kind":"dev","methods":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"details":"Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81, or its own function selector).","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","ids":"An array containing ids of each token being transferred (order and length must match values array)","operator":"The address which initiated the batch transfer (i.e. msg.sender)","values":"An array containing amounts of each token being transferred (order and length must match ids array)"},"returns":{"_0":"`bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed"}},"onERC1155Received(address,address,uint256,uint256,bytes)":{"details":"Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61, or its own function selector).","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","id":"The ID of the token being transferred","operator":"The address which initiated the transfer (i.e. msg.sender)","value":"The amount of tokens being transferred"},"returns":{"_0":"`bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed"}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"_Available since v3.1._\",\"kind\":\"dev\",\"methods\":{\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (i.e. 0xbc197c81, or its own function selector).\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"ids\":\"An array containing ids of each token being transferred (order and length must match values array)\",\"operator\":\"The address which initiated the batch transfer (i.e. msg.sender)\",\"values\":\"An array containing amounts of each token being transferred (order and length must match ids array)\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (i.e. 0xf23a6e61, or its own function selector).\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"id\":\"The ID of the token being transferred\",\"operator\":\"The address which initiated the transfer (i.e. msg.sender)\",\"value\":\"The amount of tokens being transferred\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":\"IERC1155Receiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol":{"IERC1155MetadataURI":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the optional ERC1155MetadataExtension interface, as defined in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP]. _Available since v3.1._","events":{"ApprovalForAll(address,address,bool)":{"details":"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."},"TransferBatch(address,address,address,uint256[],uint256[])":{"details":"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."},"TransferSingle(address,address,address,uint256,uint256)":{"details":"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."},"URI(string,uint256)":{"details":"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."}},"kind":"dev","methods":{"balanceOf(address,uint256)":{"details":"Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address."},"balanceOfBatch(address[],uint256[])":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length."},"isApprovedForAll(address,address)":{"details":"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value."},"setApprovalForAll(address,bool)":{"details":"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"uri(uint256)":{"details":"Returns the URI for token type `id`. If the `\\{id\\}` substring is present in the URI, it must be replaced by clients with the actual token type ID."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","isApprovedForAll(address,address)":"e985e9c5","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","uri(uint256)":"0e89341c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the optional ERC1155MetadataExtension interface, as defined in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP]. _Available since v3.1._\",\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"uri(uint256)\":{\"details\":\"Returns the URI for token type `id`. If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by clients with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":\"IERC1155MetadataURI\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122066c572869a48761237465ad34a99604a7b6f0059557b56b6c13f179eea88495b64736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH7 0xC572869A487612 CALLDATACOPY CHAINID GAS 0xD3 0x4A SWAP10 PUSH1 0x4A PUSH28 0x6F0059557B56B6C13F179EEA88495B64736F6C634300081300330000 ","sourceMap":"194:8964:8:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:8964:8;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122066c572869a48761237465ad34a99604a7b6f0059557b56b6c13f179eea88495b64736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH7 0xC572869A487612 CALLDATACOPY CHAINID GAS 0xD3 0x4A SWAP10 PUSH1 0x4A PUSH28 0x6F0059557B56B6C13F179EEA88495B64736F6C634300081300330000 ","sourceMap":"194:8964:8:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122098854b8036cafad742b8434434f068f44d17ee658cb0f5c57e3ac3bfc057c09b64736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP9 DUP6 0x4B DUP1 CALLDATASIZE 0xCA STATICCALL 0xD7 TIMESTAMP 0xB8 NUMBER PREVRANDAO CALLVALUE CREATE PUSH9 0xF44D17EE658CB0F5C5 PUSH31 0x3AC3BFC057C09B64736F6C6343000813003300000000000000000000000000 ","sourceMap":"188:2065:10:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;188:2065:10;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122098854b8036cafad742b8434434f068f44d17ee658cb0f5c57e3ac3bfc057c09b64736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP9 DUP6 0x4B DUP1 CALLDATASIZE 0xCA STATICCALL 0xD7 TIMESTAMP 0xB8 NUMBER PREVRANDAO CALLVALUE CREATE PUSH9 0xF44D17EE658CB0F5C5 PUSH31 0x3AC3BFC057C09B64736F6C6343000813003300000000000000000000000000 ","sourceMap":"188:2065:10:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"MerkleProof":{"abi":[],"devdoc":{"details":"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates merkle trees that are safe against this attack out of the box.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220584a687f9f78a9b1ddc7547ef38b5990536846abe389c98d12d2875de46df34c64736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PC 0x4A PUSH9 0x7F9F78A9B1DDC7547E RETURN DUP12 MSIZE SWAP1 MSTORE8 PUSH9 0x46ABE389C98D12D287 0x5D 0xE4 PUSH14 0xF34C64736F6C6343000813003300 ","sourceMap":"802:8493:11:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;802:8493:11;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220584a687f9f78a9b1ddc7547ef38b5990536846abe389c98d12d2875de46df34c64736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PC 0x4A PUSH9 0x7F9F78A9B1DDC7547E RETURN DUP12 MSIZE SWAP1 MSTORE8 PUSH9 0x46ABE389C98D12D287 0x5D 0xE4 PUSH14 0xF34C64736F6C6343000813003300 ","sourceMap":"802:8493:11:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_efficientHash(bytes32,bytes32)":"infinite","_hashPair(bytes32,bytes32)":"infinite","multiProofVerify(bytes32[] memory,bool[] memory,bytes32,bytes32[] memory)":"infinite","multiProofVerifyCalldata(bytes32[] calldata,bool[] calldata,bytes32,bytes32[] memory)":"infinite","processMultiProof(bytes32[] memory,bool[] memory,bytes32[] memory)":"infinite","processMultiProofCalldata(bytes32[] calldata,bool[] calldata,bytes32[] memory)":"infinite","processProof(bytes32[] memory,bytes32)":"infinite","processProofCalldata(bytes32[] calldata,bytes32)":"infinite","verify(bytes32[] memory,bytes32,bytes32)":"infinite","verifyCalldata(bytes32[] calldata,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates merkle trees that are safe against this attack out of the box.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":\"MerkleProof\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220470ff085b5fe60e759401cc80a654e1bfa9401fff83aa476109e12a1a30d046e64736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFBALANCE 0xF CREATE DUP6 0xB5 INVALID PUSH1 0xE7 MSIZE BLOCKHASH SHR 0xC8 EXP PUSH6 0x4E1BFA9401FF 0xF8 GASPRICE LOG4 PUSH23 0x109E12A1A30D046E64736F6C6343000813003300000000 ","sourceMap":"202:12302:14:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:12302:14;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220470ff085b5fe60e759401cc80a654e1bfa9401fff83aa476109e12a1a30d046e64736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFBALANCE 0xF CREATE DUP6 0xB5 INVALID PUSH1 0xE7 MSIZE BLOCKHASH SHR 0xC8 EXP PUSH6 0x4E1BFA9401FF 0xF8 GASPRICE LOG4 PUSH23 0x109E12A1A30D046E64736F6C6343000813003300000000 ","sourceMap":"202:12302:14:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/SAFTToken.sol":{"IERC20":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SAFTToken.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xd917747dc87f189c6779b894f367a028f9dca4be930283cccec8f312966af820\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/SAFTToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ninterface IExecutorManager {\\n\\tfunction isExecutor(address _address) external view returns (bool);\\n}\\n\\ninterface IERC20 {\\n\\tfunction transferFrom(\\n\\t\\taddress sender,\\n\\t\\taddress recipient,\\n\\t\\tuint256 amount\\n\\t) external returns (bool);\\n}\\n\\ninterface ITradingWallet {\\n\\tfunction batchUpdateBalances(\\n\\t\\taddress[] memory fromAddresses,\\n\\t\\taddress[] memory toAddresses,\\n\\t\\taddress token,\\n\\t\\tuint256[] memory amounts\\n\\t) external;\\n\\n\\tfunction getERC20Balance(\\n\\t\\taddress user,\\n\\t\\taddress token\\n\\t) external view returns (uint256);\\n}\\n\\ncontract SAFTToken is ERC1155, AccessControl {\\n\\tbytes32 public merkleRoot;\\n\\tmapping(uint256 => bool) public lockingFlags; // Reentrancy guard for minting\\n\\tuint256 private tokenIdCounter;\\n\\tuint public pricePerToken;\\n\\tuint public serviceFee;\\n\\tuint public platformFee;\\n\\tbytes32 public constant EXECUTOR_ROLE = keccak256(\\\"EXECUTOR_ROLE\\\");\\n\\tIERC20 public baseToken;\\n\\tIExecutorManager public executorManager;\\n\\tITradingWallet public tradingWallet;\\n\\taddress public platformTreasury;\\n\\n\\tevent BundleProcessed(\\n\\t\\taddress indexed executor,\\n\\t\\tuint256 indexed bundleNonce,\\n\\t\\tbytes32 bundleHash,\\n\\t\\tuint256 timestamp\\n\\t);\\n\\n\\tconstructor(\\n\\t\\taddress _owner,\\n\\t\\tbytes32 _merkleRoot,\\n\\t\\tstring memory metadataUri,\\n\\t\\tuint totalSupply,\\n\\t\\tuint _pricePerToken,\\n\\t\\taddress _executorManager,\\n\\t\\tuint _serviceFee,\\n\\t\\tuint _platformFee,\\n\\t\\taddress _baseToken,\\n\\t\\taddress _platformTreasury,\\n\\t\\taddress _tradingWallet\\n\\t) ERC1155(metadataUri) {\\n\\t\\trequire(_owner != address(0), \\\"Owner address cannot be empty\\\");\\n\\t\\t_mint(msg.sender, tokenIdCounter++, totalSupply, \\\"\\\");\\n\\t\\t_setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\t\\tmerkleRoot = _merkleRoot;\\n\\t\\tserviceFee = _serviceFee;\\n\\t\\tplatformFee = _platformFee;\\n\\t\\tpricePerToken = _pricePerToken;\\n\\t\\tplatformTreasury = _platformTreasury;\\n\\t\\texecutorManager = IExecutorManager(_executorManager);\\n\\t\\tbaseToken = IERC20(_baseToken);\\n\\t\\ttradingWallet = ITradingWallet(_tradingWallet);\\n\\t}\\n\\n\\tfunction isApprovedForAll(\\n\\t\\taddress owner,\\n\\t\\taddress operator\\n\\t) public view override returns (bool) {\\n\\t\\tif (executorManager.isExecutor(operator)) {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n\\n\\tfunction _beforeTokenTransfer(\\n\\t\\taddress operator,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256[] memory ids,\\n\\t\\tuint256[] memory amounts,\\n\\t\\tbytes memory data\\n\\t) internal override {\\n\\t\\trequire(isApprovedForAll(from, operator), \\\"Transfer not approved\\\");\\n\\t\\tsuper._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\t}\\n\\n\\tfunction whitelistMint(\\n\\t\\tuint256 amount,\\n\\t\\tbytes memory data,\\n\\t\\tbytes32[] calldata merkleProof\\n\\t) public {\\n\\t\\tuint256 id = tokenIdCounter;\\n\\t\\trequire(!lockingFlags[id], \\\"Token is currently locked for minting\\\");\\n\\n\\t\\t// Validate merkle proof using a single call\\n\\t\\trequire(isWhitelisted(merkleProof), \\\"Caller is not whitelisted\\\");\\n\\n\\t\\tlockingFlags[id] = true; // Set locking flag to prevent duplicate mints\\n\\n\\t\\t// Minimize external function calls for gas efficiency\\n\\t\\t_mint(msg.sender, id, amount, data);\\n\\n\\t\\tlockingFlags[id] = false; // Unlock after successful minting\\n\\t\\ttokenIdCounter++;\\n\\t}\\n\\n\\tfunction isWhitelisted(\\n\\t\\tbytes32[] calldata merkleProof\\n\\t) public view returns (bool) {\\n\\t\\tbytes32 leaf = keccak256(abi.encodePacked(msg.sender));\\n\\t\\treturn MerkleProof.verify(merkleProof, merkleRoot, leaf);\\n\\t}\\n\\n\\tfunction setMerkleRoot(\\n\\t\\tbytes32 _merkleRoot\\n\\t) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\tmerkleRoot = _merkleRoot;\\n\\t}\\n\\n\\tfunction supportsInterface(\\n\\t\\tbytes4 interfaceId\\n\\t) public view virtual override(ERC1155, AccessControl) returns (bool) {\\n\\t\\treturn\\n\\t\\t\\tERC1155.supportsInterface(interfaceId) ||\\n\\t\\t\\tAccessControl.supportsInterface(interfaceId);\\n\\t}\\n\\n\\tfunction setExecutorManager(\\n\\t\\taddress _executorManager\\n\\t) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\texecutorManager = IExecutorManager(_executorManager);\\n\\t}\\n\\n\\tfunction processBundle(\\n\\t\\tbytes calldata bundleData,\\n\\t\\tuint256 bundleNonce\\n\\t) public {\\n\\t\\trequire(\\n\\t\\t\\texecutorManager.isExecutor(msg.sender),\\n\\t\\t\\t\\\"Caller is not an authorized executor\\\"\\n\\t\\t);\\n\\n\\t\\t// Decode and process each transaction in the bundle\\n\\t\\tfor (uint i = 0; i < bundleData.length; i += 104) {\\n\\t\\t\\t(\\n\\t\\t\\t\\taddress buyer,\\n\\t\\t\\t\\taddress seller,\\n\\t\\t\\t\\tuint256 tokenId,\\n\\t\\t\\t\\tuint256 amount // otc token amount bought\\n\\t\\t\\t) = abi.decode(\\n\\t\\t\\t\\t\\tbundleData[i:i + 104],\\n\\t\\t\\t\\t\\t(address, address, uint256, uint256)\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t// Ensure that the seller has enough tokens\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tbalanceOf(seller, tokenId) >= amount,\\n\\t\\t\\t\\t\\\"Seller does not have enough tokens\\\"\\n\\t\\t\\t);\\n\\n\\t\\t\\t// Calculate total payment by buyer in stablecoin excluding fees\\n\\t\\t\\tuint256 totalPayment = amount * pricePerToken;\\n\\n\\t\\t\\t// Calculate service fee and platform fee\\n\\t\\t\\tuint serviceFeeAmount = (totalPayment * serviceFee) / 100;\\n\\t\\t\\tuint platformFeeAmount = (totalPayment * platformFee) / 100;\\n\\n\\t\\t\\t// Calculate total cost to the buyer in stablecoin\\n\\t\\t\\tuint256 totalCost = totalPayment +\\n\\t\\t\\t\\tserviceFeeAmount +\\n\\t\\t\\t\\tplatformFeeAmount;\\n\\n\\t\\t\\t// Ensure buyer has enough tokens\\n\\t\\t\\trequire(\\n\\t\\t\\t\\ttradingWallet.getERC20Balance(buyer, address(baseToken)) >=\\n\\t\\t\\t\\t\\ttotalCost,\\n\\t\\t\\t\\t\\\"Buyer does not have enough tokens\\\"\\n\\t\\t\\t);\\n\\n\\t\\t\\t// Prepare the payment balance update data\\n\\t\\t\\taddress[] memory fromAddresses = new address[](2);\\n\\t\\t\\tfromAddresses[0] = buyer;\\n\\t\\t\\tfromAddresses[1] = buyer;\\n\\n\\t\\t\\taddress[] memory toAddresses = new address[](2);\\n\\t\\t\\ttoAddresses[0] = seller;\\n\\t\\t\\ttoAddresses[1] = platformTreasury;\\n\\n\\t\\t\\tuint[] memory amounts = new uint[](2);\\n\\t\\t\\tamounts[0] = serviceFeeAmount;\\n\\t\\t\\tamounts[1] = platformFeeAmount;\\n\\t\\t\\t// Perform the payment updates in batch\\n\\t\\t\\ttradingWallet.batchUpdateBalances(\\n\\t\\t\\t\\tfromAddresses,\\n\\t\\t\\t\\ttoAddresses,\\n\\t\\t\\t\\taddress(baseToken),\\n\\t\\t\\t\\tamounts\\n\\t\\t\\t);\\n\\n\\t\\t\\t// Perform the otc balance settlement\\n\\t\\t}\\n\\n\\t\\t// Compute the hash of the bundle data for logging\\n\\t\\tbytes32 bundleHash = keccak256(bundleData);\\n\\n\\t\\t// Emit the event with necessary details\\n\\t\\temit BundleProcessed(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tbundleNonce,\\n\\t\\t\\tbundleHash,\\n\\t\\t\\tblock.timestamp\\n\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0xc29c93cc4a78ca337b4119935b65f2f99aeb402795f109d39d304c0184a2eb25\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"IExecutorManager":{"abi":[{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"isExecutor","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isExecutor(address)":"debfda30"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isExecutor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SAFTToken.sol\":\"IExecutorManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xd917747dc87f189c6779b894f367a028f9dca4be930283cccec8f312966af820\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/SAFTToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ninterface IExecutorManager {\\n\\tfunction isExecutor(address _address) external view returns (bool);\\n}\\n\\ninterface IERC20 {\\n\\tfunction transferFrom(\\n\\t\\taddress sender,\\n\\t\\taddress recipient,\\n\\t\\tuint256 amount\\n\\t) external returns (bool);\\n}\\n\\ninterface ITradingWallet {\\n\\tfunction batchUpdateBalances(\\n\\t\\taddress[] memory fromAddresses,\\n\\t\\taddress[] memory toAddresses,\\n\\t\\taddress token,\\n\\t\\tuint256[] memory amounts\\n\\t) external;\\n\\n\\tfunction getERC20Balance(\\n\\t\\taddress user,\\n\\t\\taddress token\\n\\t) external view returns (uint256);\\n}\\n\\ncontract SAFTToken is ERC1155, AccessControl {\\n\\tbytes32 public merkleRoot;\\n\\tmapping(uint256 => bool) public lockingFlags; // Reentrancy guard for minting\\n\\tuint256 private tokenIdCounter;\\n\\tuint public pricePerToken;\\n\\tuint public serviceFee;\\n\\tuint public platformFee;\\n\\tbytes32 public constant EXECUTOR_ROLE = keccak256(\\\"EXECUTOR_ROLE\\\");\\n\\tIERC20 public baseToken;\\n\\tIExecutorManager public executorManager;\\n\\tITradingWallet public tradingWallet;\\n\\taddress public platformTreasury;\\n\\n\\tevent BundleProcessed(\\n\\t\\taddress indexed executor,\\n\\t\\tuint256 indexed bundleNonce,\\n\\t\\tbytes32 bundleHash,\\n\\t\\tuint256 timestamp\\n\\t);\\n\\n\\tconstructor(\\n\\t\\taddress _owner,\\n\\t\\tbytes32 _merkleRoot,\\n\\t\\tstring memory metadataUri,\\n\\t\\tuint totalSupply,\\n\\t\\tuint _pricePerToken,\\n\\t\\taddress _executorManager,\\n\\t\\tuint _serviceFee,\\n\\t\\tuint _platformFee,\\n\\t\\taddress _baseToken,\\n\\t\\taddress _platformTreasury,\\n\\t\\taddress _tradingWallet\\n\\t) ERC1155(metadataUri) {\\n\\t\\trequire(_owner != address(0), \\\"Owner address cannot be empty\\\");\\n\\t\\t_mint(msg.sender, tokenIdCounter++, totalSupply, \\\"\\\");\\n\\t\\t_setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\t\\tmerkleRoot = _merkleRoot;\\n\\t\\tserviceFee = _serviceFee;\\n\\t\\tplatformFee = _platformFee;\\n\\t\\tpricePerToken = _pricePerToken;\\n\\t\\tplatformTreasury = _platformTreasury;\\n\\t\\texecutorManager = IExecutorManager(_executorManager);\\n\\t\\tbaseToken = IERC20(_baseToken);\\n\\t\\ttradingWallet = ITradingWallet(_tradingWallet);\\n\\t}\\n\\n\\tfunction isApprovedForAll(\\n\\t\\taddress owner,\\n\\t\\taddress operator\\n\\t) public view override returns (bool) {\\n\\t\\tif (executorManager.isExecutor(operator)) {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n\\n\\tfunction _beforeTokenTransfer(\\n\\t\\taddress operator,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256[] memory ids,\\n\\t\\tuint256[] memory amounts,\\n\\t\\tbytes memory data\\n\\t) internal override {\\n\\t\\trequire(isApprovedForAll(from, operator), \\\"Transfer not approved\\\");\\n\\t\\tsuper._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\t}\\n\\n\\tfunction whitelistMint(\\n\\t\\tuint256 amount,\\n\\t\\tbytes memory data,\\n\\t\\tbytes32[] calldata merkleProof\\n\\t) public {\\n\\t\\tuint256 id = tokenIdCounter;\\n\\t\\trequire(!lockingFlags[id], \\\"Token is currently locked for minting\\\");\\n\\n\\t\\t// Validate merkle proof using a single call\\n\\t\\trequire(isWhitelisted(merkleProof), \\\"Caller is not whitelisted\\\");\\n\\n\\t\\tlockingFlags[id] = true; // Set locking flag to prevent duplicate mints\\n\\n\\t\\t// Minimize external function calls for gas efficiency\\n\\t\\t_mint(msg.sender, id, amount, data);\\n\\n\\t\\tlockingFlags[id] = false; // Unlock after successful minting\\n\\t\\ttokenIdCounter++;\\n\\t}\\n\\n\\tfunction isWhitelisted(\\n\\t\\tbytes32[] calldata merkleProof\\n\\t) public view returns (bool) {\\n\\t\\tbytes32 leaf = keccak256(abi.encodePacked(msg.sender));\\n\\t\\treturn MerkleProof.verify(merkleProof, merkleRoot, leaf);\\n\\t}\\n\\n\\tfunction setMerkleRoot(\\n\\t\\tbytes32 _merkleRoot\\n\\t) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\tmerkleRoot = _merkleRoot;\\n\\t}\\n\\n\\tfunction supportsInterface(\\n\\t\\tbytes4 interfaceId\\n\\t) public view virtual override(ERC1155, AccessControl) returns (bool) {\\n\\t\\treturn\\n\\t\\t\\tERC1155.supportsInterface(interfaceId) ||\\n\\t\\t\\tAccessControl.supportsInterface(interfaceId);\\n\\t}\\n\\n\\tfunction setExecutorManager(\\n\\t\\taddress _executorManager\\n\\t) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\texecutorManager = IExecutorManager(_executorManager);\\n\\t}\\n\\n\\tfunction processBundle(\\n\\t\\tbytes calldata bundleData,\\n\\t\\tuint256 bundleNonce\\n\\t) public {\\n\\t\\trequire(\\n\\t\\t\\texecutorManager.isExecutor(msg.sender),\\n\\t\\t\\t\\\"Caller is not an authorized executor\\\"\\n\\t\\t);\\n\\n\\t\\t// Decode and process each transaction in the bundle\\n\\t\\tfor (uint i = 0; i < bundleData.length; i += 104) {\\n\\t\\t\\t(\\n\\t\\t\\t\\taddress buyer,\\n\\t\\t\\t\\taddress seller,\\n\\t\\t\\t\\tuint256 tokenId,\\n\\t\\t\\t\\tuint256 amount // otc token amount bought\\n\\t\\t\\t) = abi.decode(\\n\\t\\t\\t\\t\\tbundleData[i:i + 104],\\n\\t\\t\\t\\t\\t(address, address, uint256, uint256)\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t// Ensure that the seller has enough tokens\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tbalanceOf(seller, tokenId) >= amount,\\n\\t\\t\\t\\t\\\"Seller does not have enough tokens\\\"\\n\\t\\t\\t);\\n\\n\\t\\t\\t// Calculate total payment by buyer in stablecoin excluding fees\\n\\t\\t\\tuint256 totalPayment = amount * pricePerToken;\\n\\n\\t\\t\\t// Calculate service fee and platform fee\\n\\t\\t\\tuint serviceFeeAmount = (totalPayment * serviceFee) / 100;\\n\\t\\t\\tuint platformFeeAmount = (totalPayment * platformFee) / 100;\\n\\n\\t\\t\\t// Calculate total cost to the buyer in stablecoin\\n\\t\\t\\tuint256 totalCost = totalPayment +\\n\\t\\t\\t\\tserviceFeeAmount +\\n\\t\\t\\t\\tplatformFeeAmount;\\n\\n\\t\\t\\t// Ensure buyer has enough tokens\\n\\t\\t\\trequire(\\n\\t\\t\\t\\ttradingWallet.getERC20Balance(buyer, address(baseToken)) >=\\n\\t\\t\\t\\t\\ttotalCost,\\n\\t\\t\\t\\t\\\"Buyer does not have enough tokens\\\"\\n\\t\\t\\t);\\n\\n\\t\\t\\t// Prepare the payment balance update data\\n\\t\\t\\taddress[] memory fromAddresses = new address[](2);\\n\\t\\t\\tfromAddresses[0] = buyer;\\n\\t\\t\\tfromAddresses[1] = buyer;\\n\\n\\t\\t\\taddress[] memory toAddresses = new address[](2);\\n\\t\\t\\ttoAddresses[0] = seller;\\n\\t\\t\\ttoAddresses[1] = platformTreasury;\\n\\n\\t\\t\\tuint[] memory amounts = new uint[](2);\\n\\t\\t\\tamounts[0] = serviceFeeAmount;\\n\\t\\t\\tamounts[1] = platformFeeAmount;\\n\\t\\t\\t// Perform the payment updates in batch\\n\\t\\t\\ttradingWallet.batchUpdateBalances(\\n\\t\\t\\t\\tfromAddresses,\\n\\t\\t\\t\\ttoAddresses,\\n\\t\\t\\t\\taddress(baseToken),\\n\\t\\t\\t\\tamounts\\n\\t\\t\\t);\\n\\n\\t\\t\\t// Perform the otc balance settlement\\n\\t\\t}\\n\\n\\t\\t// Compute the hash of the bundle data for logging\\n\\t\\tbytes32 bundleHash = keccak256(bundleData);\\n\\n\\t\\t// Emit the event with necessary details\\n\\t\\temit BundleProcessed(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tbundleNonce,\\n\\t\\t\\tbundleHash,\\n\\t\\t\\tblock.timestamp\\n\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0xc29c93cc4a78ca337b4119935b65f2f99aeb402795f109d39d304c0184a2eb25\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"ITradingWallet":{"abi":[{"inputs":[{"internalType":"address[]","name":"fromAddresses","type":"address[]"},{"internalType":"address[]","name":"toAddresses","type":"address[]"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"batchUpdateBalances","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"address","name":"token","type":"address"}],"name":"getERC20Balance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"batchUpdateBalances(address[],address[],address,uint256[])":"38419104","getERC20Balance(address,address)":"c3a8962c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"fromAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"toAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchUpdateBalances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getERC20Balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SAFTToken.sol\":\"ITradingWallet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xd917747dc87f189c6779b894f367a028f9dca4be930283cccec8f312966af820\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/SAFTToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ninterface IExecutorManager {\\n\\tfunction isExecutor(address _address) external view returns (bool);\\n}\\n\\ninterface IERC20 {\\n\\tfunction transferFrom(\\n\\t\\taddress sender,\\n\\t\\taddress recipient,\\n\\t\\tuint256 amount\\n\\t) external returns (bool);\\n}\\n\\ninterface ITradingWallet {\\n\\tfunction batchUpdateBalances(\\n\\t\\taddress[] memory fromAddresses,\\n\\t\\taddress[] memory toAddresses,\\n\\t\\taddress token,\\n\\t\\tuint256[] memory amounts\\n\\t) external;\\n\\n\\tfunction getERC20Balance(\\n\\t\\taddress user,\\n\\t\\taddress token\\n\\t) external view returns (uint256);\\n}\\n\\ncontract SAFTToken is ERC1155, AccessControl {\\n\\tbytes32 public merkleRoot;\\n\\tmapping(uint256 => bool) public lockingFlags; // Reentrancy guard for minting\\n\\tuint256 private tokenIdCounter;\\n\\tuint public pricePerToken;\\n\\tuint public serviceFee;\\n\\tuint public platformFee;\\n\\tbytes32 public constant EXECUTOR_ROLE = keccak256(\\\"EXECUTOR_ROLE\\\");\\n\\tIERC20 public baseToken;\\n\\tIExecutorManager public executorManager;\\n\\tITradingWallet public tradingWallet;\\n\\taddress public platformTreasury;\\n\\n\\tevent BundleProcessed(\\n\\t\\taddress indexed executor,\\n\\t\\tuint256 indexed bundleNonce,\\n\\t\\tbytes32 bundleHash,\\n\\t\\tuint256 timestamp\\n\\t);\\n\\n\\tconstructor(\\n\\t\\taddress _owner,\\n\\t\\tbytes32 _merkleRoot,\\n\\t\\tstring memory metadataUri,\\n\\t\\tuint totalSupply,\\n\\t\\tuint _pricePerToken,\\n\\t\\taddress _executorManager,\\n\\t\\tuint _serviceFee,\\n\\t\\tuint _platformFee,\\n\\t\\taddress _baseToken,\\n\\t\\taddress _platformTreasury,\\n\\t\\taddress _tradingWallet\\n\\t) ERC1155(metadataUri) {\\n\\t\\trequire(_owner != address(0), \\\"Owner address cannot be empty\\\");\\n\\t\\t_mint(msg.sender, tokenIdCounter++, totalSupply, \\\"\\\");\\n\\t\\t_setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\t\\tmerkleRoot = _merkleRoot;\\n\\t\\tserviceFee = _serviceFee;\\n\\t\\tplatformFee = _platformFee;\\n\\t\\tpricePerToken = _pricePerToken;\\n\\t\\tplatformTreasury = _platformTreasury;\\n\\t\\texecutorManager = IExecutorManager(_executorManager);\\n\\t\\tbaseToken = IERC20(_baseToken);\\n\\t\\ttradingWallet = ITradingWallet(_tradingWallet);\\n\\t}\\n\\n\\tfunction isApprovedForAll(\\n\\t\\taddress owner,\\n\\t\\taddress operator\\n\\t) public view override returns (bool) {\\n\\t\\tif (executorManager.isExecutor(operator)) {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n\\n\\tfunction _beforeTokenTransfer(\\n\\t\\taddress operator,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256[] memory ids,\\n\\t\\tuint256[] memory amounts,\\n\\t\\tbytes memory data\\n\\t) internal override {\\n\\t\\trequire(isApprovedForAll(from, operator), \\\"Transfer not approved\\\");\\n\\t\\tsuper._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\t}\\n\\n\\tfunction whitelistMint(\\n\\t\\tuint256 amount,\\n\\t\\tbytes memory data,\\n\\t\\tbytes32[] calldata merkleProof\\n\\t) public {\\n\\t\\tuint256 id = tokenIdCounter;\\n\\t\\trequire(!lockingFlags[id], \\\"Token is currently locked for minting\\\");\\n\\n\\t\\t// Validate merkle proof using a single call\\n\\t\\trequire(isWhitelisted(merkleProof), \\\"Caller is not whitelisted\\\");\\n\\n\\t\\tlockingFlags[id] = true; // Set locking flag to prevent duplicate mints\\n\\n\\t\\t// Minimize external function calls for gas efficiency\\n\\t\\t_mint(msg.sender, id, amount, data);\\n\\n\\t\\tlockingFlags[id] = false; // Unlock after successful minting\\n\\t\\ttokenIdCounter++;\\n\\t}\\n\\n\\tfunction isWhitelisted(\\n\\t\\tbytes32[] calldata merkleProof\\n\\t) public view returns (bool) {\\n\\t\\tbytes32 leaf = keccak256(abi.encodePacked(msg.sender));\\n\\t\\treturn MerkleProof.verify(merkleProof, merkleRoot, leaf);\\n\\t}\\n\\n\\tfunction setMerkleRoot(\\n\\t\\tbytes32 _merkleRoot\\n\\t) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\tmerkleRoot = _merkleRoot;\\n\\t}\\n\\n\\tfunction supportsInterface(\\n\\t\\tbytes4 interfaceId\\n\\t) public view virtual override(ERC1155, AccessControl) returns (bool) {\\n\\t\\treturn\\n\\t\\t\\tERC1155.supportsInterface(interfaceId) ||\\n\\t\\t\\tAccessControl.supportsInterface(interfaceId);\\n\\t}\\n\\n\\tfunction setExecutorManager(\\n\\t\\taddress _executorManager\\n\\t) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\texecutorManager = IExecutorManager(_executorManager);\\n\\t}\\n\\n\\tfunction processBundle(\\n\\t\\tbytes calldata bundleData,\\n\\t\\tuint256 bundleNonce\\n\\t) public {\\n\\t\\trequire(\\n\\t\\t\\texecutorManager.isExecutor(msg.sender),\\n\\t\\t\\t\\\"Caller is not an authorized executor\\\"\\n\\t\\t);\\n\\n\\t\\t// Decode and process each transaction in the bundle\\n\\t\\tfor (uint i = 0; i < bundleData.length; i += 104) {\\n\\t\\t\\t(\\n\\t\\t\\t\\taddress buyer,\\n\\t\\t\\t\\taddress seller,\\n\\t\\t\\t\\tuint256 tokenId,\\n\\t\\t\\t\\tuint256 amount // otc token amount bought\\n\\t\\t\\t) = abi.decode(\\n\\t\\t\\t\\t\\tbundleData[i:i + 104],\\n\\t\\t\\t\\t\\t(address, address, uint256, uint256)\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t// Ensure that the seller has enough tokens\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tbalanceOf(seller, tokenId) >= amount,\\n\\t\\t\\t\\t\\\"Seller does not have enough tokens\\\"\\n\\t\\t\\t);\\n\\n\\t\\t\\t// Calculate total payment by buyer in stablecoin excluding fees\\n\\t\\t\\tuint256 totalPayment = amount * pricePerToken;\\n\\n\\t\\t\\t// Calculate service fee and platform fee\\n\\t\\t\\tuint serviceFeeAmount = (totalPayment * serviceFee) / 100;\\n\\t\\t\\tuint platformFeeAmount = (totalPayment * platformFee) / 100;\\n\\n\\t\\t\\t// Calculate total cost to the buyer in stablecoin\\n\\t\\t\\tuint256 totalCost = totalPayment +\\n\\t\\t\\t\\tserviceFeeAmount +\\n\\t\\t\\t\\tplatformFeeAmount;\\n\\n\\t\\t\\t// Ensure buyer has enough tokens\\n\\t\\t\\trequire(\\n\\t\\t\\t\\ttradingWallet.getERC20Balance(buyer, address(baseToken)) >=\\n\\t\\t\\t\\t\\ttotalCost,\\n\\t\\t\\t\\t\\\"Buyer does not have enough tokens\\\"\\n\\t\\t\\t);\\n\\n\\t\\t\\t// Prepare the payment balance update data\\n\\t\\t\\taddress[] memory fromAddresses = new address[](2);\\n\\t\\t\\tfromAddresses[0] = buyer;\\n\\t\\t\\tfromAddresses[1] = buyer;\\n\\n\\t\\t\\taddress[] memory toAddresses = new address[](2);\\n\\t\\t\\ttoAddresses[0] = seller;\\n\\t\\t\\ttoAddresses[1] = platformTreasury;\\n\\n\\t\\t\\tuint[] memory amounts = new uint[](2);\\n\\t\\t\\tamounts[0] = serviceFeeAmount;\\n\\t\\t\\tamounts[1] = platformFeeAmount;\\n\\t\\t\\t// Perform the payment updates in batch\\n\\t\\t\\ttradingWallet.batchUpdateBalances(\\n\\t\\t\\t\\tfromAddresses,\\n\\t\\t\\t\\ttoAddresses,\\n\\t\\t\\t\\taddress(baseToken),\\n\\t\\t\\t\\tamounts\\n\\t\\t\\t);\\n\\n\\t\\t\\t// Perform the otc balance settlement\\n\\t\\t}\\n\\n\\t\\t// Compute the hash of the bundle data for logging\\n\\t\\tbytes32 bundleHash = keccak256(bundleData);\\n\\n\\t\\t// Emit the event with necessary details\\n\\t\\temit BundleProcessed(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tbundleNonce,\\n\\t\\t\\tbundleHash,\\n\\t\\t\\tblock.timestamp\\n\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0xc29c93cc4a78ca337b4119935b65f2f99aeb402795f109d39d304c0184a2eb25\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"SAFTToken":{"abi":[{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"bytes32","name":"_merkleRoot","type":"bytes32"},{"internalType":"string","name":"metadataUri","type":"string"},{"internalType":"uint256","name":"totalSupply","type":"uint256"},{"internalType":"uint256","name":"_pricePerToken","type":"uint256"},{"internalType":"address","name":"_executorManager","type":"address"},{"internalType":"uint256","name":"_serviceFee","type":"uint256"},{"internalType":"uint256","name":"_platformFee","type":"uint256"},{"internalType":"address","name":"_baseToken","type":"address"},{"internalType":"address","name":"_platformTreasury","type":"address"},{"internalType":"address","name":"_tradingWallet","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"executor","type":"address"},{"indexed":true,"internalType":"uint256","name":"bundleNonce","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"bundleHash","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"BundleProcessed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"EXECUTOR_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"baseToken","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"executorManager","outputs":[{"internalType":"contract IExecutorManager","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"merkleProof","type":"bytes32[]"}],"name":"isWhitelisted","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"lockingFlags","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"merkleRoot","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"platformFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"platformTreasury","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pricePerToken","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"bundleData","type":"bytes"},{"internalType":"uint256","name":"bundleNonce","type":"uint256"}],"name":"processBundle","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"serviceFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_executorManager","type":"address"}],"name":"setExecutorManager","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_merkleRoot","type":"bytes32"}],"name":"setMerkleRoot","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tradingWallet","outputs":[{"internalType":"contract ITradingWallet","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes32[]","name":"merkleProof","type":"bytes32[]"}],"name":"whitelistMint","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"ApprovalForAll(address,address,bool)":{"details":"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."},"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"},"TransferBatch(address,address,address,uint256[],uint256[])":{"details":"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."},"TransferSingle(address,address,address,uint256,uint256)":{"details":"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."},"URI(string,uint256)":{"details":"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."}},"kind":"dev","methods":{"balanceOf(address,uint256)":{"details":"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."},"balanceOfBatch(address[],uint256[])":{"details":"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."},"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"See {IERC1155-safeBatchTransferFrom}."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"See {IERC1155-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC1155-setApprovalForAll}."},"uri(uint256)":{"details":"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_4036":{"entryPoint":null,"id":4036,"parameterSlots":11,"returnSlots":0},"@_487":{"entryPoint":null,"id":487,"parameterSlots":1,"returnSlots":0},"@_afterTokenTransfer_1508":{"entryPoint":null,"id":1508,"parameterSlots":6,"returnSlots":0},"@_asSingletonArray_1664":{"entryPoint":667,"id":1664,"parameterSlots":1,"returnSlots":1},"@_beforeTokenTransfer_1489":{"entryPoint":null,"id":1489,"parameterSlots":6,"returnSlots":0},"@_beforeTokenTransfer_4095":{"entryPoint":745,"id":4095,"parameterSlots":6,"returnSlots":0},"@_doSafeTransferAcceptanceCheck_1571":{"entryPoint":865,"id":1571,"parameterSlots":6,"returnSlots":0},"@_grantRole_283":{"entryPoint":1305,"id":283,"parameterSlots":2,"returnSlots":0},"@_mint_1099":{"entryPoint":352,"id":1099,"parameterSlots":4,"returnSlots":0},"@_msgSender_2263":{"entryPoint":null,"id":2263,"parameterSlots":0,"returnSlots":1},"@_setURI_998":{"entryPoint":334,"id":998,"parameterSlots":1,"returnSlots":0},"@_setupRole_223":{"entryPoint":655,"id":223,"parameterSlots":2,"returnSlots":0},"@hasRole_79":{"entryPoint":null,"id":79,"parameterSlots":2,"returnSlots":1},"@isApprovedForAll_4057":{"entryPoint":1469,"id":4057,"parameterSlots":2,"returnSlots":1},"@isContract_1939":{"entryPoint":null,"id":1939,"parameterSlots":1,"returnSlots":1},"abi_decode_address_fromMemory":{"entryPoint":1608,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_addresst_bytes32t_string_memory_ptrt_uint256t_uint256t_addresst_uint256t_uint256t_addresst_addresst_address_fromMemory":{"entryPoint":1744,"id":null,"parameterSlots":2,"returnSlots":11},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":2852,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":2608,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_bytes":{"entryPoint":2491,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":2537,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":2831,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_5ce500c9dc2e59e02700829a3ac6c4c1e7fc183d658cfaf2fdd6892d9a845f30__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9bd124d272f06141b15552f4450bbed70049ce5ab0bcee1bad3c2f0f7ff9f544__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":2447,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":2164,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":2243,"id":null,"parameterSlots":2,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":1706,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":2104,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"finalize_allocation":{"entryPoint":1659,"id":null,"parameterSlots":2,"returnSlots":0},"increment_t_uint256":{"entryPoint":2076,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":2054,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":2469,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":1637,"id":null,"parameterSlots":0,"returnSlots":0},"return_data_selector":{"entryPoint":2659,"id":null,"parameterSlots":0,"returnSlots":1},"try_decode_error_message":{"entryPoint":2688,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:10357:17","statements":[{"nodeType":"YulBlock","src":"6:3:17","statements":[]},{"body":{"nodeType":"YulBlock","src":"74:117:17","statements":[{"nodeType":"YulAssignment","src":"84:22:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"99:6:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"93:5:17"},"nodeType":"YulFunctionCall","src":"93:13:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"84:5:17"}]},{"body":{"nodeType":"YulBlock","src":"169:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"178:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"181:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"171:6:17"},"nodeType":"YulFunctionCall","src":"171:12:17"},"nodeType":"YulExpressionStatement","src":"171:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"128:5:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"139:5:17"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"154:3:17","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"159:1:17","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"150:3:17"},"nodeType":"YulFunctionCall","src":"150:11:17"},{"kind":"number","nodeType":"YulLiteral","src":"163:1:17","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"146:3:17"},"nodeType":"YulFunctionCall","src":"146:19:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"135:3:17"},"nodeType":"YulFunctionCall","src":"135:31:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"125:2:17"},"nodeType":"YulFunctionCall","src":"125:42:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"118:6:17"},"nodeType":"YulFunctionCall","src":"118:50:17"},"nodeType":"YulIf","src":"115:70:17"}]},"name":"abi_decode_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"53:6:17","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"64:5:17","type":""}],"src":"14:177:17"},{"body":{"nodeType":"YulBlock","src":"228:95:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"245:1:17","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"252:3:17","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"257:10:17","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"248:3:17"},"nodeType":"YulFunctionCall","src":"248:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"238:6:17"},"nodeType":"YulFunctionCall","src":"238:31:17"},"nodeType":"YulExpressionStatement","src":"238:31:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"285:1:17","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"288:4:17","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"278:6:17"},"nodeType":"YulFunctionCall","src":"278:15:17"},"nodeType":"YulExpressionStatement","src":"278:15:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"309:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"312:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"302:6:17"},"nodeType":"YulFunctionCall","src":"302:15:17"},"nodeType":"YulExpressionStatement","src":"302:15:17"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"196:127:17"},{"body":{"nodeType":"YulBlock","src":"375:202:17","statements":[{"nodeType":"YulVariableDeclaration","src":"385:58:17","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"407:6:17"},{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"423:4:17"},{"kind":"number","nodeType":"YulLiteral","src":"429:2:17","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"419:3:17"},"nodeType":"YulFunctionCall","src":"419:13:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"438:2:17","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"434:3:17"},"nodeType":"YulFunctionCall","src":"434:7:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"415:3:17"},"nodeType":"YulFunctionCall","src":"415:27:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"403:3:17"},"nodeType":"YulFunctionCall","src":"403:40:17"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"389:10:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"518:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"520:16:17"},"nodeType":"YulFunctionCall","src":"520:18:17"},"nodeType":"YulExpressionStatement","src":"520:18:17"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"461:10:17"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"481:2:17","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"485:1:17","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"477:3:17"},"nodeType":"YulFunctionCall","src":"477:10:17"},{"kind":"number","nodeType":"YulLiteral","src":"489:1:17","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"473:3:17"},"nodeType":"YulFunctionCall","src":"473:18:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"458:2:17"},"nodeType":"YulFunctionCall","src":"458:34:17"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"497:10:17"},{"name":"memPtr","nodeType":"YulIdentifier","src":"509:6:17"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"494:2:17"},"nodeType":"YulFunctionCall","src":"494:22:17"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"455:2:17"},"nodeType":"YulFunctionCall","src":"455:62:17"},"nodeType":"YulIf","src":"452:88:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"556:2:17","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"560:10:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"549:6:17"},"nodeType":"YulFunctionCall","src":"549:22:17"},"nodeType":"YulExpressionStatement","src":"549:22:17"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"357:6:17","type":""},{"name":"size","nodeType":"YulTypedName","src":"365:4:17","type":""}],"src":"328:249:17"},{"body":{"nodeType":"YulBlock","src":"648:184:17","statements":[{"nodeType":"YulVariableDeclaration","src":"658:10:17","value":{"kind":"number","nodeType":"YulLiteral","src":"667:1:17","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"662:1:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"727:63:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"752:3:17"},{"name":"i","nodeType":"YulIdentifier","src":"757:1:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"748:3:17"},"nodeType":"YulFunctionCall","src":"748:11:17"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"771:3:17"},{"name":"i","nodeType":"YulIdentifier","src":"776:1:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"767:3:17"},"nodeType":"YulFunctionCall","src":"767:11:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"761:5:17"},"nodeType":"YulFunctionCall","src":"761:18:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"741:6:17"},"nodeType":"YulFunctionCall","src":"741:39:17"},"nodeType":"YulExpressionStatement","src":"741:39:17"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"688:1:17"},{"name":"length","nodeType":"YulIdentifier","src":"691:6:17"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"685:2:17"},"nodeType":"YulFunctionCall","src":"685:13:17"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"699:19:17","statements":[{"nodeType":"YulAssignment","src":"701:15:17","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"710:1:17"},{"kind":"number","nodeType":"YulLiteral","src":"713:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"706:3:17"},"nodeType":"YulFunctionCall","src":"706:10:17"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"701:1:17"}]}]},"pre":{"nodeType":"YulBlock","src":"681:3:17","statements":[]},"src":"677:113:17"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"810:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"815:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"806:3:17"},"nodeType":"YulFunctionCall","src":"806:16:17"},{"kind":"number","nodeType":"YulLiteral","src":"824:1:17","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"799:6:17"},"nodeType":"YulFunctionCall","src":"799:27:17"},"nodeType":"YulExpressionStatement","src":"799:27:17"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"626:3:17","type":""},{"name":"dst","nodeType":"YulTypedName","src":"631:3:17","type":""},{"name":"length","nodeType":"YulTypedName","src":"636:6:17","type":""}],"src":"582:250:17"},{"body":{"nodeType":"YulBlock","src":"1099:1231:17","statements":[{"body":{"nodeType":"YulBlock","src":"1146:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1155:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1158:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1148:6:17"},"nodeType":"YulFunctionCall","src":"1148:12:17"},"nodeType":"YulExpressionStatement","src":"1148:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1120:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"1129:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1116:3:17"},"nodeType":"YulFunctionCall","src":"1116:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"1141:3:17","type":"","value":"352"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1112:3:17"},"nodeType":"YulFunctionCall","src":"1112:33:17"},"nodeType":"YulIf","src":"1109:53:17"},{"nodeType":"YulAssignment","src":"1171:50:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1211:9:17"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"1181:29:17"},"nodeType":"YulFunctionCall","src":"1181:40:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1171:6:17"}]},{"nodeType":"YulAssignment","src":"1230:35:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1250:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"1261:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1246:3:17"},"nodeType":"YulFunctionCall","src":"1246:18:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1240:5:17"},"nodeType":"YulFunctionCall","src":"1240:25:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1230:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"1274:39:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1298:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"1309:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1294:3:17"},"nodeType":"YulFunctionCall","src":"1294:18:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1288:5:17"},"nodeType":"YulFunctionCall","src":"1288:25:17"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1278:6:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1322:28:17","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1340:2:17","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"1344:1:17","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1336:3:17"},"nodeType":"YulFunctionCall","src":"1336:10:17"},{"kind":"number","nodeType":"YulLiteral","src":"1348:1:17","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1332:3:17"},"nodeType":"YulFunctionCall","src":"1332:18:17"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1326:2:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"1377:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1386:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1389:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1379:6:17"},"nodeType":"YulFunctionCall","src":"1379:12:17"},"nodeType":"YulExpressionStatement","src":"1379:12:17"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1365:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"1373:2:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1362:2:17"},"nodeType":"YulFunctionCall","src":"1362:14:17"},"nodeType":"YulIf","src":"1359:34:17"},{"nodeType":"YulVariableDeclaration","src":"1402:32:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1416:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"1427:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1412:3:17"},"nodeType":"YulFunctionCall","src":"1412:22:17"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"1406:2:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"1482:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1491:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1494:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1484:6:17"},"nodeType":"YulFunctionCall","src":"1484:12:17"},"nodeType":"YulExpressionStatement","src":"1484:12:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"1461:2:17"},{"kind":"number","nodeType":"YulLiteral","src":"1465:4:17","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1457:3:17"},"nodeType":"YulFunctionCall","src":"1457:13:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1472:7:17"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1453:3:17"},"nodeType":"YulFunctionCall","src":"1453:27:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1446:6:17"},"nodeType":"YulFunctionCall","src":"1446:35:17"},"nodeType":"YulIf","src":"1443:55:17"},{"nodeType":"YulVariableDeclaration","src":"1507:19:17","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"1523:2:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1517:5:17"},"nodeType":"YulFunctionCall","src":"1517:9:17"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"1511:2:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"1549:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1551:16:17"},"nodeType":"YulFunctionCall","src":"1551:18:17"},"nodeType":"YulExpressionStatement","src":"1551:18:17"}]},"condition":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1541:2:17"},{"name":"_1","nodeType":"YulIdentifier","src":"1545:2:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1538:2:17"},"nodeType":"YulFunctionCall","src":"1538:10:17"},"nodeType":"YulIf","src":"1535:36:17"},{"nodeType":"YulVariableDeclaration","src":"1580:23:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1600:2:17","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1594:5:17"},"nodeType":"YulFunctionCall","src":"1594:9:17"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1584:6:17","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1632:6:17"},{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1652:2:17"},{"kind":"number","nodeType":"YulLiteral","src":"1656:4:17","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1648:3:17"},"nodeType":"YulFunctionCall","src":"1648:13:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1667:2:17","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1663:3:17"},"nodeType":"YulFunctionCall","src":"1663:7:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1644:3:17"},"nodeType":"YulFunctionCall","src":"1644:27:17"},{"kind":"number","nodeType":"YulLiteral","src":"1673:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1640:3:17"},"nodeType":"YulFunctionCall","src":"1640:36:17"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"1612:19:17"},"nodeType":"YulFunctionCall","src":"1612:65:17"},"nodeType":"YulExpressionStatement","src":"1612:65:17"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1693:6:17"},{"name":"_3","nodeType":"YulIdentifier","src":"1701:2:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1686:6:17"},"nodeType":"YulFunctionCall","src":"1686:18:17"},"nodeType":"YulExpressionStatement","src":"1686:18:17"},{"body":{"nodeType":"YulBlock","src":"1750:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1759:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1762:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1752:6:17"},"nodeType":"YulFunctionCall","src":"1752:12:17"},"nodeType":"YulExpressionStatement","src":"1752:12:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"1727:2:17"},{"name":"_3","nodeType":"YulIdentifier","src":"1731:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1723:3:17"},"nodeType":"YulFunctionCall","src":"1723:11:17"},{"kind":"number","nodeType":"YulLiteral","src":"1736:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1719:3:17"},"nodeType":"YulFunctionCall","src":"1719:20:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1741:7:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1716:2:17"},"nodeType":"YulFunctionCall","src":"1716:33:17"},"nodeType":"YulIf","src":"1713:53:17"},{"expression":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"1814:2:17"},{"kind":"number","nodeType":"YulLiteral","src":"1818:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1810:3:17"},"nodeType":"YulFunctionCall","src":"1810:11:17"},{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1827:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"1835:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1823:3:17"},"nodeType":"YulFunctionCall","src":"1823:15:17"},{"name":"_3","nodeType":"YulIdentifier","src":"1840:2:17"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"1775:34:17"},"nodeType":"YulFunctionCall","src":"1775:68:17"},"nodeType":"YulExpressionStatement","src":"1775:68:17"},{"nodeType":"YulAssignment","src":"1852:16:17","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"1862:6:17"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1852:6:17"}]},{"nodeType":"YulAssignment","src":"1877:35:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1897:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"1908:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1893:3:17"},"nodeType":"YulFunctionCall","src":"1893:18:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1887:5:17"},"nodeType":"YulFunctionCall","src":"1887:25:17"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"1877:6:17"}]},{"nodeType":"YulAssignment","src":"1921:36:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1941:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"1952:3:17","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1937:3:17"},"nodeType":"YulFunctionCall","src":"1937:19:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1931:5:17"},"nodeType":"YulFunctionCall","src":"1931:26:17"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"1921:6:17"}]},{"nodeType":"YulAssignment","src":"1966:60:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2010:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"2021:3:17","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2006:3:17"},"nodeType":"YulFunctionCall","src":"2006:19:17"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"1976:29:17"},"nodeType":"YulFunctionCall","src":"1976:50:17"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"1966:6:17"}]},{"nodeType":"YulAssignment","src":"2035:36:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2055:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"2066:3:17","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2051:3:17"},"nodeType":"YulFunctionCall","src":"2051:19:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2045:5:17"},"nodeType":"YulFunctionCall","src":"2045:26:17"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"2035:6:17"}]},{"nodeType":"YulAssignment","src":"2080:36:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2100:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"2111:3:17","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2096:3:17"},"nodeType":"YulFunctionCall","src":"2096:19:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2090:5:17"},"nodeType":"YulFunctionCall","src":"2090:26:17"},"variableNames":[{"name":"value7","nodeType":"YulIdentifier","src":"2080:6:17"}]},{"nodeType":"YulAssignment","src":"2125:60:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2169:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"2180:3:17","type":"","value":"256"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2165:3:17"},"nodeType":"YulFunctionCall","src":"2165:19:17"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"2135:29:17"},"nodeType":"YulFunctionCall","src":"2135:50:17"},"variableNames":[{"name":"value8","nodeType":"YulIdentifier","src":"2125:6:17"}]},{"nodeType":"YulAssignment","src":"2194:60:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2238:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"2249:3:17","type":"","value":"288"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2234:3:17"},"nodeType":"YulFunctionCall","src":"2234:19:17"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"2204:29:17"},"nodeType":"YulFunctionCall","src":"2204:50:17"},"variableNames":[{"name":"value9","nodeType":"YulIdentifier","src":"2194:6:17"}]},{"nodeType":"YulAssignment","src":"2263:61:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2308:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"2319:3:17","type":"","value":"320"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2304:3:17"},"nodeType":"YulFunctionCall","src":"2304:19:17"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"2274:29:17"},"nodeType":"YulFunctionCall","src":"2274:50:17"},"variableNames":[{"name":"value10","nodeType":"YulIdentifier","src":"2263:7:17"}]}]},"name":"abi_decode_tuple_t_addresst_bytes32t_string_memory_ptrt_uint256t_uint256t_addresst_uint256t_uint256t_addresst_addresst_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"984:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"995:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1007:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1015:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1023:6:17","type":""},{"name":"value3","nodeType":"YulTypedName","src":"1031:6:17","type":""},{"name":"value4","nodeType":"YulTypedName","src":"1039:6:17","type":""},{"name":"value5","nodeType":"YulTypedName","src":"1047:6:17","type":""},{"name":"value6","nodeType":"YulTypedName","src":"1055:6:17","type":""},{"name":"value7","nodeType":"YulTypedName","src":"1063:6:17","type":""},{"name":"value8","nodeType":"YulTypedName","src":"1071:6:17","type":""},{"name":"value9","nodeType":"YulTypedName","src":"1079:6:17","type":""},{"name":"value10","nodeType":"YulTypedName","src":"1087:7:17","type":""}],"src":"837:1493:17"},{"body":{"nodeType":"YulBlock","src":"2509:179:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2526:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"2537:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2519:6:17"},"nodeType":"YulFunctionCall","src":"2519:21:17"},"nodeType":"YulExpressionStatement","src":"2519:21:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2560:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"2571:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2556:3:17"},"nodeType":"YulFunctionCall","src":"2556:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"2576:2:17","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2549:6:17"},"nodeType":"YulFunctionCall","src":"2549:30:17"},"nodeType":"YulExpressionStatement","src":"2549:30:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2599:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"2610:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2595:3:17"},"nodeType":"YulFunctionCall","src":"2595:18:17"},{"hexValue":"4f776e657220616464726573732063616e6e6f7420626520656d707479","kind":"string","nodeType":"YulLiteral","src":"2615:31:17","type":"","value":"Owner address cannot be empty"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2588:6:17"},"nodeType":"YulFunctionCall","src":"2588:59:17"},"nodeType":"YulExpressionStatement","src":"2588:59:17"},{"nodeType":"YulAssignment","src":"2656:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2668:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"2679:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2664:3:17"},"nodeType":"YulFunctionCall","src":"2664:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2656:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_5ce500c9dc2e59e02700829a3ac6c4c1e7fc183d658cfaf2fdd6892d9a845f30__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2486:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2500:4:17","type":""}],"src":"2335:353:17"},{"body":{"nodeType":"YulBlock","src":"2725:95:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2742:1:17","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2749:3:17","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2754:10:17","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2745:3:17"},"nodeType":"YulFunctionCall","src":"2745:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2735:6:17"},"nodeType":"YulFunctionCall","src":"2735:31:17"},"nodeType":"YulExpressionStatement","src":"2735:31:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2782:1:17","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2785:4:17","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2775:6:17"},"nodeType":"YulFunctionCall","src":"2775:15:17"},"nodeType":"YulExpressionStatement","src":"2775:15:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2806:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2809:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2799:6:17"},"nodeType":"YulFunctionCall","src":"2799:15:17"},"nodeType":"YulExpressionStatement","src":"2799:15:17"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"2693:127:17"},{"body":{"nodeType":"YulBlock","src":"2872:88:17","statements":[{"body":{"nodeType":"YulBlock","src":"2903:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"2905:16:17"},"nodeType":"YulFunctionCall","src":"2905:18:17"},"nodeType":"YulExpressionStatement","src":"2905:18:17"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2888:5:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2899:1:17","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2895:3:17"},"nodeType":"YulFunctionCall","src":"2895:6:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2885:2:17"},"nodeType":"YulFunctionCall","src":"2885:17:17"},"nodeType":"YulIf","src":"2882:43:17"},{"nodeType":"YulAssignment","src":"2934:20:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2945:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"2952:1:17","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2941:3:17"},"nodeType":"YulFunctionCall","src":"2941:13:17"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"2934:3:17"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2854:5:17","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"2864:3:17","type":""}],"src":"2825:135:17"},{"body":{"nodeType":"YulBlock","src":"3020:325:17","statements":[{"nodeType":"YulAssignment","src":"3030:22:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3044:1:17","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"3047:4:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3040:3:17"},"nodeType":"YulFunctionCall","src":"3040:12:17"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"3030:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"3061:38:17","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3091:4:17"},{"kind":"number","nodeType":"YulLiteral","src":"3097:1:17","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3087:3:17"},"nodeType":"YulFunctionCall","src":"3087:12:17"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"3065:18:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"3138:31:17","statements":[{"nodeType":"YulAssignment","src":"3140:27:17","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3154:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"3162:4:17","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3150:3:17"},"nodeType":"YulFunctionCall","src":"3150:17:17"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"3140:6:17"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"3118:18:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3111:6:17"},"nodeType":"YulFunctionCall","src":"3111:26:17"},"nodeType":"YulIf","src":"3108:61:17"},{"body":{"nodeType":"YulBlock","src":"3228:111:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3249:1:17","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3256:3:17","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3261:10:17","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3252:3:17"},"nodeType":"YulFunctionCall","src":"3252:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3242:6:17"},"nodeType":"YulFunctionCall","src":"3242:31:17"},"nodeType":"YulExpressionStatement","src":"3242:31:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3293:1:17","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3296:4:17","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3286:6:17"},"nodeType":"YulFunctionCall","src":"3286:15:17"},"nodeType":"YulExpressionStatement","src":"3286:15:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3321:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3324:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3314:6:17"},"nodeType":"YulFunctionCall","src":"3314:15:17"},"nodeType":"YulExpressionStatement","src":"3314:15:17"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"3184:18:17"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3207:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"3215:2:17","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3204:2:17"},"nodeType":"YulFunctionCall","src":"3204:14:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3181:2:17"},"nodeType":"YulFunctionCall","src":"3181:38:17"},"nodeType":"YulIf","src":"3178:161:17"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"3000:4:17","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"3009:6:17","type":""}],"src":"2965:380:17"},{"body":{"nodeType":"YulBlock","src":"3406:65:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3423:1:17","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"3426:3:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3416:6:17"},"nodeType":"YulFunctionCall","src":"3416:14:17"},"nodeType":"YulExpressionStatement","src":"3416:14:17"},{"nodeType":"YulAssignment","src":"3439:26:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3457:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3460:4:17","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"3447:9:17"},"nodeType":"YulFunctionCall","src":"3447:18:17"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"3439:4:17"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"3389:3:17","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"3397:4:17","type":""}],"src":"3350:121:17"},{"body":{"nodeType":"YulBlock","src":"3557:464:17","statements":[{"body":{"nodeType":"YulBlock","src":"3590:425:17","statements":[{"nodeType":"YulVariableDeclaration","src":"3604:11:17","value":{"kind":"number","nodeType":"YulLiteral","src":"3614:1:17","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3608:2:17","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"3635:2:17"},{"name":"array","nodeType":"YulIdentifier","src":"3639:5:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3628:6:17"},"nodeType":"YulFunctionCall","src":"3628:17:17"},"nodeType":"YulExpressionStatement","src":"3628:17:17"},{"nodeType":"YulVariableDeclaration","src":"3658:31:17","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"3680:2:17"},{"kind":"number","nodeType":"YulLiteral","src":"3684:4:17","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"3670:9:17"},"nodeType":"YulFunctionCall","src":"3670:19:17"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"3662:4:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3702:57:17","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3725:4:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3735:1:17","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"3742:10:17"},{"kind":"number","nodeType":"YulLiteral","src":"3754:2:17","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3738:3:17"},"nodeType":"YulFunctionCall","src":"3738:19:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3731:3:17"},"nodeType":"YulFunctionCall","src":"3731:27:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3721:3:17"},"nodeType":"YulFunctionCall","src":"3721:38:17"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"3706:11:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"3796:23:17","statements":[{"nodeType":"YulAssignment","src":"3798:19:17","value":{"name":"data","nodeType":"YulIdentifier","src":"3813:4:17"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"3798:11:17"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"3778:10:17"},{"kind":"number","nodeType":"YulLiteral","src":"3790:4:17","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3775:2:17"},"nodeType":"YulFunctionCall","src":"3775:20:17"},"nodeType":"YulIf","src":"3772:47:17"},{"nodeType":"YulVariableDeclaration","src":"3832:41:17","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3846:4:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3856:1:17","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"3863:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"3868:2:17","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3859:3:17"},"nodeType":"YulFunctionCall","src":"3859:12:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3852:3:17"},"nodeType":"YulFunctionCall","src":"3852:20:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3842:3:17"},"nodeType":"YulFunctionCall","src":"3842:31:17"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"3836:2:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3886:24:17","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"3899:11:17"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"3890:5:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"3984:21:17","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"3993:5:17"},{"name":"_1","nodeType":"YulIdentifier","src":"4000:2:17"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3986:6:17"},"nodeType":"YulFunctionCall","src":"3986:17:17"},"nodeType":"YulExpressionStatement","src":"3986:17:17"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"3934:5:17"},{"name":"_2","nodeType":"YulIdentifier","src":"3941:2:17"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3931:2:17"},"nodeType":"YulFunctionCall","src":"3931:13:17"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3945:26:17","statements":[{"nodeType":"YulAssignment","src":"3947:22:17","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"3960:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"3967:1:17","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3956:3:17"},"nodeType":"YulFunctionCall","src":"3956:13:17"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"3947:5:17"}]}]},"pre":{"nodeType":"YulBlock","src":"3927:3:17","statements":[]},"src":"3923:82:17"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"3573:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"3578:2:17","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3570:2:17"},"nodeType":"YulFunctionCall","src":"3570:11:17"},"nodeType":"YulIf","src":"3567:448:17"}]},"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"3529:5:17","type":""},{"name":"len","nodeType":"YulTypedName","src":"3536:3:17","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"3541:10:17","type":""}],"src":"3476:545:17"},{"body":{"nodeType":"YulBlock","src":"4111:81:17","statements":[{"nodeType":"YulAssignment","src":"4121:65:17","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"4136:4:17"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4154:1:17","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"4157:3:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4150:3:17"},"nodeType":"YulFunctionCall","src":"4150:11:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4167:1:17","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4163:3:17"},"nodeType":"YulFunctionCall","src":"4163:6:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"4146:3:17"},"nodeType":"YulFunctionCall","src":"4146:24:17"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4142:3:17"},"nodeType":"YulFunctionCall","src":"4142:29:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4132:3:17"},"nodeType":"YulFunctionCall","src":"4132:40:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4178:1:17","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"4181:3:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4174:3:17"},"nodeType":"YulFunctionCall","src":"4174:11:17"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"4129:2:17"},"nodeType":"YulFunctionCall","src":"4129:57:17"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"4121:4:17"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"4088:4:17","type":""},{"name":"len","nodeType":"YulTypedName","src":"4094:3:17","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"4102:4:17","type":""}],"src":"4026:166:17"},{"body":{"nodeType":"YulBlock","src":"4293:1256:17","statements":[{"nodeType":"YulVariableDeclaration","src":"4303:24:17","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4323:3:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4317:5:17"},"nodeType":"YulFunctionCall","src":"4317:10:17"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"4307:6:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"4370:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4372:16:17"},"nodeType":"YulFunctionCall","src":"4372:18:17"},"nodeType":"YulExpressionStatement","src":"4372:18:17"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"4342:6:17"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4358:2:17","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"4362:1:17","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4354:3:17"},"nodeType":"YulFunctionCall","src":"4354:10:17"},{"kind":"number","nodeType":"YulLiteral","src":"4366:1:17","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4350:3:17"},"nodeType":"YulFunctionCall","src":"4350:18:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4339:2:17"},"nodeType":"YulFunctionCall","src":"4339:30:17"},"nodeType":"YulIf","src":"4336:56:17"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4445:4:17"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4483:4:17"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"4477:5:17"},"nodeType":"YulFunctionCall","src":"4477:11:17"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"4451:25:17"},"nodeType":"YulFunctionCall","src":"4451:38:17"},{"name":"newLen","nodeType":"YulIdentifier","src":"4491:6:17"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"4401:43:17"},"nodeType":"YulFunctionCall","src":"4401:97:17"},"nodeType":"YulExpressionStatement","src":"4401:97:17"},{"nodeType":"YulVariableDeclaration","src":"4507:18:17","value":{"kind":"number","nodeType":"YulLiteral","src":"4524:1:17","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"4511:9:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4534:23:17","value":{"kind":"number","nodeType":"YulLiteral","src":"4553:4:17","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"4538:11:17","type":""}]},{"nodeType":"YulAssignment","src":"4566:24:17","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"4579:11:17"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"4566:9:17"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"4636:656:17","statements":[{"nodeType":"YulVariableDeclaration","src":"4650:35:17","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"4669:6:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4681:2:17","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4677:3:17"},"nodeType":"YulFunctionCall","src":"4677:7:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4665:3:17"},"nodeType":"YulFunctionCall","src":"4665:20:17"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"4654:7:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4698:49:17","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4742:4:17"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"4712:29:17"},"nodeType":"YulFunctionCall","src":"4712:35:17"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"4702:6:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4760:10:17","value":{"kind":"number","nodeType":"YulLiteral","src":"4769:1:17","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"4764:1:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"4847:172:17","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"4872:6:17"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4890:3:17"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"4895:9:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4886:3:17"},"nodeType":"YulFunctionCall","src":"4886:19:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4880:5:17"},"nodeType":"YulFunctionCall","src":"4880:26:17"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4865:6:17"},"nodeType":"YulFunctionCall","src":"4865:42:17"},"nodeType":"YulExpressionStatement","src":"4865:42:17"},{"nodeType":"YulAssignment","src":"4924:24:17","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"4938:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"4946:1:17","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4934:3:17"},"nodeType":"YulFunctionCall","src":"4934:14:17"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"4924:6:17"}]},{"nodeType":"YulAssignment","src":"4965:40:17","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"4982:9:17"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"4993:11:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4978:3:17"},"nodeType":"YulFunctionCall","src":"4978:27:17"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"4965:9:17"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4794:1:17"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"4797:7:17"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4791:2:17"},"nodeType":"YulFunctionCall","src":"4791:14:17"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"4806:28:17","statements":[{"nodeType":"YulAssignment","src":"4808:24:17","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4817:1:17"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"4820:11:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4813:3:17"},"nodeType":"YulFunctionCall","src":"4813:19:17"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"4808:1:17"}]}]},"pre":{"nodeType":"YulBlock","src":"4787:3:17","statements":[]},"src":"4783:236:17"},{"body":{"nodeType":"YulBlock","src":"5067:166:17","statements":[{"nodeType":"YulVariableDeclaration","src":"5085:43:17","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5112:3:17"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"5117:9:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5108:3:17"},"nodeType":"YulFunctionCall","src":"5108:19:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5102:5:17"},"nodeType":"YulFunctionCall","src":"5102:26:17"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"5089:9:17","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"5152:6:17"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"5164:9:17"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5191:1:17","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"5194:6:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5187:3:17"},"nodeType":"YulFunctionCall","src":"5187:14:17"},{"kind":"number","nodeType":"YulLiteral","src":"5203:3:17","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5183:3:17"},"nodeType":"YulFunctionCall","src":"5183:24:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5213:1:17","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"5209:3:17"},"nodeType":"YulFunctionCall","src":"5209:6:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"5179:3:17"},"nodeType":"YulFunctionCall","src":"5179:37:17"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"5175:3:17"},"nodeType":"YulFunctionCall","src":"5175:42:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5160:3:17"},"nodeType":"YulFunctionCall","src":"5160:58:17"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"5145:6:17"},"nodeType":"YulFunctionCall","src":"5145:74:17"},"nodeType":"YulExpressionStatement","src":"5145:74:17"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"5038:7:17"},{"name":"newLen","nodeType":"YulIdentifier","src":"5047:6:17"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5035:2:17"},"nodeType":"YulFunctionCall","src":"5035:19:17"},"nodeType":"YulIf","src":"5032:201:17"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"5253:4:17"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5267:1:17","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"5270:6:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5263:3:17"},"nodeType":"YulFunctionCall","src":"5263:14:17"},{"kind":"number","nodeType":"YulLiteral","src":"5279:1:17","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5259:3:17"},"nodeType":"YulFunctionCall","src":"5259:22:17"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"5246:6:17"},"nodeType":"YulFunctionCall","src":"5246:36:17"},"nodeType":"YulExpressionStatement","src":"5246:36:17"}]},"nodeType":"YulCase","src":"4629:663:17","value":{"kind":"number","nodeType":"YulLiteral","src":"4634:1:17","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"5309:234:17","statements":[{"nodeType":"YulVariableDeclaration","src":"5323:14:17","value":{"kind":"number","nodeType":"YulLiteral","src":"5336:1:17","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"5327:5:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"5372:67:17","statements":[{"nodeType":"YulAssignment","src":"5390:35:17","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5409:3:17"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"5414:9:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5405:3:17"},"nodeType":"YulFunctionCall","src":"5405:19:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5399:5:17"},"nodeType":"YulFunctionCall","src":"5399:26:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"5390:5:17"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"5353:6:17"},"nodeType":"YulIf","src":"5350:89:17"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"5459:4:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5518:5:17"},{"name":"newLen","nodeType":"YulIdentifier","src":"5525:6:17"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"5465:52:17"},"nodeType":"YulFunctionCall","src":"5465:67:17"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"5452:6:17"},"nodeType":"YulFunctionCall","src":"5452:81:17"},"nodeType":"YulExpressionStatement","src":"5452:81:17"}]},"nodeType":"YulCase","src":"5301:242:17","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"4609:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"4617:2:17","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4606:2:17"},"nodeType":"YulFunctionCall","src":"4606:14:17"},"nodeType":"YulSwitch","src":"4599:944:17"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"4278:4:17","type":""},{"name":"src","nodeType":"YulTypedName","src":"4284:3:17","type":""}],"src":"4197:1352:17"},{"body":{"nodeType":"YulBlock","src":"5728:223:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5745:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"5756:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5738:6:17"},"nodeType":"YulFunctionCall","src":"5738:21:17"},"nodeType":"YulExpressionStatement","src":"5738:21:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5779:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"5790:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5775:3:17"},"nodeType":"YulFunctionCall","src":"5775:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"5795:2:17","type":"","value":"33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5768:6:17"},"nodeType":"YulFunctionCall","src":"5768:30:17"},"nodeType":"YulExpressionStatement","src":"5768:30:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5818:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"5829:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5814:3:17"},"nodeType":"YulFunctionCall","src":"5814:18:17"},{"hexValue":"455243313135353a206d696e7420746f20746865207a65726f20616464726573","kind":"string","nodeType":"YulLiteral","src":"5834:34:17","type":"","value":"ERC1155: mint to the zero addres"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5807:6:17"},"nodeType":"YulFunctionCall","src":"5807:62:17"},"nodeType":"YulExpressionStatement","src":"5807:62:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5889:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"5900:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5885:3:17"},"nodeType":"YulFunctionCall","src":"5885:18:17"},{"hexValue":"73","kind":"string","nodeType":"YulLiteral","src":"5905:3:17","type":"","value":"s"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5878:6:17"},"nodeType":"YulFunctionCall","src":"5878:31:17"},"nodeType":"YulExpressionStatement","src":"5878:31:17"},{"nodeType":"YulAssignment","src":"5918:27:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5930:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"5941:3:17","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5926:3:17"},"nodeType":"YulFunctionCall","src":"5926:19:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5918:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5705:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5719:4:17","type":""}],"src":"5554:397:17"},{"body":{"nodeType":"YulBlock","src":"6004:77:17","statements":[{"nodeType":"YulAssignment","src":"6014:16:17","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6025:1:17"},{"name":"y","nodeType":"YulIdentifier","src":"6028:1:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6021:3:17"},"nodeType":"YulFunctionCall","src":"6021:9:17"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"6014:3:17"}]},{"body":{"nodeType":"YulBlock","src":"6053:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"6055:16:17"},"nodeType":"YulFunctionCall","src":"6055:18:17"},"nodeType":"YulExpressionStatement","src":"6055:18:17"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6045:1:17"},{"name":"sum","nodeType":"YulIdentifier","src":"6048:3:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6042:2:17"},"nodeType":"YulFunctionCall","src":"6042:10:17"},"nodeType":"YulIf","src":"6039:36:17"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"5987:1:17","type":""},{"name":"y","nodeType":"YulTypedName","src":"5990:1:17","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"5996:3:17","type":""}],"src":"5956:125:17"},{"body":{"nodeType":"YulBlock","src":"6215:119:17","statements":[{"nodeType":"YulAssignment","src":"6225:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6237:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"6248:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6233:3:17"},"nodeType":"YulFunctionCall","src":"6233:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6225:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6267:9:17"},{"name":"value0","nodeType":"YulIdentifier","src":"6278:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6260:6:17"},"nodeType":"YulFunctionCall","src":"6260:25:17"},"nodeType":"YulExpressionStatement","src":"6260:25:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6305:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"6316:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6301:3:17"},"nodeType":"YulFunctionCall","src":"6301:18:17"},{"name":"value1","nodeType":"YulIdentifier","src":"6321:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6294:6:17"},"nodeType":"YulFunctionCall","src":"6294:34:17"},"nodeType":"YulExpressionStatement","src":"6294:34:17"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6176:9:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6187:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6195:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6206:4:17","type":""}],"src":"6086:248:17"},{"body":{"nodeType":"YulBlock","src":"6371:95:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6388:1:17","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6395:3:17","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"6400:10:17","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6391:3:17"},"nodeType":"YulFunctionCall","src":"6391:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6381:6:17"},"nodeType":"YulFunctionCall","src":"6381:31:17"},"nodeType":"YulExpressionStatement","src":"6381:31:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6428:1:17","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6431:4:17","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6421:6:17"},"nodeType":"YulFunctionCall","src":"6421:15:17"},"nodeType":"YulExpressionStatement","src":"6421:15:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6452:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6455:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6445:6:17"},"nodeType":"YulFunctionCall","src":"6445:15:17"},"nodeType":"YulExpressionStatement","src":"6445:15:17"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"6339:127:17"},{"body":{"nodeType":"YulBlock","src":"6645:171:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6662:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"6673:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6655:6:17"},"nodeType":"YulFunctionCall","src":"6655:21:17"},"nodeType":"YulExpressionStatement","src":"6655:21:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6696:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"6707:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6692:3:17"},"nodeType":"YulFunctionCall","src":"6692:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"6712:2:17","type":"","value":"21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6685:6:17"},"nodeType":"YulFunctionCall","src":"6685:30:17"},"nodeType":"YulExpressionStatement","src":"6685:30:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6735:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"6746:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6731:3:17"},"nodeType":"YulFunctionCall","src":"6731:18:17"},{"hexValue":"5472616e73666572206e6f7420617070726f766564","kind":"string","nodeType":"YulLiteral","src":"6751:23:17","type":"","value":"Transfer not approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6724:6:17"},"nodeType":"YulFunctionCall","src":"6724:51:17"},"nodeType":"YulExpressionStatement","src":"6724:51:17"},{"nodeType":"YulAssignment","src":"6784:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6796:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"6807:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6792:3:17"},"nodeType":"YulFunctionCall","src":"6792:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6784:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_9bd124d272f06141b15552f4450bbed70049ce5ab0bcee1bad3c2f0f7ff9f544__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6622:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6636:4:17","type":""}],"src":"6471:345:17"},{"body":{"nodeType":"YulBlock","src":"6870:221:17","statements":[{"nodeType":"YulVariableDeclaration","src":"6880:26:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6900:5:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6894:5:17"},"nodeType":"YulFunctionCall","src":"6894:12:17"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"6884:6:17","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6922:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"6927:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6915:6:17"},"nodeType":"YulFunctionCall","src":"6915:19:17"},"nodeType":"YulExpressionStatement","src":"6915:19:17"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6982:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"6989:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6978:3:17"},"nodeType":"YulFunctionCall","src":"6978:16:17"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7000:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"7005:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6996:3:17"},"nodeType":"YulFunctionCall","src":"6996:14:17"},{"name":"length","nodeType":"YulIdentifier","src":"7012:6:17"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"6943:34:17"},"nodeType":"YulFunctionCall","src":"6943:76:17"},"nodeType":"YulExpressionStatement","src":"6943:76:17"},{"nodeType":"YulAssignment","src":"7028:57:17","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7043:3:17"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7056:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"7064:2:17","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7052:3:17"},"nodeType":"YulFunctionCall","src":"7052:15:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7073:2:17","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"7069:3:17"},"nodeType":"YulFunctionCall","src":"7069:7:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7048:3:17"},"nodeType":"YulFunctionCall","src":"7048:29:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7039:3:17"},"nodeType":"YulFunctionCall","src":"7039:39:17"},{"kind":"number","nodeType":"YulLiteral","src":"7080:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7035:3:17"},"nodeType":"YulFunctionCall","src":"7035:50:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7028:3:17"}]}]},"name":"abi_encode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6847:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6854:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6862:3:17","type":""}],"src":"6821:270:17"},{"body":{"nodeType":"YulBlock","src":"7327:329:17","statements":[{"nodeType":"YulVariableDeclaration","src":"7337:29:17","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7355:3:17","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"7360:1:17","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7351:3:17"},"nodeType":"YulFunctionCall","src":"7351:11:17"},{"kind":"number","nodeType":"YulLiteral","src":"7364:1:17","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7347:3:17"},"nodeType":"YulFunctionCall","src":"7347:19:17"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"7341:2:17","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7382:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7397:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"7405:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7393:3:17"},"nodeType":"YulFunctionCall","src":"7393:15:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7375:6:17"},"nodeType":"YulFunctionCall","src":"7375:34:17"},"nodeType":"YulExpressionStatement","src":"7375:34:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7429:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"7440:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7425:3:17"},"nodeType":"YulFunctionCall","src":"7425:18:17"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"7449:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"7457:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7445:3:17"},"nodeType":"YulFunctionCall","src":"7445:15:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7418:6:17"},"nodeType":"YulFunctionCall","src":"7418:43:17"},"nodeType":"YulExpressionStatement","src":"7418:43:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7481:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"7492:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7477:3:17"},"nodeType":"YulFunctionCall","src":"7477:18:17"},{"name":"value2","nodeType":"YulIdentifier","src":"7497:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7470:6:17"},"nodeType":"YulFunctionCall","src":"7470:34:17"},"nodeType":"YulExpressionStatement","src":"7470:34:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7524:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"7535:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7520:3:17"},"nodeType":"YulFunctionCall","src":"7520:18:17"},{"name":"value3","nodeType":"YulIdentifier","src":"7540:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7513:6:17"},"nodeType":"YulFunctionCall","src":"7513:34:17"},"nodeType":"YulExpressionStatement","src":"7513:34:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7567:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"7578:3:17","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7563:3:17"},"nodeType":"YulFunctionCall","src":"7563:19:17"},{"kind":"number","nodeType":"YulLiteral","src":"7584:3:17","type":"","value":"160"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7556:6:17"},"nodeType":"YulFunctionCall","src":"7556:32:17"},"nodeType":"YulExpressionStatement","src":"7556:32:17"},{"nodeType":"YulAssignment","src":"7597:53:17","value":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"7622:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7634:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"7645:3:17","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7630:3:17"},"nodeType":"YulFunctionCall","src":"7630:19:17"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"7605:16:17"},"nodeType":"YulFunctionCall","src":"7605:45:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7597:4:17"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7264:9:17","type":""},{"name":"value4","nodeType":"YulTypedName","src":"7275:6:17","type":""},{"name":"value3","nodeType":"YulTypedName","src":"7283:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7291:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7299:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7307:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7318:4:17","type":""}],"src":"7096:560:17"},{"body":{"nodeType":"YulBlock","src":"7741:210:17","statements":[{"body":{"nodeType":"YulBlock","src":"7787:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7796:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7799:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7789:6:17"},"nodeType":"YulFunctionCall","src":"7789:12:17"},"nodeType":"YulExpressionStatement","src":"7789:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7762:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"7771:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7758:3:17"},"nodeType":"YulFunctionCall","src":"7758:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"7783:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7754:3:17"},"nodeType":"YulFunctionCall","src":"7754:32:17"},"nodeType":"YulIf","src":"7751:52:17"},{"nodeType":"YulVariableDeclaration","src":"7812:29:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7831:9:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7825:5:17"},"nodeType":"YulFunctionCall","src":"7825:16:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"7816:5:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"7905:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7914:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7917:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7907:6:17"},"nodeType":"YulFunctionCall","src":"7907:12:17"},"nodeType":"YulExpressionStatement","src":"7907:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7863:5:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7874:5:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7885:3:17","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"7890:10:17","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7881:3:17"},"nodeType":"YulFunctionCall","src":"7881:20:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7870:3:17"},"nodeType":"YulFunctionCall","src":"7870:32:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"7860:2:17"},"nodeType":"YulFunctionCall","src":"7860:43:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7853:6:17"},"nodeType":"YulFunctionCall","src":"7853:51:17"},"nodeType":"YulIf","src":"7850:71:17"},{"nodeType":"YulAssignment","src":"7930:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"7940:5:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7930:6:17"}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7707:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7718:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7730:6:17","type":""}],"src":"7661:290:17"},{"body":{"nodeType":"YulBlock","src":"7999:136:17","statements":[{"body":{"nodeType":"YulBlock","src":"8044:85:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8073:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8076:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8079:1:17","type":"","value":"4"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"8058:14:17"},"nodeType":"YulFunctionCall","src":"8058:23:17"},"nodeType":"YulExpressionStatement","src":"8058:23:17"},{"nodeType":"YulAssignment","src":"8094:25:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8105:3:17","type":"","value":"224"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8116:1:17","type":"","value":"0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8110:5:17"},"nodeType":"YulFunctionCall","src":"8110:8:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"8101:3:17"},"nodeType":"YulFunctionCall","src":"8101:18:17"},"variableNames":[{"name":"sig","nodeType":"YulIdentifier","src":"8094:3:17"}]}]},"condition":{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"8015:14:17"},"nodeType":"YulFunctionCall","src":"8015:16:17"},{"kind":"number","nodeType":"YulLiteral","src":"8033:1:17","type":"","value":"3"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8012:2:17"},"nodeType":"YulFunctionCall","src":"8012:23:17"},"nodeType":"YulIf","src":"8009:120:17"}]},"name":"return_data_selector","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"sig","nodeType":"YulTypedName","src":"7991:3:17","type":""}],"src":"7956:179:17"},{"body":{"nodeType":"YulBlock","src":"8187:624:17","statements":[{"body":{"nodeType":"YulBlock","src":"8227:9:17","statements":[{"nodeType":"YulLeave","src":"8229:5:17"}]},"condition":{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"8203:14:17"},"nodeType":"YulFunctionCall","src":"8203:16:17"},{"kind":"number","nodeType":"YulLiteral","src":"8221:4:17","type":"","value":"0x44"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8200:2:17"},"nodeType":"YulFunctionCall","src":"8200:26:17"},"nodeType":"YulIf","src":"8197:39:17"},{"nodeType":"YulVariableDeclaration","src":"8245:21:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8263:2:17","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8257:5:17"},"nodeType":"YulFunctionCall","src":"8257:9:17"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"8249:4:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8275:16:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8289:1:17","type":"","value":"3"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"8285:3:17"},"nodeType":"YulFunctionCall","src":"8285:6:17"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"8279:2:17","type":""}]},{"expression":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"8315:4:17"},{"kind":"number","nodeType":"YulLiteral","src":"8321:1:17","type":"","value":"4"},{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"8328:14:17"},"nodeType":"YulFunctionCall","src":"8328:16:17"},{"name":"_1","nodeType":"YulIdentifier","src":"8346:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8324:3:17"},"nodeType":"YulFunctionCall","src":"8324:25:17"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"8300:14:17"},"nodeType":"YulFunctionCall","src":"8300:50:17"},"nodeType":"YulExpressionStatement","src":"8300:50:17"},{"nodeType":"YulVariableDeclaration","src":"8359:25:17","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"8379:4:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8373:5:17"},"nodeType":"YulFunctionCall","src":"8373:11:17"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8363:6:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8393:26:17","value":{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"8403:14:17"},"nodeType":"YulFunctionCall","src":"8403:16:17"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"8397:2:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8428:28:17","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8446:2:17","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"8450:1:17","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8442:3:17"},"nodeType":"YulFunctionCall","src":"8442:10:17"},{"kind":"number","nodeType":"YulLiteral","src":"8454:1:17","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8438:3:17"},"nodeType":"YulFunctionCall","src":"8438:18:17"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"8432:2:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"8514:9:17","statements":[{"nodeType":"YulLeave","src":"8516:5:17"}]},"condition":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8474:6:17"},{"name":"_3","nodeType":"YulIdentifier","src":"8482:2:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8471:2:17"},"nodeType":"YulFunctionCall","src":"8471:14:17"},{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8494:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"8502:4:17","type":"","value":"0x24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8490:3:17"},"nodeType":"YulFunctionCall","src":"8490:17:17"},{"name":"_2","nodeType":"YulIdentifier","src":"8509:2:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8487:2:17"},"nodeType":"YulFunctionCall","src":"8487:25:17"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"8468:2:17"},"nodeType":"YulFunctionCall","src":"8468:45:17"},"nodeType":"YulIf","src":"8465:58:17"},{"nodeType":"YulVariableDeclaration","src":"8532:28:17","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"8547:4:17"},{"name":"offset","nodeType":"YulIdentifier","src":"8553:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8543:3:17"},"nodeType":"YulFunctionCall","src":"8543:17:17"},"variables":[{"name":"msg","nodeType":"YulTypedName","src":"8536:3:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8569:24:17","value":{"arguments":[{"name":"msg","nodeType":"YulIdentifier","src":"8589:3:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8583:5:17"},"nodeType":"YulFunctionCall","src":"8583:10:17"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"8573:6:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"8620:9:17","statements":[{"nodeType":"YulLeave","src":"8622:5:17"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8608:6:17"},{"name":"_3","nodeType":"YulIdentifier","src":"8616:2:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8605:2:17"},"nodeType":"YulFunctionCall","src":"8605:14:17"},"nodeType":"YulIf","src":"8602:27:17"},{"body":{"nodeType":"YulBlock","src":"8711:9:17","statements":[{"nodeType":"YulLeave","src":"8713:5:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"msg","nodeType":"YulIdentifier","src":"8652:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"8657:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8648:3:17"},"nodeType":"YulFunctionCall","src":"8648:16:17"},{"kind":"number","nodeType":"YulLiteral","src":"8666:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8644:3:17"},"nodeType":"YulFunctionCall","src":"8644:27:17"},{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"8681:4:17"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"8687:14:17"},"nodeType":"YulFunctionCall","src":"8687:16:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8677:3:17"},"nodeType":"YulFunctionCall","src":"8677:27:17"},{"name":"_1","nodeType":"YulIdentifier","src":"8706:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8673:3:17"},"nodeType":"YulFunctionCall","src":"8673:36:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8641:2:17"},"nodeType":"YulFunctionCall","src":"8641:69:17"},"nodeType":"YulIf","src":"8638:82:17"},{"expression":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"8749:4:17"},{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8763:6:17"},{"name":"length","nodeType":"YulIdentifier","src":"8771:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8759:3:17"},"nodeType":"YulFunctionCall","src":"8759:19:17"},{"kind":"number","nodeType":"YulLiteral","src":"8780:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8755:3:17"},"nodeType":"YulFunctionCall","src":"8755:30:17"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"8729:19:17"},"nodeType":"YulFunctionCall","src":"8729:57:17"},"nodeType":"YulExpressionStatement","src":"8729:57:17"},{"nodeType":"YulAssignment","src":"8795:10:17","value":{"name":"msg","nodeType":"YulIdentifier","src":"8802:3:17"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"8795:3:17"}]}]},"name":"try_decode_error_message","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"8179:3:17","type":""}],"src":"8140:671:17"},{"body":{"nodeType":"YulBlock","src":"8937:98:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8954:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"8965:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8947:6:17"},"nodeType":"YulFunctionCall","src":"8947:21:17"},"nodeType":"YulExpressionStatement","src":"8947:21:17"},{"nodeType":"YulAssignment","src":"8977:52:17","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9002:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9014:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"9025:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9010:3:17"},"nodeType":"YulFunctionCall","src":"9010:18:17"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"8985:16:17"},"nodeType":"YulFunctionCall","src":"8985:44:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8977:4:17"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8906:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8917:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8928:4:17","type":""}],"src":"8816:219:17"},{"body":{"nodeType":"YulBlock","src":"9214:242:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9231:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"9242:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9224:6:17"},"nodeType":"YulFunctionCall","src":"9224:21:17"},"nodeType":"YulExpressionStatement","src":"9224:21:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9265:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"9276:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9261:3:17"},"nodeType":"YulFunctionCall","src":"9261:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"9281:2:17","type":"","value":"52"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9254:6:17"},"nodeType":"YulFunctionCall","src":"9254:30:17"},"nodeType":"YulExpressionStatement","src":"9254:30:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9304:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"9315:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9300:3:17"},"nodeType":"YulFunctionCall","src":"9300:18:17"},{"hexValue":"455243313135353a207472616e7366657220746f206e6f6e2d45524331313535","kind":"string","nodeType":"YulLiteral","src":"9320:34:17","type":"","value":"ERC1155: transfer to non-ERC1155"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9293:6:17"},"nodeType":"YulFunctionCall","src":"9293:62:17"},"nodeType":"YulExpressionStatement","src":"9293:62:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9375:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"9386:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9371:3:17"},"nodeType":"YulFunctionCall","src":"9371:18:17"},{"hexValue":"526563656976657220696d706c656d656e746572","kind":"string","nodeType":"YulLiteral","src":"9391:22:17","type":"","value":"Receiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9364:6:17"},"nodeType":"YulFunctionCall","src":"9364:50:17"},"nodeType":"YulExpressionStatement","src":"9364:50:17"},{"nodeType":"YulAssignment","src":"9423:27:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9435:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"9446:3:17","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9431:3:17"},"nodeType":"YulFunctionCall","src":"9431:19:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9423:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9191:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9205:4:17","type":""}],"src":"9040:416:17"},{"body":{"nodeType":"YulBlock","src":"9635:230:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9652:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"9663:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9645:6:17"},"nodeType":"YulFunctionCall","src":"9645:21:17"},"nodeType":"YulExpressionStatement","src":"9645:21:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9686:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"9697:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9682:3:17"},"nodeType":"YulFunctionCall","src":"9682:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"9702:2:17","type":"","value":"40"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9675:6:17"},"nodeType":"YulFunctionCall","src":"9675:30:17"},"nodeType":"YulExpressionStatement","src":"9675:30:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9725:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"9736:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9721:3:17"},"nodeType":"YulFunctionCall","src":"9721:18:17"},{"hexValue":"455243313135353a204552433131353552656365697665722072656a65637465","kind":"string","nodeType":"YulLiteral","src":"9741:34:17","type":"","value":"ERC1155: ERC1155Receiver rejecte"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9714:6:17"},"nodeType":"YulFunctionCall","src":"9714:62:17"},"nodeType":"YulExpressionStatement","src":"9714:62:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9796:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"9807:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9792:3:17"},"nodeType":"YulFunctionCall","src":"9792:18:17"},{"hexValue":"6420746f6b656e73","kind":"string","nodeType":"YulLiteral","src":"9812:10:17","type":"","value":"d tokens"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9785:6:17"},"nodeType":"YulFunctionCall","src":"9785:38:17"},"nodeType":"YulExpressionStatement","src":"9785:38:17"},{"nodeType":"YulAssignment","src":"9832:27:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9844:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"9855:3:17","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9840:3:17"},"nodeType":"YulFunctionCall","src":"9840:19:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9832:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9612:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9626:4:17","type":""}],"src":"9461:404:17"},{"body":{"nodeType":"YulBlock","src":"9971:102:17","statements":[{"nodeType":"YulAssignment","src":"9981:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9993:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"10004:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9989:3:17"},"nodeType":"YulFunctionCall","src":"9989:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9981:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10023:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10038:6:17"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10054:3:17","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"10059:1:17","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"10050:3:17"},"nodeType":"YulFunctionCall","src":"10050:11:17"},{"kind":"number","nodeType":"YulLiteral","src":"10063:1:17","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10046:3:17"},"nodeType":"YulFunctionCall","src":"10046:19:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10034:3:17"},"nodeType":"YulFunctionCall","src":"10034:32:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10016:6:17"},"nodeType":"YulFunctionCall","src":"10016:51:17"},"nodeType":"YulExpressionStatement","src":"10016:51:17"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9940:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9951:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9962:4:17","type":""}],"src":"9870:203:17"},{"body":{"nodeType":"YulBlock","src":"10156:199:17","statements":[{"body":{"nodeType":"YulBlock","src":"10202:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10211:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10214:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10204:6:17"},"nodeType":"YulFunctionCall","src":"10204:12:17"},"nodeType":"YulExpressionStatement","src":"10204:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10177:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"10186:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10173:3:17"},"nodeType":"YulFunctionCall","src":"10173:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"10198:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10169:3:17"},"nodeType":"YulFunctionCall","src":"10169:32:17"},"nodeType":"YulIf","src":"10166:52:17"},{"nodeType":"YulVariableDeclaration","src":"10227:29:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10246:9:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10240:5:17"},"nodeType":"YulFunctionCall","src":"10240:16:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"10231:5:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"10309:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10318:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10321:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10311:6:17"},"nodeType":"YulFunctionCall","src":"10311:12:17"},"nodeType":"YulExpressionStatement","src":"10311:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10278:5:17"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10299:5:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10292:6:17"},"nodeType":"YulFunctionCall","src":"10292:13:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10285:6:17"},"nodeType":"YulFunctionCall","src":"10285:21:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"10275:2:17"},"nodeType":"YulFunctionCall","src":"10275:32:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10268:6:17"},"nodeType":"YulFunctionCall","src":"10268:40:17"},"nodeType":"YulIf","src":"10265:60:17"},{"nodeType":"YulAssignment","src":"10334:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"10344:5:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10334:6:17"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10122:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10133:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10145:6:17","type":""}],"src":"10078:277:17"}]},"contents":"{\n    { }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function finalize_allocation(memPtr, size)\n    {\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_decode_tuple_t_addresst_bytes32t_string_memory_ptrt_uint256t_uint256t_addresst_uint256t_uint256t_addresst_addresst_address_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10\n    {\n        if slt(sub(dataEnd, headStart), 352) { revert(0, 0) }\n        value0 := abi_decode_address_fromMemory(headStart)\n        value1 := mload(add(headStart, 32))\n        let offset := mload(add(headStart, 64))\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := mload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let memPtr := mload(64)\n        finalize_allocation(memPtr, add(and(add(_3, 0x1f), not(31)), 32))\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        copy_memory_to_memory_with_cleanup(add(_2, 32), add(memPtr, 32), _3)\n        value2 := memPtr\n        value3 := mload(add(headStart, 96))\n        value4 := mload(add(headStart, 128))\n        value5 := abi_decode_address_fromMemory(add(headStart, 160))\n        value6 := mload(add(headStart, 192))\n        value7 := mload(add(headStart, 224))\n        value8 := abi_decode_address_fromMemory(add(headStart, 256))\n        value9 := abi_decode_address_fromMemory(add(headStart, 288))\n        value10 := abi_decode_address_fromMemory(add(headStart, 320))\n    }\n    function abi_encode_tuple_t_stringliteral_5ce500c9dc2e59e02700829a3ac6c4c1e7fc183d658cfaf2fdd6892d9a845f30__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Owner address cannot be empty\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC1155: mint to the zero addres\")\n        mstore(add(headStart, 96), \"s\")\n        tail := add(headStart, 128)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_9bd124d272f06141b15552f4450bbed70049ce5ab0bcee1bad3c2f0f7ff9f544__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"Transfer not approved\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_bytes(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), 160)\n        tail := abi_encode_bytes(value4, add(headStart, 160))\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n        value0 := value\n    }\n    function return_data_selector() -> sig\n    {\n        if gt(returndatasize(), 3)\n        {\n            returndatacopy(0, 0, 4)\n            sig := shr(224, mload(0))\n        }\n    }\n    function try_decode_error_message() -> ret\n    {\n        if lt(returndatasize(), 0x44) { leave }\n        let data := mload(64)\n        let _1 := not(3)\n        returndatacopy(data, 4, add(returndatasize(), _1))\n        let offset := mload(data)\n        let _2 := returndatasize()\n        let _3 := sub(shl(64, 1), 1)\n        if or(gt(offset, _3), gt(add(offset, 0x24), _2)) { leave }\n        let msg := add(data, offset)\n        let length := mload(msg)\n        if gt(length, _3) { leave }\n        if gt(add(add(msg, length), 0x20), add(add(data, returndatasize()), _1)) { leave }\n        finalize_allocation(data, add(add(offset, length), 0x20))\n        ret := msg\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_bytes(value0, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 52)\n        mstore(add(headStart, 64), \"ERC1155: transfer to non-ERC1155\")\n        mstore(add(headStart, 96), \"Receiver implementer\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 40)\n        mstore(add(headStart, 64), \"ERC1155: ERC1155Receiver rejecte\")\n        mstore(add(headStart, 96), \"d tokens\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n}","id":17,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b50604051620032e6380380620032e68339810160408190526200003491620006d0565b8862000040816200014e565b506001600160a01b038b166200009d5760405162461bcd60e51b815260206004820152601d60248201527f4f776e657220616464726573732063616e6e6f7420626520656d70747900000060448201526064015b60405180910390fd5b60068054620000d1913391906000620000b6836200081c565b909155506040805160208101909152600081528b9062000160565b620000de6000336200028f565b600499909955600893909355600991909155600793909355600d80546001600160a01b03199081166001600160a01b0393841617909155600b8054821693831693909317909255600a8054831693821693909317909255600c805490911691909416179092555062000b48915050565b60026200015c8282620008c3565b5050565b6001600160a01b038416620001c25760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b606482015260840162000094565b336000620001d0856200029b565b90506000620001df856200029b565b9050620001f283600089858589620002e9565b6000868152602081815260408083206001600160a01b038b16845290915281208054879290620002249084906200098f565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4620002868360008989898962000361565b50505050505050565b6200015c828262000519565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110620002d857620002d8620009a5565b602090810291909101015292915050565b620002f58587620005bd565b620003435760405162461bcd60e51b815260206004820152601560248201527f5472616e73666572206e6f7420617070726f7665640000000000000000000000604482015260640162000094565b620003598686868686866001600160e01b038716565b505050505050565b6001600160a01b0384163b15620003595760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190620003a89089908990889088908890600401620009e9565b6020604051808303816000875af1925050508015620003e6575060408051601f3d908101601f19168201909252620003e39181019062000a30565b60015b620004a657620003f562000a63565b806308c379a0036200043557506200040c62000a80565b8062000419575062000437565b8060405162461bcd60e51b815260040162000094919062000b0f565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560448201527f526563656976657220696d706c656d656e746572000000000000000000000000606482015260840162000094565b6001600160e01b0319811663f23a6e6160e01b14620002865760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b606482015260840162000094565b60008281526003602090815260408083206001600160a01b038516845290915290205460ff166200015c5760008281526003602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620005793390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600b54604051630debfda360e41b81526001600160a01b038381166004830152600092169063debfda3090602401602060405180830381865afa15801562000609573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200062f919062000b24565b156200063e5750600162000642565b5060005b92915050565b80516001600160a01b03811681146200066057600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b0381118282101715620006a357620006a362000665565b6040525050565b60005b83811015620006c7578181015183820152602001620006ad565b50506000910152565b60008060008060008060008060008060006101608c8e031215620006f357600080fd5b620006fe8c62000648565b60208d015160408e0151919c509a506001600160401b03808211156200072357600080fd5b818e0191508e601f8301126200073857600080fd5b8151818111156200074d576200074d62000665565b604051915062000768601f8201601f1916602001836200067b565b8082528f60208285010111156200077e57600080fd5b62000791816020840160208601620006aa565b50809a50505060608c0151975060808c01519650620007b360a08d0162000648565b955060c08c0151945060e08c01519350620007d26101008d0162000648565b9250620007e36101208d0162000648565b9150620007f46101408d0162000648565b90509295989b509295989b9093969950565b634e487b7160e01b600052601160045260246000fd5b60006001820162000831576200083162000806565b5060010190565b600181811c908216806200084d57607f821691505b6020821081036200086e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620008be57600081815260208120601f850160051c810160208610156200089d5750805b601f850160051c820191505b818110156200035957828155600101620008a9565b505050565b81516001600160401b03811115620008df57620008df62000665565b620008f781620008f0845462000838565b8462000874565b602080601f8311600181146200092f5760008415620009165750858301515b600019600386901b1c1916600185901b17855562000359565b600085815260208120601f198616915b8281101562000960578886015182559484019460019091019084016200093f565b50858210156200097f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8082018082111562000642576200064262000806565b634e487b7160e01b600052603260045260246000fd5b60008151808452620009d5816020860160208601620006aa565b601f01601f19169290920160200192915050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009062000a2590830184620009bb565b979650505050505050565b60006020828403121562000a4357600080fd5b81516001600160e01b03198116811462000a5c57600080fd5b9392505050565b600060033d111562000a7d5760046000803e5060005160e01c5b90565b600060443d101562000a8f5790565b6040516003193d81016004833e81513d6001600160401b03808311602484018310171562000abf57505050505090565b828501915081518181111562000ad85750505050505090565b843d870101602082850101111562000af35750505050505090565b62000b04602082860101876200067b565b509095945050505050565b60208152600062000a5c6020830184620009bb565b60006020828403121562000b3757600080fd5b8151801515811462000a5c57600080fd5b61278e8062000b586000396000f3fe608060405234801561001057600080fd5b50600436106101ce5760003560e01c80634e1273f411610104578063c0883b92116100a2578063e138818c11610071578063e138818c14610406578063e985e9c514610419578063ef0d45721461042c578063f242432a1461043f57600080fd5b8063c0883b92146103ba578063c3ae2b78146103cd578063c55dae63146103e0578063d547741f146103f357600080fd5b80638abdf5aa116100de5780638abdf5aa1461038357806391d148541461038c578063a217fddf1461039f578063a22cb465146103a757600080fd5b80634e1273f4146103475780637b1b1de6146103675780637cb647591461037057600080fd5b806326232a2e116101715780632ecc61601161014b5780632ecc6160146102eb5780632f2ff15d1461030e57806336568abe146103215780633e352e621461033457600080fd5b806326232a2e146102c45780632eb2c2d6146102cd5780632eb4a7ab146102e257600080fd5b806307bd0265116101ad57806307bd02651461022f5780630e89341c14610256578063207f185014610276578063248a9ca3146102a157600080fd5b8062fdd58e146101d357806301ffc9a7146101f9578063069824fb1461021c575b600080fd5b6101e66101e1366004611b96565b610452565b6040519081526020015b60405180910390f35b61020c610207366004611bd8565b6104eb565b60405190151581526020016101f0565b61020c61022a366004611c40565b610505565b6101e67fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e6381565b610269610264366004611c81565b610589565b6040516101f09190611cea565b600c54610289906001600160a01b031681565b6040516001600160a01b0390911681526020016101f0565b6101e66102af366004611c81565b60009081526003602052604090206001015490565b6101e660095481565b6102e06102db366004611e46565b61061d565b005b6101e660045481565b61020c6102f9366004611c81565b60056020526000908152604090205460ff1681565b6102e061031c366004611ef3565b610669565b6102e061032f366004611ef3565b610693565b6102e0610342366004611f23565b610711565b61035a610355366004611f9a565b610bfd565b6040516101f091906120a1565b6101e660075481565b6102e061037e366004611c81565b610d26565b6101e660085481565b61020c61039a366004611ef3565b610d37565b6101e6600081565b6102e06103b53660046120c2565b610d62565b600b54610289906001600160a01b031681565b6102e06103db3660046120f0565b610d6d565b600a54610289906001600160a01b031681565b6102e0610401366004611ef3565b610e88565b600d54610289906001600160a01b031681565b61020c61042736600461215f565b610ead565b6102e061043a36600461218d565b610f32565b6102e061044d3660046121aa565b610f60565b60006001600160a01b0383166104c25760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006104f682610fa5565b806104e557506104e582610ff5565b6040516bffffffffffffffffffffffff193360601b166020820152600090819060340160405160208183030381529060405280519060200120905061058184848080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050600454915084905061101a565b949350505050565b60606002805461059890612212565b80601f01602080910402602001604051908101604052809291908181526020018280546105c490612212565b80156106115780601f106105e657610100808354040283529160200191610611565b820191906000526020600020905b8154815290600101906020018083116105f457829003601f168201915b50505050509050919050565b6001600160a01b03851633148061063957506106398533610ead565b6106555760405162461bcd60e51b81526004016104b99061224c565b6106628585858585611030565b5050505050565b6000828152600360205260409020600101546106848161121b565b61068e8383611228565b505050565b6001600160a01b03811633146107035760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016104b9565b61070d82826112ae565b5050565b600b54604051630debfda360e41b81523360048201526001600160a01b039091169063debfda3090602401602060405180830381865afa158015610759573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077d919061229a565b6107d55760405162461bcd60e51b8152602060048201526024808201527f43616c6c6572206973206e6f7420616e20617574686f72697a656420657865636044820152633aba37b960e11b60648201526084016104b9565b60005b82811015610ba05760008080808785886107f38260686122cd565b92610800939291906122e0565b81019061080d919061230a565b9350935093509350806108208484610452565b10156108795760405162461bcd60e51b815260206004820152602260248201527f53656c6c657220646f6573206e6f74206861766520656e6f75676820746f6b656044820152616e7360f01b60648201526084016104b9565b6000600754826108899190612350565b9050600060646008548361089d9190612350565b6108a79190612367565b905060006064600954846108bb9190612350565b6108c59190612367565b90506000816108d484866122cd565b6108de91906122cd565b600c54600a546040516330ea258b60e21b81526001600160a01b038c811660048301529182166024820152929350839291169063c3a8962c90604401602060405180830381865afa158015610937573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095b9190612389565b10156109b35760405162461bcd60e51b815260206004820152602160248201527f427579657220646f6573206e6f74206861766520656e6f75676820746f6b656e6044820152607360f81b60648201526084016104b9565b60408051600280825260608201835260009260208301908036833701905050905088816000815181106109e8576109e86123a2565b60200260200101906001600160a01b031690816001600160a01b0316815250508881600181518110610a1c57610a1c6123a2565b6001600160a01b039290921660209283029190910182015260408051600280825260608201835260009391929091830190803683370190505090508881600081518110610a6b57610a6b6123a2565b6001600160a01b039283166020918202929092010152600d54825191169082906001908110610a9c57610a9c6123a2565b6001600160a01b039290921660209283029190910182015260408051600280825260608201835260009391929091830190803683370190505090508581600081518110610aeb57610aeb6123a2565b6020026020010181815250508481600181518110610b0b57610b0b6123a2565b6020908102919091010152600c54600a54604051630e10644160e21b81526001600160a01b0392831692633841910492610b4f9288928892169087906004016123f1565b600060405180830381600087803b158015610b6957600080fd5b505af1158015610b7d573d6000803e3d6000fd5b505050505050505050505050505050606881610b9991906122cd565b90506107d8565b5060008383604051610bb3929190612444565b604080519182900382208083524260208401529250839133917f78202e946262627c432f6c5b92fee2a7224c9aabdb3c71f747fccbad2fb470a4910160405180910390a350505050565b60608151835114610c625760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016104b9565b600083516001600160401b03811115610c7d57610c7d611cfd565b604051908082528060200260200182016040528015610ca6578160200160208202803683370190505b50905060005b8451811015610d1e57610cf1858281518110610cca57610cca6123a2565b6020026020010151858381518110610ce457610ce46123a2565b6020026020010151610452565b828281518110610d0357610d036123a2565b6020908102919091010152610d1781612454565b9050610cac565b509392505050565b6000610d318161121b565b50600455565b60009182526003602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61070d338383611315565b60065460008181526005602052604090205460ff1615610ddd5760405162461bcd60e51b815260206004820152602560248201527f546f6b656e2069732063757272656e746c79206c6f636b656420666f72206d696044820152646e74696e6760d81b60648201526084016104b9565b610de78383610505565b610e335760405162461bcd60e51b815260206004820152601960248201527f43616c6c6572206973206e6f742077686974656c69737465640000000000000060448201526064016104b9565b6000818152600560205260409020805460ff19166001179055610e58338287876113f5565b6000818152600560205260408120805460ff191690556006805491610e7c83612454565b91905055505050505050565b600082815260036020526040902060010154610ea38161121b565b61068e83836112ae565b600b54604051630debfda360e41b81526001600160a01b038381166004830152600092169063debfda3090602401602060405180830381865afa158015610ef8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1c919061229a565b15610f29575060016104e5565b50600092915050565b6000610f3d8161121b565b50600b80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038516331480610f7c5750610f7c8533610ead565b610f985760405162461bcd60e51b81526004016104b99061224c565b6106628585858585611518565b60006001600160e01b03198216636cdb3d1360e11b1480610fd657506001600160e01b031982166303a24d0760e21b145b806104e557506301ffc9a760e01b6001600160e01b03198316146104e5565b60006001600160e01b03198216637965db0b60e01b14806104e557506104e582610fa5565b6000826110278584611650565b14949350505050565b81518351146110925760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016104b9565b6001600160a01b0384166110b85760405162461bcd60e51b81526004016104b99061246d565b336110c7818787878787611695565b60005b84518110156111ad5760008582815181106110e7576110e76123a2565b602002602001015190506000858381518110611105576111056123a2565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156111555760405162461bcd60e51b81526004016104b9906124b2565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906111929084906122cd565b92505081905550505050806111a690612454565b90506110ca565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516111fd9291906124fc565b60405180910390a46112138187878787876116e8565b505050505050565b6112258133611843565b50565b6112328282610d37565b61070d5760008281526003602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561126a3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6112b88282610d37565b1561070d5760008281526003602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b816001600160a01b0316836001600160a01b0316036113885760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016104b9565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166114555760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016104b9565b3360006114618561189c565b9050600061146e8561189c565b905061147f83600089858589611695565b6000868152602081815260408083206001600160a01b038b168452909152812080548792906114af9084906122cd565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461150f836000898989896118e7565b50505050505050565b6001600160a01b03841661153e5760405162461bcd60e51b81526004016104b99061246d565b33600061154a8561189c565b905060006115578561189c565b9050611567838989858589611695565b6000868152602081815260408083206001600160a01b038c168452909152902054858110156115a85760405162461bcd60e51b81526004016104b9906124b2565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a168252812080548892906115e59084906122cd565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611645848a8a8a8a8a6118e7565b505050505050505050565b600081815b8451811015610d1e5761168182868381518110611674576116746123a2565b60200260200101516119a2565b91508061168d81612454565b915050611655565b61169f8587610ead565b6116e35760405162461bcd60e51b8152602060048201526015602482015274151c985b9cd9995c881b9bdd08185c1c1c9bdd9959605a1b60448201526064016104b9565b611213565b6001600160a01b0384163b156112135760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061172c908990899088908890889060040161252a565b6020604051808303816000875af1925050508015611767575060408051601f3d908101601f1916820190925261176491810190612588565b60015b611813576117736125a5565b806308c379a0036117ac57506117876125c1565b8061179257506117ae565b8060405162461bcd60e51b81526004016104b99190611cea565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016104b9565b6001600160e01b0319811663bc197c8160e01b1461150f5760405162461bcd60e51b81526004016104b99061264a565b61184d8282610d37565b61070d5761185a816119d4565b6118658360206119e6565b604051602001611876929190612692565b60408051601f198184030181529082905262461bcd60e51b82526104b991600401611cea565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106118d6576118d66123a2565b602090810291909101015292915050565b6001600160a01b0384163b156112135760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061192b9089908990889088908890600401612707565b6020604051808303816000875af1925050508015611966575060408051601f3d908101601f1916820190925261196391810190612588565b60015b611972576117736125a5565b6001600160e01b0319811663f23a6e6160e01b1461150f5760405162461bcd60e51b81526004016104b99061264a565b60008183106119be5760008281526020849052604090206119cd565b60008381526020839052604090205b9392505050565b60606104e56001600160a01b03831660145b606060006119f5836002612350565b611a009060026122cd565b6001600160401b03811115611a1757611a17611cfd565b6040519080825280601f01601f191660200182016040528015611a41576020820181803683370190505b509050600360fc1b81600081518110611a5c57611a5c6123a2565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611a8b57611a8b6123a2565b60200101906001600160f81b031916908160001a9053506000611aaf846002612350565b611aba9060016122cd565b90505b6001811115611b32576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611aee57611aee6123a2565b1a60f81b828281518110611b0457611b046123a2565b60200101906001600160f81b031916908160001a90535060049490941c93611b2b81612741565b9050611abd565b5083156119cd5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104b9565b6001600160a01b038116811461122557600080fd5b60008060408385031215611ba957600080fd5b8235611bb481611b81565b946020939093013593505050565b6001600160e01b03198116811461122557600080fd5b600060208284031215611bea57600080fd5b81356119cd81611bc2565b60008083601f840112611c0757600080fd5b5081356001600160401b03811115611c1e57600080fd5b6020830191508360208260051b8501011115611c3957600080fd5b9250929050565b60008060208385031215611c5357600080fd5b82356001600160401b03811115611c6957600080fd5b611c7585828601611bf5565b90969095509350505050565b600060208284031215611c9357600080fd5b5035919050565b60005b83811015611cb5578181015183820152602001611c9d565b50506000910152565b60008151808452611cd6816020860160208601611c9a565b601f01601f19169290920160200192915050565b6020815260006119cd6020830184611cbe565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b0381118282101715611d3857611d38611cfd565b6040525050565b60006001600160401b03821115611d5857611d58611cfd565b5060051b60200190565b600082601f830112611d7357600080fd5b81356020611d8082611d3f565b604051611d8d8282611d13565b83815260059390931b8501820192828101915086841115611dad57600080fd5b8286015b84811015611dc85780358352918301918301611db1565b509695505050505050565b600082601f830112611de457600080fd5b81356001600160401b03811115611dfd57611dfd611cfd565b604051611e14601f8301601f191660200182611d13565b818152846020838601011115611e2957600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215611e5e57600080fd5b8535611e6981611b81565b94506020860135611e7981611b81565b935060408601356001600160401b0380821115611e9557600080fd5b611ea189838a01611d62565b94506060880135915080821115611eb757600080fd5b611ec389838a01611d62565b93506080880135915080821115611ed957600080fd5b50611ee688828901611dd3565b9150509295509295909350565b60008060408385031215611f0657600080fd5b823591506020830135611f1881611b81565b809150509250929050565b600080600060408486031215611f3857600080fd5b83356001600160401b0380821115611f4f57600080fd5b818601915086601f830112611f6357600080fd5b813581811115611f7257600080fd5b876020828501011115611f8457600080fd5b6020928301989097509590910135949350505050565b60008060408385031215611fad57600080fd5b82356001600160401b0380821115611fc457600080fd5b818501915085601f830112611fd857600080fd5b81356020611fe582611d3f565b604051611ff28282611d13565b83815260059390931b850182019282810191508984111561201257600080fd5b948201945b8386101561203957853561202a81611b81565b82529482019490820190612017565b9650508601359250508082111561204f57600080fd5b5061205c85828601611d62565b9150509250929050565b600081518084526020808501945080840160005b838110156120965781518752958201959082019060010161207a565b509495945050505050565b6020815260006119cd6020830184612066565b801515811461122557600080fd5b600080604083850312156120d557600080fd5b82356120e081611b81565b91506020830135611f18816120b4565b6000806000806060858703121561210657600080fd5b8435935060208501356001600160401b038082111561212457600080fd5b61213088838901611dd3565b9450604087013591508082111561214657600080fd5b5061215387828801611bf5565b95989497509550505050565b6000806040838503121561217257600080fd5b823561217d81611b81565b91506020830135611f1881611b81565b60006020828403121561219f57600080fd5b81356119cd81611b81565b600080600080600060a086880312156121c257600080fd5b85356121cd81611b81565b945060208601356121dd81611b81565b9350604086013592506060860135915060808601356001600160401b0381111561220657600080fd5b611ee688828901611dd3565b600181811c9082168061222657607f821691505b60208210810361224657634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b6000602082840312156122ac57600080fd5b81516119cd816120b4565b634e487b7160e01b600052601160045260246000fd5b808201808211156104e5576104e56122b7565b600080858511156122f057600080fd5b838611156122fd57600080fd5b5050820193919092039150565b6000806000806080858703121561232057600080fd5b843561232b81611b81565b9350602085013561233b81611b81565b93969395505050506040820135916060013590565b80820281158282048414176104e5576104e56122b7565b60008261238457634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561239b57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b600081518084526020808501945080840160005b838110156120965781516001600160a01b0316875295820195908201906001016123cc565b60808152600061240460808301876123b8565b828103602084015261241681876123b8565b6001600160a01b0386166040850152838103606085015290506124398185612066565b979650505050505050565b8183823760009101908152919050565b600060018201612466576124666122b7565b5060010190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60408152600061250f6040830185612066565b82810360208401526125218185612066565b95945050505050565b6001600160a01b0386811682528516602082015260a06040820181905260009061255690830186612066565b82810360608401526125688186612066565b9050828103608084015261257c8185611cbe565b98975050505050505050565b60006020828403121561259a57600080fd5b81516119cd81611bc2565b600060033d11156125be5760046000803e5060005160e01c5b90565b600060443d10156125cf5790565b6040516003193d81016004833e81513d6001600160401b0381602484011181841117156125fe57505050505090565b82850191508151818111156126165750505050505090565b843d87010160208285010111156126305750505050505090565b61263f60208286010187611d13565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516126ca816017850160208801611c9a565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516126fb816028840160208801611c9a565b01602801949350505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061243990830184611cbe565b600081612750576127506122b7565b50600019019056fea2646970667358221220939c936e74e7e6373f8d82c45767ba82f0e5bbd76d1701a025e9df4ec77796a964736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x32E6 CODESIZE SUB DUP1 PUSH3 0x32E6 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x6D0 JUMP JUMPDEST DUP9 PUSH3 0x40 DUP2 PUSH3 0x14E JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND PUSH3 0x9D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E657220616464726573732063616E6E6F7420626520656D707479000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH3 0xD1 SWAP2 CALLER SWAP2 SWAP1 PUSH1 0x0 PUSH3 0xB6 DUP4 PUSH3 0x81C JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE DUP12 SWAP1 PUSH3 0x160 JUMP JUMPDEST PUSH3 0xDE PUSH1 0x0 CALLER PUSH3 0x28F JUMP JUMPDEST PUSH1 0x4 SWAP10 SWAP1 SWAP10 SSTORE PUSH1 0x8 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x9 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x7 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0xD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND OR SWAP1 SWAP2 SSTORE PUSH1 0xB DUP1 SLOAD DUP3 AND SWAP4 DUP4 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE PUSH1 0xA DUP1 SLOAD DUP4 AND SWAP4 DUP3 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE PUSH1 0xC DUP1 SLOAD SWAP1 SWAP2 AND SWAP2 SWAP1 SWAP5 AND OR SWAP1 SWAP3 SSTORE POP PUSH3 0xB48 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 PUSH3 0x15C DUP3 DUP3 PUSH3 0x8C3 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH3 0x1C2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A206D696E7420746F20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x94 JUMP JUMPDEST CALLER PUSH1 0x0 PUSH3 0x1D0 DUP6 PUSH3 0x29B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH3 0x1DF DUP6 PUSH3 0x29B JUMP JUMPDEST SWAP1 POP PUSH3 0x1F2 DUP4 PUSH1 0x0 DUP10 DUP6 DUP6 DUP10 PUSH3 0x2E9 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP8 SWAP3 SWAP1 PUSH3 0x224 SWAP1 DUP5 SWAP1 PUSH3 0x98F JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP11 AND SWAP3 PUSH1 0x0 SWAP3 SWAP2 DUP8 AND SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH3 0x286 DUP4 PUSH1 0x0 DUP10 DUP10 DUP10 DUP10 PUSH3 0x361 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH3 0x15C DUP3 DUP3 PUSH3 0x519 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP3 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH3 0x2D8 JUMPI PUSH3 0x2D8 PUSH3 0x9A5 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x2F5 DUP6 DUP8 PUSH3 0x5BD JUMP JUMPDEST PUSH3 0x343 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5472616E73666572206E6F7420617070726F7665640000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x94 JUMP JUMPDEST PUSH3 0x359 DUP7 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP8 AND JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH3 0x359 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF23A6E61 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xF23A6E61 SWAP1 PUSH3 0x3A8 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH3 0x9E9 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH3 0x3E6 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH3 0x3E3 SWAP2 DUP2 ADD SWAP1 PUSH3 0xA30 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH3 0x4A6 JUMPI PUSH3 0x3F5 PUSH3 0xA63 JUMP JUMPDEST DUP1 PUSH4 0x8C379A0 SUB PUSH3 0x435 JUMPI POP PUSH3 0x40C PUSH3 0xA80 JUMP JUMPDEST DUP1 PUSH3 0x419 JUMPI POP PUSH3 0x437 JUMP JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x94 SWAP2 SWAP1 PUSH3 0xB0F JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x34 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F206E6F6E2D45524331313535 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x526563656976657220696D706C656D656E746572000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x94 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xF23A6E61 PUSH1 0xE0 SHL EQ PUSH3 0x286 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A204552433131353552656365697665722072656A65637465 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x6420746F6B656E73 PUSH1 0xC0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x94 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH3 0x15C JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH3 0x579 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x40 MLOAD PUSH4 0xDEBFDA3 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x0 SWAP3 AND SWAP1 PUSH4 0xDEBFDA30 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x609 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x62F SWAP2 SWAP1 PUSH3 0xB24 JUMP JUMPDEST ISZERO PUSH3 0x63E JUMPI POP PUSH1 0x1 PUSH3 0x642 JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x660 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH3 0x6A3 JUMPI PUSH3 0x6A3 PUSH3 0x665 JUMP JUMPDEST PUSH1 0x40 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x6C7 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH3 0x6AD JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x160 DUP13 DUP15 SUB SLT ISZERO PUSH3 0x6F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x6FE DUP13 PUSH3 0x648 JUMP JUMPDEST PUSH1 0x20 DUP14 ADD MLOAD PUSH1 0x40 DUP15 ADD MLOAD SWAP2 SWAP13 POP SWAP11 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x723 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP15 ADD SWAP2 POP DUP15 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x738 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH3 0x74D JUMPI PUSH3 0x74D PUSH3 0x665 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 POP PUSH3 0x768 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP4 PUSH3 0x67B JUMP JUMPDEST DUP1 DUP3 MSTORE DUP16 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH3 0x77E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x791 DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD PUSH3 0x6AA JUMP JUMPDEST POP DUP1 SWAP11 POP POP POP PUSH1 0x60 DUP13 ADD MLOAD SWAP8 POP PUSH1 0x80 DUP13 ADD MLOAD SWAP7 POP PUSH3 0x7B3 PUSH1 0xA0 DUP14 ADD PUSH3 0x648 JUMP JUMPDEST SWAP6 POP PUSH1 0xC0 DUP13 ADD MLOAD SWAP5 POP PUSH1 0xE0 DUP13 ADD MLOAD SWAP4 POP PUSH3 0x7D2 PUSH2 0x100 DUP14 ADD PUSH3 0x648 JUMP JUMPDEST SWAP3 POP PUSH3 0x7E3 PUSH2 0x120 DUP14 ADD PUSH3 0x648 JUMP JUMPDEST SWAP2 POP PUSH3 0x7F4 PUSH2 0x140 DUP14 ADD PUSH3 0x648 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP12 POP SWAP3 SWAP6 SWAP9 SWAP12 SWAP1 SWAP4 SWAP7 SWAP10 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH3 0x831 JUMPI PUSH3 0x831 PUSH3 0x806 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x84D JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x86E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x8BE JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x89D JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x359 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x8A9 JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x8DF JUMPI PUSH3 0x8DF PUSH3 0x665 JUMP JUMPDEST PUSH3 0x8F7 DUP2 PUSH3 0x8F0 DUP5 SLOAD PUSH3 0x838 JUMP JUMPDEST DUP5 PUSH3 0x874 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x92F JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x916 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x359 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x960 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x93F JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x97F JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH3 0x642 JUMPI PUSH3 0x642 PUSH3 0x806 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH3 0x9D5 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH3 0x6AA JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH3 0xA25 SWAP1 DUP4 ADD DUP5 PUSH3 0x9BB JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0xA43 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH3 0xA5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 RETURNDATASIZE GT ISZERO PUSH3 0xA7D JUMPI PUSH1 0x4 PUSH1 0x0 DUP1 RETURNDATACOPY POP PUSH1 0x0 MLOAD PUSH1 0xE0 SHR JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x44 RETURNDATASIZE LT ISZERO PUSH3 0xA8F JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x3 NOT RETURNDATASIZE DUP2 ADD PUSH1 0x4 DUP4 RETURNDATACOPY DUP2 MLOAD RETURNDATASIZE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP4 GT PUSH1 0x24 DUP5 ADD DUP4 LT OR ISZERO PUSH3 0xABF JUMPI POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP3 DUP6 ADD SWAP2 POP DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH3 0xAD8 JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP5 RETURNDATASIZE DUP8 ADD ADD PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH3 0xAF3 JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH3 0xB04 PUSH1 0x20 DUP3 DUP7 ADD ADD DUP8 PUSH3 0x67B JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH3 0xA5C PUSH1 0x20 DUP4 ADD DUP5 PUSH3 0x9BB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0xB37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH3 0xA5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x278E DUP1 PUSH3 0xB58 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1CE JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4E1273F4 GT PUSH2 0x104 JUMPI DUP1 PUSH4 0xC0883B92 GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xE138818C GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xE138818C EQ PUSH2 0x406 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x419 JUMPI DUP1 PUSH4 0xEF0D4572 EQ PUSH2 0x42C JUMPI DUP1 PUSH4 0xF242432A EQ PUSH2 0x43F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xC0883B92 EQ PUSH2 0x3BA JUMPI DUP1 PUSH4 0xC3AE2B78 EQ PUSH2 0x3CD JUMPI DUP1 PUSH4 0xC55DAE63 EQ PUSH2 0x3E0 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x3F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8ABDF5AA GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x8ABDF5AA EQ PUSH2 0x383 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x38C JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x39F JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x3A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4E1273F4 EQ PUSH2 0x347 JUMPI DUP1 PUSH4 0x7B1B1DE6 EQ PUSH2 0x367 JUMPI DUP1 PUSH4 0x7CB64759 EQ PUSH2 0x370 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x26232A2E GT PUSH2 0x171 JUMPI DUP1 PUSH4 0x2ECC6160 GT PUSH2 0x14B JUMPI DUP1 PUSH4 0x2ECC6160 EQ PUSH2 0x2EB JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x30E JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x321 JUMPI DUP1 PUSH4 0x3E352E62 EQ PUSH2 0x334 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x26232A2E EQ PUSH2 0x2C4 JUMPI DUP1 PUSH4 0x2EB2C2D6 EQ PUSH2 0x2CD JUMPI DUP1 PUSH4 0x2EB4A7AB EQ PUSH2 0x2E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7BD0265 GT PUSH2 0x1AD JUMPI DUP1 PUSH4 0x7BD0265 EQ PUSH2 0x22F JUMPI DUP1 PUSH4 0xE89341C EQ PUSH2 0x256 JUMPI DUP1 PUSH4 0x207F1850 EQ PUSH2 0x276 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x2A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0xFDD58E EQ PUSH2 0x1D3 JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1F9 JUMPI DUP1 PUSH4 0x69824FB EQ PUSH2 0x21C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E6 PUSH2 0x1E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B96 JUMP JUMPDEST PUSH2 0x452 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20C PUSH2 0x207 CALLDATASIZE PUSH1 0x4 PUSH2 0x1BD8 JUMP JUMPDEST PUSH2 0x4EB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F0 JUMP JUMPDEST PUSH2 0x20C PUSH2 0x22A CALLDATASIZE PUSH1 0x4 PUSH2 0x1C40 JUMP JUMPDEST PUSH2 0x505 JUMP JUMPDEST PUSH2 0x1E6 PUSH32 0xD8AA0F3194971A2A116679F7C2090F6939C8D4E01A2A8D7E41D55E5351469E63 DUP2 JUMP JUMPDEST PUSH2 0x269 PUSH2 0x264 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C81 JUMP JUMPDEST PUSH2 0x589 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F0 SWAP2 SWAP1 PUSH2 0x1CEA JUMP JUMPDEST PUSH1 0xC SLOAD PUSH2 0x289 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F0 JUMP JUMPDEST PUSH2 0x1E6 PUSH2 0x2AF CALLDATASIZE PUSH1 0x4 PUSH2 0x1C81 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1E6 PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x2E0 PUSH2 0x2DB CALLDATASIZE PUSH1 0x4 PUSH2 0x1E46 JUMP JUMPDEST PUSH2 0x61D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1E6 PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x20C PUSH2 0x2F9 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C81 JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x2E0 PUSH2 0x31C CALLDATASIZE PUSH1 0x4 PUSH2 0x1EF3 JUMP JUMPDEST PUSH2 0x669 JUMP JUMPDEST PUSH2 0x2E0 PUSH2 0x32F CALLDATASIZE PUSH1 0x4 PUSH2 0x1EF3 JUMP JUMPDEST PUSH2 0x693 JUMP JUMPDEST PUSH2 0x2E0 PUSH2 0x342 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F23 JUMP JUMPDEST PUSH2 0x711 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x355 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F9A JUMP JUMPDEST PUSH2 0xBFD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F0 SWAP2 SWAP1 PUSH2 0x20A1 JUMP JUMPDEST PUSH2 0x1E6 PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x2E0 PUSH2 0x37E CALLDATASIZE PUSH1 0x4 PUSH2 0x1C81 JUMP JUMPDEST PUSH2 0xD26 JUMP JUMPDEST PUSH2 0x1E6 PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x20C PUSH2 0x39A CALLDATASIZE PUSH1 0x4 PUSH2 0x1EF3 JUMP JUMPDEST PUSH2 0xD37 JUMP JUMPDEST PUSH2 0x1E6 PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH2 0x2E0 PUSH2 0x3B5 CALLDATASIZE PUSH1 0x4 PUSH2 0x20C2 JUMP JUMPDEST PUSH2 0xD62 JUMP JUMPDEST PUSH1 0xB SLOAD PUSH2 0x289 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x2E0 PUSH2 0x3DB CALLDATASIZE PUSH1 0x4 PUSH2 0x20F0 JUMP JUMPDEST PUSH2 0xD6D JUMP JUMPDEST PUSH1 0xA SLOAD PUSH2 0x289 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x2E0 PUSH2 0x401 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EF3 JUMP JUMPDEST PUSH2 0xE88 JUMP JUMPDEST PUSH1 0xD SLOAD PUSH2 0x289 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x20C PUSH2 0x427 CALLDATASIZE PUSH1 0x4 PUSH2 0x215F JUMP JUMPDEST PUSH2 0xEAD JUMP JUMPDEST PUSH2 0x2E0 PUSH2 0x43A CALLDATASIZE PUSH1 0x4 PUSH2 0x218D JUMP JUMPDEST PUSH2 0xF32 JUMP JUMPDEST PUSH2 0x2E0 PUSH2 0x44D CALLDATASIZE PUSH1 0x4 PUSH2 0x21AA JUMP JUMPDEST PUSH2 0xF60 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x4C2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2061646472657373207A65726F206973206E6F7420612076 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x30B634B21037BBB732B9 PUSH1 0xB1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4F6 DUP3 PUSH2 0xFA5 JUMP JUMPDEST DUP1 PUSH2 0x4E5 JUMPI POP PUSH2 0x4E5 DUP3 PUSH2 0xFF5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT CALLER PUSH1 0x60 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x34 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0x581 DUP5 DUP5 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP PUSH1 0x4 SLOAD SWAP2 POP DUP5 SWAP1 POP PUSH2 0x101A JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x598 SWAP1 PUSH2 0x2212 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x5C4 SWAP1 PUSH2 0x2212 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x611 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x5E6 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x611 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x5F4 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER EQ DUP1 PUSH2 0x639 JUMPI POP PUSH2 0x639 DUP6 CALLER PUSH2 0xEAD JUMP JUMPDEST PUSH2 0x655 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B9 SWAP1 PUSH2 0x224C JUMP JUMPDEST PUSH2 0x662 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x1030 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x684 DUP2 PUSH2 0x121B JUMP JUMPDEST PUSH2 0x68E DUP4 DUP4 PUSH2 0x1228 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x703 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x103937B632B9903337B91039B2B633 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B9 JUMP JUMPDEST PUSH2 0x70D DUP3 DUP3 PUSH2 0x12AE JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x40 MLOAD PUSH4 0xDEBFDA3 PUSH1 0xE4 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xDEBFDA30 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x759 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x77D SWAP2 SWAP1 PUSH2 0x229A JUMP JUMPDEST PUSH2 0x7D5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x43616C6C6572206973206E6F7420616E20617574686F72697A65642065786563 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x3ABA37B9 PUSH1 0xE1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B9 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xBA0 JUMPI PUSH1 0x0 DUP1 DUP1 DUP1 DUP8 DUP6 DUP9 PUSH2 0x7F3 DUP3 PUSH1 0x68 PUSH2 0x22CD JUMP JUMPDEST SWAP3 PUSH2 0x800 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x22E0 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x80D SWAP2 SWAP1 PUSH2 0x230A JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP1 PUSH2 0x820 DUP5 DUP5 PUSH2 0x452 JUMP JUMPDEST LT ISZERO PUSH2 0x879 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53656C6C657220646F6573206E6F74206861766520656E6F75676820746F6B65 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6E73 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 SLOAD DUP3 PUSH2 0x889 SWAP2 SWAP1 PUSH2 0x2350 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x64 PUSH1 0x8 SLOAD DUP4 PUSH2 0x89D SWAP2 SWAP1 PUSH2 0x2350 JUMP JUMPDEST PUSH2 0x8A7 SWAP2 SWAP1 PUSH2 0x2367 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x64 PUSH1 0x9 SLOAD DUP5 PUSH2 0x8BB SWAP2 SWAP1 PUSH2 0x2350 JUMP JUMPDEST PUSH2 0x8C5 SWAP2 SWAP1 PUSH2 0x2367 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH2 0x8D4 DUP5 DUP7 PUSH2 0x22CD JUMP JUMPDEST PUSH2 0x8DE SWAP2 SWAP1 PUSH2 0x22CD JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0xA SLOAD PUSH1 0x40 MLOAD PUSH4 0x30EA258B PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE SWAP3 SWAP4 POP DUP4 SWAP3 SWAP2 AND SWAP1 PUSH4 0xC3A8962C SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x937 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x95B SWAP2 SWAP1 PUSH2 0x2389 JUMP JUMPDEST LT ISZERO PUSH2 0x9B3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x427579657220646F6573206E6F74206861766520656E6F75676820746F6B656E PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 ADD DUP4 MSTORE PUSH1 0x0 SWAP3 PUSH1 0x20 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP9 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x9E8 JUMPI PUSH2 0x9E8 PUSH2 0x23A2 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP9 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xA1C JUMPI PUSH2 0xA1C PUSH2 0x23A2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD DUP3 ADD MSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 ADD DUP4 MSTORE PUSH1 0x0 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP9 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xA6B JUMPI PUSH2 0xA6B PUSH2 0x23A2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x20 SWAP2 DUP3 MUL SWAP3 SWAP1 SWAP3 ADD ADD MSTORE PUSH1 0xD SLOAD DUP3 MLOAD SWAP2 AND SWAP1 DUP3 SWAP1 PUSH1 0x1 SWAP1 DUP2 LT PUSH2 0xA9C JUMPI PUSH2 0xA9C PUSH2 0x23A2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD DUP3 ADD MSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 ADD DUP4 MSTORE PUSH1 0x0 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xAEB JUMPI PUSH2 0xAEB PUSH2 0x23A2 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP5 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xB0B JUMPI PUSH2 0xB0B PUSH2 0x23A2 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0xC SLOAD PUSH1 0xA SLOAD PUSH1 0x40 MLOAD PUSH4 0xE106441 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP3 PUSH4 0x38419104 SWAP3 PUSH2 0xB4F SWAP3 DUP9 SWAP3 DUP9 SWAP3 AND SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x23F1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB69 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB7D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP POP POP POP PUSH1 0x68 DUP2 PUSH2 0xB99 SWAP2 SWAP1 PUSH2 0x22CD JUMP JUMPDEST SWAP1 POP PUSH2 0x7D8 JUMP JUMPDEST POP PUSH1 0x0 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0xBB3 SWAP3 SWAP2 SWAP1 PUSH2 0x2444 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 SWAP1 SUB DUP3 KECCAK256 DUP1 DUP4 MSTORE TIMESTAMP PUSH1 0x20 DUP5 ADD MSTORE SWAP3 POP DUP4 SWAP2 CALLER SWAP2 PUSH32 0x78202E946262627C432F6C5B92FEE2A7224C9AABDB3C71F747FCCBAD2FB470A4 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0xC62 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A206163636F756E747320616E6420696473206C656E677468 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x40DAD2E6DAC2E8C6D PUSH1 0xBB SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B9 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xC7D JUMPI PUSH2 0xC7D PUSH2 0x1CFD JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xCA6 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xD1E JUMPI PUSH2 0xCF1 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xCCA JUMPI PUSH2 0xCCA PUSH2 0x23A2 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xCE4 JUMPI PUSH2 0xCE4 PUSH2 0x23A2 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x452 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xD03 JUMPI PUSH2 0xD03 PUSH2 0x23A2 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH2 0xD17 DUP2 PUSH2 0x2454 JUMP JUMPDEST SWAP1 POP PUSH2 0xCAC JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD31 DUP2 PUSH2 0x121B JUMP JUMPDEST POP PUSH1 0x4 SSTORE JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x70D CALLER DUP4 DUP4 PUSH2 0x1315 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xDDD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546F6B656E2069732063757272656E746C79206C6F636B656420666F72206D69 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6E74696E67 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B9 JUMP JUMPDEST PUSH2 0xDE7 DUP4 DUP4 PUSH2 0x505 JUMP JUMPDEST PUSH2 0xE33 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616C6C6572206973206E6F742077686974656C697374656400000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B9 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0xE58 CALLER DUP3 DUP8 DUP8 PUSH2 0x13F5 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0x6 DUP1 SLOAD SWAP2 PUSH2 0xE7C DUP4 PUSH2 0x2454 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xEA3 DUP2 PUSH2 0x121B JUMP JUMPDEST PUSH2 0x68E DUP4 DUP4 PUSH2 0x12AE JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x40 MLOAD PUSH4 0xDEBFDA3 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x0 SWAP3 AND SWAP1 PUSH4 0xDEBFDA30 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xEF8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF1C SWAP2 SWAP1 PUSH2 0x229A JUMP JUMPDEST ISZERO PUSH2 0xF29 JUMPI POP PUSH1 0x1 PUSH2 0x4E5 JUMP JUMPDEST POP PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF3D DUP2 PUSH2 0x121B JUMP JUMPDEST POP PUSH1 0xB DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER EQ DUP1 PUSH2 0xF7C JUMPI POP PUSH2 0xF7C DUP6 CALLER PUSH2 0xEAD JUMP JUMPDEST PUSH2 0xF98 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B9 SWAP1 PUSH2 0x224C JUMP JUMPDEST PUSH2 0x662 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x1518 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x6CDB3D13 PUSH1 0xE1 SHL EQ DUP1 PUSH2 0xFD6 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x3A24D07 PUSH1 0xE2 SHL EQ JUMPDEST DUP1 PUSH2 0x4E5 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x4E5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x4E5 JUMPI POP PUSH2 0x4E5 DUP3 PUSH2 0xFA5 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1027 DUP6 DUP5 PUSH2 0x1650 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x1092 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2069647320616E6420616D6F756E7473206C656E67746820 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0xDAD2E6DAC2E8C6D PUSH1 0xC3 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x10B8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B9 SWAP1 PUSH2 0x246D JUMP JUMPDEST CALLER PUSH2 0x10C7 DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x1695 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x11AD JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x10E7 JUMPI PUSH2 0x10E7 PUSH2 0x23A2 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1105 JUMPI PUSH2 0x1105 PUSH2 0x23A2 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x0 DUP5 DUP2 MSTORE DUP1 DUP4 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 AND DUP4 MSTORE SWAP1 SWAP4 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP2 DUP2 LT ISZERO PUSH2 0x1155 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B9 SWAP1 PUSH2 0x24B2 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP1 DUP12 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x1192 SWAP1 DUP5 SWAP1 PUSH2 0x22CD JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP POP POP DUP1 PUSH2 0x11A6 SWAP1 PUSH2 0x2454 JUMP JUMPDEST SWAP1 POP PUSH2 0x10CA JUMP JUMPDEST POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x11FD SWAP3 SWAP2 SWAP1 PUSH2 0x24FC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x1213 DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x16E8 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1225 DUP2 CALLER PUSH2 0x1843 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1232 DUP3 DUP3 PUSH2 0xD37 JUMP JUMPDEST PUSH2 0x70D JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x126A CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0x12B8 DUP3 DUP3 PUSH2 0xD37 JUMP JUMPDEST ISZERO PUSH2 0x70D JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x1388 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2073657474696E6720617070726F76616C20737461747573 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x103337B91039B2B633 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1455 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A206D696E7420746F20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B9 JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0x1461 DUP6 PUSH2 0x189C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x146E DUP6 PUSH2 0x189C JUMP JUMPDEST SWAP1 POP PUSH2 0x147F DUP4 PUSH1 0x0 DUP10 DUP6 DUP6 DUP10 PUSH2 0x1695 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP8 SWAP3 SWAP1 PUSH2 0x14AF SWAP1 DUP5 SWAP1 PUSH2 0x22CD JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP11 AND SWAP3 PUSH1 0x0 SWAP3 SWAP2 DUP8 AND SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x150F DUP4 PUSH1 0x0 DUP10 DUP10 DUP10 DUP10 PUSH2 0x18E7 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x153E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B9 SWAP1 PUSH2 0x246D JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0x154A DUP6 PUSH2 0x189C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1557 DUP6 PUSH2 0x189C JUMP JUMPDEST SWAP1 POP PUSH2 0x1567 DUP4 DUP10 DUP10 DUP6 DUP6 DUP10 PUSH2 0x1695 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP6 DUP2 LT ISZERO PUSH2 0x15A8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B9 SWAP1 PUSH2 0x24B2 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP10 DUP6 SUB SWAP1 SSTORE SWAP1 DUP11 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP9 SWAP3 SWAP1 PUSH2 0x15E5 SWAP1 DUP5 SWAP1 PUSH2 0x22CD JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP9 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP12 AND SWAP3 DUP13 DUP3 AND SWAP3 SWAP2 DUP9 AND SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x1645 DUP5 DUP11 DUP11 DUP11 DUP11 DUP11 PUSH2 0x18E7 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xD1E JUMPI PUSH2 0x1681 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1674 JUMPI PUSH2 0x1674 PUSH2 0x23A2 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x19A2 JUMP JUMPDEST SWAP2 POP DUP1 PUSH2 0x168D DUP2 PUSH2 0x2454 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1655 JUMP JUMPDEST PUSH2 0x169F DUP6 DUP8 PUSH2 0xEAD JUMP JUMPDEST PUSH2 0x16E3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x151C985B9CD9995C881B9BDD08185C1C1C9BDD9959 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B9 JUMP JUMPDEST PUSH2 0x1213 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x1213 JUMPI PUSH1 0x40 MLOAD PUSH4 0xBC197C81 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xBC197C81 SWAP1 PUSH2 0x172C SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x252A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1767 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1764 SWAP2 DUP2 ADD SWAP1 PUSH2 0x2588 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1813 JUMPI PUSH2 0x1773 PUSH2 0x25A5 JUMP JUMPDEST DUP1 PUSH4 0x8C379A0 SUB PUSH2 0x17AC JUMPI POP PUSH2 0x1787 PUSH2 0x25C1 JUMP JUMPDEST DUP1 PUSH2 0x1792 JUMPI POP PUSH2 0x17AE JUMP JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B9 SWAP2 SWAP1 PUSH2 0x1CEA JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x34 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F206E6F6E2D45524331313535 PUSH1 0x44 DUP3 ADD MSTORE PUSH20 0x2932B1B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x61 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xBC197C81 PUSH1 0xE0 SHL EQ PUSH2 0x150F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B9 SWAP1 PUSH2 0x264A JUMP JUMPDEST PUSH2 0x184D DUP3 DUP3 PUSH2 0xD37 JUMP JUMPDEST PUSH2 0x70D JUMPI PUSH2 0x185A DUP2 PUSH2 0x19D4 JUMP JUMPDEST PUSH2 0x1865 DUP4 PUSH1 0x20 PUSH2 0x19E6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1876 SWAP3 SWAP2 SWAP1 PUSH2 0x2692 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH2 0x4B9 SWAP2 PUSH1 0x4 ADD PUSH2 0x1CEA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP3 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x18D6 JUMPI PUSH2 0x18D6 PUSH2 0x23A2 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x1213 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF23A6E61 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xF23A6E61 SWAP1 PUSH2 0x192B SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x2707 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1966 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1963 SWAP2 DUP2 ADD SWAP1 PUSH2 0x2588 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1972 JUMPI PUSH2 0x1773 PUSH2 0x25A5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xF23A6E61 PUSH1 0xE0 SHL EQ PUSH2 0x150F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B9 SWAP1 PUSH2 0x264A JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x19BE JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x19CD JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4E5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x14 JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x19F5 DUP4 PUSH1 0x2 PUSH2 0x2350 JUMP JUMPDEST PUSH2 0x1A00 SWAP1 PUSH1 0x2 PUSH2 0x22CD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1A17 JUMPI PUSH2 0x1A17 PUSH2 0x1CFD JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1A41 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x3 PUSH1 0xFC SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1A5C JUMPI PUSH2 0x1A5C PUSH2 0x23A2 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xF PUSH1 0xFB SHL DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x1A8B JUMPI PUSH2 0x1A8B PUSH2 0x23A2 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH2 0x1AAF DUP5 PUSH1 0x2 PUSH2 0x2350 JUMP JUMPDEST PUSH2 0x1ABA SWAP1 PUSH1 0x1 PUSH2 0x22CD JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1B32 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH2 0x1AEE JUMPI PUSH2 0x1AEE PUSH2 0x23A2 JUMP JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1B04 JUMPI PUSH2 0x1B04 PUSH2 0x23A2 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH2 0x1B2B DUP2 PUSH2 0x2741 JUMP JUMPDEST SWAP1 POP PUSH2 0x1ABD JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0x19CD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1225 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1BA9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1BB4 DUP2 PUSH2 0x1B81 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x1225 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1BEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x19CD DUP2 PUSH2 0x1BC2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1C07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1C1E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x1C39 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C53 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1C69 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C75 DUP6 DUP3 DUP7 ADD PUSH2 0x1BF5 JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1CB5 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1C9D JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1CD6 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1C9A JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x19CD PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1CBE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1D38 JUMPI PUSH2 0x1D38 PUSH2 0x1CFD JUMP JUMPDEST PUSH1 0x40 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x1D58 JUMPI PUSH2 0x1D58 PUSH2 0x1CFD JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1D73 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x1D80 DUP3 PUSH2 0x1D3F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D8D DUP3 DUP3 PUSH2 0x1D13 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x5 SWAP4 SWAP1 SWAP4 SHL DUP6 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP2 POP DUP7 DUP5 GT ISZERO PUSH2 0x1DAD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1DC8 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x1DB1 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1DE4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1DFD JUMPI PUSH2 0x1DFD PUSH2 0x1CFD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E14 PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 PUSH2 0x1D13 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x1E29 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1E5E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x1E69 DUP2 PUSH2 0x1B81 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x1E79 DUP2 PUSH2 0x1B81 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1E95 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1EA1 DUP10 DUP4 DUP11 ADD PUSH2 0x1D62 JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1EB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1EC3 DUP10 DUP4 DUP11 ADD PUSH2 0x1D62 JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1ED9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1EE6 DUP9 DUP3 DUP10 ADD PUSH2 0x1DD3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1F06 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1F18 DUP2 PUSH2 0x1B81 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1F38 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1F4F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1F63 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1F72 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1F84 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 DUP4 ADD SWAP9 SWAP1 SWAP8 POP SWAP6 SWAP1 SWAP2 ADD CALLDATALOAD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1FAD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1FC4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1FD8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x1FE5 DUP3 PUSH2 0x1D3F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FF2 DUP3 DUP3 PUSH2 0x1D13 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x5 SWAP4 SWAP1 SWAP4 SHL DUP6 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP2 POP DUP10 DUP5 GT ISZERO PUSH2 0x2012 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 DUP3 ADD SWAP5 JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0x2039 JUMPI DUP6 CALLDATALOAD PUSH2 0x202A DUP2 PUSH2 0x1B81 JUMP JUMPDEST DUP3 MSTORE SWAP5 DUP3 ADD SWAP5 SWAP1 DUP3 ADD SWAP1 PUSH2 0x2017 JUMP JUMPDEST SWAP7 POP POP DUP7 ADD CALLDATALOAD SWAP3 POP POP DUP1 DUP3 GT ISZERO PUSH2 0x204F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x205C DUP6 DUP3 DUP7 ADD PUSH2 0x1D62 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2096 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x207A JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x19CD PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2066 JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1225 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x20D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x20E0 DUP2 PUSH2 0x1B81 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1F18 DUP2 PUSH2 0x20B4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2106 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x2124 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2130 DUP9 DUP4 DUP10 ADD PUSH2 0x1DD3 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2146 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2153 DUP8 DUP3 DUP9 ADD PUSH2 0x1BF5 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2172 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x217D DUP2 PUSH2 0x1B81 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1F18 DUP2 PUSH2 0x1B81 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x219F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x19CD DUP2 PUSH2 0x1B81 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x21C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x21CD DUP2 PUSH2 0x1B81 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x21DD DUP2 PUSH2 0x1B81 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2206 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1EE6 DUP9 DUP3 DUP10 ADD PUSH2 0x1DD3 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x2226 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2246 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A2063616C6C6572206973206E6F7420746F6B656E206F776E PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x195C881BDC88185C1C1C9BDD9959 PUSH1 0x92 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x22AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x19CD DUP2 PUSH2 0x20B4 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x4E5 JUMPI PUSH2 0x4E5 PUSH2 0x22B7 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP6 GT ISZERO PUSH2 0x22F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP7 GT ISZERO PUSH2 0x22FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 ADD SWAP4 SWAP2 SWAP1 SWAP3 SUB SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2320 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x232B DUP2 PUSH2 0x1B81 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x233B DUP2 PUSH2 0x1B81 JUMP JUMPDEST SWAP4 SWAP7 SWAP4 SWAP6 POP POP POP POP PUSH1 0x40 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0x60 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x4E5 JUMPI PUSH2 0x4E5 PUSH2 0x22B7 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2384 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x239B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2096 JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x23CC JUMP JUMPDEST PUSH1 0x80 DUP2 MSTORE PUSH1 0x0 PUSH2 0x2404 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x23B8 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x2416 DUP2 DUP8 PUSH2 0x23B8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x40 DUP6 ADD MSTORE DUP4 DUP2 SUB PUSH1 0x60 DUP6 ADD MSTORE SWAP1 POP PUSH2 0x2439 DUP2 DUP6 PUSH2 0x2066 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 DUP4 DUP3 CALLDATACOPY PUSH1 0x0 SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x2466 JUMPI PUSH2 0x2466 PUSH2 0x22B7 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F20746865207A65726F206164 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2A SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A20696E73756666696369656E742062616C616E636520666F PUSH1 0x40 DUP3 ADD MSTORE PUSH10 0x39103A3930B739B332B9 PUSH1 0xB1 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x250F PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x2066 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x2521 DUP2 DUP6 PUSH2 0x2066 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x2556 SWAP1 DUP4 ADD DUP7 PUSH2 0x2066 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x2568 DUP2 DUP7 PUSH2 0x2066 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x257C DUP2 DUP6 PUSH2 0x1CBE JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x259A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x19CD DUP2 PUSH2 0x1BC2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 RETURNDATASIZE GT ISZERO PUSH2 0x25BE JUMPI PUSH1 0x4 PUSH1 0x0 DUP1 RETURNDATACOPY POP PUSH1 0x0 MLOAD PUSH1 0xE0 SHR JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x44 RETURNDATASIZE LT ISZERO PUSH2 0x25CF JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x3 NOT RETURNDATASIZE DUP2 ADD PUSH1 0x4 DUP4 RETURNDATACOPY DUP2 MLOAD RETURNDATASIZE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 PUSH1 0x24 DUP5 ADD GT DUP2 DUP5 GT OR ISZERO PUSH2 0x25FE JUMPI POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP3 DUP6 ADD SWAP2 POP DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x2616 JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP5 RETURNDATASIZE DUP8 ADD ADD PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x2630 JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x263F PUSH1 0x20 DUP3 DUP7 ADD ADD DUP8 PUSH2 0x1D13 JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x28 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A204552433131353552656365697665722072656A65637465 PUSH1 0x40 DUP3 ADD MSTORE PUSH8 0x6420746F6B656E73 PUSH1 0xC0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH2 0x26CA DUP2 PUSH1 0x17 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x1C9A JUMP JUMPDEST PUSH17 0x1034B99036B4B9B9B4B733903937B6329 PUSH1 0x7D SHL PUSH1 0x17 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x26FB DUP2 PUSH1 0x28 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x1C9A JUMP JUMPDEST ADD PUSH1 0x28 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x2439 SWAP1 DUP4 ADD DUP5 PUSH2 0x1CBE JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x2750 JUMPI PUSH2 0x2750 PUSH2 0x22B7 JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP4 SWAP13 SWAP4 PUSH15 0x74E7E6373F8D82C45767BA82F0E5BB 0xD7 PUSH14 0x1701A025E9DF4EC77796A964736F PUSH13 0x63430008130033000000000000 ","sourceMap":"757:5293:15:-:0;;;1364:767;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1646:11;1149:13:3;1646:11:15;1149:7:3;:13::i;:::-;-1:-1:-1;;;;;;1671:20:15;::::1;1663:62;;;::::0;-1:-1:-1;;;1663:62:15;;2537:2:17;1663:62:15::1;::::0;::::1;2519:21:17::0;2576:2;2556:18;;;2549:30;2615:31;2595:18;;;2588:59;2664:18;;1663:62:15::1;;;;;;;;;1747:14;:16:::0;;1729:52:::1;::::0;1735:10:::1;::::0;1747:16;:14:::1;:16;::::0;::::1;:::i;:::-;::::0;;;-1:-1:-1;1729:52:15::1;::::0;;::::1;::::0;::::1;::::0;;;-1:-1:-1;1729:52:15;;1765:11;;1729:5:::1;:52::i;:::-;1785:42;2072:4:0;1816:10:15;1785;:42::i;:::-;1831:10;:24:::0;;;;1859:10:::1;:24:::0;;;;1887:11:::1;:26:::0;;;;1917:13:::1;:30:::0;;;;1951:16:::1;:36:::0;;-1:-1:-1;;;;;;1951:36:15;;::::1;-1:-1:-1::0;;;;;1951:36:15;;::::1;;::::0;;;1991:15:::1;:52:::0;;;::::1;::::0;;::::1;::::0;;;::::1;::::0;;;2047:9:::1;:30:::0;;;::::1;::::0;;::::1;::::0;;;::::1;::::0;;;2081:13:::1;:46:::0;;;;::::1;::::0;;;::::1;;::::0;;;-1:-1:-1;757:5293:15;;-1:-1:-1;;757:5293:15;8171:86:3;8237:4;:13;8244:6;8237:4;:13;:::i;:::-;;8171:86;:::o;8630:709::-;-1:-1:-1;;;;;8777:16:3;;8769:62;;;;-1:-1:-1;;;8769:62:3;;5756:2:17;8769:62:3;;;5738:21:17;5795:2;5775:18;;;5768:30;5834:34;5814:18;;;5807:62;-1:-1:-1;;;5885:18:17;;;5878:31;5926:19;;8769:62:3;5554:397:17;8769:62:3;719:10:9;8842:16:3;8906:21;8924:2;8906:17;:21::i;:::-;8883:44;-1:-1:-1;8937:24:3;8964:25;8982:6;8964:17;:25::i;:::-;8937:52;-1:-1:-1;9000:66:3;9021:8;9039:1;9043:2;9047:3;8937:52;9061:4;9000:20;:66::i;:::-;9077:9;:13;;;;;;;;;;;-1:-1:-1;;;;;9077:17:3;;;;;;;;;:27;;9098:6;;9077:9;:27;;9098:6;;9077:27;:::i;:::-;;;;-1:-1:-1;;9119:52:3;;;6260:25:17;;;6316:2;6301:18;;6294:34;;;-1:-1:-1;;;;;9119:52:3;;;;9152:1;;9119:52;;;;;;6233:18:17;9119:52:3;;;;;;;9258:74;9289:8;9307:1;9311:2;9315;9319:6;9327:4;9258:30;:74::i;:::-;8759:580;;;8630:709;;;;:::o;6811:110:0:-;6889:25;6900:4;6906:7;6889:10;:25::i;17064:193:3:-;17183:16;;;17197:1;17183:16;;;;;;;;;17130;;17158:22;;17183:16;;;;;;;;;;;;-1:-1:-1;17183:16:3;17158:41;;17220:7;17209:5;17215:1;17209:8;;;;;;;;:::i;:::-;;;;;;;;;;:18;17245:5;17064:193;-1:-1:-1;;17064:193:3:o;2325:318:15:-;2511:32;2528:4;2534:8;2511:16;:32::i;:::-;2503:66;;;;-1:-1:-1;;;2503:66:15;;6673:2:17;2503:66:15;;;6655:21:17;6712:2;6692:18;;;6685:30;6751:23;6731:18;;;6724:51;6792:18;;2503:66:15;6471:345:17;2503:66:15;2573;2600:8;2610:4;2616:2;2620:3;2625:7;2634:4;-1:-1:-1;;;;;2573:66:15;;:::i;:::-;2325:318;;;;;;:::o;15535:725:3:-;-1:-1:-1;;;;;15742:13:3;;1465:19:8;:23;15738:516:3;;15777:72;;-1:-1:-1;;;15777:72:3;;-1:-1:-1;;;;;15777:38:3;;;;;:72;;15816:8;;15826:4;;15832:2;;15836:6;;15844:4;;15777:72;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;15777:72:3;;;;;;;;-1:-1:-1;;15777:72:3;;;;;;;;;;;;:::i;:::-;;;15773:471;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;16120:6;16113:14;;-1:-1:-1;;;16113:14:3;;;;;;;;:::i;15773:471::-;;;16167:62;;-1:-1:-1;;;16167:62:3;;9242:2:17;16167:62:3;;;9224:21:17;9281:2;9261:18;;;9254:30;9320:34;9300:18;;;9293:62;9391:22;9371:18;;;9364:50;9431:19;;16167:62:3;9040:416:17;15773:471:3;-1:-1:-1;;;;;;15898:55:3;;-1:-1:-1;;;15898:55:3;15894:152;;15977:50;;-1:-1:-1;;;15977:50:3;;9663:2:17;15977:50:3;;;9645:21:17;9702:2;9682:18;;;9675:30;9741:34;9721:18;;;9714:62;-1:-1:-1;;;9792:18:17;;;9785:38;9840:19;;15977:50:3;9461:404:17;7461:233:0;2981:4;3004:12;;;:6;:12;;;;;;;;-1:-1:-1;;;;;3004:29:0;;;;;;;;;;;;7539:149;;7582:12;;;;:6;:12;;;;;;;;-1:-1:-1;;;;;7582:29:0;;;;;;;;;:36;;-1:-1:-1;;7582:36:0;7614:4;7582:36;;;7664:12;719:10:9;;640:96;7664:12:0;-1:-1:-1;;;;;7637:40:0;7655:7;-1:-1:-1;;;;;7637:40:0;7649:4;7637:40;;;;;;;;;;7461:233;;:::o;2134:188:15:-;2244:15;;:36;;-1:-1:-1;;;2244:36:15;;-1:-1:-1;;;;;10034:32:17;;;2244:36:15;;;10016:51:17;2230:4:15;;2244:15;;:26;;9989:18:17;;2244:36:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2240:63;;;-1:-1:-1;2294:4:15;2287:11;;2240:63;-1:-1:-1;2313:5:15;2134:188;;;;;:::o;14:177:17:-;93:13;;-1:-1:-1;;;;;135:31:17;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:127::-;257:10;252:3;248:20;245:1;238:31;288:4;285:1;278:15;312:4;309:1;302:15;328:249;438:2;419:13;;-1:-1:-1;;415:27:17;403:40;;-1:-1:-1;;;;;458:34:17;;494:22;;;455:62;452:88;;;520:18;;:::i;:::-;556:2;549:22;-1:-1:-1;;328:249:17:o;582:250::-;667:1;677:113;691:6;688:1;685:13;677:113;;;767:11;;;761:18;748:11;;;741:39;713:2;706:10;677:113;;;-1:-1:-1;;824:1:17;806:16;;799:27;582:250::o;837:1493::-;1007:6;1015;1023;1031;1039;1047;1055;1063;1071;1079;1087:7;1141:3;1129:9;1120:7;1116:23;1112:33;1109:53;;;1158:1;1155;1148:12;1109:53;1181:40;1211:9;1181:40;:::i;:::-;1261:2;1246:18;;1240:25;1309:2;1294:18;;1288:25;1171:50;;-1:-1:-1;1240:25:17;-1:-1:-1;;;;;;1362:14:17;;;1359:34;;;1389:1;1386;1379:12;1359:34;1427:6;1416:9;1412:22;1402:32;;1472:7;1465:4;1461:2;1457:13;1453:27;1443:55;;1494:1;1491;1484:12;1443:55;1523:2;1517:9;1545:2;1541;1538:10;1535:36;;;1551:18;;:::i;:::-;1600:2;1594:9;;-1:-1:-1;1612:65:17;1667:2;1648:13;;-1:-1:-1;;1644:27:17;1673:2;1640:36;1594:9;1612:65;:::i;:::-;1701:2;1693:6;1686:18;1741:7;1736:2;1731;1727;1723:11;1719:20;1716:33;1713:53;;;1762:1;1759;1752:12;1713:53;1775:68;1840:2;1835;1827:6;1823:15;1818:2;1814;1810:11;1775:68;:::i;:::-;;1862:6;1852:16;;;;1908:2;1897:9;1893:18;1887:25;1877:35;;1952:3;1941:9;1937:19;1931:26;1921:36;;1976:50;2021:3;2010:9;2006:19;1976:50;:::i;:::-;1966:60;;2066:3;2055:9;2051:19;2045:26;2035:36;;2111:3;2100:9;2096:19;2090:26;2080:36;;2135:50;2180:3;2169:9;2165:19;2135:50;:::i;:::-;2125:60;;2204:50;2249:3;2238:9;2234:19;2204:50;:::i;:::-;2194:60;;2274:50;2319:3;2308:9;2304:19;2274:50;:::i;:::-;2263:61;;837:1493;;;;;;;;;;;;;;:::o;2693:127::-;2754:10;2749:3;2745:20;2742:1;2735:31;2785:4;2782:1;2775:15;2809:4;2806:1;2799:15;2825:135;2864:3;2885:17;;;2882:43;;2905:18;;:::i;:::-;-1:-1:-1;2952:1:17;2941:13;;2825:135::o;2965:380::-;3044:1;3040:12;;;;3087;;;3108:61;;3162:4;3154:6;3150:17;3140:27;;3108:61;3215:2;3207:6;3204:14;3184:18;3181:38;3178:161;;3261:10;3256:3;3252:20;3249:1;3242:31;3296:4;3293:1;3286:15;3324:4;3321:1;3314:15;3178:161;;2965:380;;;:::o;3476:545::-;3578:2;3573:3;3570:11;3567:448;;;3614:1;3639:5;3635:2;3628:17;3684:4;3680:2;3670:19;3754:2;3742:10;3738:19;3735:1;3731:27;3725:4;3721:38;3790:4;3778:10;3775:20;3772:47;;;-1:-1:-1;3813:4:17;3772:47;3868:2;3863:3;3859:12;3856:1;3852:20;3846:4;3842:31;3832:41;;3923:82;3941:2;3934:5;3931:13;3923:82;;;3986:17;;;3967:1;3956:13;3923:82;;3567:448;3476:545;;;:::o;4197:1352::-;4317:10;;-1:-1:-1;;;;;4339:30:17;;4336:56;;;4372:18;;:::i;:::-;4401:97;4491:6;4451:38;4483:4;4477:11;4451:38;:::i;:::-;4445:4;4401:97;:::i;:::-;4553:4;;4617:2;4606:14;;4634:1;4629:663;;;;5336:1;5353:6;5350:89;;;-1:-1:-1;5405:19:17;;;5399:26;5350:89;-1:-1:-1;;4154:1:17;4150:11;;;4146:24;4142:29;4132:40;4178:1;4174:11;;;4129:57;5452:81;;4599:944;;4629:663;3423:1;3416:14;;;3460:4;3447:18;;-1:-1:-1;;4665:20:17;;;4783:236;4797:7;4794:1;4791:14;4783:236;;;4886:19;;;4880:26;4865:42;;4978:27;;;;4946:1;4934:14;;;;4813:19;;4783:236;;;4787:3;5047:6;5038:7;5035:19;5032:201;;;5108:19;;;5102:26;-1:-1:-1;;5191:1:17;5187:14;;;5203:3;5183:24;5179:37;5175:42;5160:58;5145:74;;5032:201;-1:-1:-1;;;;;5279:1:17;5263:14;;;5259:22;5246:36;;-1:-1:-1;4197:1352:17:o;5956:125::-;6021:9;;;6042:10;;;6039:36;;;6055:18;;:::i;6339:127::-;6400:10;6395:3;6391:20;6388:1;6381:31;6431:4;6428:1;6421:15;6455:4;6452:1;6445:15;6821:270;6862:3;6900:5;6894:12;6927:6;6922:3;6915:19;6943:76;7012:6;7005:4;7000:3;6996:14;6989:4;6982:5;6978:16;6943:76;:::i;:::-;7073:2;7052:15;-1:-1:-1;;7048:29:17;7039:39;;;;7080:4;7035:50;;6821:270;-1:-1:-1;;6821:270:17:o;7096:560::-;-1:-1:-1;;;;;7393:15:17;;;7375:34;;7445:15;;7440:2;7425:18;;7418:43;7492:2;7477:18;;7470:34;;;7535:2;7520:18;;7513:34;;;7355:3;7578;7563:19;;7556:32;;;7318:4;;7605:45;;7630:19;;7622:6;7605:45;:::i;:::-;7597:53;7096:560;-1:-1:-1;;;;;;;7096:560:17:o;7661:290::-;7730:6;7783:2;7771:9;7762:7;7758:23;7754:32;7751:52;;;7799:1;7796;7789:12;7751:52;7825:16;;-1:-1:-1;;;;;;7870:32:17;;7860:43;;7850:71;;7917:1;7914;7907:12;7850:71;7940:5;7661:290;-1:-1:-1;;;7661:290:17:o;7956:179::-;7991:3;8033:1;8015:16;8012:23;8009:120;;;8079:1;8076;8073;8058:23;-1:-1:-1;8116:1:17;8110:8;8105:3;8101:18;8009:120;7956:179;:::o;8140:671::-;8179:3;8221:4;8203:16;8200:26;8197:39;;;8140:671;:::o;8197:39::-;8263:2;8257:9;-1:-1:-1;;8328:16:17;8324:25;;8321:1;8257:9;8300:50;8373:11;;8403:16;-1:-1:-1;;;;;8471:14:17;;;8502:4;8490:17;;8487:25;-1:-1:-1;8468:45:17;8465:58;;;8516:5;;;;;8140:671;:::o;8465:58::-;8553:6;8547:4;8543:17;8532:28;;8589:3;8583:10;8616:2;8608:6;8605:14;8602:27;;;8622:5;;;;;;8140:671;:::o;8602:27::-;8706:2;8687:16;8681:4;8677:27;8673:36;8666:4;8657:6;8652:3;8648:16;8644:27;8641:69;8638:82;;;8713:5;;;;;;8140:671;:::o;8638:82::-;8729:57;8780:4;8771:6;8763;8759:19;8755:30;8749:4;8729:57;:::i;:::-;-1:-1:-1;8802:3:17;;8140:671;-1:-1:-1;;;;;8140:671:17:o;8816:219::-;8965:2;8954:9;8947:21;8928:4;8985:44;9025:2;9014:9;9010:18;9002:6;8985:44;:::i;10078:277::-;10145:6;10198:2;10186:9;10177:7;10173:23;10169:32;10166:52;;;10214:1;10211;10204:12;10166:52;10246:9;10240:16;10299:5;10292:13;10285:21;10278:5;10275:32;10265:60;;10321:1;10318;10311:12;10078:277;757:5293:15;;;;;;"},"deployedBytecode":{"functionDebugData":{"@DEFAULT_ADMIN_ROLE_27":{"entryPoint":null,"id":27,"parameterSlots":0,"returnSlots":0},"@EXECUTOR_ROLE_3923":{"entryPoint":null,"id":3923,"parameterSlots":0,"returnSlots":0},"@_afterTokenTransfer_1508":{"entryPoint":null,"id":1508,"parameterSlots":6,"returnSlots":0},"@_asSingletonArray_1664":{"entryPoint":6300,"id":1664,"parameterSlots":1,"returnSlots":1},"@_beforeTokenTransfer_1489":{"entryPoint":null,"id":1489,"parameterSlots":6,"returnSlots":0},"@_beforeTokenTransfer_4095":{"entryPoint":5781,"id":4095,"parameterSlots":6,"returnSlots":0},"@_checkRole_131":{"entryPoint":6211,"id":131,"parameterSlots":2,"returnSlots":0},"@_checkRole_92":{"entryPoint":4635,"id":92,"parameterSlots":1,"returnSlots":0},"@_doSafeBatchTransferAcceptanceCheck_1636":{"entryPoint":5864,"id":1636,"parameterSlots":6,"returnSlots":0},"@_doSafeTransferAcceptanceCheck_1571":{"entryPoint":6375,"id":1571,"parameterSlots":6,"returnSlots":0},"@_efficientHash_2949":{"entryPoint":null,"id":2949,"parameterSlots":2,"returnSlots":1},"@_grantRole_283":{"entryPoint":4648,"id":283,"parameterSlots":2,"returnSlots":0},"@_hashPair_2938":{"entryPoint":6562,"id":2938,"parameterSlots":2,"returnSlots":1},"@_mint_1099":{"entryPoint":5109,"id":1099,"parameterSlots":4,"returnSlots":0},"@_msgSender_2263":{"entryPoint":null,"id":2263,"parameterSlots":0,"returnSlots":1},"@_revokeRole_314":{"entryPoint":4782,"id":314,"parameterSlots":2,"returnSlots":0},"@_safeBatchTransferFrom_987":{"entryPoint":4144,"id":987,"parameterSlots":5,"returnSlots":0},"@_safeTransferFrom_852":{"entryPoint":5400,"id":852,"parameterSlots":5,"returnSlots":0},"@_setApprovalForAll_1470":{"entryPoint":4885,"id":1470,"parameterSlots":3,"returnSlots":0},"@balanceOfBatch_622":{"entryPoint":3069,"id":622,"parameterSlots":2,"returnSlots":1},"@balanceOf_558":{"entryPoint":1106,"id":558,"parameterSlots":2,"returnSlots":1},"@baseToken_3926":{"entryPoint":null,"id":3926,"parameterSlots":0,"returnSlots":0},"@executorManager_3929":{"entryPoint":null,"id":3929,"parameterSlots":0,"returnSlots":0},"@getRoleAdmin_146":{"entryPoint":null,"id":146,"parameterSlots":1,"returnSlots":1},"@grantRole_166":{"entryPoint":1641,"id":166,"parameterSlots":2,"returnSlots":0},"@hasRole_79":{"entryPoint":3383,"id":79,"parameterSlots":2,"returnSlots":1},"@isApprovedForAll_4057":{"entryPoint":3757,"id":4057,"parameterSlots":2,"returnSlots":1},"@isContract_1939":{"entryPoint":null,"id":1939,"parameterSlots":1,"returnSlots":1},"@isWhitelisted_4174":{"entryPoint":1285,"id":4174,"parameterSlots":2,"returnSlots":1},"@lockingFlags_3910":{"entryPoint":null,"id":3910,"parameterSlots":0,"returnSlots":0},"@merkleRoot_3906":{"entryPoint":null,"id":3906,"parameterSlots":0,"returnSlots":0},"@platformFee_3918":{"entryPoint":null,"id":3918,"parameterSlots":0,"returnSlots":0},"@platformTreasury_3934":{"entryPoint":null,"id":3934,"parameterSlots":0,"returnSlots":0},"@pricePerToken_3914":{"entryPoint":null,"id":3914,"parameterSlots":0,"returnSlots":0},"@processBundle_4433":{"entryPoint":1809,"id":4433,"parameterSlots":3,"returnSlots":0},"@processProof_2533":{"entryPoint":5712,"id":2533,"parameterSlots":2,"returnSlots":1},"@renounceRole_209":{"entryPoint":1683,"id":209,"parameterSlots":2,"returnSlots":0},"@revokeRole_186":{"entryPoint":3720,"id":186,"parameterSlots":2,"returnSlots":0},"@safeBatchTransferFrom_735":{"entryPoint":1565,"id":735,"parameterSlots":5,"returnSlots":0},"@safeTransferFrom_695":{"entryPoint":3936,"id":695,"parameterSlots":5,"returnSlots":0},"@serviceFee_3916":{"entryPoint":null,"id":3916,"parameterSlots":0,"returnSlots":0},"@setApprovalForAll_639":{"entryPoint":3426,"id":639,"parameterSlots":2,"returnSlots":0},"@setExecutorManager_4223":{"entryPoint":3890,"id":4223,"parameterSlots":1,"returnSlots":0},"@setMerkleRoot_4187":{"entryPoint":3366,"id":4187,"parameterSlots":1,"returnSlots":0},"@supportsInterface_2973":{"entryPoint":null,"id":2973,"parameterSlots":1,"returnSlots":1},"@supportsInterface_4208":{"entryPoint":1259,"id":4208,"parameterSlots":1,"returnSlots":1},"@supportsInterface_518":{"entryPoint":4005,"id":518,"parameterSlots":1,"returnSlots":1},"@supportsInterface_60":{"entryPoint":4085,"id":60,"parameterSlots":1,"returnSlots":1},"@toHexString_2427":{"entryPoint":6630,"id":2427,"parameterSlots":2,"returnSlots":1},"@toHexString_2447":{"entryPoint":6612,"id":2447,"parameterSlots":1,"returnSlots":1},"@tradingWallet_3932":{"entryPoint":null,"id":3932,"parameterSlots":0,"returnSlots":0},"@uri_530":{"entryPoint":1417,"id":530,"parameterSlots":1,"returnSlots":1},"@verify_2472":{"entryPoint":4122,"id":2472,"parameterSlots":3,"returnSlots":1},"@whitelistMint_4148":{"entryPoint":3437,"id":4148,"parameterSlots":4,"returnSlots":0},"abi_decode_array_bytes32_dyn_calldata":{"entryPoint":7157,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_array_uint256_dyn":{"entryPoint":7522,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes":{"entryPoint":7635,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":8589,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_payablet_address_payablet_uint256t_uint256":{"entryPoint":8970,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_address":{"entryPoint":8543,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr":{"entryPoint":7750,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr":{"entryPoint":8618,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_bool":{"entryPoint":8386,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":7062,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":8090,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptr":{"entryPoint":7232,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":8858,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":7923,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":7128,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":9608,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes_calldata_ptrt_uint256":{"entryPoint":7971,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_uint256":{"entryPoint":7297,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":9097,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_bytes_memory_ptrt_array$_t_bytes32_$dyn_calldata_ptr":{"entryPoint":8432,"id":null,"parameterSlots":2,"returnSlots":4},"abi_encode_array_address_dyn":{"entryPoint":9144,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_array_uint256_dyn":{"entryPoint":8294,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string":{"entryPoint":7358,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_address__to_t_address__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":9284,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":9874,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":9514,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":9991,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr_t_array$_t_address_$dyn_memory_ptr_t_address_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr_t_array$_t_address_$dyn_memory_ptr_t_address_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":9201,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":8353,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":9468,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_contract$_IERC20_$3876__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IExecutorManager_$3864__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_ITradingWallet_$3900__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7402,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9802,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0d206f3891ed4fd63de4d8461a7a83b378123281d9065e8c00f16b46057d8c2c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8780,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_60304f7258d86aaa1cc1138fb2f6bbc524adfb91bc7985c5cde7fccc8aa6045a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_691e84db20482a4c42ba7a4aa341855d8289774d9698451740209f85cbb09b0a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9325,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9394,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9bd124d272f06141b15552f4450bbed70049ce5ab0bcee1bad3c2f0f7ff9f544__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_acc775314033618014c4c79559957baf417931f6e8d18e4684d327a6a76d2e7e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c05b6e35da5e61f1d7b3ef7e615ddf60dfc35de37aba5dd75608f23dd6e104fb__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"array_allocation_size_array_uint256_dyn":{"entryPoint":7487,"id":null,"parameterSlots":1,"returnSlots":1},"calldata_array_index_range_access_t_bytes_calldata_ptr":{"entryPoint":8928,"id":null,"parameterSlots":4,"returnSlots":2},"checked_add_t_uint256":{"entryPoint":8909,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":9063,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":9040,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":7322,"id":null,"parameterSlots":3,"returnSlots":0},"decrement_t_uint256":{"entryPoint":10049,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":8722,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":7443,"id":null,"parameterSlots":2,"returnSlots":0},"increment_t_uint256":{"entryPoint":9300,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":8887,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":9122,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":7421,"id":null,"parameterSlots":0,"returnSlots":0},"return_data_selector":{"entryPoint":9637,"id":null,"parameterSlots":0,"returnSlots":1},"try_decode_error_message":{"entryPoint":9665,"id":null,"parameterSlots":0,"returnSlots":1},"validator_revert_address":{"entryPoint":7041,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_bool":{"entryPoint":8372,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_bytes4":{"entryPoint":7106,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:29124:17","statements":[{"nodeType":"YulBlock","src":"6:3:17","statements":[]},{"body":{"nodeType":"YulBlock","src":"59:86:17","statements":[{"body":{"nodeType":"YulBlock","src":"123:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"132:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"135:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"125:6:17"},"nodeType":"YulFunctionCall","src":"125:12:17"},"nodeType":"YulExpressionStatement","src":"125:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"82:5:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"93:5:17"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"108:3:17","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"113:1:17","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"104:3:17"},"nodeType":"YulFunctionCall","src":"104:11:17"},{"kind":"number","nodeType":"YulLiteral","src":"117:1:17","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"100:3:17"},"nodeType":"YulFunctionCall","src":"100:19:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"89:3:17"},"nodeType":"YulFunctionCall","src":"89:31:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"79:2:17"},"nodeType":"YulFunctionCall","src":"79:42:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"72:6:17"},"nodeType":"YulFunctionCall","src":"72:50:17"},"nodeType":"YulIf","src":"69:70:17"}]},"name":"validator_revert_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"48:5:17","type":""}],"src":"14:131:17"},{"body":{"nodeType":"YulBlock","src":"237:228:17","statements":[{"body":{"nodeType":"YulBlock","src":"283:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"292:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"295:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"285:6:17"},"nodeType":"YulFunctionCall","src":"285:12:17"},"nodeType":"YulExpressionStatement","src":"285:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"258:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"267:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"254:3:17"},"nodeType":"YulFunctionCall","src":"254:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"279:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"250:3:17"},"nodeType":"YulFunctionCall","src":"250:32:17"},"nodeType":"YulIf","src":"247:52:17"},{"nodeType":"YulVariableDeclaration","src":"308:36:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"334:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"321:12:17"},"nodeType":"YulFunctionCall","src":"321:23:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"312:5:17","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"378:5:17"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"353:24:17"},"nodeType":"YulFunctionCall","src":"353:31:17"},"nodeType":"YulExpressionStatement","src":"353:31:17"},{"nodeType":"YulAssignment","src":"393:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"403:5:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"393:6:17"}]},{"nodeType":"YulAssignment","src":"417:42:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"444:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"455:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"440:3:17"},"nodeType":"YulFunctionCall","src":"440:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"427:12:17"},"nodeType":"YulFunctionCall","src":"427:32:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"417:6:17"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"195:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"206:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"218:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"226:6:17","type":""}],"src":"150:315:17"},{"body":{"nodeType":"YulBlock","src":"571:76:17","statements":[{"nodeType":"YulAssignment","src":"581:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"593:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"604:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"589:3:17"},"nodeType":"YulFunctionCall","src":"589:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"581:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"623:9:17"},{"name":"value0","nodeType":"YulIdentifier","src":"634:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"616:6:17"},"nodeType":"YulFunctionCall","src":"616:25:17"},"nodeType":"YulExpressionStatement","src":"616:25:17"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"540:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"551:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"562:4:17","type":""}],"src":"470:177:17"},{"body":{"nodeType":"YulBlock","src":"696:87:17","statements":[{"body":{"nodeType":"YulBlock","src":"761:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"770:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"773:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"763:6:17"},"nodeType":"YulFunctionCall","src":"763:12:17"},"nodeType":"YulExpressionStatement","src":"763:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"719:5:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"730:5:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"741:3:17","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"746:10:17","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"737:3:17"},"nodeType":"YulFunctionCall","src":"737:20:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"726:3:17"},"nodeType":"YulFunctionCall","src":"726:32:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"716:2:17"},"nodeType":"YulFunctionCall","src":"716:43:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"709:6:17"},"nodeType":"YulFunctionCall","src":"709:51:17"},"nodeType":"YulIf","src":"706:71:17"}]},"name":"validator_revert_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"685:5:17","type":""}],"src":"652:131:17"},{"body":{"nodeType":"YulBlock","src":"857:176:17","statements":[{"body":{"nodeType":"YulBlock","src":"903:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"912:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"915:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"905:6:17"},"nodeType":"YulFunctionCall","src":"905:12:17"},"nodeType":"YulExpressionStatement","src":"905:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"878:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"887:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"874:3:17"},"nodeType":"YulFunctionCall","src":"874:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"899:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"870:3:17"},"nodeType":"YulFunctionCall","src":"870:32:17"},"nodeType":"YulIf","src":"867:52:17"},{"nodeType":"YulVariableDeclaration","src":"928:36:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"954:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"941:12:17"},"nodeType":"YulFunctionCall","src":"941:23:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"932:5:17","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"997:5:17"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"973:23:17"},"nodeType":"YulFunctionCall","src":"973:30:17"},"nodeType":"YulExpressionStatement","src":"973:30:17"},{"nodeType":"YulAssignment","src":"1012:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"1022:5:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1012:6:17"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"823:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"834:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"846:6:17","type":""}],"src":"788:245:17"},{"body":{"nodeType":"YulBlock","src":"1133:92:17","statements":[{"nodeType":"YulAssignment","src":"1143:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1155:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"1166:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1151:3:17"},"nodeType":"YulFunctionCall","src":"1151:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1143:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1185:9:17"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1210:6:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1203:6:17"},"nodeType":"YulFunctionCall","src":"1203:14:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1196:6:17"},"nodeType":"YulFunctionCall","src":"1196:22:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1178:6:17"},"nodeType":"YulFunctionCall","src":"1178:41:17"},"nodeType":"YulExpressionStatement","src":"1178:41:17"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1102:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1113:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1124:4:17","type":""}],"src":"1038:187:17"},{"body":{"nodeType":"YulBlock","src":"1314:283:17","statements":[{"body":{"nodeType":"YulBlock","src":"1363:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1372:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1375:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1365:6:17"},"nodeType":"YulFunctionCall","src":"1365:12:17"},"nodeType":"YulExpressionStatement","src":"1365:12:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1342:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"1350:4:17","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1338:3:17"},"nodeType":"YulFunctionCall","src":"1338:17:17"},{"name":"end","nodeType":"YulIdentifier","src":"1357:3:17"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1334:3:17"},"nodeType":"YulFunctionCall","src":"1334:27:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1327:6:17"},"nodeType":"YulFunctionCall","src":"1327:35:17"},"nodeType":"YulIf","src":"1324:55:17"},{"nodeType":"YulAssignment","src":"1388:30:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1411:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1398:12:17"},"nodeType":"YulFunctionCall","src":"1398:20:17"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1388:6:17"}]},{"body":{"nodeType":"YulBlock","src":"1461:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1470:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1473:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1463:6:17"},"nodeType":"YulFunctionCall","src":"1463:12:17"},"nodeType":"YulExpressionStatement","src":"1463:12:17"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1433:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"1441:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1430:2:17"},"nodeType":"YulFunctionCall","src":"1430:30:17"},"nodeType":"YulIf","src":"1427:50:17"},{"nodeType":"YulAssignment","src":"1486:29:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1502:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"1510:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1498:3:17"},"nodeType":"YulFunctionCall","src":"1498:17:17"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"1486:8:17"}]},{"body":{"nodeType":"YulBlock","src":"1575:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1584:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1587:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1577:6:17"},"nodeType":"YulFunctionCall","src":"1577:12:17"},"nodeType":"YulExpressionStatement","src":"1577:12:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1538:6:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1550:1:17","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"1553:6:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1546:3:17"},"nodeType":"YulFunctionCall","src":"1546:14:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1534:3:17"},"nodeType":"YulFunctionCall","src":"1534:27:17"},{"kind":"number","nodeType":"YulLiteral","src":"1563:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1530:3:17"},"nodeType":"YulFunctionCall","src":"1530:38:17"},{"name":"end","nodeType":"YulIdentifier","src":"1570:3:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1527:2:17"},"nodeType":"YulFunctionCall","src":"1527:47:17"},"nodeType":"YulIf","src":"1524:67:17"}]},"name":"abi_decode_array_bytes32_dyn_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1277:6:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"1285:3:17","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"1293:8:17","type":""},{"name":"length","nodeType":"YulTypedName","src":"1303:6:17","type":""}],"src":"1230:367:17"},{"body":{"nodeType":"YulBlock","src":"1707:332:17","statements":[{"body":{"nodeType":"YulBlock","src":"1753:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1762:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1765:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1755:6:17"},"nodeType":"YulFunctionCall","src":"1755:12:17"},"nodeType":"YulExpressionStatement","src":"1755:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1728:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"1737:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1724:3:17"},"nodeType":"YulFunctionCall","src":"1724:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"1749:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1720:3:17"},"nodeType":"YulFunctionCall","src":"1720:32:17"},"nodeType":"YulIf","src":"1717:52:17"},{"nodeType":"YulVariableDeclaration","src":"1778:37:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1805:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1792:12:17"},"nodeType":"YulFunctionCall","src":"1792:23:17"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1782:6:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"1858:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1867:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1870:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1860:6:17"},"nodeType":"YulFunctionCall","src":"1860:12:17"},"nodeType":"YulExpressionStatement","src":"1860:12:17"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1830:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"1838:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1827:2:17"},"nodeType":"YulFunctionCall","src":"1827:30:17"},"nodeType":"YulIf","src":"1824:50:17"},{"nodeType":"YulVariableDeclaration","src":"1883:96:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1951:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"1962:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1947:3:17"},"nodeType":"YulFunctionCall","src":"1947:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1971:7:17"}],"functionName":{"name":"abi_decode_array_bytes32_dyn_calldata","nodeType":"YulIdentifier","src":"1909:37:17"},"nodeType":"YulFunctionCall","src":"1909:70:17"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"1887:8:17","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"1897:8:17","type":""}]},{"nodeType":"YulAssignment","src":"1988:18:17","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"1998:8:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1988:6:17"}]},{"nodeType":"YulAssignment","src":"2015:18:17","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"2025:8:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2015:6:17"}]}]},"name":"abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1665:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1676:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1688:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1696:6:17","type":""}],"src":"1602:437:17"},{"body":{"nodeType":"YulBlock","src":"2145:76:17","statements":[{"nodeType":"YulAssignment","src":"2155:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2167:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"2178:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2163:3:17"},"nodeType":"YulFunctionCall","src":"2163:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2155:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2197:9:17"},{"name":"value0","nodeType":"YulIdentifier","src":"2208:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2190:6:17"},"nodeType":"YulFunctionCall","src":"2190:25:17"},"nodeType":"YulExpressionStatement","src":"2190:25:17"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2114:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2125:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2136:4:17","type":""}],"src":"2044:177:17"},{"body":{"nodeType":"YulBlock","src":"2296:110:17","statements":[{"body":{"nodeType":"YulBlock","src":"2342:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2351:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2354:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2344:6:17"},"nodeType":"YulFunctionCall","src":"2344:12:17"},"nodeType":"YulExpressionStatement","src":"2344:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2317:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"2326:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2313:3:17"},"nodeType":"YulFunctionCall","src":"2313:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"2338:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2309:3:17"},"nodeType":"YulFunctionCall","src":"2309:32:17"},"nodeType":"YulIf","src":"2306:52:17"},{"nodeType":"YulAssignment","src":"2367:33:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2390:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2377:12:17"},"nodeType":"YulFunctionCall","src":"2377:23:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2367:6:17"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2262:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2273:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2285:6:17","type":""}],"src":"2226:180:17"},{"body":{"nodeType":"YulBlock","src":"2477:184:17","statements":[{"nodeType":"YulVariableDeclaration","src":"2487:10:17","value":{"kind":"number","nodeType":"YulLiteral","src":"2496:1:17","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"2491:1:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"2556:63:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2581:3:17"},{"name":"i","nodeType":"YulIdentifier","src":"2586:1:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2577:3:17"},"nodeType":"YulFunctionCall","src":"2577:11:17"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2600:3:17"},{"name":"i","nodeType":"YulIdentifier","src":"2605:1:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2596:3:17"},"nodeType":"YulFunctionCall","src":"2596:11:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2590:5:17"},"nodeType":"YulFunctionCall","src":"2590:18:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2570:6:17"},"nodeType":"YulFunctionCall","src":"2570:39:17"},"nodeType":"YulExpressionStatement","src":"2570:39:17"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2517:1:17"},{"name":"length","nodeType":"YulIdentifier","src":"2520:6:17"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2514:2:17"},"nodeType":"YulFunctionCall","src":"2514:13:17"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2528:19:17","statements":[{"nodeType":"YulAssignment","src":"2530:15:17","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2539:1:17"},{"kind":"number","nodeType":"YulLiteral","src":"2542:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2535:3:17"},"nodeType":"YulFunctionCall","src":"2535:10:17"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"2530:1:17"}]}]},"pre":{"nodeType":"YulBlock","src":"2510:3:17","statements":[]},"src":"2506:113:17"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2639:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"2644:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2635:3:17"},"nodeType":"YulFunctionCall","src":"2635:16:17"},{"kind":"number","nodeType":"YulLiteral","src":"2653:1:17","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2628:6:17"},"nodeType":"YulFunctionCall","src":"2628:27:17"},"nodeType":"YulExpressionStatement","src":"2628:27:17"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"2455:3:17","type":""},{"name":"dst","nodeType":"YulTypedName","src":"2460:3:17","type":""},{"name":"length","nodeType":"YulTypedName","src":"2465:6:17","type":""}],"src":"2411:250:17"},{"body":{"nodeType":"YulBlock","src":"2716:221:17","statements":[{"nodeType":"YulVariableDeclaration","src":"2726:26:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2746:5:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2740:5:17"},"nodeType":"YulFunctionCall","src":"2740:12:17"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2730:6:17","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2768:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"2773:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2761:6:17"},"nodeType":"YulFunctionCall","src":"2761:19:17"},"nodeType":"YulExpressionStatement","src":"2761:19:17"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2828:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"2835:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2824:3:17"},"nodeType":"YulFunctionCall","src":"2824:16:17"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2846:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"2851:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2842:3:17"},"nodeType":"YulFunctionCall","src":"2842:14:17"},{"name":"length","nodeType":"YulIdentifier","src":"2858:6:17"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"2789:34:17"},"nodeType":"YulFunctionCall","src":"2789:76:17"},"nodeType":"YulExpressionStatement","src":"2789:76:17"},{"nodeType":"YulAssignment","src":"2874:57:17","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2889:3:17"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2902:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"2910:2:17","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2898:3:17"},"nodeType":"YulFunctionCall","src":"2898:15:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2919:2:17","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2915:3:17"},"nodeType":"YulFunctionCall","src":"2915:7:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2894:3:17"},"nodeType":"YulFunctionCall","src":"2894:29:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2885:3:17"},"nodeType":"YulFunctionCall","src":"2885:39:17"},{"kind":"number","nodeType":"YulLiteral","src":"2926:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2881:3:17"},"nodeType":"YulFunctionCall","src":"2881:50:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2874:3:17"}]}]},"name":"abi_encode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2693:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2700:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"2708:3:17","type":""}],"src":"2666:271:17"},{"body":{"nodeType":"YulBlock","src":"3063:99:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3080:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"3091:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3073:6:17"},"nodeType":"YulFunctionCall","src":"3073:21:17"},"nodeType":"YulExpressionStatement","src":"3073:21:17"},{"nodeType":"YulAssignment","src":"3103:53:17","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3129:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3141:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"3152:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3137:3:17"},"nodeType":"YulFunctionCall","src":"3137:18:17"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"3111:17:17"},"nodeType":"YulFunctionCall","src":"3111:45:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3103:4:17"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3032:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3043:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3054:4:17","type":""}],"src":"2942:220:17"},{"body":{"nodeType":"YulBlock","src":"3291:102:17","statements":[{"nodeType":"YulAssignment","src":"3301:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3313:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"3324:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3309:3:17"},"nodeType":"YulFunctionCall","src":"3309:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3301:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3343:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3358:6:17"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3374:3:17","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"3379:1:17","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3370:3:17"},"nodeType":"YulFunctionCall","src":"3370:11:17"},{"kind":"number","nodeType":"YulLiteral","src":"3383:1:17","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3366:3:17"},"nodeType":"YulFunctionCall","src":"3366:19:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3354:3:17"},"nodeType":"YulFunctionCall","src":"3354:32:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3336:6:17"},"nodeType":"YulFunctionCall","src":"3336:51:17"},"nodeType":"YulExpressionStatement","src":"3336:51:17"}]},"name":"abi_encode_tuple_t_contract$_ITradingWallet_$3900__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3260:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3271:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3282:4:17","type":""}],"src":"3167:226:17"},{"body":{"nodeType":"YulBlock","src":"3468:110:17","statements":[{"body":{"nodeType":"YulBlock","src":"3514:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3523:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3526:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3516:6:17"},"nodeType":"YulFunctionCall","src":"3516:12:17"},"nodeType":"YulExpressionStatement","src":"3516:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3489:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"3498:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3485:3:17"},"nodeType":"YulFunctionCall","src":"3485:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"3510:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3481:3:17"},"nodeType":"YulFunctionCall","src":"3481:32:17"},"nodeType":"YulIf","src":"3478:52:17"},{"nodeType":"YulAssignment","src":"3539:33:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3562:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3549:12:17"},"nodeType":"YulFunctionCall","src":"3549:23:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3539:6:17"}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3434:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3445:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3457:6:17","type":""}],"src":"3398:180:17"},{"body":{"nodeType":"YulBlock","src":"3615:95:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3632:1:17","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3639:3:17","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3644:10:17","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3635:3:17"},"nodeType":"YulFunctionCall","src":"3635:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3625:6:17"},"nodeType":"YulFunctionCall","src":"3625:31:17"},"nodeType":"YulExpressionStatement","src":"3625:31:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3672:1:17","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3675:4:17","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3665:6:17"},"nodeType":"YulFunctionCall","src":"3665:15:17"},"nodeType":"YulExpressionStatement","src":"3665:15:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3696:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3699:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3689:6:17"},"nodeType":"YulFunctionCall","src":"3689:15:17"},"nodeType":"YulExpressionStatement","src":"3689:15:17"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"3583:127:17"},{"body":{"nodeType":"YulBlock","src":"3762:202:17","statements":[{"nodeType":"YulVariableDeclaration","src":"3772:58:17","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3794:6:17"},{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"3810:4:17"},{"kind":"number","nodeType":"YulLiteral","src":"3816:2:17","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3806:3:17"},"nodeType":"YulFunctionCall","src":"3806:13:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3825:2:17","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3821:3:17"},"nodeType":"YulFunctionCall","src":"3821:7:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3802:3:17"},"nodeType":"YulFunctionCall","src":"3802:27:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3790:3:17"},"nodeType":"YulFunctionCall","src":"3790:40:17"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"3776:10:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"3905:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3907:16:17"},"nodeType":"YulFunctionCall","src":"3907:18:17"},"nodeType":"YulExpressionStatement","src":"3907:18:17"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3848:10:17"},{"kind":"number","nodeType":"YulLiteral","src":"3860:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3845:2:17"},"nodeType":"YulFunctionCall","src":"3845:34:17"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3884:10:17"},{"name":"memPtr","nodeType":"YulIdentifier","src":"3896:6:17"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3881:2:17"},"nodeType":"YulFunctionCall","src":"3881:22:17"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"3842:2:17"},"nodeType":"YulFunctionCall","src":"3842:62:17"},"nodeType":"YulIf","src":"3839:88:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3943:2:17","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3947:10:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3936:6:17"},"nodeType":"YulFunctionCall","src":"3936:22:17"},"nodeType":"YulExpressionStatement","src":"3936:22:17"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"3744:6:17","type":""},{"name":"size","nodeType":"YulTypedName","src":"3752:4:17","type":""}],"src":"3715:249:17"},{"body":{"nodeType":"YulBlock","src":"4038:114:17","statements":[{"body":{"nodeType":"YulBlock","src":"4082:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4084:16:17"},"nodeType":"YulFunctionCall","src":"4084:18:17"},"nodeType":"YulExpressionStatement","src":"4084:18:17"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4054:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"4062:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4051:2:17"},"nodeType":"YulFunctionCall","src":"4051:30:17"},"nodeType":"YulIf","src":"4048:56:17"},{"nodeType":"YulAssignment","src":"4113:33:17","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4129:1:17","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"4132:6:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4125:3:17"},"nodeType":"YulFunctionCall","src":"4125:14:17"},{"kind":"number","nodeType":"YulLiteral","src":"4141:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4121:3:17"},"nodeType":"YulFunctionCall","src":"4121:25:17"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"4113:4:17"}]}]},"name":"array_allocation_size_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"4018:6:17","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"4029:4:17","type":""}],"src":"3969:183:17"},{"body":{"nodeType":"YulBlock","src":"4221:660:17","statements":[{"body":{"nodeType":"YulBlock","src":"4270:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4279:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4282:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4272:6:17"},"nodeType":"YulFunctionCall","src":"4272:12:17"},"nodeType":"YulExpressionStatement","src":"4272:12:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4249:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"4257:4:17","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4245:3:17"},"nodeType":"YulFunctionCall","src":"4245:17:17"},{"name":"end","nodeType":"YulIdentifier","src":"4264:3:17"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4241:3:17"},"nodeType":"YulFunctionCall","src":"4241:27:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4234:6:17"},"nodeType":"YulFunctionCall","src":"4234:35:17"},"nodeType":"YulIf","src":"4231:55:17"},{"nodeType":"YulVariableDeclaration","src":"4295:30:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4318:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4305:12:17"},"nodeType":"YulFunctionCall","src":"4305:20:17"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4299:2:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4334:14:17","value":{"kind":"number","nodeType":"YulLiteral","src":"4344:4:17","type":"","value":"0x20"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"4338:2:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4357:53:17","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"4407:2:17"}],"functionName":{"name":"array_allocation_size_array_uint256_dyn","nodeType":"YulIdentifier","src":"4367:39:17"},"nodeType":"YulFunctionCall","src":"4367:43:17"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"4361:2:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4419:23:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4439:2:17","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4433:5:17"},"nodeType":"YulFunctionCall","src":"4433:9:17"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"4423:6:17","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4471:6:17"},{"name":"_3","nodeType":"YulIdentifier","src":"4479:2:17"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"4451:19:17"},"nodeType":"YulFunctionCall","src":"4451:31:17"},"nodeType":"YulExpressionStatement","src":"4451:31:17"},{"nodeType":"YulVariableDeclaration","src":"4491:17:17","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"4502:6:17"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"4495:3:17","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4524:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"4532:2:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4517:6:17"},"nodeType":"YulFunctionCall","src":"4517:18:17"},"nodeType":"YulExpressionStatement","src":"4517:18:17"},{"nodeType":"YulAssignment","src":"4544:22:17","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4555:6:17"},{"name":"_2","nodeType":"YulIdentifier","src":"4563:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4551:3:17"},"nodeType":"YulFunctionCall","src":"4551:15:17"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"4544:3:17"}]},{"nodeType":"YulVariableDeclaration","src":"4575:46:17","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4597:6:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4609:1:17","type":"","value":"5"},{"name":"_1","nodeType":"YulIdentifier","src":"4612:2:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4605:3:17"},"nodeType":"YulFunctionCall","src":"4605:10:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4593:3:17"},"nodeType":"YulFunctionCall","src":"4593:23:17"},{"name":"_2","nodeType":"YulIdentifier","src":"4618:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4589:3:17"},"nodeType":"YulFunctionCall","src":"4589:32:17"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"4579:6:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"4649:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4658:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4661:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4651:6:17"},"nodeType":"YulFunctionCall","src":"4651:12:17"},"nodeType":"YulExpressionStatement","src":"4651:12:17"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"4636:6:17"},{"name":"end","nodeType":"YulIdentifier","src":"4644:3:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4633:2:17"},"nodeType":"YulFunctionCall","src":"4633:15:17"},"nodeType":"YulIf","src":"4630:35:17"},{"nodeType":"YulVariableDeclaration","src":"4674:26:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4689:6:17"},{"name":"_2","nodeType":"YulIdentifier","src":"4697:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4685:3:17"},"nodeType":"YulFunctionCall","src":"4685:15:17"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"4678:3:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"4765:86:17","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4786:3:17"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4804:3:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4791:12:17"},"nodeType":"YulFunctionCall","src":"4791:17:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4779:6:17"},"nodeType":"YulFunctionCall","src":"4779:30:17"},"nodeType":"YulExpressionStatement","src":"4779:30:17"},{"nodeType":"YulAssignment","src":"4822:19:17","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4833:3:17"},{"name":"_2","nodeType":"YulIdentifier","src":"4838:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4829:3:17"},"nodeType":"YulFunctionCall","src":"4829:12:17"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"4822:3:17"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4720:3:17"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"4725:6:17"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4717:2:17"},"nodeType":"YulFunctionCall","src":"4717:15:17"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"4733:23:17","statements":[{"nodeType":"YulAssignment","src":"4735:19:17","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4746:3:17"},{"name":"_2","nodeType":"YulIdentifier","src":"4751:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4742:3:17"},"nodeType":"YulFunctionCall","src":"4742:12:17"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"4735:3:17"}]}]},"pre":{"nodeType":"YulBlock","src":"4713:3:17","statements":[]},"src":"4709:142:17"},{"nodeType":"YulAssignment","src":"4860:15:17","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"4869:6:17"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"4860:5:17"}]}]},"name":"abi_decode_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4195:6:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"4203:3:17","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"4211:5:17","type":""}],"src":"4157:724:17"},{"body":{"nodeType":"YulBlock","src":"4938:503:17","statements":[{"body":{"nodeType":"YulBlock","src":"4987:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4996:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4999:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4989:6:17"},"nodeType":"YulFunctionCall","src":"4989:12:17"},"nodeType":"YulExpressionStatement","src":"4989:12:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4966:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"4974:4:17","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4962:3:17"},"nodeType":"YulFunctionCall","src":"4962:17:17"},{"name":"end","nodeType":"YulIdentifier","src":"4981:3:17"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4958:3:17"},"nodeType":"YulFunctionCall","src":"4958:27:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4951:6:17"},"nodeType":"YulFunctionCall","src":"4951:35:17"},"nodeType":"YulIf","src":"4948:55:17"},{"nodeType":"YulVariableDeclaration","src":"5012:30:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5035:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5022:12:17"},"nodeType":"YulFunctionCall","src":"5022:20:17"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5016:2:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"5081:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"5083:16:17"},"nodeType":"YulFunctionCall","src":"5083:18:17"},"nodeType":"YulExpressionStatement","src":"5083:18:17"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"5057:2:17"},{"kind":"number","nodeType":"YulLiteral","src":"5061:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5054:2:17"},"nodeType":"YulFunctionCall","src":"5054:26:17"},"nodeType":"YulIf","src":"5051:52:17"},{"nodeType":"YulVariableDeclaration","src":"5112:23:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5132:2:17","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5126:5:17"},"nodeType":"YulFunctionCall","src":"5126:9:17"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"5116:6:17","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5164:6:17"},{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"5184:2:17"},{"kind":"number","nodeType":"YulLiteral","src":"5188:4:17","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5180:3:17"},"nodeType":"YulFunctionCall","src":"5180:13:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5199:2:17","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"5195:3:17"},"nodeType":"YulFunctionCall","src":"5195:7:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5176:3:17"},"nodeType":"YulFunctionCall","src":"5176:27:17"},{"kind":"number","nodeType":"YulLiteral","src":"5205:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5172:3:17"},"nodeType":"YulFunctionCall","src":"5172:38:17"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"5144:19:17"},"nodeType":"YulFunctionCall","src":"5144:67:17"},"nodeType":"YulExpressionStatement","src":"5144:67:17"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5227:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"5235:2:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5220:6:17"},"nodeType":"YulFunctionCall","src":"5220:18:17"},"nodeType":"YulExpressionStatement","src":"5220:18:17"},{"body":{"nodeType":"YulBlock","src":"5286:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5295:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5298:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5288:6:17"},"nodeType":"YulFunctionCall","src":"5288:12:17"},"nodeType":"YulExpressionStatement","src":"5288:12:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5261:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"5269:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5257:3:17"},"nodeType":"YulFunctionCall","src":"5257:15:17"},{"kind":"number","nodeType":"YulLiteral","src":"5274:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5253:3:17"},"nodeType":"YulFunctionCall","src":"5253:26:17"},{"name":"end","nodeType":"YulIdentifier","src":"5281:3:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5250:2:17"},"nodeType":"YulFunctionCall","src":"5250:35:17"},"nodeType":"YulIf","src":"5247:55:17"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5328:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"5336:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5324:3:17"},"nodeType":"YulFunctionCall","src":"5324:17:17"},{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5347:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"5355:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5343:3:17"},"nodeType":"YulFunctionCall","src":"5343:17:17"},{"name":"_1","nodeType":"YulIdentifier","src":"5362:2:17"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"5311:12:17"},"nodeType":"YulFunctionCall","src":"5311:54:17"},"nodeType":"YulExpressionStatement","src":"5311:54:17"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5389:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"5397:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5385:3:17"},"nodeType":"YulFunctionCall","src":"5385:15:17"},{"kind":"number","nodeType":"YulLiteral","src":"5402:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5381:3:17"},"nodeType":"YulFunctionCall","src":"5381:26:17"},{"kind":"number","nodeType":"YulLiteral","src":"5409:1:17","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5374:6:17"},"nodeType":"YulFunctionCall","src":"5374:37:17"},"nodeType":"YulExpressionStatement","src":"5374:37:17"},{"nodeType":"YulAssignment","src":"5420:15:17","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"5429:6:17"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"5420:5:17"}]}]},"name":"abi_decode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4912:6:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"4920:3:17","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"4928:5:17","type":""}],"src":"4886:555:17"},{"body":{"nodeType":"YulBlock","src":"5643:874:17","statements":[{"body":{"nodeType":"YulBlock","src":"5690:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5699:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5702:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5692:6:17"},"nodeType":"YulFunctionCall","src":"5692:12:17"},"nodeType":"YulExpressionStatement","src":"5692:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5664:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"5673:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5660:3:17"},"nodeType":"YulFunctionCall","src":"5660:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"5685:3:17","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5656:3:17"},"nodeType":"YulFunctionCall","src":"5656:33:17"},"nodeType":"YulIf","src":"5653:53:17"},{"nodeType":"YulVariableDeclaration","src":"5715:36:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5741:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5728:12:17"},"nodeType":"YulFunctionCall","src":"5728:23:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"5719:5:17","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5785:5:17"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"5760:24:17"},"nodeType":"YulFunctionCall","src":"5760:31:17"},"nodeType":"YulExpressionStatement","src":"5760:31:17"},{"nodeType":"YulAssignment","src":"5800:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"5810:5:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5800:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"5824:47:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5856:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"5867:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5852:3:17"},"nodeType":"YulFunctionCall","src":"5852:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5839:12:17"},"nodeType":"YulFunctionCall","src":"5839:32:17"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"5828:7:17","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"5905:7:17"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"5880:24:17"},"nodeType":"YulFunctionCall","src":"5880:33:17"},"nodeType":"YulExpressionStatement","src":"5880:33:17"},{"nodeType":"YulAssignment","src":"5922:17:17","value":{"name":"value_1","nodeType":"YulIdentifier","src":"5932:7:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5922:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"5948:46:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5979:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"5990:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5975:3:17"},"nodeType":"YulFunctionCall","src":"5975:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5962:12:17"},"nodeType":"YulFunctionCall","src":"5962:32:17"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5952:6:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6003:28:17","value":{"kind":"number","nodeType":"YulLiteral","src":"6013:18:17","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"6007:2:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"6058:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6067:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6070:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6060:6:17"},"nodeType":"YulFunctionCall","src":"6060:12:17"},"nodeType":"YulExpressionStatement","src":"6060:12:17"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6046:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"6054:2:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6043:2:17"},"nodeType":"YulFunctionCall","src":"6043:14:17"},"nodeType":"YulIf","src":"6040:34:17"},{"nodeType":"YulAssignment","src":"6083:71:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6126:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"6137:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6122:3:17"},"nodeType":"YulFunctionCall","src":"6122:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6146:7:17"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"6093:28:17"},"nodeType":"YulFunctionCall","src":"6093:61:17"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"6083:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"6163:48:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6196:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"6207:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6192:3:17"},"nodeType":"YulFunctionCall","src":"6192:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6179:12:17"},"nodeType":"YulFunctionCall","src":"6179:32:17"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"6167:8:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"6240:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6249:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6252:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6242:6:17"},"nodeType":"YulFunctionCall","src":"6242:12:17"},"nodeType":"YulExpressionStatement","src":"6242:12:17"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"6226:8:17"},{"name":"_1","nodeType":"YulIdentifier","src":"6236:2:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6223:2:17"},"nodeType":"YulFunctionCall","src":"6223:16:17"},"nodeType":"YulIf","src":"6220:36:17"},{"nodeType":"YulAssignment","src":"6265:73:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6308:9:17"},{"name":"offset_1","nodeType":"YulIdentifier","src":"6319:8:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6304:3:17"},"nodeType":"YulFunctionCall","src":"6304:24:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6330:7:17"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"6275:28:17"},"nodeType":"YulFunctionCall","src":"6275:63:17"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"6265:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"6347:49:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6380:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"6391:3:17","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6376:3:17"},"nodeType":"YulFunctionCall","src":"6376:19:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6363:12:17"},"nodeType":"YulFunctionCall","src":"6363:33:17"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"6351:8:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"6425:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6434:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6437:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6427:6:17"},"nodeType":"YulFunctionCall","src":"6427:12:17"},"nodeType":"YulExpressionStatement","src":"6427:12:17"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"6411:8:17"},{"name":"_1","nodeType":"YulIdentifier","src":"6421:2:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6408:2:17"},"nodeType":"YulFunctionCall","src":"6408:16:17"},"nodeType":"YulIf","src":"6405:36:17"},{"nodeType":"YulAssignment","src":"6450:61:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6481:9:17"},{"name":"offset_2","nodeType":"YulIdentifier","src":"6492:8:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6477:3:17"},"nodeType":"YulFunctionCall","src":"6477:24:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6503:7:17"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"6460:16:17"},"nodeType":"YulFunctionCall","src":"6460:51:17"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"6450:6:17"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5577:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5588:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5600:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5608:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5616:6:17","type":""},{"name":"value3","nodeType":"YulTypedName","src":"5624:6:17","type":""},{"name":"value4","nodeType":"YulTypedName","src":"5632:6:17","type":""}],"src":"5446:1071:17"},{"body":{"nodeType":"YulBlock","src":"6609:228:17","statements":[{"body":{"nodeType":"YulBlock","src":"6655:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6664:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6667:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6657:6:17"},"nodeType":"YulFunctionCall","src":"6657:12:17"},"nodeType":"YulExpressionStatement","src":"6657:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6630:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"6639:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6626:3:17"},"nodeType":"YulFunctionCall","src":"6626:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"6651:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6622:3:17"},"nodeType":"YulFunctionCall","src":"6622:32:17"},"nodeType":"YulIf","src":"6619:52:17"},{"nodeType":"YulAssignment","src":"6680:33:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6703:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6690:12:17"},"nodeType":"YulFunctionCall","src":"6690:23:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6680:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"6722:45:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6752:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"6763:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6748:3:17"},"nodeType":"YulFunctionCall","src":"6748:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6735:12:17"},"nodeType":"YulFunctionCall","src":"6735:32:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"6726:5:17","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6801:5:17"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"6776:24:17"},"nodeType":"YulFunctionCall","src":"6776:31:17"},"nodeType":"YulExpressionStatement","src":"6776:31:17"},{"nodeType":"YulAssignment","src":"6816:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"6826:5:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6816:6:17"}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6567:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6578:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6590:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6598:6:17","type":""}],"src":"6522:315:17"},{"body":{"nodeType":"YulBlock","src":"6948:559:17","statements":[{"body":{"nodeType":"YulBlock","src":"6994:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7003:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7006:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6996:6:17"},"nodeType":"YulFunctionCall","src":"6996:12:17"},"nodeType":"YulExpressionStatement","src":"6996:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6969:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"6978:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6965:3:17"},"nodeType":"YulFunctionCall","src":"6965:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"6990:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6961:3:17"},"nodeType":"YulFunctionCall","src":"6961:32:17"},"nodeType":"YulIf","src":"6958:52:17"},{"nodeType":"YulVariableDeclaration","src":"7019:37:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7046:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7033:12:17"},"nodeType":"YulFunctionCall","src":"7033:23:17"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7023:6:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7065:28:17","value":{"kind":"number","nodeType":"YulLiteral","src":"7075:18:17","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"7069:2:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"7120:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7129:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7132:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7122:6:17"},"nodeType":"YulFunctionCall","src":"7122:12:17"},"nodeType":"YulExpressionStatement","src":"7122:12:17"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7108:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"7116:2:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7105:2:17"},"nodeType":"YulFunctionCall","src":"7105:14:17"},"nodeType":"YulIf","src":"7102:34:17"},{"nodeType":"YulVariableDeclaration","src":"7145:32:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7159:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"7170:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7155:3:17"},"nodeType":"YulFunctionCall","src":"7155:22:17"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"7149:2:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"7225:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7234:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7237:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7227:6:17"},"nodeType":"YulFunctionCall","src":"7227:12:17"},"nodeType":"YulExpressionStatement","src":"7227:12:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"7204:2:17"},{"kind":"number","nodeType":"YulLiteral","src":"7208:4:17","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7200:3:17"},"nodeType":"YulFunctionCall","src":"7200:13:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7215:7:17"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7196:3:17"},"nodeType":"YulFunctionCall","src":"7196:27:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7189:6:17"},"nodeType":"YulFunctionCall","src":"7189:35:17"},"nodeType":"YulIf","src":"7186:55:17"},{"nodeType":"YulVariableDeclaration","src":"7250:30:17","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"7277:2:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7264:12:17"},"nodeType":"YulFunctionCall","src":"7264:16:17"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"7254:6:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"7307:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7316:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7319:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7309:6:17"},"nodeType":"YulFunctionCall","src":"7309:12:17"},"nodeType":"YulExpressionStatement","src":"7309:12:17"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7295:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"7303:2:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7292:2:17"},"nodeType":"YulFunctionCall","src":"7292:14:17"},"nodeType":"YulIf","src":"7289:34:17"},{"body":{"nodeType":"YulBlock","src":"7375:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7384:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7387:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7377:6:17"},"nodeType":"YulFunctionCall","src":"7377:12:17"},"nodeType":"YulExpressionStatement","src":"7377:12:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"7346:2:17"},{"name":"length","nodeType":"YulIdentifier","src":"7350:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7342:3:17"},"nodeType":"YulFunctionCall","src":"7342:15:17"},{"kind":"number","nodeType":"YulLiteral","src":"7359:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7338:3:17"},"nodeType":"YulFunctionCall","src":"7338:26:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7366:7:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7335:2:17"},"nodeType":"YulFunctionCall","src":"7335:39:17"},"nodeType":"YulIf","src":"7332:59:17"},{"nodeType":"YulAssignment","src":"7400:23:17","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"7414:2:17"},{"kind":"number","nodeType":"YulLiteral","src":"7418:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7410:3:17"},"nodeType":"YulFunctionCall","src":"7410:13:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7400:6:17"}]},{"nodeType":"YulAssignment","src":"7432:16:17","value":{"name":"length","nodeType":"YulIdentifier","src":"7442:6:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7432:6:17"}]},{"nodeType":"YulAssignment","src":"7457:44:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7484:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"7495:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7480:3:17"},"nodeType":"YulFunctionCall","src":"7480:20:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7467:12:17"},"nodeType":"YulFunctionCall","src":"7467:34:17"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"7457:6:17"}]}]},"name":"abi_decode_tuple_t_bytes_calldata_ptrt_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6898:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6909:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6921:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6929:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"6937:6:17","type":""}],"src":"6842:665:17"},{"body":{"nodeType":"YulBlock","src":"7649:1140:17","statements":[{"body":{"nodeType":"YulBlock","src":"7695:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7704:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7707:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7697:6:17"},"nodeType":"YulFunctionCall","src":"7697:12:17"},"nodeType":"YulExpressionStatement","src":"7697:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7670:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"7679:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7666:3:17"},"nodeType":"YulFunctionCall","src":"7666:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"7691:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7662:3:17"},"nodeType":"YulFunctionCall","src":"7662:32:17"},"nodeType":"YulIf","src":"7659:52:17"},{"nodeType":"YulVariableDeclaration","src":"7720:37:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7747:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7734:12:17"},"nodeType":"YulFunctionCall","src":"7734:23:17"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7724:6:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7766:28:17","value":{"kind":"number","nodeType":"YulLiteral","src":"7776:18:17","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"7770:2:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"7821:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7830:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7833:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7823:6:17"},"nodeType":"YulFunctionCall","src":"7823:12:17"},"nodeType":"YulExpressionStatement","src":"7823:12:17"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7809:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"7817:2:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7806:2:17"},"nodeType":"YulFunctionCall","src":"7806:14:17"},"nodeType":"YulIf","src":"7803:34:17"},{"nodeType":"YulVariableDeclaration","src":"7846:32:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7860:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"7871:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7856:3:17"},"nodeType":"YulFunctionCall","src":"7856:22:17"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"7850:2:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"7926:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7935:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7938:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7928:6:17"},"nodeType":"YulFunctionCall","src":"7928:12:17"},"nodeType":"YulExpressionStatement","src":"7928:12:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"7905:2:17"},{"kind":"number","nodeType":"YulLiteral","src":"7909:4:17","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7901:3:17"},"nodeType":"YulFunctionCall","src":"7901:13:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7916:7:17"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7897:3:17"},"nodeType":"YulFunctionCall","src":"7897:27:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7890:6:17"},"nodeType":"YulFunctionCall","src":"7890:35:17"},"nodeType":"YulIf","src":"7887:55:17"},{"nodeType":"YulVariableDeclaration","src":"7951:26:17","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"7974:2:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7961:12:17"},"nodeType":"YulFunctionCall","src":"7961:16:17"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"7955:2:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7986:14:17","value":{"kind":"number","nodeType":"YulLiteral","src":"7996:4:17","type":"","value":"0x20"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"7990:2:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8009:53:17","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"8059:2:17"}],"functionName":{"name":"array_allocation_size_array_uint256_dyn","nodeType":"YulIdentifier","src":"8019:39:17"},"nodeType":"YulFunctionCall","src":"8019:43:17"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"8013:2:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8071:23:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8091:2:17","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8085:5:17"},"nodeType":"YulFunctionCall","src":"8085:9:17"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"8075:6:17","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"8123:6:17"},{"name":"_5","nodeType":"YulIdentifier","src":"8131:2:17"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"8103:19:17"},"nodeType":"YulFunctionCall","src":"8103:31:17"},"nodeType":"YulExpressionStatement","src":"8103:31:17"},{"nodeType":"YulVariableDeclaration","src":"8143:17:17","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"8154:6:17"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"8147:3:17","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"8176:6:17"},{"name":"_3","nodeType":"YulIdentifier","src":"8184:2:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8169:6:17"},"nodeType":"YulFunctionCall","src":"8169:18:17"},"nodeType":"YulExpressionStatement","src":"8169:18:17"},{"nodeType":"YulAssignment","src":"8196:22:17","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"8207:6:17"},{"name":"_4","nodeType":"YulIdentifier","src":"8215:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8203:3:17"},"nodeType":"YulFunctionCall","src":"8203:15:17"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"8196:3:17"}]},{"nodeType":"YulVariableDeclaration","src":"8227:42:17","value":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"8249:2:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8257:1:17","type":"","value":"5"},{"name":"_3","nodeType":"YulIdentifier","src":"8260:2:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8253:3:17"},"nodeType":"YulFunctionCall","src":"8253:10:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8245:3:17"},"nodeType":"YulFunctionCall","src":"8245:19:17"},{"name":"_4","nodeType":"YulIdentifier","src":"8266:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8241:3:17"},"nodeType":"YulFunctionCall","src":"8241:28:17"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"8231:6:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"8301:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8310:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8313:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8303:6:17"},"nodeType":"YulFunctionCall","src":"8303:12:17"},"nodeType":"YulExpressionStatement","src":"8303:12:17"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"8284:6:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8292:7:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8281:2:17"},"nodeType":"YulFunctionCall","src":"8281:19:17"},"nodeType":"YulIf","src":"8278:39:17"},{"nodeType":"YulVariableDeclaration","src":"8326:22:17","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"8341:2:17"},{"name":"_4","nodeType":"YulIdentifier","src":"8345:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8337:3:17"},"nodeType":"YulFunctionCall","src":"8337:11:17"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"8330:3:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"8413:161:17","statements":[{"nodeType":"YulVariableDeclaration","src":"8427:30:17","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8453:3:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8440:12:17"},"nodeType":"YulFunctionCall","src":"8440:17:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"8431:5:17","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8495:5:17"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"8470:24:17"},"nodeType":"YulFunctionCall","src":"8470:31:17"},"nodeType":"YulExpressionStatement","src":"8470:31:17"},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"8521:3:17"},{"name":"value","nodeType":"YulIdentifier","src":"8526:5:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8514:6:17"},"nodeType":"YulFunctionCall","src":"8514:18:17"},"nodeType":"YulExpressionStatement","src":"8514:18:17"},{"nodeType":"YulAssignment","src":"8545:19:17","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"8556:3:17"},{"name":"_4","nodeType":"YulIdentifier","src":"8561:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8552:3:17"},"nodeType":"YulFunctionCall","src":"8552:12:17"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"8545:3:17"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8368:3:17"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"8373:6:17"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8365:2:17"},"nodeType":"YulFunctionCall","src":"8365:15:17"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"8381:23:17","statements":[{"nodeType":"YulAssignment","src":"8383:19:17","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8394:3:17"},{"name":"_4","nodeType":"YulIdentifier","src":"8399:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8390:3:17"},"nodeType":"YulFunctionCall","src":"8390:12:17"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"8383:3:17"}]}]},"pre":{"nodeType":"YulBlock","src":"8361:3:17","statements":[]},"src":"8357:217:17"},{"nodeType":"YulAssignment","src":"8583:16:17","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"8593:6:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8583:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"8608:48:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8641:9:17"},{"name":"_4","nodeType":"YulIdentifier","src":"8652:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8637:3:17"},"nodeType":"YulFunctionCall","src":"8637:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8624:12:17"},"nodeType":"YulFunctionCall","src":"8624:32:17"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"8612:8:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"8685:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8694:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8697:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8687:6:17"},"nodeType":"YulFunctionCall","src":"8687:12:17"},"nodeType":"YulExpressionStatement","src":"8687:12:17"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"8671:8:17"},{"name":"_1","nodeType":"YulIdentifier","src":"8681:2:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8668:2:17"},"nodeType":"YulFunctionCall","src":"8668:16:17"},"nodeType":"YulIf","src":"8665:36:17"},{"nodeType":"YulAssignment","src":"8710:73:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8753:9:17"},{"name":"offset_1","nodeType":"YulIdentifier","src":"8764:8:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8749:3:17"},"nodeType":"YulFunctionCall","src":"8749:24:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8775:7:17"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"8720:28:17"},"nodeType":"YulFunctionCall","src":"8720:63:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"8710:6:17"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7607:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7618:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7630:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7638:6:17","type":""}],"src":"7512:1277:17"},{"body":{"nodeType":"YulBlock","src":"8855:374:17","statements":[{"nodeType":"YulVariableDeclaration","src":"8865:26:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8885:5:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8879:5:17"},"nodeType":"YulFunctionCall","src":"8879:12:17"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"8869:6:17","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8907:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"8912:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8900:6:17"},"nodeType":"YulFunctionCall","src":"8900:19:17"},"nodeType":"YulExpressionStatement","src":"8900:19:17"},{"nodeType":"YulVariableDeclaration","src":"8928:14:17","value":{"kind":"number","nodeType":"YulLiteral","src":"8938:4:17","type":"","value":"0x20"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"8932:2:17","type":""}]},{"nodeType":"YulAssignment","src":"8951:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8962:3:17"},{"name":"_1","nodeType":"YulIdentifier","src":"8967:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8958:3:17"},"nodeType":"YulFunctionCall","src":"8958:12:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8951:3:17"}]},{"nodeType":"YulVariableDeclaration","src":"8979:28:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8997:5:17"},{"name":"_1","nodeType":"YulIdentifier","src":"9004:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8993:3:17"},"nodeType":"YulFunctionCall","src":"8993:14:17"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"8983:6:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"9016:10:17","value":{"kind":"number","nodeType":"YulLiteral","src":"9025:1:17","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"9020:1:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"9084:120:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9105:3:17"},{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"9116:6:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9110:5:17"},"nodeType":"YulFunctionCall","src":"9110:13:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9098:6:17"},"nodeType":"YulFunctionCall","src":"9098:26:17"},"nodeType":"YulExpressionStatement","src":"9098:26:17"},{"nodeType":"YulAssignment","src":"9137:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9148:3:17"},{"name":"_1","nodeType":"YulIdentifier","src":"9153:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9144:3:17"},"nodeType":"YulFunctionCall","src":"9144:12:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9137:3:17"}]},{"nodeType":"YulAssignment","src":"9169:25:17","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"9183:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"9191:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9179:3:17"},"nodeType":"YulFunctionCall","src":"9179:15:17"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"9169:6:17"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"9046:1:17"},{"name":"length","nodeType":"YulIdentifier","src":"9049:6:17"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"9043:2:17"},"nodeType":"YulFunctionCall","src":"9043:13:17"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"9057:18:17","statements":[{"nodeType":"YulAssignment","src":"9059:14:17","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"9068:1:17"},{"kind":"number","nodeType":"YulLiteral","src":"9071:1:17","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9064:3:17"},"nodeType":"YulFunctionCall","src":"9064:9:17"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"9059:1:17"}]}]},"pre":{"nodeType":"YulBlock","src":"9039:3:17","statements":[]},"src":"9035:169:17"},{"nodeType":"YulAssignment","src":"9213:10:17","value":{"name":"pos","nodeType":"YulIdentifier","src":"9220:3:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9213:3:17"}]}]},"name":"abi_encode_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8832:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"8839:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8847:3:17","type":""}],"src":"8794:435:17"},{"body":{"nodeType":"YulBlock","src":"9385:110:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9402:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"9413:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9395:6:17"},"nodeType":"YulFunctionCall","src":"9395:21:17"},"nodeType":"YulExpressionStatement","src":"9395:21:17"},{"nodeType":"YulAssignment","src":"9425:64:17","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9462:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9474:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"9485:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9470:3:17"},"nodeType":"YulFunctionCall","src":"9470:18:17"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"9433:28:17"},"nodeType":"YulFunctionCall","src":"9433:56:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9425:4:17"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9354:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9365:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9376:4:17","type":""}],"src":"9234:261:17"},{"body":{"nodeType":"YulBlock","src":"9542:76:17","statements":[{"body":{"nodeType":"YulBlock","src":"9596:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9605:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9608:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9598:6:17"},"nodeType":"YulFunctionCall","src":"9598:12:17"},"nodeType":"YulExpressionStatement","src":"9598:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9565:5:17"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9586:5:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9579:6:17"},"nodeType":"YulFunctionCall","src":"9579:13:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9572:6:17"},"nodeType":"YulFunctionCall","src":"9572:21:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"9562:2:17"},"nodeType":"YulFunctionCall","src":"9562:32:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9555:6:17"},"nodeType":"YulFunctionCall","src":"9555:40:17"},"nodeType":"YulIf","src":"9552:60:17"}]},"name":"validator_revert_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9531:5:17","type":""}],"src":"9500:118:17"},{"body":{"nodeType":"YulBlock","src":"9707:298:17","statements":[{"body":{"nodeType":"YulBlock","src":"9753:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9762:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9765:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9755:6:17"},"nodeType":"YulFunctionCall","src":"9755:12:17"},"nodeType":"YulExpressionStatement","src":"9755:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9728:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"9737:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9724:3:17"},"nodeType":"YulFunctionCall","src":"9724:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"9749:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9720:3:17"},"nodeType":"YulFunctionCall","src":"9720:32:17"},"nodeType":"YulIf","src":"9717:52:17"},{"nodeType":"YulVariableDeclaration","src":"9778:36:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9804:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9791:12:17"},"nodeType":"YulFunctionCall","src":"9791:23:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"9782:5:17","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9848:5:17"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"9823:24:17"},"nodeType":"YulFunctionCall","src":"9823:31:17"},"nodeType":"YulExpressionStatement","src":"9823:31:17"},{"nodeType":"YulAssignment","src":"9863:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"9873:5:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9863:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"9887:47:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9919:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"9930:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9915:3:17"},"nodeType":"YulFunctionCall","src":"9915:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9902:12:17"},"nodeType":"YulFunctionCall","src":"9902:32:17"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"9891:7:17","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"9965:7:17"}],"functionName":{"name":"validator_revert_bool","nodeType":"YulIdentifier","src":"9943:21:17"},"nodeType":"YulFunctionCall","src":"9943:30:17"},"nodeType":"YulExpressionStatement","src":"9943:30:17"},{"nodeType":"YulAssignment","src":"9982:17:17","value":{"name":"value_1","nodeType":"YulIdentifier","src":"9992:7:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"9982:6:17"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9665:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9676:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9688:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9696:6:17","type":""}],"src":"9623:382:17"},{"body":{"nodeType":"YulBlock","src":"10136:102:17","statements":[{"nodeType":"YulAssignment","src":"10146:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10158:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"10169:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10154:3:17"},"nodeType":"YulFunctionCall","src":"10154:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10146:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10188:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10203:6:17"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10219:3:17","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"10224:1:17","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"10215:3:17"},"nodeType":"YulFunctionCall","src":"10215:11:17"},{"kind":"number","nodeType":"YulLiteral","src":"10228:1:17","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10211:3:17"},"nodeType":"YulFunctionCall","src":"10211:19:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10199:3:17"},"nodeType":"YulFunctionCall","src":"10199:32:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10181:6:17"},"nodeType":"YulFunctionCall","src":"10181:51:17"},"nodeType":"YulExpressionStatement","src":"10181:51:17"}]},"name":"abi_encode_tuple_t_contract$_IExecutorManager_$3864__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10105:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10116:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10127:4:17","type":""}],"src":"10010:228:17"},{"body":{"nodeType":"YulBlock","src":"10391:576:17","statements":[{"body":{"nodeType":"YulBlock","src":"10437:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10446:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10449:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10439:6:17"},"nodeType":"YulFunctionCall","src":"10439:12:17"},"nodeType":"YulExpressionStatement","src":"10439:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10412:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"10421:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10408:3:17"},"nodeType":"YulFunctionCall","src":"10408:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"10433:2:17","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10404:3:17"},"nodeType":"YulFunctionCall","src":"10404:32:17"},"nodeType":"YulIf","src":"10401:52:17"},{"nodeType":"YulAssignment","src":"10462:33:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10485:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10472:12:17"},"nodeType":"YulFunctionCall","src":"10472:23:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10462:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"10504:46:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10535:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"10546:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10531:3:17"},"nodeType":"YulFunctionCall","src":"10531:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10518:12:17"},"nodeType":"YulFunctionCall","src":"10518:32:17"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10508:6:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10559:28:17","value":{"kind":"number","nodeType":"YulLiteral","src":"10569:18:17","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"10563:2:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"10614:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10623:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10626:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10616:6:17"},"nodeType":"YulFunctionCall","src":"10616:12:17"},"nodeType":"YulExpressionStatement","src":"10616:12:17"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10602:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"10610:2:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10599:2:17"},"nodeType":"YulFunctionCall","src":"10599:14:17"},"nodeType":"YulIf","src":"10596:34:17"},{"nodeType":"YulAssignment","src":"10639:59:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10670:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"10681:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10666:3:17"},"nodeType":"YulFunctionCall","src":"10666:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10690:7:17"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"10649:16:17"},"nodeType":"YulFunctionCall","src":"10649:49:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"10639:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"10707:48:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10740:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"10751:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10736:3:17"},"nodeType":"YulFunctionCall","src":"10736:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10723:12:17"},"nodeType":"YulFunctionCall","src":"10723:32:17"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"10711:8:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"10784:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10793:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10796:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10786:6:17"},"nodeType":"YulFunctionCall","src":"10786:12:17"},"nodeType":"YulExpressionStatement","src":"10786:12:17"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"10770:8:17"},{"name":"_1","nodeType":"YulIdentifier","src":"10780:2:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10767:2:17"},"nodeType":"YulFunctionCall","src":"10767:16:17"},"nodeType":"YulIf","src":"10764:36:17"},{"nodeType":"YulVariableDeclaration","src":"10809:98:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10877:9:17"},{"name":"offset_1","nodeType":"YulIdentifier","src":"10888:8:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10873:3:17"},"nodeType":"YulFunctionCall","src":"10873:24:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10899:7:17"}],"functionName":{"name":"abi_decode_array_bytes32_dyn_calldata","nodeType":"YulIdentifier","src":"10835:37:17"},"nodeType":"YulFunctionCall","src":"10835:72:17"},"variables":[{"name":"value2_1","nodeType":"YulTypedName","src":"10813:8:17","type":""},{"name":"value3_1","nodeType":"YulTypedName","src":"10823:8:17","type":""}]},{"nodeType":"YulAssignment","src":"10916:18:17","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"10926:8:17"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"10916:6:17"}]},{"nodeType":"YulAssignment","src":"10943:18:17","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"10953:8:17"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"10943:6:17"}]}]},"name":"abi_decode_tuple_t_uint256t_bytes_memory_ptrt_array$_t_bytes32_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10333:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10344:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10356:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10364:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"10372:6:17","type":""},{"name":"value3","nodeType":"YulTypedName","src":"10380:6:17","type":""}],"src":"10243:724:17"},{"body":{"nodeType":"YulBlock","src":"11088:102:17","statements":[{"nodeType":"YulAssignment","src":"11098:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11110:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"11121:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11106:3:17"},"nodeType":"YulFunctionCall","src":"11106:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11098:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11140:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11155:6:17"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11171:3:17","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"11176:1:17","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"11167:3:17"},"nodeType":"YulFunctionCall","src":"11167:11:17"},{"kind":"number","nodeType":"YulLiteral","src":"11180:1:17","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11163:3:17"},"nodeType":"YulFunctionCall","src":"11163:19:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11151:3:17"},"nodeType":"YulFunctionCall","src":"11151:32:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11133:6:17"},"nodeType":"YulFunctionCall","src":"11133:51:17"},"nodeType":"YulExpressionStatement","src":"11133:51:17"}]},"name":"abi_encode_tuple_t_contract$_IERC20_$3876__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11057:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11068:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11079:4:17","type":""}],"src":"10972:218:17"},{"body":{"nodeType":"YulBlock","src":"11296:102:17","statements":[{"nodeType":"YulAssignment","src":"11306:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11318:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"11329:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11314:3:17"},"nodeType":"YulFunctionCall","src":"11314:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11306:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11348:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11363:6:17"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11379:3:17","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"11384:1:17","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"11375:3:17"},"nodeType":"YulFunctionCall","src":"11375:11:17"},{"kind":"number","nodeType":"YulLiteral","src":"11388:1:17","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11371:3:17"},"nodeType":"YulFunctionCall","src":"11371:19:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11359:3:17"},"nodeType":"YulFunctionCall","src":"11359:32:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11341:6:17"},"nodeType":"YulFunctionCall","src":"11341:51:17"},"nodeType":"YulExpressionStatement","src":"11341:51:17"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11265:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11276:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11287:4:17","type":""}],"src":"11195:203:17"},{"body":{"nodeType":"YulBlock","src":"11490:301:17","statements":[{"body":{"nodeType":"YulBlock","src":"11536:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11545:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11548:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11538:6:17"},"nodeType":"YulFunctionCall","src":"11538:12:17"},"nodeType":"YulExpressionStatement","src":"11538:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11511:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"11520:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11507:3:17"},"nodeType":"YulFunctionCall","src":"11507:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"11532:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11503:3:17"},"nodeType":"YulFunctionCall","src":"11503:32:17"},"nodeType":"YulIf","src":"11500:52:17"},{"nodeType":"YulVariableDeclaration","src":"11561:36:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11587:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11574:12:17"},"nodeType":"YulFunctionCall","src":"11574:23:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"11565:5:17","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11631:5:17"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"11606:24:17"},"nodeType":"YulFunctionCall","src":"11606:31:17"},"nodeType":"YulExpressionStatement","src":"11606:31:17"},{"nodeType":"YulAssignment","src":"11646:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"11656:5:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11646:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"11670:47:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11702:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"11713:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11698:3:17"},"nodeType":"YulFunctionCall","src":"11698:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11685:12:17"},"nodeType":"YulFunctionCall","src":"11685:32:17"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"11674:7:17","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"11751:7:17"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"11726:24:17"},"nodeType":"YulFunctionCall","src":"11726:33:17"},"nodeType":"YulExpressionStatement","src":"11726:33:17"},{"nodeType":"YulAssignment","src":"11768:17:17","value":{"name":"value_1","nodeType":"YulIdentifier","src":"11778:7:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"11768:6:17"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11448:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"11459:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"11471:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11479:6:17","type":""}],"src":"11403:388:17"},{"body":{"nodeType":"YulBlock","src":"11866:177:17","statements":[{"body":{"nodeType":"YulBlock","src":"11912:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11921:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11924:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11914:6:17"},"nodeType":"YulFunctionCall","src":"11914:12:17"},"nodeType":"YulExpressionStatement","src":"11914:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11887:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"11896:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11883:3:17"},"nodeType":"YulFunctionCall","src":"11883:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"11908:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11879:3:17"},"nodeType":"YulFunctionCall","src":"11879:32:17"},"nodeType":"YulIf","src":"11876:52:17"},{"nodeType":"YulVariableDeclaration","src":"11937:36:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11963:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11950:12:17"},"nodeType":"YulFunctionCall","src":"11950:23:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"11941:5:17","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12007:5:17"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"11982:24:17"},"nodeType":"YulFunctionCall","src":"11982:31:17"},"nodeType":"YulExpressionStatement","src":"11982:31:17"},{"nodeType":"YulAssignment","src":"12022:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"12032:5:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"12022:6:17"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11832:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"11843:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"11855:6:17","type":""}],"src":"11796:247:17"},{"body":{"nodeType":"YulBlock","src":"12195:587:17","statements":[{"body":{"nodeType":"YulBlock","src":"12242:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12251:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12254:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12244:6:17"},"nodeType":"YulFunctionCall","src":"12244:12:17"},"nodeType":"YulExpressionStatement","src":"12244:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"12216:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"12225:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12212:3:17"},"nodeType":"YulFunctionCall","src":"12212:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"12237:3:17","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"12208:3:17"},"nodeType":"YulFunctionCall","src":"12208:33:17"},"nodeType":"YulIf","src":"12205:53:17"},{"nodeType":"YulVariableDeclaration","src":"12267:36:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12293:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12280:12:17"},"nodeType":"YulFunctionCall","src":"12280:23:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"12271:5:17","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12337:5:17"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"12312:24:17"},"nodeType":"YulFunctionCall","src":"12312:31:17"},"nodeType":"YulExpressionStatement","src":"12312:31:17"},{"nodeType":"YulAssignment","src":"12352:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"12362:5:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"12352:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"12376:47:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12408:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"12419:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12404:3:17"},"nodeType":"YulFunctionCall","src":"12404:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12391:12:17"},"nodeType":"YulFunctionCall","src":"12391:32:17"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"12380:7:17","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"12457:7:17"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"12432:24:17"},"nodeType":"YulFunctionCall","src":"12432:33:17"},"nodeType":"YulExpressionStatement","src":"12432:33:17"},{"nodeType":"YulAssignment","src":"12474:17:17","value":{"name":"value_1","nodeType":"YulIdentifier","src":"12484:7:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"12474:6:17"}]},{"nodeType":"YulAssignment","src":"12500:42:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12527:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"12538:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12523:3:17"},"nodeType":"YulFunctionCall","src":"12523:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12510:12:17"},"nodeType":"YulFunctionCall","src":"12510:32:17"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"12500:6:17"}]},{"nodeType":"YulAssignment","src":"12551:42:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12578:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"12589:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12574:3:17"},"nodeType":"YulFunctionCall","src":"12574:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12561:12:17"},"nodeType":"YulFunctionCall","src":"12561:32:17"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"12551:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"12602:47:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12633:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"12644:3:17","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12629:3:17"},"nodeType":"YulFunctionCall","src":"12629:19:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12616:12:17"},"nodeType":"YulFunctionCall","src":"12616:33:17"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"12606:6:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"12692:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12701:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12704:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12694:6:17"},"nodeType":"YulFunctionCall","src":"12694:12:17"},"nodeType":"YulExpressionStatement","src":"12694:12:17"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"12664:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"12672:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12661:2:17"},"nodeType":"YulFunctionCall","src":"12661:30:17"},"nodeType":"YulIf","src":"12658:50:17"},{"nodeType":"YulAssignment","src":"12717:59:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12748:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"12759:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12744:3:17"},"nodeType":"YulFunctionCall","src":"12744:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12768:7:17"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"12727:16:17"},"nodeType":"YulFunctionCall","src":"12727:49:17"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"12717:6:17"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12129:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"12140:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"12152:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12160:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"12168:6:17","type":""},{"name":"value3","nodeType":"YulTypedName","src":"12176:6:17","type":""},{"name":"value4","nodeType":"YulTypedName","src":"12184:6:17","type":""}],"src":"12048:734:17"},{"body":{"nodeType":"YulBlock","src":"12961:232:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12978:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"12989:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12971:6:17"},"nodeType":"YulFunctionCall","src":"12971:21:17"},"nodeType":"YulExpressionStatement","src":"12971:21:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13012:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"13023:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13008:3:17"},"nodeType":"YulFunctionCall","src":"13008:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"13028:2:17","type":"","value":"42"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13001:6:17"},"nodeType":"YulFunctionCall","src":"13001:30:17"},"nodeType":"YulExpressionStatement","src":"13001:30:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13051:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"13062:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13047:3:17"},"nodeType":"YulFunctionCall","src":"13047:18:17"},{"hexValue":"455243313135353a2061646472657373207a65726f206973206e6f7420612076","kind":"string","nodeType":"YulLiteral","src":"13067:34:17","type":"","value":"ERC1155: address zero is not a v"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13040:6:17"},"nodeType":"YulFunctionCall","src":"13040:62:17"},"nodeType":"YulExpressionStatement","src":"13040:62:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13122:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"13133:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13118:3:17"},"nodeType":"YulFunctionCall","src":"13118:18:17"},{"hexValue":"616c6964206f776e6572","kind":"string","nodeType":"YulLiteral","src":"13138:12:17","type":"","value":"alid owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13111:6:17"},"nodeType":"YulFunctionCall","src":"13111:40:17"},"nodeType":"YulExpressionStatement","src":"13111:40:17"},{"nodeType":"YulAssignment","src":"13160:27:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13172:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"13183:3:17","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13168:3:17"},"nodeType":"YulFunctionCall","src":"13168:19:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13160:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12938:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12952:4:17","type":""}],"src":"12787:406:17"},{"body":{"nodeType":"YulBlock","src":"13317:110:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13334:3:17"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13347:2:17","type":"","value":"96"},{"name":"value0","nodeType":"YulIdentifier","src":"13351:6:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"13343:3:17"},"nodeType":"YulFunctionCall","src":"13343:15:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13364:26:17","type":"","value":"0xffffffffffffffffffffffff"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"13360:3:17"},"nodeType":"YulFunctionCall","src":"13360:31:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13339:3:17"},"nodeType":"YulFunctionCall","src":"13339:53:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13327:6:17"},"nodeType":"YulFunctionCall","src":"13327:66:17"},"nodeType":"YulExpressionStatement","src":"13327:66:17"},{"nodeType":"YulAssignment","src":"13402:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13413:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"13418:2:17","type":"","value":"20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13409:3:17"},"nodeType":"YulFunctionCall","src":"13409:12:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13402:3:17"}]}]},"name":"abi_encode_tuple_packed_t_address__to_t_address__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13293:3:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13298:6:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13309:3:17","type":""}],"src":"13198:229:17"},{"body":{"nodeType":"YulBlock","src":"13487:325:17","statements":[{"nodeType":"YulAssignment","src":"13497:22:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13511:1:17","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"13514:4:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"13507:3:17"},"nodeType":"YulFunctionCall","src":"13507:12:17"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"13497:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"13528:38:17","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"13558:4:17"},{"kind":"number","nodeType":"YulLiteral","src":"13564:1:17","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13554:3:17"},"nodeType":"YulFunctionCall","src":"13554:12:17"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"13532:18:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"13605:31:17","statements":[{"nodeType":"YulAssignment","src":"13607:27:17","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"13621:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"13629:4:17","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13617:3:17"},"nodeType":"YulFunctionCall","src":"13617:17:17"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"13607:6:17"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"13585:18:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13578:6:17"},"nodeType":"YulFunctionCall","src":"13578:26:17"},"nodeType":"YulIf","src":"13575:61:17"},{"body":{"nodeType":"YulBlock","src":"13695:111:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13716:1:17","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13723:3:17","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"13728:10:17","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"13719:3:17"},"nodeType":"YulFunctionCall","src":"13719:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13709:6:17"},"nodeType":"YulFunctionCall","src":"13709:31:17"},"nodeType":"YulExpressionStatement","src":"13709:31:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13760:1:17","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"13763:4:17","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13753:6:17"},"nodeType":"YulFunctionCall","src":"13753:15:17"},"nodeType":"YulExpressionStatement","src":"13753:15:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13788:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13791:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13781:6:17"},"nodeType":"YulFunctionCall","src":"13781:15:17"},"nodeType":"YulExpressionStatement","src":"13781:15:17"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"13651:18:17"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"13674:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"13682:2:17","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"13671:2:17"},"nodeType":"YulFunctionCall","src":"13671:14:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"13648:2:17"},"nodeType":"YulFunctionCall","src":"13648:38:17"},"nodeType":"YulIf","src":"13645:161:17"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"13467:4:17","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"13476:6:17","type":""}],"src":"13432:380:17"},{"body":{"nodeType":"YulBlock","src":"13991:236:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14008:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"14019:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14001:6:17"},"nodeType":"YulFunctionCall","src":"14001:21:17"},"nodeType":"YulExpressionStatement","src":"14001:21:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14042:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"14053:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14038:3:17"},"nodeType":"YulFunctionCall","src":"14038:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"14058:2:17","type":"","value":"46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14031:6:17"},"nodeType":"YulFunctionCall","src":"14031:30:17"},"nodeType":"YulExpressionStatement","src":"14031:30:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14081:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"14092:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14077:3:17"},"nodeType":"YulFunctionCall","src":"14077:18:17"},{"hexValue":"455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e","kind":"string","nodeType":"YulLiteral","src":"14097:34:17","type":"","value":"ERC1155: caller is not token own"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14070:6:17"},"nodeType":"YulFunctionCall","src":"14070:62:17"},"nodeType":"YulExpressionStatement","src":"14070:62:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14152:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"14163:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14148:3:17"},"nodeType":"YulFunctionCall","src":"14148:18:17"},{"hexValue":"6572206f7220617070726f766564","kind":"string","nodeType":"YulLiteral","src":"14168:16:17","type":"","value":"er or approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14141:6:17"},"nodeType":"YulFunctionCall","src":"14141:44:17"},"nodeType":"YulExpressionStatement","src":"14141:44:17"},{"nodeType":"YulAssignment","src":"14194:27:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14206:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"14217:3:17","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14202:3:17"},"nodeType":"YulFunctionCall","src":"14202:19:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14194:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13968:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13982:4:17","type":""}],"src":"13817:410:17"},{"body":{"nodeType":"YulBlock","src":"14406:237:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14423:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"14434:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14416:6:17"},"nodeType":"YulFunctionCall","src":"14416:21:17"},"nodeType":"YulExpressionStatement","src":"14416:21:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14457:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"14468:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14453:3:17"},"nodeType":"YulFunctionCall","src":"14453:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"14473:2:17","type":"","value":"47"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14446:6:17"},"nodeType":"YulFunctionCall","src":"14446:30:17"},"nodeType":"YulExpressionStatement","src":"14446:30:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14496:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"14507:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14492:3:17"},"nodeType":"YulFunctionCall","src":"14492:18:17"},{"hexValue":"416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e6365","kind":"string","nodeType":"YulLiteral","src":"14512:34:17","type":"","value":"AccessControl: can only renounce"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14485:6:17"},"nodeType":"YulFunctionCall","src":"14485:62:17"},"nodeType":"YulExpressionStatement","src":"14485:62:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14567:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"14578:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14563:3:17"},"nodeType":"YulFunctionCall","src":"14563:18:17"},{"hexValue":"20726f6c657320666f722073656c66","kind":"string","nodeType":"YulLiteral","src":"14583:17:17","type":"","value":" roles for self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14556:6:17"},"nodeType":"YulFunctionCall","src":"14556:45:17"},"nodeType":"YulExpressionStatement","src":"14556:45:17"},{"nodeType":"YulAssignment","src":"14610:27:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14622:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"14633:3:17","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14618:3:17"},"nodeType":"YulFunctionCall","src":"14618:19:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14610:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14383:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14397:4:17","type":""}],"src":"14232:411:17"},{"body":{"nodeType":"YulBlock","src":"14726:167:17","statements":[{"body":{"nodeType":"YulBlock","src":"14772:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14781:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14784:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14774:6:17"},"nodeType":"YulFunctionCall","src":"14774:12:17"},"nodeType":"YulExpressionStatement","src":"14774:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"14747:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"14756:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14743:3:17"},"nodeType":"YulFunctionCall","src":"14743:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"14768:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"14739:3:17"},"nodeType":"YulFunctionCall","src":"14739:32:17"},"nodeType":"YulIf","src":"14736:52:17"},{"nodeType":"YulVariableDeclaration","src":"14797:29:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14816:9:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14810:5:17"},"nodeType":"YulFunctionCall","src":"14810:16:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"14801:5:17","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14857:5:17"}],"functionName":{"name":"validator_revert_bool","nodeType":"YulIdentifier","src":"14835:21:17"},"nodeType":"YulFunctionCall","src":"14835:28:17"},"nodeType":"YulExpressionStatement","src":"14835:28:17"},{"nodeType":"YulAssignment","src":"14872:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"14882:5:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"14872:6:17"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14692:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"14703:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"14715:6:17","type":""}],"src":"14648:245:17"},{"body":{"nodeType":"YulBlock","src":"15072:226:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15089:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"15100:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15082:6:17"},"nodeType":"YulFunctionCall","src":"15082:21:17"},"nodeType":"YulExpressionStatement","src":"15082:21:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15123:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"15134:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15119:3:17"},"nodeType":"YulFunctionCall","src":"15119:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"15139:2:17","type":"","value":"36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15112:6:17"},"nodeType":"YulFunctionCall","src":"15112:30:17"},"nodeType":"YulExpressionStatement","src":"15112:30:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15162:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"15173:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15158:3:17"},"nodeType":"YulFunctionCall","src":"15158:18:17"},{"hexValue":"43616c6c6572206973206e6f7420616e20617574686f72697a65642065786563","kind":"string","nodeType":"YulLiteral","src":"15178:34:17","type":"","value":"Caller is not an authorized exec"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15151:6:17"},"nodeType":"YulFunctionCall","src":"15151:62:17"},"nodeType":"YulExpressionStatement","src":"15151:62:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15233:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"15244:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15229:3:17"},"nodeType":"YulFunctionCall","src":"15229:18:17"},{"hexValue":"75746f72","kind":"string","nodeType":"YulLiteral","src":"15249:6:17","type":"","value":"utor"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15222:6:17"},"nodeType":"YulFunctionCall","src":"15222:34:17"},"nodeType":"YulExpressionStatement","src":"15222:34:17"},{"nodeType":"YulAssignment","src":"15265:27:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15277:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"15288:3:17","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15273:3:17"},"nodeType":"YulFunctionCall","src":"15273:19:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15265:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_691e84db20482a4c42ba7a4aa341855d8289774d9698451740209f85cbb09b0a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15049:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15063:4:17","type":""}],"src":"14898:400:17"},{"body":{"nodeType":"YulBlock","src":"15335:95:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15352:1:17","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15359:3:17","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"15364:10:17","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"15355:3:17"},"nodeType":"YulFunctionCall","src":"15355:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15345:6:17"},"nodeType":"YulFunctionCall","src":"15345:31:17"},"nodeType":"YulExpressionStatement","src":"15345:31:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15392:1:17","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"15395:4:17","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15385:6:17"},"nodeType":"YulFunctionCall","src":"15385:15:17"},"nodeType":"YulExpressionStatement","src":"15385:15:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15416:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15419:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15409:6:17"},"nodeType":"YulFunctionCall","src":"15409:15:17"},"nodeType":"YulExpressionStatement","src":"15409:15:17"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"15303:127:17"},{"body":{"nodeType":"YulBlock","src":"15483:77:17","statements":[{"nodeType":"YulAssignment","src":"15493:16:17","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"15504:1:17"},{"name":"y","nodeType":"YulIdentifier","src":"15507:1:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15500:3:17"},"nodeType":"YulFunctionCall","src":"15500:9:17"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"15493:3:17"}]},{"body":{"nodeType":"YulBlock","src":"15532:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"15534:16:17"},"nodeType":"YulFunctionCall","src":"15534:18:17"},"nodeType":"YulExpressionStatement","src":"15534:18:17"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"15524:1:17"},{"name":"sum","nodeType":"YulIdentifier","src":"15527:3:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15521:2:17"},"nodeType":"YulFunctionCall","src":"15521:10:17"},"nodeType":"YulIf","src":"15518:36:17"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"15466:1:17","type":""},{"name":"y","nodeType":"YulTypedName","src":"15469:1:17","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"15475:3:17","type":""}],"src":"15435:125:17"},{"body":{"nodeType":"YulBlock","src":"15695:201:17","statements":[{"body":{"nodeType":"YulBlock","src":"15733:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15742:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15745:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15735:6:17"},"nodeType":"YulFunctionCall","src":"15735:12:17"},"nodeType":"YulExpressionStatement","src":"15735:12:17"}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"15711:10:17"},{"name":"endIndex","nodeType":"YulIdentifier","src":"15723:8:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15708:2:17"},"nodeType":"YulFunctionCall","src":"15708:24:17"},"nodeType":"YulIf","src":"15705:44:17"},{"body":{"nodeType":"YulBlock","src":"15782:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15791:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15794:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15784:6:17"},"nodeType":"YulFunctionCall","src":"15784:12:17"},"nodeType":"YulExpressionStatement","src":"15784:12:17"}]},"condition":{"arguments":[{"name":"endIndex","nodeType":"YulIdentifier","src":"15764:8:17"},{"name":"length","nodeType":"YulIdentifier","src":"15774:6:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15761:2:17"},"nodeType":"YulFunctionCall","src":"15761:20:17"},"nodeType":"YulIf","src":"15758:40:17"},{"nodeType":"YulAssignment","src":"15807:36:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"15824:6:17"},{"name":"startIndex","nodeType":"YulIdentifier","src":"15832:10:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15820:3:17"},"nodeType":"YulFunctionCall","src":"15820:23:17"},"variableNames":[{"name":"offsetOut","nodeType":"YulIdentifier","src":"15807:9:17"}]},{"nodeType":"YulAssignment","src":"15852:38:17","value":{"arguments":[{"name":"endIndex","nodeType":"YulIdentifier","src":"15869:8:17"},{"name":"startIndex","nodeType":"YulIdentifier","src":"15879:10:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15865:3:17"},"nodeType":"YulFunctionCall","src":"15865:25:17"},"variableNames":[{"name":"lengthOut","nodeType":"YulIdentifier","src":"15852:9:17"}]}]},"name":"calldata_array_index_range_access_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"15629:6:17","type":""},{"name":"length","nodeType":"YulTypedName","src":"15637:6:17","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"15645:10:17","type":""},{"name":"endIndex","nodeType":"YulTypedName","src":"15657:8:17","type":""}],"returnVariables":[{"name":"offsetOut","nodeType":"YulTypedName","src":"15670:9:17","type":""},{"name":"lengthOut","nodeType":"YulTypedName","src":"15681:9:17","type":""}],"src":"15565:331:17"},{"body":{"nodeType":"YulBlock","src":"16038:404:17","statements":[{"body":{"nodeType":"YulBlock","src":"16085:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16094:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"16097:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"16087:6:17"},"nodeType":"YulFunctionCall","src":"16087:12:17"},"nodeType":"YulExpressionStatement","src":"16087:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"16059:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"16068:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16055:3:17"},"nodeType":"YulFunctionCall","src":"16055:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"16080:3:17","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"16051:3:17"},"nodeType":"YulFunctionCall","src":"16051:33:17"},"nodeType":"YulIf","src":"16048:53:17"},{"nodeType":"YulVariableDeclaration","src":"16110:36:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16136:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"16123:12:17"},"nodeType":"YulFunctionCall","src":"16123:23:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"16114:5:17","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16180:5:17"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"16155:24:17"},"nodeType":"YulFunctionCall","src":"16155:31:17"},"nodeType":"YulExpressionStatement","src":"16155:31:17"},{"nodeType":"YulAssignment","src":"16195:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"16205:5:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"16195:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"16219:47:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16251:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"16262:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16247:3:17"},"nodeType":"YulFunctionCall","src":"16247:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"16234:12:17"},"nodeType":"YulFunctionCall","src":"16234:32:17"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"16223:7:17","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"16300:7:17"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"16275:24:17"},"nodeType":"YulFunctionCall","src":"16275:33:17"},"nodeType":"YulExpressionStatement","src":"16275:33:17"},{"nodeType":"YulAssignment","src":"16317:17:17","value":{"name":"value_1","nodeType":"YulIdentifier","src":"16327:7:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"16317:6:17"}]},{"nodeType":"YulAssignment","src":"16343:42:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16370:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"16381:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16366:3:17"},"nodeType":"YulFunctionCall","src":"16366:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"16353:12:17"},"nodeType":"YulFunctionCall","src":"16353:32:17"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"16343:6:17"}]},{"nodeType":"YulAssignment","src":"16394:42:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16421:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"16432:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16417:3:17"},"nodeType":"YulFunctionCall","src":"16417:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"16404:12:17"},"nodeType":"YulFunctionCall","src":"16404:32:17"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"16394:6:17"}]}]},"name":"abi_decode_tuple_t_address_payablet_address_payablet_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15980:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"15991:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"16003:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16011:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"16019:6:17","type":""},{"name":"value3","nodeType":"YulTypedName","src":"16027:6:17","type":""}],"src":"15901:541:17"},{"body":{"nodeType":"YulBlock","src":"16621:224:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16638:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"16649:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16631:6:17"},"nodeType":"YulFunctionCall","src":"16631:21:17"},"nodeType":"YulExpressionStatement","src":"16631:21:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16672:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"16683:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16668:3:17"},"nodeType":"YulFunctionCall","src":"16668:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"16688:2:17","type":"","value":"34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16661:6:17"},"nodeType":"YulFunctionCall","src":"16661:30:17"},"nodeType":"YulExpressionStatement","src":"16661:30:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16711:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"16722:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16707:3:17"},"nodeType":"YulFunctionCall","src":"16707:18:17"},{"hexValue":"53656c6c657220646f6573206e6f74206861766520656e6f75676820746f6b65","kind":"string","nodeType":"YulLiteral","src":"16727:34:17","type":"","value":"Seller does not have enough toke"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16700:6:17"},"nodeType":"YulFunctionCall","src":"16700:62:17"},"nodeType":"YulExpressionStatement","src":"16700:62:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16782:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"16793:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16778:3:17"},"nodeType":"YulFunctionCall","src":"16778:18:17"},{"hexValue":"6e73","kind":"string","nodeType":"YulLiteral","src":"16798:4:17","type":"","value":"ns"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16771:6:17"},"nodeType":"YulFunctionCall","src":"16771:32:17"},"nodeType":"YulExpressionStatement","src":"16771:32:17"},{"nodeType":"YulAssignment","src":"16812:27:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16824:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"16835:3:17","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16820:3:17"},"nodeType":"YulFunctionCall","src":"16820:19:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16812:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_acc775314033618014c4c79559957baf417931f6e8d18e4684d327a6a76d2e7e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16598:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16612:4:17","type":""}],"src":"16447:398:17"},{"body":{"nodeType":"YulBlock","src":"16902:116:17","statements":[{"nodeType":"YulAssignment","src":"16912:20:17","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"16927:1:17"},{"name":"y","nodeType":"YulIdentifier","src":"16930:1:17"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"16923:3:17"},"nodeType":"YulFunctionCall","src":"16923:9:17"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"16912:7:17"}]},{"body":{"nodeType":"YulBlock","src":"16990:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"16992:16:17"},"nodeType":"YulFunctionCall","src":"16992:18:17"},"nodeType":"YulExpressionStatement","src":"16992:18:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"16961:1:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"16954:6:17"},"nodeType":"YulFunctionCall","src":"16954:9:17"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"16968:1:17"},{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"16975:7:17"},{"name":"x","nodeType":"YulIdentifier","src":"16984:1:17"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"16971:3:17"},"nodeType":"YulFunctionCall","src":"16971:15:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"16965:2:17"},"nodeType":"YulFunctionCall","src":"16965:22:17"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"16951:2:17"},"nodeType":"YulFunctionCall","src":"16951:37:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"16944:6:17"},"nodeType":"YulFunctionCall","src":"16944:45:17"},"nodeType":"YulIf","src":"16941:71:17"}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"16881:1:17","type":""},{"name":"y","nodeType":"YulTypedName","src":"16884:1:17","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"16890:7:17","type":""}],"src":"16850:168:17"},{"body":{"nodeType":"YulBlock","src":"17069:171:17","statements":[{"body":{"nodeType":"YulBlock","src":"17100:111:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17121:1:17","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17128:3:17","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"17133:10:17","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"17124:3:17"},"nodeType":"YulFunctionCall","src":"17124:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17114:6:17"},"nodeType":"YulFunctionCall","src":"17114:31:17"},"nodeType":"YulExpressionStatement","src":"17114:31:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17165:1:17","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"17168:4:17","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17158:6:17"},"nodeType":"YulFunctionCall","src":"17158:15:17"},"nodeType":"YulExpressionStatement","src":"17158:15:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17193:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"17196:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"17186:6:17"},"nodeType":"YulFunctionCall","src":"17186:15:17"},"nodeType":"YulExpressionStatement","src":"17186:15:17"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"17089:1:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"17082:6:17"},"nodeType":"YulFunctionCall","src":"17082:9:17"},"nodeType":"YulIf","src":"17079:132:17"},{"nodeType":"YulAssignment","src":"17220:14:17","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"17229:1:17"},{"name":"y","nodeType":"YulIdentifier","src":"17232:1:17"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"17225:3:17"},"nodeType":"YulFunctionCall","src":"17225:9:17"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"17220:1:17"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"17054:1:17","type":""},{"name":"y","nodeType":"YulTypedName","src":"17057:1:17","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"17063:1:17","type":""}],"src":"17023:217:17"},{"body":{"nodeType":"YulBlock","src":"17374:175:17","statements":[{"nodeType":"YulAssignment","src":"17384:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17396:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"17407:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17392:3:17"},"nodeType":"YulFunctionCall","src":"17392:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17384:4:17"}]},{"nodeType":"YulVariableDeclaration","src":"17419:29:17","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17437:3:17","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"17442:1:17","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"17433:3:17"},"nodeType":"YulFunctionCall","src":"17433:11:17"},{"kind":"number","nodeType":"YulLiteral","src":"17446:1:17","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17429:3:17"},"nodeType":"YulFunctionCall","src":"17429:19:17"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"17423:2:17","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17464:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17479:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"17487:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"17475:3:17"},"nodeType":"YulFunctionCall","src":"17475:15:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17457:6:17"},"nodeType":"YulFunctionCall","src":"17457:34:17"},"nodeType":"YulExpressionStatement","src":"17457:34:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17511:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"17522:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17507:3:17"},"nodeType":"YulFunctionCall","src":"17507:18:17"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"17531:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"17539:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"17527:3:17"},"nodeType":"YulFunctionCall","src":"17527:15:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17500:6:17"},"nodeType":"YulFunctionCall","src":"17500:43:17"},"nodeType":"YulExpressionStatement","src":"17500:43:17"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17335:9:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"17346:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17354:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17365:4:17","type":""}],"src":"17245:304:17"},{"body":{"nodeType":"YulBlock","src":"17635:103:17","statements":[{"body":{"nodeType":"YulBlock","src":"17681:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17690:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"17693:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"17683:6:17"},"nodeType":"YulFunctionCall","src":"17683:12:17"},"nodeType":"YulExpressionStatement","src":"17683:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"17656:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"17665:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17652:3:17"},"nodeType":"YulFunctionCall","src":"17652:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"17677:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"17648:3:17"},"nodeType":"YulFunctionCall","src":"17648:32:17"},"nodeType":"YulIf","src":"17645:52:17"},{"nodeType":"YulAssignment","src":"17706:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17722:9:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17716:5:17"},"nodeType":"YulFunctionCall","src":"17716:16:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"17706:6:17"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17601:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"17612:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"17624:6:17","type":""}],"src":"17554:184:17"},{"body":{"nodeType":"YulBlock","src":"17917:223:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17934:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"17945:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17927:6:17"},"nodeType":"YulFunctionCall","src":"17927:21:17"},"nodeType":"YulExpressionStatement","src":"17927:21:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17968:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"17979:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17964:3:17"},"nodeType":"YulFunctionCall","src":"17964:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"17984:2:17","type":"","value":"33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17957:6:17"},"nodeType":"YulFunctionCall","src":"17957:30:17"},"nodeType":"YulExpressionStatement","src":"17957:30:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18007:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"18018:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18003:3:17"},"nodeType":"YulFunctionCall","src":"18003:18:17"},{"hexValue":"427579657220646f6573206e6f74206861766520656e6f75676820746f6b656e","kind":"string","nodeType":"YulLiteral","src":"18023:34:17","type":"","value":"Buyer does not have enough token"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17996:6:17"},"nodeType":"YulFunctionCall","src":"17996:62:17"},"nodeType":"YulExpressionStatement","src":"17996:62:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18078:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"18089:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18074:3:17"},"nodeType":"YulFunctionCall","src":"18074:18:17"},{"hexValue":"73","kind":"string","nodeType":"YulLiteral","src":"18094:3:17","type":"","value":"s"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18067:6:17"},"nodeType":"YulFunctionCall","src":"18067:31:17"},"nodeType":"YulExpressionStatement","src":"18067:31:17"},{"nodeType":"YulAssignment","src":"18107:27:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18119:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"18130:3:17","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18115:3:17"},"nodeType":"YulFunctionCall","src":"18115:19:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18107:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_0d206f3891ed4fd63de4d8461a7a83b378123281d9065e8c00f16b46057d8c2c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17894:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17908:4:17","type":""}],"src":"17743:397:17"},{"body":{"nodeType":"YulBlock","src":"18177:95:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18194:1:17","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18201:3:17","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"18206:10:17","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"18197:3:17"},"nodeType":"YulFunctionCall","src":"18197:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18187:6:17"},"nodeType":"YulFunctionCall","src":"18187:31:17"},"nodeType":"YulExpressionStatement","src":"18187:31:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18234:1:17","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"18237:4:17","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18227:6:17"},"nodeType":"YulFunctionCall","src":"18227:15:17"},"nodeType":"YulExpressionStatement","src":"18227:15:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18258:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"18261:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"18251:6:17"},"nodeType":"YulFunctionCall","src":"18251:15:17"},"nodeType":"YulExpressionStatement","src":"18251:15:17"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"18145:127:17"},{"body":{"nodeType":"YulBlock","src":"18338:400:17","statements":[{"nodeType":"YulVariableDeclaration","src":"18348:26:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18368:5:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18362:5:17"},"nodeType":"YulFunctionCall","src":"18362:12:17"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"18352:6:17","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18390:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"18395:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18383:6:17"},"nodeType":"YulFunctionCall","src":"18383:19:17"},"nodeType":"YulExpressionStatement","src":"18383:19:17"},{"nodeType":"YulVariableDeclaration","src":"18411:14:17","value":{"kind":"number","nodeType":"YulLiteral","src":"18421:4:17","type":"","value":"0x20"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"18415:2:17","type":""}]},{"nodeType":"YulAssignment","src":"18434:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18445:3:17"},{"name":"_1","nodeType":"YulIdentifier","src":"18450:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18441:3:17"},"nodeType":"YulFunctionCall","src":"18441:12:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"18434:3:17"}]},{"nodeType":"YulVariableDeclaration","src":"18462:28:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18480:5:17"},{"name":"_1","nodeType":"YulIdentifier","src":"18487:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18476:3:17"},"nodeType":"YulFunctionCall","src":"18476:14:17"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"18466:6:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"18499:10:17","value":{"kind":"number","nodeType":"YulLiteral","src":"18508:1:17","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"18503:1:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"18567:146:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18588:3:17"},{"arguments":[{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"18603:6:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18597:5:17"},"nodeType":"YulFunctionCall","src":"18597:13:17"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18620:3:17","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"18625:1:17","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"18616:3:17"},"nodeType":"YulFunctionCall","src":"18616:11:17"},{"kind":"number","nodeType":"YulLiteral","src":"18629:1:17","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18612:3:17"},"nodeType":"YulFunctionCall","src":"18612:19:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18593:3:17"},"nodeType":"YulFunctionCall","src":"18593:39:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18581:6:17"},"nodeType":"YulFunctionCall","src":"18581:52:17"},"nodeType":"YulExpressionStatement","src":"18581:52:17"},{"nodeType":"YulAssignment","src":"18646:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18657:3:17"},{"name":"_1","nodeType":"YulIdentifier","src":"18662:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18653:3:17"},"nodeType":"YulFunctionCall","src":"18653:12:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"18646:3:17"}]},{"nodeType":"YulAssignment","src":"18678:25:17","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"18692:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"18700:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18688:3:17"},"nodeType":"YulFunctionCall","src":"18688:15:17"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"18678:6:17"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"18529:1:17"},{"name":"length","nodeType":"YulIdentifier","src":"18532:6:17"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"18526:2:17"},"nodeType":"YulFunctionCall","src":"18526:13:17"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"18540:18:17","statements":[{"nodeType":"YulAssignment","src":"18542:14:17","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"18551:1:17"},{"kind":"number","nodeType":"YulLiteral","src":"18554:1:17","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18547:3:17"},"nodeType":"YulFunctionCall","src":"18547:9:17"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"18542:1:17"}]}]},"pre":{"nodeType":"YulBlock","src":"18522:3:17","statements":[]},"src":"18518:195:17"},{"nodeType":"YulAssignment","src":"18722:10:17","value":{"name":"pos","nodeType":"YulIdentifier","src":"18729:3:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"18722:3:17"}]}]},"name":"abi_encode_array_address_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18315:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"18322:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18330:3:17","type":""}],"src":"18277:461:17"},{"body":{"nodeType":"YulBlock","src":"19078:433:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19095:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"19106:3:17","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19088:6:17"},"nodeType":"YulFunctionCall","src":"19088:22:17"},"nodeType":"YulExpressionStatement","src":"19088:22:17"},{"nodeType":"YulVariableDeclaration","src":"19119:71:17","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"19162:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19174:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"19185:3:17","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19170:3:17"},"nodeType":"YulFunctionCall","src":"19170:19:17"}],"functionName":{"name":"abi_encode_array_address_dyn","nodeType":"YulIdentifier","src":"19133:28:17"},"nodeType":"YulFunctionCall","src":"19133:57:17"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"19123:6:17","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19210:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"19221:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19206:3:17"},"nodeType":"YulFunctionCall","src":"19206:18:17"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"19230:6:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"19238:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19226:3:17"},"nodeType":"YulFunctionCall","src":"19226:22:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19199:6:17"},"nodeType":"YulFunctionCall","src":"19199:50:17"},"nodeType":"YulExpressionStatement","src":"19199:50:17"},{"nodeType":"YulVariableDeclaration","src":"19258:58:17","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"19301:6:17"},{"name":"tail_1","nodeType":"YulIdentifier","src":"19309:6:17"}],"functionName":{"name":"abi_encode_array_address_dyn","nodeType":"YulIdentifier","src":"19272:28:17"},"nodeType":"YulFunctionCall","src":"19272:44:17"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"19262:6:17","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19336:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"19347:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19332:3:17"},"nodeType":"YulFunctionCall","src":"19332:18:17"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"19356:6:17"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19372:3:17","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"19377:1:17","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"19368:3:17"},"nodeType":"YulFunctionCall","src":"19368:11:17"},{"kind":"number","nodeType":"YulLiteral","src":"19381:1:17","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19364:3:17"},"nodeType":"YulFunctionCall","src":"19364:19:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"19352:3:17"},"nodeType":"YulFunctionCall","src":"19352:32:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19325:6:17"},"nodeType":"YulFunctionCall","src":"19325:60:17"},"nodeType":"YulExpressionStatement","src":"19325:60:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19405:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"19416:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19401:3:17"},"nodeType":"YulFunctionCall","src":"19401:18:17"},{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"19425:6:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"19433:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19421:3:17"},"nodeType":"YulFunctionCall","src":"19421:22:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19394:6:17"},"nodeType":"YulFunctionCall","src":"19394:50:17"},"nodeType":"YulExpressionStatement","src":"19394:50:17"},{"nodeType":"YulAssignment","src":"19453:52:17","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"19490:6:17"},{"name":"tail_2","nodeType":"YulIdentifier","src":"19498:6:17"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"19461:28:17"},"nodeType":"YulFunctionCall","src":"19461:44:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19453:4:17"}]}]},"name":"abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr_t_array$_t_address_$dyn_memory_ptr_t_address_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr_t_array$_t_address_$dyn_memory_ptr_t_address_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19023:9:17","type":""},{"name":"value3","nodeType":"YulTypedName","src":"19034:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"19042:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"19050:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"19058:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19069:4:17","type":""}],"src":"18743:768:17"},{"body":{"nodeType":"YulBlock","src":"19663:124:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19686:3:17"},{"name":"value0","nodeType":"YulIdentifier","src":"19691:6:17"},{"name":"value1","nodeType":"YulIdentifier","src":"19699:6:17"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"19673:12:17"},"nodeType":"YulFunctionCall","src":"19673:33:17"},"nodeType":"YulExpressionStatement","src":"19673:33:17"},{"nodeType":"YulVariableDeclaration","src":"19715:26:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19729:3:17"},{"name":"value1","nodeType":"YulIdentifier","src":"19734:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19725:3:17"},"nodeType":"YulFunctionCall","src":"19725:16:17"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"19719:2:17","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"19757:2:17"},{"kind":"number","nodeType":"YulLiteral","src":"19761:1:17","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19750:6:17"},"nodeType":"YulFunctionCall","src":"19750:13:17"},"nodeType":"YulExpressionStatement","src":"19750:13:17"},{"nodeType":"YulAssignment","src":"19772:9:17","value":{"name":"_1","nodeType":"YulIdentifier","src":"19779:2:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"19772:3:17"}]}]},"name":"abi_encode_tuple_packed_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"19631:3:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"19636:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"19644:6:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"19655:3:17","type":""}],"src":"19516:271:17"},{"body":{"nodeType":"YulBlock","src":"19921:119:17","statements":[{"nodeType":"YulAssignment","src":"19931:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19943:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"19954:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19939:3:17"},"nodeType":"YulFunctionCall","src":"19939:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19931:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19973:9:17"},{"name":"value0","nodeType":"YulIdentifier","src":"19984:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19966:6:17"},"nodeType":"YulFunctionCall","src":"19966:25:17"},"nodeType":"YulExpressionStatement","src":"19966:25:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20011:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"20022:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20007:3:17"},"nodeType":"YulFunctionCall","src":"20007:18:17"},{"name":"value1","nodeType":"YulIdentifier","src":"20027:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20000:6:17"},"nodeType":"YulFunctionCall","src":"20000:34:17"},"nodeType":"YulExpressionStatement","src":"20000:34:17"}]},"name":"abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19882:9:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"19893:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"19901:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19912:4:17","type":""}],"src":"19792:248:17"},{"body":{"nodeType":"YulBlock","src":"20219:231:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20236:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"20247:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20229:6:17"},"nodeType":"YulFunctionCall","src":"20229:21:17"},"nodeType":"YulExpressionStatement","src":"20229:21:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20270:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"20281:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20266:3:17"},"nodeType":"YulFunctionCall","src":"20266:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"20286:2:17","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20259:6:17"},"nodeType":"YulFunctionCall","src":"20259:30:17"},"nodeType":"YulExpressionStatement","src":"20259:30:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20309:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"20320:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20305:3:17"},"nodeType":"YulFunctionCall","src":"20305:18:17"},{"hexValue":"455243313135353a206163636f756e747320616e6420696473206c656e677468","kind":"string","nodeType":"YulLiteral","src":"20325:34:17","type":"","value":"ERC1155: accounts and ids length"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20298:6:17"},"nodeType":"YulFunctionCall","src":"20298:62:17"},"nodeType":"YulExpressionStatement","src":"20298:62:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20380:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"20391:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20376:3:17"},"nodeType":"YulFunctionCall","src":"20376:18:17"},{"hexValue":"206d69736d61746368","kind":"string","nodeType":"YulLiteral","src":"20396:11:17","type":"","value":" mismatch"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20369:6:17"},"nodeType":"YulFunctionCall","src":"20369:39:17"},"nodeType":"YulExpressionStatement","src":"20369:39:17"},{"nodeType":"YulAssignment","src":"20417:27:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20429:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"20440:3:17","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20425:3:17"},"nodeType":"YulFunctionCall","src":"20425:19:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20417:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20196:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20210:4:17","type":""}],"src":"20045:405:17"},{"body":{"nodeType":"YulBlock","src":"20502:88:17","statements":[{"body":{"nodeType":"YulBlock","src":"20533:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"20535:16:17"},"nodeType":"YulFunctionCall","src":"20535:18:17"},"nodeType":"YulExpressionStatement","src":"20535:18:17"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"20518:5:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20529:1:17","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"20525:3:17"},"nodeType":"YulFunctionCall","src":"20525:6:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"20515:2:17"},"nodeType":"YulFunctionCall","src":"20515:17:17"},"nodeType":"YulIf","src":"20512:43:17"},{"nodeType":"YulAssignment","src":"20564:20:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"20575:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"20582:1:17","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20571:3:17"},"nodeType":"YulFunctionCall","src":"20571:13:17"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"20564:3:17"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"20484:5:17","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"20494:3:17","type":""}],"src":"20455:135:17"},{"body":{"nodeType":"YulBlock","src":"20769:227:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20786:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"20797:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20779:6:17"},"nodeType":"YulFunctionCall","src":"20779:21:17"},"nodeType":"YulExpressionStatement","src":"20779:21:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20820:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"20831:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20816:3:17"},"nodeType":"YulFunctionCall","src":"20816:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"20836:2:17","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20809:6:17"},"nodeType":"YulFunctionCall","src":"20809:30:17"},"nodeType":"YulExpressionStatement","src":"20809:30:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20859:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"20870:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20855:3:17"},"nodeType":"YulFunctionCall","src":"20855:18:17"},{"hexValue":"546f6b656e2069732063757272656e746c79206c6f636b656420666f72206d69","kind":"string","nodeType":"YulLiteral","src":"20875:34:17","type":"","value":"Token is currently locked for mi"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20848:6:17"},"nodeType":"YulFunctionCall","src":"20848:62:17"},"nodeType":"YulExpressionStatement","src":"20848:62:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20930:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"20941:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20926:3:17"},"nodeType":"YulFunctionCall","src":"20926:18:17"},{"hexValue":"6e74696e67","kind":"string","nodeType":"YulLiteral","src":"20946:7:17","type":"","value":"nting"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20919:6:17"},"nodeType":"YulFunctionCall","src":"20919:35:17"},"nodeType":"YulExpressionStatement","src":"20919:35:17"},{"nodeType":"YulAssignment","src":"20963:27:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20975:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"20986:3:17","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20971:3:17"},"nodeType":"YulFunctionCall","src":"20971:19:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20963:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_c05b6e35da5e61f1d7b3ef7e615ddf60dfc35de37aba5dd75608f23dd6e104fb__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20746:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20760:4:17","type":""}],"src":"20595:401:17"},{"body":{"nodeType":"YulBlock","src":"21175:175:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21192:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"21203:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21185:6:17"},"nodeType":"YulFunctionCall","src":"21185:21:17"},"nodeType":"YulExpressionStatement","src":"21185:21:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21226:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"21237:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21222:3:17"},"nodeType":"YulFunctionCall","src":"21222:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"21242:2:17","type":"","value":"25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21215:6:17"},"nodeType":"YulFunctionCall","src":"21215:30:17"},"nodeType":"YulExpressionStatement","src":"21215:30:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21265:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"21276:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21261:3:17"},"nodeType":"YulFunctionCall","src":"21261:18:17"},{"hexValue":"43616c6c6572206973206e6f742077686974656c6973746564","kind":"string","nodeType":"YulLiteral","src":"21281:27:17","type":"","value":"Caller is not whitelisted"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21254:6:17"},"nodeType":"YulFunctionCall","src":"21254:55:17"},"nodeType":"YulExpressionStatement","src":"21254:55:17"},{"nodeType":"YulAssignment","src":"21318:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21330:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"21341:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21326:3:17"},"nodeType":"YulFunctionCall","src":"21326:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21318:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_60304f7258d86aaa1cc1138fb2f6bbc524adfb91bc7985c5cde7fccc8aa6045a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21152:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21166:4:17","type":""}],"src":"21001:349:17"},{"body":{"nodeType":"YulBlock","src":"21529:230:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21546:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"21557:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21539:6:17"},"nodeType":"YulFunctionCall","src":"21539:21:17"},"nodeType":"YulExpressionStatement","src":"21539:21:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21580:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"21591:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21576:3:17"},"nodeType":"YulFunctionCall","src":"21576:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"21596:2:17","type":"","value":"40"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21569:6:17"},"nodeType":"YulFunctionCall","src":"21569:30:17"},"nodeType":"YulExpressionStatement","src":"21569:30:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21619:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"21630:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21615:3:17"},"nodeType":"YulFunctionCall","src":"21615:18:17"},{"hexValue":"455243313135353a2069647320616e6420616d6f756e7473206c656e67746820","kind":"string","nodeType":"YulLiteral","src":"21635:34:17","type":"","value":"ERC1155: ids and amounts length "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21608:6:17"},"nodeType":"YulFunctionCall","src":"21608:62:17"},"nodeType":"YulExpressionStatement","src":"21608:62:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21690:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"21701:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21686:3:17"},"nodeType":"YulFunctionCall","src":"21686:18:17"},{"hexValue":"6d69736d61746368","kind":"string","nodeType":"YulLiteral","src":"21706:10:17","type":"","value":"mismatch"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21679:6:17"},"nodeType":"YulFunctionCall","src":"21679:38:17"},"nodeType":"YulExpressionStatement","src":"21679:38:17"},{"nodeType":"YulAssignment","src":"21726:27:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21738:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"21749:3:17","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21734:3:17"},"nodeType":"YulFunctionCall","src":"21734:19:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21726:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21506:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21520:4:17","type":""}],"src":"21355:404:17"},{"body":{"nodeType":"YulBlock","src":"21938:227:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21955:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"21966:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21948:6:17"},"nodeType":"YulFunctionCall","src":"21948:21:17"},"nodeType":"YulExpressionStatement","src":"21948:21:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21989:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"22000:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21985:3:17"},"nodeType":"YulFunctionCall","src":"21985:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"22005:2:17","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21978:6:17"},"nodeType":"YulFunctionCall","src":"21978:30:17"},"nodeType":"YulExpressionStatement","src":"21978:30:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22028:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"22039:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22024:3:17"},"nodeType":"YulFunctionCall","src":"22024:18:17"},{"hexValue":"455243313135353a207472616e7366657220746f20746865207a65726f206164","kind":"string","nodeType":"YulLiteral","src":"22044:34:17","type":"","value":"ERC1155: transfer to the zero ad"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22017:6:17"},"nodeType":"YulFunctionCall","src":"22017:62:17"},"nodeType":"YulExpressionStatement","src":"22017:62:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22099:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"22110:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22095:3:17"},"nodeType":"YulFunctionCall","src":"22095:18:17"},{"hexValue":"6472657373","kind":"string","nodeType":"YulLiteral","src":"22115:7:17","type":"","value":"dress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22088:6:17"},"nodeType":"YulFunctionCall","src":"22088:35:17"},"nodeType":"YulExpressionStatement","src":"22088:35:17"},{"nodeType":"YulAssignment","src":"22132:27:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22144:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"22155:3:17","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22140:3:17"},"nodeType":"YulFunctionCall","src":"22140:19:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22132:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21915:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21929:4:17","type":""}],"src":"21764:401:17"},{"body":{"nodeType":"YulBlock","src":"22344:232:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22361:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"22372:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22354:6:17"},"nodeType":"YulFunctionCall","src":"22354:21:17"},"nodeType":"YulExpressionStatement","src":"22354:21:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22395:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"22406:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22391:3:17"},"nodeType":"YulFunctionCall","src":"22391:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"22411:2:17","type":"","value":"42"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22384:6:17"},"nodeType":"YulFunctionCall","src":"22384:30:17"},"nodeType":"YulExpressionStatement","src":"22384:30:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22434:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"22445:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22430:3:17"},"nodeType":"YulFunctionCall","src":"22430:18:17"},{"hexValue":"455243313135353a20696e73756666696369656e742062616c616e636520666f","kind":"string","nodeType":"YulLiteral","src":"22450:34:17","type":"","value":"ERC1155: insufficient balance fo"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22423:6:17"},"nodeType":"YulFunctionCall","src":"22423:62:17"},"nodeType":"YulExpressionStatement","src":"22423:62:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22505:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"22516:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22501:3:17"},"nodeType":"YulFunctionCall","src":"22501:18:17"},{"hexValue":"72207472616e73666572","kind":"string","nodeType":"YulLiteral","src":"22521:12:17","type":"","value":"r transfer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22494:6:17"},"nodeType":"YulFunctionCall","src":"22494:40:17"},"nodeType":"YulExpressionStatement","src":"22494:40:17"},{"nodeType":"YulAssignment","src":"22543:27:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22555:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"22566:3:17","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22551:3:17"},"nodeType":"YulFunctionCall","src":"22551:19:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22543:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22321:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22335:4:17","type":""}],"src":"22170:406:17"},{"body":{"nodeType":"YulBlock","src":"22810:236:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22827:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"22838:2:17","type":"","value":"64"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22820:6:17"},"nodeType":"YulFunctionCall","src":"22820:21:17"},"nodeType":"YulExpressionStatement","src":"22820:21:17"},{"nodeType":"YulVariableDeclaration","src":"22850:70:17","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"22893:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22905:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"22916:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22901:3:17"},"nodeType":"YulFunctionCall","src":"22901:18:17"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"22864:28:17"},"nodeType":"YulFunctionCall","src":"22864:56:17"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"22854:6:17","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22940:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"22951:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22936:3:17"},"nodeType":"YulFunctionCall","src":"22936:18:17"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"22960:6:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"22968:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22956:3:17"},"nodeType":"YulFunctionCall","src":"22956:22:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22929:6:17"},"nodeType":"YulFunctionCall","src":"22929:50:17"},"nodeType":"YulExpressionStatement","src":"22929:50:17"},{"nodeType":"YulAssignment","src":"22988:52:17","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"23025:6:17"},{"name":"tail_1","nodeType":"YulIdentifier","src":"23033:6:17"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"22996:28:17"},"nodeType":"YulFunctionCall","src":"22996:44:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22988:4:17"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22771:9:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"22782:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"22790:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22801:4:17","type":""}],"src":"22581:465:17"},{"body":{"nodeType":"YulBlock","src":"23225:231:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23242:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"23253:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23235:6:17"},"nodeType":"YulFunctionCall","src":"23235:21:17"},"nodeType":"YulExpressionStatement","src":"23235:21:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23276:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"23287:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23272:3:17"},"nodeType":"YulFunctionCall","src":"23272:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"23292:2:17","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23265:6:17"},"nodeType":"YulFunctionCall","src":"23265:30:17"},"nodeType":"YulExpressionStatement","src":"23265:30:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23315:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"23326:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23311:3:17"},"nodeType":"YulFunctionCall","src":"23311:18:17"},{"hexValue":"455243313135353a2073657474696e6720617070726f76616c20737461747573","kind":"string","nodeType":"YulLiteral","src":"23331:34:17","type":"","value":"ERC1155: setting approval status"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23304:6:17"},"nodeType":"YulFunctionCall","src":"23304:62:17"},"nodeType":"YulExpressionStatement","src":"23304:62:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23386:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"23397:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23382:3:17"},"nodeType":"YulFunctionCall","src":"23382:18:17"},{"hexValue":"20666f722073656c66","kind":"string","nodeType":"YulLiteral","src":"23402:11:17","type":"","value":" for self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23375:6:17"},"nodeType":"YulFunctionCall","src":"23375:39:17"},"nodeType":"YulExpressionStatement","src":"23375:39:17"},{"nodeType":"YulAssignment","src":"23423:27:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23435:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"23446:3:17","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23431:3:17"},"nodeType":"YulFunctionCall","src":"23431:19:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23423:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23202:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23216:4:17","type":""}],"src":"23051:405:17"},{"body":{"nodeType":"YulBlock","src":"23635:223:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23652:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"23663:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23645:6:17"},"nodeType":"YulFunctionCall","src":"23645:21:17"},"nodeType":"YulExpressionStatement","src":"23645:21:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23686:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"23697:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23682:3:17"},"nodeType":"YulFunctionCall","src":"23682:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"23702:2:17","type":"","value":"33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23675:6:17"},"nodeType":"YulFunctionCall","src":"23675:30:17"},"nodeType":"YulExpressionStatement","src":"23675:30:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23725:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"23736:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23721:3:17"},"nodeType":"YulFunctionCall","src":"23721:18:17"},{"hexValue":"455243313135353a206d696e7420746f20746865207a65726f20616464726573","kind":"string","nodeType":"YulLiteral","src":"23741:34:17","type":"","value":"ERC1155: mint to the zero addres"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23714:6:17"},"nodeType":"YulFunctionCall","src":"23714:62:17"},"nodeType":"YulExpressionStatement","src":"23714:62:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23796:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"23807:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23792:3:17"},"nodeType":"YulFunctionCall","src":"23792:18:17"},{"hexValue":"73","kind":"string","nodeType":"YulLiteral","src":"23812:3:17","type":"","value":"s"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23785:6:17"},"nodeType":"YulFunctionCall","src":"23785:31:17"},"nodeType":"YulExpressionStatement","src":"23785:31:17"},{"nodeType":"YulAssignment","src":"23825:27:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23837:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"23848:3:17","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23833:3:17"},"nodeType":"YulFunctionCall","src":"23833:19:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23825:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23612:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23626:4:17","type":""}],"src":"23461:397:17"},{"body":{"nodeType":"YulBlock","src":"23992:119:17","statements":[{"nodeType":"YulAssignment","src":"24002:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24014:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"24025:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24010:3:17"},"nodeType":"YulFunctionCall","src":"24010:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24002:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24044:9:17"},{"name":"value0","nodeType":"YulIdentifier","src":"24055:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24037:6:17"},"nodeType":"YulFunctionCall","src":"24037:25:17"},"nodeType":"YulExpressionStatement","src":"24037:25:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24082:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"24093:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24078:3:17"},"nodeType":"YulFunctionCall","src":"24078:18:17"},{"name":"value1","nodeType":"YulIdentifier","src":"24098:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24071:6:17"},"nodeType":"YulFunctionCall","src":"24071:34:17"},"nodeType":"YulExpressionStatement","src":"24071:34:17"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23953:9:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"23964:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"23972:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23983:4:17","type":""}],"src":"23863:248:17"},{"body":{"nodeType":"YulBlock","src":"24290:171:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24307:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"24318:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24300:6:17"},"nodeType":"YulFunctionCall","src":"24300:21:17"},"nodeType":"YulExpressionStatement","src":"24300:21:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24341:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"24352:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24337:3:17"},"nodeType":"YulFunctionCall","src":"24337:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"24357:2:17","type":"","value":"21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24330:6:17"},"nodeType":"YulFunctionCall","src":"24330:30:17"},"nodeType":"YulExpressionStatement","src":"24330:30:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24380:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"24391:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24376:3:17"},"nodeType":"YulFunctionCall","src":"24376:18:17"},{"hexValue":"5472616e73666572206e6f7420617070726f766564","kind":"string","nodeType":"YulLiteral","src":"24396:23:17","type":"","value":"Transfer not approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24369:6:17"},"nodeType":"YulFunctionCall","src":"24369:51:17"},"nodeType":"YulExpressionStatement","src":"24369:51:17"},{"nodeType":"YulAssignment","src":"24429:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24441:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"24452:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24437:3:17"},"nodeType":"YulFunctionCall","src":"24437:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24429:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_9bd124d272f06141b15552f4450bbed70049ce5ab0bcee1bad3c2f0f7ff9f544__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24267:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"24281:4:17","type":""}],"src":"24116:345:17"},{"body":{"nodeType":"YulBlock","src":"24797:496:17","statements":[{"nodeType":"YulVariableDeclaration","src":"24807:29:17","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24825:3:17","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"24830:1:17","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"24821:3:17"},"nodeType":"YulFunctionCall","src":"24821:11:17"},{"kind":"number","nodeType":"YulLiteral","src":"24834:1:17","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"24817:3:17"},"nodeType":"YulFunctionCall","src":"24817:19:17"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"24811:2:17","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24852:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"24867:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"24875:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"24863:3:17"},"nodeType":"YulFunctionCall","src":"24863:15:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24845:6:17"},"nodeType":"YulFunctionCall","src":"24845:34:17"},"nodeType":"YulExpressionStatement","src":"24845:34:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24899:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"24910:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24895:3:17"},"nodeType":"YulFunctionCall","src":"24895:18:17"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"24919:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"24927:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"24915:3:17"},"nodeType":"YulFunctionCall","src":"24915:15:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24888:6:17"},"nodeType":"YulFunctionCall","src":"24888:43:17"},"nodeType":"YulExpressionStatement","src":"24888:43:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24951:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"24962:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24947:3:17"},"nodeType":"YulFunctionCall","src":"24947:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"24967:3:17","type":"","value":"160"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24940:6:17"},"nodeType":"YulFunctionCall","src":"24940:31:17"},"nodeType":"YulExpressionStatement","src":"24940:31:17"},{"nodeType":"YulVariableDeclaration","src":"24980:71:17","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"25023:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25035:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"25046:3:17","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25031:3:17"},"nodeType":"YulFunctionCall","src":"25031:19:17"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"24994:28:17"},"nodeType":"YulFunctionCall","src":"24994:57:17"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"24984:6:17","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25071:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"25082:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25067:3:17"},"nodeType":"YulFunctionCall","src":"25067:18:17"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"25091:6:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"25099:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"25087:3:17"},"nodeType":"YulFunctionCall","src":"25087:22:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25060:6:17"},"nodeType":"YulFunctionCall","src":"25060:50:17"},"nodeType":"YulExpressionStatement","src":"25060:50:17"},{"nodeType":"YulVariableDeclaration","src":"25119:58:17","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"25162:6:17"},{"name":"tail_1","nodeType":"YulIdentifier","src":"25170:6:17"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"25133:28:17"},"nodeType":"YulFunctionCall","src":"25133:44:17"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"25123:6:17","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25197:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"25208:3:17","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25193:3:17"},"nodeType":"YulFunctionCall","src":"25193:19:17"},{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"25218:6:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"25226:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"25214:3:17"},"nodeType":"YulFunctionCall","src":"25214:22:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25186:6:17"},"nodeType":"YulFunctionCall","src":"25186:51:17"},"nodeType":"YulExpressionStatement","src":"25186:51:17"},{"nodeType":"YulAssignment","src":"25246:41:17","value":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"25272:6:17"},{"name":"tail_2","nodeType":"YulIdentifier","src":"25280:6:17"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"25254:17:17"},"nodeType":"YulFunctionCall","src":"25254:33:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25246:4:17"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24734:9:17","type":""},{"name":"value4","nodeType":"YulTypedName","src":"24745:6:17","type":""},{"name":"value3","nodeType":"YulTypedName","src":"24753:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"24761:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"24769:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"24777:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"24788:4:17","type":""}],"src":"24466:827:17"},{"body":{"nodeType":"YulBlock","src":"25378:169:17","statements":[{"body":{"nodeType":"YulBlock","src":"25424:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25433:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"25436:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"25426:6:17"},"nodeType":"YulFunctionCall","src":"25426:12:17"},"nodeType":"YulExpressionStatement","src":"25426:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"25399:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"25408:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"25395:3:17"},"nodeType":"YulFunctionCall","src":"25395:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"25420:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"25391:3:17"},"nodeType":"YulFunctionCall","src":"25391:32:17"},"nodeType":"YulIf","src":"25388:52:17"},{"nodeType":"YulVariableDeclaration","src":"25449:29:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25468:9:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"25462:5:17"},"nodeType":"YulFunctionCall","src":"25462:16:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"25453:5:17","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25511:5:17"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"25487:23:17"},"nodeType":"YulFunctionCall","src":"25487:30:17"},"nodeType":"YulExpressionStatement","src":"25487:30:17"},{"nodeType":"YulAssignment","src":"25526:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"25536:5:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"25526:6:17"}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25344:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"25355:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"25367:6:17","type":""}],"src":"25298:249:17"},{"body":{"nodeType":"YulBlock","src":"25595:136:17","statements":[{"body":{"nodeType":"YulBlock","src":"25640:85:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25669:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"25672:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"25675:1:17","type":"","value":"4"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"25654:14:17"},"nodeType":"YulFunctionCall","src":"25654:23:17"},"nodeType":"YulExpressionStatement","src":"25654:23:17"},{"nodeType":"YulAssignment","src":"25690:25:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25701:3:17","type":"","value":"224"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25712:1:17","type":"","value":"0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"25706:5:17"},"nodeType":"YulFunctionCall","src":"25706:8:17"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"25697:3:17"},"nodeType":"YulFunctionCall","src":"25697:18:17"},"variableNames":[{"name":"sig","nodeType":"YulIdentifier","src":"25690:3:17"}]}]},"condition":{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"25611:14:17"},"nodeType":"YulFunctionCall","src":"25611:16:17"},{"kind":"number","nodeType":"YulLiteral","src":"25629:1:17","type":"","value":"3"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"25608:2:17"},"nodeType":"YulFunctionCall","src":"25608:23:17"},"nodeType":"YulIf","src":"25605:120:17"}]},"name":"return_data_selector","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"sig","nodeType":"YulTypedName","src":"25587:3:17","type":""}],"src":"25552:179:17"},{"body":{"nodeType":"YulBlock","src":"25783:624:17","statements":[{"body":{"nodeType":"YulBlock","src":"25823:9:17","statements":[{"nodeType":"YulLeave","src":"25825:5:17"}]},"condition":{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"25799:14:17"},"nodeType":"YulFunctionCall","src":"25799:16:17"},{"kind":"number","nodeType":"YulLiteral","src":"25817:4:17","type":"","value":"0x44"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"25796:2:17"},"nodeType":"YulFunctionCall","src":"25796:26:17"},"nodeType":"YulIf","src":"25793:39:17"},{"nodeType":"YulVariableDeclaration","src":"25841:21:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25859:2:17","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"25853:5:17"},"nodeType":"YulFunctionCall","src":"25853:9:17"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"25845:4:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"25871:16:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25885:1:17","type":"","value":"3"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"25881:3:17"},"nodeType":"YulFunctionCall","src":"25881:6:17"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"25875:2:17","type":""}]},{"expression":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"25911:4:17"},{"kind":"number","nodeType":"YulLiteral","src":"25917:1:17","type":"","value":"4"},{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"25924:14:17"},"nodeType":"YulFunctionCall","src":"25924:16:17"},{"name":"_1","nodeType":"YulIdentifier","src":"25942:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25920:3:17"},"nodeType":"YulFunctionCall","src":"25920:25:17"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"25896:14:17"},"nodeType":"YulFunctionCall","src":"25896:50:17"},"nodeType":"YulExpressionStatement","src":"25896:50:17"},{"nodeType":"YulVariableDeclaration","src":"25955:25:17","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"25975:4:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"25969:5:17"},"nodeType":"YulFunctionCall","src":"25969:11:17"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"25959:6:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"25989:26:17","value":{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"25999:14:17"},"nodeType":"YulFunctionCall","src":"25999:16:17"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"25993:2:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"26024:28:17","value":{"kind":"number","nodeType":"YulLiteral","src":"26034:18:17","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"26028:2:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"26110:9:17","statements":[{"nodeType":"YulLeave","src":"26112:5:17"}]},"condition":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"26070:6:17"},{"name":"_3","nodeType":"YulIdentifier","src":"26078:2:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"26067:2:17"},"nodeType":"YulFunctionCall","src":"26067:14:17"},{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"26090:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"26098:4:17","type":"","value":"0x24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26086:3:17"},"nodeType":"YulFunctionCall","src":"26086:17:17"},{"name":"_2","nodeType":"YulIdentifier","src":"26105:2:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"26083:2:17"},"nodeType":"YulFunctionCall","src":"26083:25:17"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"26064:2:17"},"nodeType":"YulFunctionCall","src":"26064:45:17"},"nodeType":"YulIf","src":"26061:58:17"},{"nodeType":"YulVariableDeclaration","src":"26128:28:17","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"26143:4:17"},{"name":"offset","nodeType":"YulIdentifier","src":"26149:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26139:3:17"},"nodeType":"YulFunctionCall","src":"26139:17:17"},"variables":[{"name":"msg","nodeType":"YulTypedName","src":"26132:3:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"26165:24:17","value":{"arguments":[{"name":"msg","nodeType":"YulIdentifier","src":"26185:3:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"26179:5:17"},"nodeType":"YulFunctionCall","src":"26179:10:17"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"26169:6:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"26216:9:17","statements":[{"nodeType":"YulLeave","src":"26218:5:17"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"26204:6:17"},{"name":"_3","nodeType":"YulIdentifier","src":"26212:2:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"26201:2:17"},"nodeType":"YulFunctionCall","src":"26201:14:17"},"nodeType":"YulIf","src":"26198:27:17"},{"body":{"nodeType":"YulBlock","src":"26307:9:17","statements":[{"nodeType":"YulLeave","src":"26309:5:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"msg","nodeType":"YulIdentifier","src":"26248:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"26253:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26244:3:17"},"nodeType":"YulFunctionCall","src":"26244:16:17"},{"kind":"number","nodeType":"YulLiteral","src":"26262:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26240:3:17"},"nodeType":"YulFunctionCall","src":"26240:27:17"},{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"26277:4:17"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"26283:14:17"},"nodeType":"YulFunctionCall","src":"26283:16:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26273:3:17"},"nodeType":"YulFunctionCall","src":"26273:27:17"},{"name":"_1","nodeType":"YulIdentifier","src":"26302:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26269:3:17"},"nodeType":"YulFunctionCall","src":"26269:36:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"26237:2:17"},"nodeType":"YulFunctionCall","src":"26237:69:17"},"nodeType":"YulIf","src":"26234:82:17"},{"expression":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"26345:4:17"},{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"26359:6:17"},{"name":"length","nodeType":"YulIdentifier","src":"26367:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26355:3:17"},"nodeType":"YulFunctionCall","src":"26355:19:17"},{"kind":"number","nodeType":"YulLiteral","src":"26376:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26351:3:17"},"nodeType":"YulFunctionCall","src":"26351:30:17"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"26325:19:17"},"nodeType":"YulFunctionCall","src":"26325:57:17"},"nodeType":"YulExpressionStatement","src":"26325:57:17"},{"nodeType":"YulAssignment","src":"26391:10:17","value":{"name":"msg","nodeType":"YulIdentifier","src":"26398:3:17"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"26391:3:17"}]}]},"name":"try_decode_error_message","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"25775:3:17","type":""}],"src":"25736:671:17"},{"body":{"nodeType":"YulBlock","src":"26586:242:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26603:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"26614:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26596:6:17"},"nodeType":"YulFunctionCall","src":"26596:21:17"},"nodeType":"YulExpressionStatement","src":"26596:21:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26637:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"26648:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26633:3:17"},"nodeType":"YulFunctionCall","src":"26633:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"26653:2:17","type":"","value":"52"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26626:6:17"},"nodeType":"YulFunctionCall","src":"26626:30:17"},"nodeType":"YulExpressionStatement","src":"26626:30:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26676:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"26687:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26672:3:17"},"nodeType":"YulFunctionCall","src":"26672:18:17"},{"hexValue":"455243313135353a207472616e7366657220746f206e6f6e2d45524331313535","kind":"string","nodeType":"YulLiteral","src":"26692:34:17","type":"","value":"ERC1155: transfer to non-ERC1155"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26665:6:17"},"nodeType":"YulFunctionCall","src":"26665:62:17"},"nodeType":"YulExpressionStatement","src":"26665:62:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26747:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"26758:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26743:3:17"},"nodeType":"YulFunctionCall","src":"26743:18:17"},{"hexValue":"526563656976657220696d706c656d656e746572","kind":"string","nodeType":"YulLiteral","src":"26763:22:17","type":"","value":"Receiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26736:6:17"},"nodeType":"YulFunctionCall","src":"26736:50:17"},"nodeType":"YulExpressionStatement","src":"26736:50:17"},{"nodeType":"YulAssignment","src":"26795:27:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26807:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"26818:3:17","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26803:3:17"},"nodeType":"YulFunctionCall","src":"26803:19:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26795:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26563:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26577:4:17","type":""}],"src":"26412:416:17"},{"body":{"nodeType":"YulBlock","src":"27007:230:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27024:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"27035:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27017:6:17"},"nodeType":"YulFunctionCall","src":"27017:21:17"},"nodeType":"YulExpressionStatement","src":"27017:21:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27058:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"27069:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27054:3:17"},"nodeType":"YulFunctionCall","src":"27054:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"27074:2:17","type":"","value":"40"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27047:6:17"},"nodeType":"YulFunctionCall","src":"27047:30:17"},"nodeType":"YulExpressionStatement","src":"27047:30:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27097:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"27108:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27093:3:17"},"nodeType":"YulFunctionCall","src":"27093:18:17"},{"hexValue":"455243313135353a204552433131353552656365697665722072656a65637465","kind":"string","nodeType":"YulLiteral","src":"27113:34:17","type":"","value":"ERC1155: ERC1155Receiver rejecte"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27086:6:17"},"nodeType":"YulFunctionCall","src":"27086:62:17"},"nodeType":"YulExpressionStatement","src":"27086:62:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27168:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"27179:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27164:3:17"},"nodeType":"YulFunctionCall","src":"27164:18:17"},{"hexValue":"6420746f6b656e73","kind":"string","nodeType":"YulLiteral","src":"27184:10:17","type":"","value":"d tokens"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27157:6:17"},"nodeType":"YulFunctionCall","src":"27157:38:17"},"nodeType":"YulExpressionStatement","src":"27157:38:17"},{"nodeType":"YulAssignment","src":"27204:27:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27216:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"27227:3:17","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27212:3:17"},"nodeType":"YulFunctionCall","src":"27212:19:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27204:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26984:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26998:4:17","type":""}],"src":"26833:404:17"},{"body":{"nodeType":"YulBlock","src":"27631:423:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27648:3:17"},{"hexValue":"416363657373436f6e74726f6c3a206163636f756e7420","kind":"string","nodeType":"YulLiteral","src":"27653:25:17","type":"","value":"AccessControl: account "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27641:6:17"},"nodeType":"YulFunctionCall","src":"27641:38:17"},"nodeType":"YulExpressionStatement","src":"27641:38:17"},{"nodeType":"YulVariableDeclaration","src":"27688:27:17","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"27708:6:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"27702:5:17"},"nodeType":"YulFunctionCall","src":"27702:13:17"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"27692:6:17","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"27763:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"27771:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27759:3:17"},"nodeType":"YulFunctionCall","src":"27759:17:17"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27782:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"27787:2:17","type":"","value":"23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27778:3:17"},"nodeType":"YulFunctionCall","src":"27778:12:17"},{"name":"length","nodeType":"YulIdentifier","src":"27792:6:17"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"27724:34:17"},"nodeType":"YulFunctionCall","src":"27724:75:17"},"nodeType":"YulExpressionStatement","src":"27724:75:17"},{"nodeType":"YulVariableDeclaration","src":"27808:26:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27822:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"27827:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27818:3:17"},"nodeType":"YulFunctionCall","src":"27818:16:17"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"27812:2:17","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"27854:2:17"},{"kind":"number","nodeType":"YulLiteral","src":"27858:2:17","type":"","value":"23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27850:3:17"},"nodeType":"YulFunctionCall","src":"27850:11:17"},{"hexValue":"206973206d697373696e6720726f6c6520","kind":"string","nodeType":"YulLiteral","src":"27863:19:17","type":"","value":" is missing role "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27843:6:17"},"nodeType":"YulFunctionCall","src":"27843:40:17"},"nodeType":"YulExpressionStatement","src":"27843:40:17"},{"nodeType":"YulVariableDeclaration","src":"27892:29:17","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"27914:6:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"27908:5:17"},"nodeType":"YulFunctionCall","src":"27908:13:17"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"27896:8:17","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"27969:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"27977:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27965:3:17"},"nodeType":"YulFunctionCall","src":"27965:17:17"},{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"27988:2:17"},{"kind":"number","nodeType":"YulLiteral","src":"27992:2:17","type":"","value":"40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27984:3:17"},"nodeType":"YulFunctionCall","src":"27984:11:17"},{"name":"length_1","nodeType":"YulIdentifier","src":"27997:8:17"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"27930:34:17"},"nodeType":"YulFunctionCall","src":"27930:76:17"},"nodeType":"YulExpressionStatement","src":"27930:76:17"},{"nodeType":"YulAssignment","src":"28015:33:17","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"28030:2:17"},{"name":"length_1","nodeType":"YulIdentifier","src":"28034:8:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28026:3:17"},"nodeType":"YulFunctionCall","src":"28026:17:17"},{"kind":"number","nodeType":"YulLiteral","src":"28045:2:17","type":"","value":"40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28022:3:17"},"nodeType":"YulFunctionCall","src":"28022:26:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"28015:3:17"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"27599:3:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"27604:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"27612:6:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"27623:3:17","type":""}],"src":"27242:812:17"},{"body":{"nodeType":"YulBlock","src":"28290:330:17","statements":[{"nodeType":"YulVariableDeclaration","src":"28300:29:17","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28318:3:17","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"28323:1:17","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"28314:3:17"},"nodeType":"YulFunctionCall","src":"28314:11:17"},{"kind":"number","nodeType":"YulLiteral","src":"28327:1:17","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"28310:3:17"},"nodeType":"YulFunctionCall","src":"28310:19:17"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"28304:2:17","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28345:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"28360:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"28368:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"28356:3:17"},"nodeType":"YulFunctionCall","src":"28356:15:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28338:6:17"},"nodeType":"YulFunctionCall","src":"28338:34:17"},"nodeType":"YulExpressionStatement","src":"28338:34:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28392:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"28403:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28388:3:17"},"nodeType":"YulFunctionCall","src":"28388:18:17"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"28412:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"28420:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"28408:3:17"},"nodeType":"YulFunctionCall","src":"28408:15:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28381:6:17"},"nodeType":"YulFunctionCall","src":"28381:43:17"},"nodeType":"YulExpressionStatement","src":"28381:43:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28444:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"28455:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28440:3:17"},"nodeType":"YulFunctionCall","src":"28440:18:17"},{"name":"value2","nodeType":"YulIdentifier","src":"28460:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28433:6:17"},"nodeType":"YulFunctionCall","src":"28433:34:17"},"nodeType":"YulExpressionStatement","src":"28433:34:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28487:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"28498:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28483:3:17"},"nodeType":"YulFunctionCall","src":"28483:18:17"},{"name":"value3","nodeType":"YulIdentifier","src":"28503:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28476:6:17"},"nodeType":"YulFunctionCall","src":"28476:34:17"},"nodeType":"YulExpressionStatement","src":"28476:34:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28530:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"28541:3:17","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28526:3:17"},"nodeType":"YulFunctionCall","src":"28526:19:17"},{"kind":"number","nodeType":"YulLiteral","src":"28547:3:17","type":"","value":"160"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28519:6:17"},"nodeType":"YulFunctionCall","src":"28519:32:17"},"nodeType":"YulExpressionStatement","src":"28519:32:17"},{"nodeType":"YulAssignment","src":"28560:54:17","value":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"28586:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28598:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"28609:3:17","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28594:3:17"},"nodeType":"YulFunctionCall","src":"28594:19:17"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"28568:17:17"},"nodeType":"YulFunctionCall","src":"28568:46:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28560:4:17"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"28227:9:17","type":""},{"name":"value4","nodeType":"YulTypedName","src":"28238:6:17","type":""},{"name":"value3","nodeType":"YulTypedName","src":"28246:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"28254:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"28262:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"28270:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"28281:4:17","type":""}],"src":"28059:561:17"},{"body":{"nodeType":"YulBlock","src":"28672:89:17","statements":[{"body":{"nodeType":"YulBlock","src":"28699:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"28701:16:17"},"nodeType":"YulFunctionCall","src":"28701:18:17"},"nodeType":"YulExpressionStatement","src":"28701:18:17"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28692:5:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"28685:6:17"},"nodeType":"YulFunctionCall","src":"28685:13:17"},"nodeType":"YulIf","src":"28682:39:17"},{"nodeType":"YulAssignment","src":"28730:25:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28741:5:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28752:1:17","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"28748:3:17"},"nodeType":"YulFunctionCall","src":"28748:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28737:3:17"},"nodeType":"YulFunctionCall","src":"28737:18:17"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"28730:3:17"}]}]},"name":"decrement_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"28654:5:17","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"28664:3:17","type":""}],"src":"28625:136:17"},{"body":{"nodeType":"YulBlock","src":"28940:182:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28957:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"28968:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28950:6:17"},"nodeType":"YulFunctionCall","src":"28950:21:17"},"nodeType":"YulExpressionStatement","src":"28950:21:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28991:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"29002:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28987:3:17"},"nodeType":"YulFunctionCall","src":"28987:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"29007:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28980:6:17"},"nodeType":"YulFunctionCall","src":"28980:30:17"},"nodeType":"YulExpressionStatement","src":"28980:30:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29030:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"29041:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29026:3:17"},"nodeType":"YulFunctionCall","src":"29026:18:17"},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","kind":"string","nodeType":"YulLiteral","src":"29046:34:17","type":"","value":"Strings: hex length insufficient"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29019:6:17"},"nodeType":"YulFunctionCall","src":"29019:62:17"},"nodeType":"YulExpressionStatement","src":"29019:62:17"},{"nodeType":"YulAssignment","src":"29090:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29102:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"29113:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29098:3:17"},"nodeType":"YulFunctionCall","src":"29098:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29090:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"28917:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"28931:4:17","type":""}],"src":"28766:356:17"}]},"contents":"{\n    { }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_array_bytes32_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_bytes32_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_contract$_ITradingWallet_$3900__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function finalize_allocation(memPtr, size)\n    {\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_array_uint256_dyn(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(shl(5, length), 0x20)\n    }\n    function abi_decode_array_uint256_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let _3 := array_allocation_size_array_uint256_dyn(_1)\n        let memPtr := mload(64)\n        finalize_allocation(memPtr, _3)\n        let dst := memPtr\n        mstore(memPtr, _1)\n        dst := add(memPtr, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _2)\n        }\n        array := memPtr\n    }\n    function abi_decode_bytes(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        if gt(_1, 0xffffffffffffffff) { panic_error_0x41() }\n        let memPtr := mload(64)\n        finalize_allocation(memPtr, add(and(add(_1, 0x1f), not(31)), 0x20))\n        mstore(memPtr, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(memPtr, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(memPtr, _1), 0x20), 0)\n        array := memPtr\n    }\n    function abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        let offset := calldataload(add(headStart, 64))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value2 := abi_decode_array_uint256_dyn(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 96))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value3 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n        let offset_2 := calldataload(add(headStart, 128))\n        if gt(offset_2, _1) { revert(0, 0) }\n        value4 := abi_decode_bytes(add(headStart, offset_2), dataEnd)\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n    }\n    function abi_decode_tuple_t_bytes_calldata_ptrt_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, length), 0x20), dataEnd) { revert(0, 0) }\n        value0 := add(_2, 0x20)\n        value1 := length\n        value2 := calldataload(add(headStart, 0x20))\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        let _4 := 0x20\n        let _5 := array_allocation_size_array_uint256_dyn(_3)\n        let memPtr := mload(64)\n        finalize_allocation(memPtr, _5)\n        let dst := memPtr\n        mstore(memPtr, _3)\n        dst := add(memPtr, _4)\n        let srcEnd := add(add(_2, shl(5, _3)), _4)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_2, _4)\n        for { } lt(src, srcEnd) { src := add(src, _4) }\n        {\n            let value := calldataload(src)\n            validator_revert_address(value)\n            mstore(dst, value)\n            dst := add(dst, _4)\n        }\n        value0 := memPtr\n        let offset_1 := calldataload(add(headStart, _4))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n    }\n    function abi_encode_array_uint256_dyn(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let _1 := 0x20\n        pos := add(pos, _1)\n        let srcPtr := add(value, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        end := pos\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_array_uint256_dyn(value0, add(headStart, 32))\n    }\n    function validator_revert_bool(value)\n    {\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_bool(value_1)\n        value1 := value_1\n    }\n    function abi_encode_tuple_t_contract$_IExecutorManager_$3864__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_uint256t_bytes_memory_ptrt_array$_t_bytes32_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value1 := abi_decode_bytes(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 64))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_bytes32_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_encode_tuple_t_contract$_IERC20_$3876__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let offset := calldataload(add(headStart, 128))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value4 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"ERC1155: address zero is not a v\")\n        mstore(add(headStart, 96), \"alid owner\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_address__to_t_address__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, and(shl(96, value0), not(0xffffffffffffffffffffffff)))\n        end := add(pos, 20)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"ERC1155: caller is not token own\")\n        mstore(add(headStart, 96), \"er or approved\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 47)\n        mstore(add(headStart, 64), \"AccessControl: can only renounce\")\n        mstore(add(headStart, 96), \" roles for self\")\n        tail := add(headStart, 128)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bool(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_691e84db20482a4c42ba7a4aa341855d8289774d9698451740209f85cbb09b0a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"Caller is not an authorized exec\")\n        mstore(add(headStart, 96), \"utor\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function calldata_array_index_range_access_t_bytes_calldata_ptr(offset, length, startIndex, endIndex) -> offsetOut, lengthOut\n    {\n        if gt(startIndex, endIndex) { revert(0, 0) }\n        if gt(endIndex, length) { revert(0, 0) }\n        offsetOut := add(offset, startIndex)\n        lengthOut := sub(endIndex, startIndex)\n    }\n    function abi_decode_tuple_t_address_payablet_address_payablet_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n    }\n    function abi_encode_tuple_t_stringliteral_acc775314033618014c4c79559957baf417931f6e8d18e4684d327a6a76d2e7e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"Seller does not have enough toke\")\n        mstore(add(headStart, 96), \"ns\")\n        tail := add(headStart, 128)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_0d206f3891ed4fd63de4d8461a7a83b378123281d9065e8c00f16b46057d8c2c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"Buyer does not have enough token\")\n        mstore(add(headStart, 96), \"s\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_encode_array_address_dyn(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let _1 := 0x20\n        pos := add(pos, _1)\n        let srcPtr := add(value, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, and(mload(srcPtr), sub(shl(160, 1), 1)))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        end := pos\n    }\n    function abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr_t_array$_t_address_$dyn_memory_ptr_t_address_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr_t_array$_t_address_$dyn_memory_ptr_t_address_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 128)\n        let tail_1 := abi_encode_array_address_dyn(value0, add(headStart, 128))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        let tail_2 := abi_encode_array_address_dyn(value1, tail_1)\n        mstore(add(headStart, 64), and(value2, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 96), sub(tail_2, headStart))\n        tail := abi_encode_array_uint256_dyn(value3, tail_2)\n    }\n    function abi_encode_tuple_packed_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        calldatacopy(pos, value0, value1)\n        let _1 := add(pos, value1)\n        mstore(_1, 0)\n        end := _1\n    }\n    function abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC1155: accounts and ids length\")\n        mstore(add(headStart, 96), \" mismatch\")\n        tail := add(headStart, 128)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_c05b6e35da5e61f1d7b3ef7e615ddf60dfc35de37aba5dd75608f23dd6e104fb__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"Token is currently locked for mi\")\n        mstore(add(headStart, 96), \"nting\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_60304f7258d86aaa1cc1138fb2f6bbc524adfb91bc7985c5cde7fccc8aa6045a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"Caller is not whitelisted\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 40)\n        mstore(add(headStart, 64), \"ERC1155: ids and amounts length \")\n        mstore(add(headStart, 96), \"mismatch\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC1155: transfer to the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"ERC1155: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r transfer\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        let tail_1 := abi_encode_array_uint256_dyn(value0, add(headStart, 64))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        tail := abi_encode_array_uint256_dyn(value1, tail_1)\n    }\n    function abi_encode_tuple_t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC1155: setting approval status\")\n        mstore(add(headStart, 96), \" for self\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC1155: mint to the zero addres\")\n        mstore(add(headStart, 96), \"s\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_stringliteral_9bd124d272f06141b15552f4450bbed70049ce5ab0bcee1bad3c2f0f7ff9f544__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"Transfer not approved\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), 160)\n        let tail_1 := abi_encode_array_uint256_dyn(value2, add(headStart, 160))\n        mstore(add(headStart, 96), sub(tail_1, headStart))\n        let tail_2 := abi_encode_array_uint256_dyn(value3, tail_1)\n        mstore(add(headStart, 128), sub(tail_2, headStart))\n        tail := abi_encode_string(value4, tail_2)\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function return_data_selector() -> sig\n    {\n        if gt(returndatasize(), 3)\n        {\n            returndatacopy(0, 0, 4)\n            sig := shr(224, mload(0))\n        }\n    }\n    function try_decode_error_message() -> ret\n    {\n        if lt(returndatasize(), 0x44) { leave }\n        let data := mload(64)\n        let _1 := not(3)\n        returndatacopy(data, 4, add(returndatasize(), _1))\n        let offset := mload(data)\n        let _2 := returndatasize()\n        let _3 := 0xffffffffffffffff\n        if or(gt(offset, _3), gt(add(offset, 0x24), _2)) { leave }\n        let msg := add(data, offset)\n        let length := mload(msg)\n        if gt(length, _3) { leave }\n        if gt(add(add(msg, length), 0x20), add(add(data, returndatasize()), _1)) { leave }\n        finalize_allocation(data, add(add(offset, length), 0x20))\n        ret := msg\n    }\n    function abi_encode_tuple_t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 52)\n        mstore(add(headStart, 64), \"ERC1155: transfer to non-ERC1155\")\n        mstore(add(headStart, 96), \"Receiver implementer\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 40)\n        mstore(add(headStart, 64), \"ERC1155: ERC1155Receiver rejecte\")\n        mstore(add(headStart, 96), \"d tokens\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, \"AccessControl: account \")\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), add(pos, 23), length)\n        let _1 := add(pos, length)\n        mstore(add(_1, 23), \" is missing role \")\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), add(_1, 40), length_1)\n        end := add(add(_1, length_1), 40)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), 160)\n        tail := abi_encode_string(value4, add(headStart, 160))\n    }\n    function decrement_t_uint256(value) -> ret\n    {\n        if iszero(value) { panic_error_0x11() }\n        ret := add(value, not(0))\n    }\n    function abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Strings: hex length insufficient\")\n        tail := add(headStart, 96)\n    }\n}","id":17,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106101ce5760003560e01c80634e1273f411610104578063c0883b92116100a2578063e138818c11610071578063e138818c14610406578063e985e9c514610419578063ef0d45721461042c578063f242432a1461043f57600080fd5b8063c0883b92146103ba578063c3ae2b78146103cd578063c55dae63146103e0578063d547741f146103f357600080fd5b80638abdf5aa116100de5780638abdf5aa1461038357806391d148541461038c578063a217fddf1461039f578063a22cb465146103a757600080fd5b80634e1273f4146103475780637b1b1de6146103675780637cb647591461037057600080fd5b806326232a2e116101715780632ecc61601161014b5780632ecc6160146102eb5780632f2ff15d1461030e57806336568abe146103215780633e352e621461033457600080fd5b806326232a2e146102c45780632eb2c2d6146102cd5780632eb4a7ab146102e257600080fd5b806307bd0265116101ad57806307bd02651461022f5780630e89341c14610256578063207f185014610276578063248a9ca3146102a157600080fd5b8062fdd58e146101d357806301ffc9a7146101f9578063069824fb1461021c575b600080fd5b6101e66101e1366004611b96565b610452565b6040519081526020015b60405180910390f35b61020c610207366004611bd8565b6104eb565b60405190151581526020016101f0565b61020c61022a366004611c40565b610505565b6101e67fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e6381565b610269610264366004611c81565b610589565b6040516101f09190611cea565b600c54610289906001600160a01b031681565b6040516001600160a01b0390911681526020016101f0565b6101e66102af366004611c81565b60009081526003602052604090206001015490565b6101e660095481565b6102e06102db366004611e46565b61061d565b005b6101e660045481565b61020c6102f9366004611c81565b60056020526000908152604090205460ff1681565b6102e061031c366004611ef3565b610669565b6102e061032f366004611ef3565b610693565b6102e0610342366004611f23565b610711565b61035a610355366004611f9a565b610bfd565b6040516101f091906120a1565b6101e660075481565b6102e061037e366004611c81565b610d26565b6101e660085481565b61020c61039a366004611ef3565b610d37565b6101e6600081565b6102e06103b53660046120c2565b610d62565b600b54610289906001600160a01b031681565b6102e06103db3660046120f0565b610d6d565b600a54610289906001600160a01b031681565b6102e0610401366004611ef3565b610e88565b600d54610289906001600160a01b031681565b61020c61042736600461215f565b610ead565b6102e061043a36600461218d565b610f32565b6102e061044d3660046121aa565b610f60565b60006001600160a01b0383166104c25760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006104f682610fa5565b806104e557506104e582610ff5565b6040516bffffffffffffffffffffffff193360601b166020820152600090819060340160405160208183030381529060405280519060200120905061058184848080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050600454915084905061101a565b949350505050565b60606002805461059890612212565b80601f01602080910402602001604051908101604052809291908181526020018280546105c490612212565b80156106115780601f106105e657610100808354040283529160200191610611565b820191906000526020600020905b8154815290600101906020018083116105f457829003601f168201915b50505050509050919050565b6001600160a01b03851633148061063957506106398533610ead565b6106555760405162461bcd60e51b81526004016104b99061224c565b6106628585858585611030565b5050505050565b6000828152600360205260409020600101546106848161121b565b61068e8383611228565b505050565b6001600160a01b03811633146107035760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016104b9565b61070d82826112ae565b5050565b600b54604051630debfda360e41b81523360048201526001600160a01b039091169063debfda3090602401602060405180830381865afa158015610759573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077d919061229a565b6107d55760405162461bcd60e51b8152602060048201526024808201527f43616c6c6572206973206e6f7420616e20617574686f72697a656420657865636044820152633aba37b960e11b60648201526084016104b9565b60005b82811015610ba05760008080808785886107f38260686122cd565b92610800939291906122e0565b81019061080d919061230a565b9350935093509350806108208484610452565b10156108795760405162461bcd60e51b815260206004820152602260248201527f53656c6c657220646f6573206e6f74206861766520656e6f75676820746f6b656044820152616e7360f01b60648201526084016104b9565b6000600754826108899190612350565b9050600060646008548361089d9190612350565b6108a79190612367565b905060006064600954846108bb9190612350565b6108c59190612367565b90506000816108d484866122cd565b6108de91906122cd565b600c54600a546040516330ea258b60e21b81526001600160a01b038c811660048301529182166024820152929350839291169063c3a8962c90604401602060405180830381865afa158015610937573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095b9190612389565b10156109b35760405162461bcd60e51b815260206004820152602160248201527f427579657220646f6573206e6f74206861766520656e6f75676820746f6b656e6044820152607360f81b60648201526084016104b9565b60408051600280825260608201835260009260208301908036833701905050905088816000815181106109e8576109e86123a2565b60200260200101906001600160a01b031690816001600160a01b0316815250508881600181518110610a1c57610a1c6123a2565b6001600160a01b039290921660209283029190910182015260408051600280825260608201835260009391929091830190803683370190505090508881600081518110610a6b57610a6b6123a2565b6001600160a01b039283166020918202929092010152600d54825191169082906001908110610a9c57610a9c6123a2565b6001600160a01b039290921660209283029190910182015260408051600280825260608201835260009391929091830190803683370190505090508581600081518110610aeb57610aeb6123a2565b6020026020010181815250508481600181518110610b0b57610b0b6123a2565b6020908102919091010152600c54600a54604051630e10644160e21b81526001600160a01b0392831692633841910492610b4f9288928892169087906004016123f1565b600060405180830381600087803b158015610b6957600080fd5b505af1158015610b7d573d6000803e3d6000fd5b505050505050505050505050505050606881610b9991906122cd565b90506107d8565b5060008383604051610bb3929190612444565b604080519182900382208083524260208401529250839133917f78202e946262627c432f6c5b92fee2a7224c9aabdb3c71f747fccbad2fb470a4910160405180910390a350505050565b60608151835114610c625760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016104b9565b600083516001600160401b03811115610c7d57610c7d611cfd565b604051908082528060200260200182016040528015610ca6578160200160208202803683370190505b50905060005b8451811015610d1e57610cf1858281518110610cca57610cca6123a2565b6020026020010151858381518110610ce457610ce46123a2565b6020026020010151610452565b828281518110610d0357610d036123a2565b6020908102919091010152610d1781612454565b9050610cac565b509392505050565b6000610d318161121b565b50600455565b60009182526003602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61070d338383611315565b60065460008181526005602052604090205460ff1615610ddd5760405162461bcd60e51b815260206004820152602560248201527f546f6b656e2069732063757272656e746c79206c6f636b656420666f72206d696044820152646e74696e6760d81b60648201526084016104b9565b610de78383610505565b610e335760405162461bcd60e51b815260206004820152601960248201527f43616c6c6572206973206e6f742077686974656c69737465640000000000000060448201526064016104b9565b6000818152600560205260409020805460ff19166001179055610e58338287876113f5565b6000818152600560205260408120805460ff191690556006805491610e7c83612454565b91905055505050505050565b600082815260036020526040902060010154610ea38161121b565b61068e83836112ae565b600b54604051630debfda360e41b81526001600160a01b038381166004830152600092169063debfda3090602401602060405180830381865afa158015610ef8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1c919061229a565b15610f29575060016104e5565b50600092915050565b6000610f3d8161121b565b50600b80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038516331480610f7c5750610f7c8533610ead565b610f985760405162461bcd60e51b81526004016104b99061224c565b6106628585858585611518565b60006001600160e01b03198216636cdb3d1360e11b1480610fd657506001600160e01b031982166303a24d0760e21b145b806104e557506301ffc9a760e01b6001600160e01b03198316146104e5565b60006001600160e01b03198216637965db0b60e01b14806104e557506104e582610fa5565b6000826110278584611650565b14949350505050565b81518351146110925760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016104b9565b6001600160a01b0384166110b85760405162461bcd60e51b81526004016104b99061246d565b336110c7818787878787611695565b60005b84518110156111ad5760008582815181106110e7576110e76123a2565b602002602001015190506000858381518110611105576111056123a2565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156111555760405162461bcd60e51b81526004016104b9906124b2565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906111929084906122cd565b92505081905550505050806111a690612454565b90506110ca565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516111fd9291906124fc565b60405180910390a46112138187878787876116e8565b505050505050565b6112258133611843565b50565b6112328282610d37565b61070d5760008281526003602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561126a3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6112b88282610d37565b1561070d5760008281526003602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b816001600160a01b0316836001600160a01b0316036113885760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016104b9565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166114555760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016104b9565b3360006114618561189c565b9050600061146e8561189c565b905061147f83600089858589611695565b6000868152602081815260408083206001600160a01b038b168452909152812080548792906114af9084906122cd565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461150f836000898989896118e7565b50505050505050565b6001600160a01b03841661153e5760405162461bcd60e51b81526004016104b99061246d565b33600061154a8561189c565b905060006115578561189c565b9050611567838989858589611695565b6000868152602081815260408083206001600160a01b038c168452909152902054858110156115a85760405162461bcd60e51b81526004016104b9906124b2565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a168252812080548892906115e59084906122cd565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611645848a8a8a8a8a6118e7565b505050505050505050565b600081815b8451811015610d1e5761168182868381518110611674576116746123a2565b60200260200101516119a2565b91508061168d81612454565b915050611655565b61169f8587610ead565b6116e35760405162461bcd60e51b8152602060048201526015602482015274151c985b9cd9995c881b9bdd08185c1c1c9bdd9959605a1b60448201526064016104b9565b611213565b6001600160a01b0384163b156112135760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061172c908990899088908890889060040161252a565b6020604051808303816000875af1925050508015611767575060408051601f3d908101601f1916820190925261176491810190612588565b60015b611813576117736125a5565b806308c379a0036117ac57506117876125c1565b8061179257506117ae565b8060405162461bcd60e51b81526004016104b99190611cea565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016104b9565b6001600160e01b0319811663bc197c8160e01b1461150f5760405162461bcd60e51b81526004016104b99061264a565b61184d8282610d37565b61070d5761185a816119d4565b6118658360206119e6565b604051602001611876929190612692565b60408051601f198184030181529082905262461bcd60e51b82526104b991600401611cea565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106118d6576118d66123a2565b602090810291909101015292915050565b6001600160a01b0384163b156112135760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061192b9089908990889088908890600401612707565b6020604051808303816000875af1925050508015611966575060408051601f3d908101601f1916820190925261196391810190612588565b60015b611972576117736125a5565b6001600160e01b0319811663f23a6e6160e01b1461150f5760405162461bcd60e51b81526004016104b99061264a565b60008183106119be5760008281526020849052604090206119cd565b60008381526020839052604090205b9392505050565b60606104e56001600160a01b03831660145b606060006119f5836002612350565b611a009060026122cd565b6001600160401b03811115611a1757611a17611cfd565b6040519080825280601f01601f191660200182016040528015611a41576020820181803683370190505b509050600360fc1b81600081518110611a5c57611a5c6123a2565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611a8b57611a8b6123a2565b60200101906001600160f81b031916908160001a9053506000611aaf846002612350565b611aba9060016122cd565b90505b6001811115611b32576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611aee57611aee6123a2565b1a60f81b828281518110611b0457611b046123a2565b60200101906001600160f81b031916908160001a90535060049490941c93611b2b81612741565b9050611abd565b5083156119cd5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104b9565b6001600160a01b038116811461122557600080fd5b60008060408385031215611ba957600080fd5b8235611bb481611b81565b946020939093013593505050565b6001600160e01b03198116811461122557600080fd5b600060208284031215611bea57600080fd5b81356119cd81611bc2565b60008083601f840112611c0757600080fd5b5081356001600160401b03811115611c1e57600080fd5b6020830191508360208260051b8501011115611c3957600080fd5b9250929050565b60008060208385031215611c5357600080fd5b82356001600160401b03811115611c6957600080fd5b611c7585828601611bf5565b90969095509350505050565b600060208284031215611c9357600080fd5b5035919050565b60005b83811015611cb5578181015183820152602001611c9d565b50506000910152565b60008151808452611cd6816020860160208601611c9a565b601f01601f19169290920160200192915050565b6020815260006119cd6020830184611cbe565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b0381118282101715611d3857611d38611cfd565b6040525050565b60006001600160401b03821115611d5857611d58611cfd565b5060051b60200190565b600082601f830112611d7357600080fd5b81356020611d8082611d3f565b604051611d8d8282611d13565b83815260059390931b8501820192828101915086841115611dad57600080fd5b8286015b84811015611dc85780358352918301918301611db1565b509695505050505050565b600082601f830112611de457600080fd5b81356001600160401b03811115611dfd57611dfd611cfd565b604051611e14601f8301601f191660200182611d13565b818152846020838601011115611e2957600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215611e5e57600080fd5b8535611e6981611b81565b94506020860135611e7981611b81565b935060408601356001600160401b0380821115611e9557600080fd5b611ea189838a01611d62565b94506060880135915080821115611eb757600080fd5b611ec389838a01611d62565b93506080880135915080821115611ed957600080fd5b50611ee688828901611dd3565b9150509295509295909350565b60008060408385031215611f0657600080fd5b823591506020830135611f1881611b81565b809150509250929050565b600080600060408486031215611f3857600080fd5b83356001600160401b0380821115611f4f57600080fd5b818601915086601f830112611f6357600080fd5b813581811115611f7257600080fd5b876020828501011115611f8457600080fd5b6020928301989097509590910135949350505050565b60008060408385031215611fad57600080fd5b82356001600160401b0380821115611fc457600080fd5b818501915085601f830112611fd857600080fd5b81356020611fe582611d3f565b604051611ff28282611d13565b83815260059390931b850182019282810191508984111561201257600080fd5b948201945b8386101561203957853561202a81611b81565b82529482019490820190612017565b9650508601359250508082111561204f57600080fd5b5061205c85828601611d62565b9150509250929050565b600081518084526020808501945080840160005b838110156120965781518752958201959082019060010161207a565b509495945050505050565b6020815260006119cd6020830184612066565b801515811461122557600080fd5b600080604083850312156120d557600080fd5b82356120e081611b81565b91506020830135611f18816120b4565b6000806000806060858703121561210657600080fd5b8435935060208501356001600160401b038082111561212457600080fd5b61213088838901611dd3565b9450604087013591508082111561214657600080fd5b5061215387828801611bf5565b95989497509550505050565b6000806040838503121561217257600080fd5b823561217d81611b81565b91506020830135611f1881611b81565b60006020828403121561219f57600080fd5b81356119cd81611b81565b600080600080600060a086880312156121c257600080fd5b85356121cd81611b81565b945060208601356121dd81611b81565b9350604086013592506060860135915060808601356001600160401b0381111561220657600080fd5b611ee688828901611dd3565b600181811c9082168061222657607f821691505b60208210810361224657634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b6000602082840312156122ac57600080fd5b81516119cd816120b4565b634e487b7160e01b600052601160045260246000fd5b808201808211156104e5576104e56122b7565b600080858511156122f057600080fd5b838611156122fd57600080fd5b5050820193919092039150565b6000806000806080858703121561232057600080fd5b843561232b81611b81565b9350602085013561233b81611b81565b93969395505050506040820135916060013590565b80820281158282048414176104e5576104e56122b7565b60008261238457634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561239b57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b600081518084526020808501945080840160005b838110156120965781516001600160a01b0316875295820195908201906001016123cc565b60808152600061240460808301876123b8565b828103602084015261241681876123b8565b6001600160a01b0386166040850152838103606085015290506124398185612066565b979650505050505050565b8183823760009101908152919050565b600060018201612466576124666122b7565b5060010190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60408152600061250f6040830185612066565b82810360208401526125218185612066565b95945050505050565b6001600160a01b0386811682528516602082015260a06040820181905260009061255690830186612066565b82810360608401526125688186612066565b9050828103608084015261257c8185611cbe565b98975050505050505050565b60006020828403121561259a57600080fd5b81516119cd81611bc2565b600060033d11156125be5760046000803e5060005160e01c5b90565b600060443d10156125cf5790565b6040516003193d81016004833e81513d6001600160401b0381602484011181841117156125fe57505050505090565b82850191508151818111156126165750505050505090565b843d87010160208285010111156126305750505050505090565b61263f60208286010187611d13565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516126ca816017850160208801611c9a565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516126fb816028840160208801611c9a565b01602801949350505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061243990830184611cbe565b600081612750576127506122b7565b50600019019056fea2646970667358221220939c936e74e7e6373f8d82c45767ba82f0e5bbd76d1701a025e9df4ec77796a964736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1CE JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4E1273F4 GT PUSH2 0x104 JUMPI DUP1 PUSH4 0xC0883B92 GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xE138818C GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xE138818C EQ PUSH2 0x406 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x419 JUMPI DUP1 PUSH4 0xEF0D4572 EQ PUSH2 0x42C JUMPI DUP1 PUSH4 0xF242432A EQ PUSH2 0x43F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xC0883B92 EQ PUSH2 0x3BA JUMPI DUP1 PUSH4 0xC3AE2B78 EQ PUSH2 0x3CD JUMPI DUP1 PUSH4 0xC55DAE63 EQ PUSH2 0x3E0 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x3F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8ABDF5AA GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x8ABDF5AA EQ PUSH2 0x383 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x38C JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x39F JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x3A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4E1273F4 EQ PUSH2 0x347 JUMPI DUP1 PUSH4 0x7B1B1DE6 EQ PUSH2 0x367 JUMPI DUP1 PUSH4 0x7CB64759 EQ PUSH2 0x370 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x26232A2E GT PUSH2 0x171 JUMPI DUP1 PUSH4 0x2ECC6160 GT PUSH2 0x14B JUMPI DUP1 PUSH4 0x2ECC6160 EQ PUSH2 0x2EB JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x30E JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x321 JUMPI DUP1 PUSH4 0x3E352E62 EQ PUSH2 0x334 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x26232A2E EQ PUSH2 0x2C4 JUMPI DUP1 PUSH4 0x2EB2C2D6 EQ PUSH2 0x2CD JUMPI DUP1 PUSH4 0x2EB4A7AB EQ PUSH2 0x2E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7BD0265 GT PUSH2 0x1AD JUMPI DUP1 PUSH4 0x7BD0265 EQ PUSH2 0x22F JUMPI DUP1 PUSH4 0xE89341C EQ PUSH2 0x256 JUMPI DUP1 PUSH4 0x207F1850 EQ PUSH2 0x276 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x2A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0xFDD58E EQ PUSH2 0x1D3 JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1F9 JUMPI DUP1 PUSH4 0x69824FB EQ PUSH2 0x21C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E6 PUSH2 0x1E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B96 JUMP JUMPDEST PUSH2 0x452 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20C PUSH2 0x207 CALLDATASIZE PUSH1 0x4 PUSH2 0x1BD8 JUMP JUMPDEST PUSH2 0x4EB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F0 JUMP JUMPDEST PUSH2 0x20C PUSH2 0x22A CALLDATASIZE PUSH1 0x4 PUSH2 0x1C40 JUMP JUMPDEST PUSH2 0x505 JUMP JUMPDEST PUSH2 0x1E6 PUSH32 0xD8AA0F3194971A2A116679F7C2090F6939C8D4E01A2A8D7E41D55E5351469E63 DUP2 JUMP JUMPDEST PUSH2 0x269 PUSH2 0x264 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C81 JUMP JUMPDEST PUSH2 0x589 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F0 SWAP2 SWAP1 PUSH2 0x1CEA JUMP JUMPDEST PUSH1 0xC SLOAD PUSH2 0x289 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F0 JUMP JUMPDEST PUSH2 0x1E6 PUSH2 0x2AF CALLDATASIZE PUSH1 0x4 PUSH2 0x1C81 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1E6 PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x2E0 PUSH2 0x2DB CALLDATASIZE PUSH1 0x4 PUSH2 0x1E46 JUMP JUMPDEST PUSH2 0x61D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1E6 PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x20C PUSH2 0x2F9 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C81 JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x2E0 PUSH2 0x31C CALLDATASIZE PUSH1 0x4 PUSH2 0x1EF3 JUMP JUMPDEST PUSH2 0x669 JUMP JUMPDEST PUSH2 0x2E0 PUSH2 0x32F CALLDATASIZE PUSH1 0x4 PUSH2 0x1EF3 JUMP JUMPDEST PUSH2 0x693 JUMP JUMPDEST PUSH2 0x2E0 PUSH2 0x342 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F23 JUMP JUMPDEST PUSH2 0x711 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x355 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F9A JUMP JUMPDEST PUSH2 0xBFD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F0 SWAP2 SWAP1 PUSH2 0x20A1 JUMP JUMPDEST PUSH2 0x1E6 PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x2E0 PUSH2 0x37E CALLDATASIZE PUSH1 0x4 PUSH2 0x1C81 JUMP JUMPDEST PUSH2 0xD26 JUMP JUMPDEST PUSH2 0x1E6 PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x20C PUSH2 0x39A CALLDATASIZE PUSH1 0x4 PUSH2 0x1EF3 JUMP JUMPDEST PUSH2 0xD37 JUMP JUMPDEST PUSH2 0x1E6 PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH2 0x2E0 PUSH2 0x3B5 CALLDATASIZE PUSH1 0x4 PUSH2 0x20C2 JUMP JUMPDEST PUSH2 0xD62 JUMP JUMPDEST PUSH1 0xB SLOAD PUSH2 0x289 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x2E0 PUSH2 0x3DB CALLDATASIZE PUSH1 0x4 PUSH2 0x20F0 JUMP JUMPDEST PUSH2 0xD6D JUMP JUMPDEST PUSH1 0xA SLOAD PUSH2 0x289 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x2E0 PUSH2 0x401 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EF3 JUMP JUMPDEST PUSH2 0xE88 JUMP JUMPDEST PUSH1 0xD SLOAD PUSH2 0x289 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x20C PUSH2 0x427 CALLDATASIZE PUSH1 0x4 PUSH2 0x215F JUMP JUMPDEST PUSH2 0xEAD JUMP JUMPDEST PUSH2 0x2E0 PUSH2 0x43A CALLDATASIZE PUSH1 0x4 PUSH2 0x218D JUMP JUMPDEST PUSH2 0xF32 JUMP JUMPDEST PUSH2 0x2E0 PUSH2 0x44D CALLDATASIZE PUSH1 0x4 PUSH2 0x21AA JUMP JUMPDEST PUSH2 0xF60 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x4C2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2061646472657373207A65726F206973206E6F7420612076 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x30B634B21037BBB732B9 PUSH1 0xB1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4F6 DUP3 PUSH2 0xFA5 JUMP JUMPDEST DUP1 PUSH2 0x4E5 JUMPI POP PUSH2 0x4E5 DUP3 PUSH2 0xFF5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT CALLER PUSH1 0x60 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x34 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0x581 DUP5 DUP5 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP PUSH1 0x4 SLOAD SWAP2 POP DUP5 SWAP1 POP PUSH2 0x101A JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x598 SWAP1 PUSH2 0x2212 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x5C4 SWAP1 PUSH2 0x2212 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x611 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x5E6 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x611 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x5F4 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER EQ DUP1 PUSH2 0x639 JUMPI POP PUSH2 0x639 DUP6 CALLER PUSH2 0xEAD JUMP JUMPDEST PUSH2 0x655 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B9 SWAP1 PUSH2 0x224C JUMP JUMPDEST PUSH2 0x662 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x1030 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x684 DUP2 PUSH2 0x121B JUMP JUMPDEST PUSH2 0x68E DUP4 DUP4 PUSH2 0x1228 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x703 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x103937B632B9903337B91039B2B633 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B9 JUMP JUMPDEST PUSH2 0x70D DUP3 DUP3 PUSH2 0x12AE JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x40 MLOAD PUSH4 0xDEBFDA3 PUSH1 0xE4 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xDEBFDA30 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x759 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x77D SWAP2 SWAP1 PUSH2 0x229A JUMP JUMPDEST PUSH2 0x7D5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x43616C6C6572206973206E6F7420616E20617574686F72697A65642065786563 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x3ABA37B9 PUSH1 0xE1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B9 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xBA0 JUMPI PUSH1 0x0 DUP1 DUP1 DUP1 DUP8 DUP6 DUP9 PUSH2 0x7F3 DUP3 PUSH1 0x68 PUSH2 0x22CD JUMP JUMPDEST SWAP3 PUSH2 0x800 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x22E0 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x80D SWAP2 SWAP1 PUSH2 0x230A JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP1 PUSH2 0x820 DUP5 DUP5 PUSH2 0x452 JUMP JUMPDEST LT ISZERO PUSH2 0x879 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53656C6C657220646F6573206E6F74206861766520656E6F75676820746F6B65 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6E73 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 SLOAD DUP3 PUSH2 0x889 SWAP2 SWAP1 PUSH2 0x2350 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x64 PUSH1 0x8 SLOAD DUP4 PUSH2 0x89D SWAP2 SWAP1 PUSH2 0x2350 JUMP JUMPDEST PUSH2 0x8A7 SWAP2 SWAP1 PUSH2 0x2367 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x64 PUSH1 0x9 SLOAD DUP5 PUSH2 0x8BB SWAP2 SWAP1 PUSH2 0x2350 JUMP JUMPDEST PUSH2 0x8C5 SWAP2 SWAP1 PUSH2 0x2367 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH2 0x8D4 DUP5 DUP7 PUSH2 0x22CD JUMP JUMPDEST PUSH2 0x8DE SWAP2 SWAP1 PUSH2 0x22CD JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0xA SLOAD PUSH1 0x40 MLOAD PUSH4 0x30EA258B PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE SWAP3 SWAP4 POP DUP4 SWAP3 SWAP2 AND SWAP1 PUSH4 0xC3A8962C SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x937 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x95B SWAP2 SWAP1 PUSH2 0x2389 JUMP JUMPDEST LT ISZERO PUSH2 0x9B3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x427579657220646F6573206E6F74206861766520656E6F75676820746F6B656E PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 ADD DUP4 MSTORE PUSH1 0x0 SWAP3 PUSH1 0x20 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP9 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x9E8 JUMPI PUSH2 0x9E8 PUSH2 0x23A2 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP9 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xA1C JUMPI PUSH2 0xA1C PUSH2 0x23A2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD DUP3 ADD MSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 ADD DUP4 MSTORE PUSH1 0x0 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP9 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xA6B JUMPI PUSH2 0xA6B PUSH2 0x23A2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x20 SWAP2 DUP3 MUL SWAP3 SWAP1 SWAP3 ADD ADD MSTORE PUSH1 0xD SLOAD DUP3 MLOAD SWAP2 AND SWAP1 DUP3 SWAP1 PUSH1 0x1 SWAP1 DUP2 LT PUSH2 0xA9C JUMPI PUSH2 0xA9C PUSH2 0x23A2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD DUP3 ADD MSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 ADD DUP4 MSTORE PUSH1 0x0 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xAEB JUMPI PUSH2 0xAEB PUSH2 0x23A2 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP5 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xB0B JUMPI PUSH2 0xB0B PUSH2 0x23A2 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0xC SLOAD PUSH1 0xA SLOAD PUSH1 0x40 MLOAD PUSH4 0xE106441 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP3 PUSH4 0x38419104 SWAP3 PUSH2 0xB4F SWAP3 DUP9 SWAP3 DUP9 SWAP3 AND SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x23F1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB69 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB7D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP POP POP POP PUSH1 0x68 DUP2 PUSH2 0xB99 SWAP2 SWAP1 PUSH2 0x22CD JUMP JUMPDEST SWAP1 POP PUSH2 0x7D8 JUMP JUMPDEST POP PUSH1 0x0 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0xBB3 SWAP3 SWAP2 SWAP1 PUSH2 0x2444 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 SWAP1 SUB DUP3 KECCAK256 DUP1 DUP4 MSTORE TIMESTAMP PUSH1 0x20 DUP5 ADD MSTORE SWAP3 POP DUP4 SWAP2 CALLER SWAP2 PUSH32 0x78202E946262627C432F6C5B92FEE2A7224C9AABDB3C71F747FCCBAD2FB470A4 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0xC62 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A206163636F756E747320616E6420696473206C656E677468 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x40DAD2E6DAC2E8C6D PUSH1 0xBB SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B9 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xC7D JUMPI PUSH2 0xC7D PUSH2 0x1CFD JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xCA6 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xD1E JUMPI PUSH2 0xCF1 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xCCA JUMPI PUSH2 0xCCA PUSH2 0x23A2 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xCE4 JUMPI PUSH2 0xCE4 PUSH2 0x23A2 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x452 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xD03 JUMPI PUSH2 0xD03 PUSH2 0x23A2 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH2 0xD17 DUP2 PUSH2 0x2454 JUMP JUMPDEST SWAP1 POP PUSH2 0xCAC JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD31 DUP2 PUSH2 0x121B JUMP JUMPDEST POP PUSH1 0x4 SSTORE JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x70D CALLER DUP4 DUP4 PUSH2 0x1315 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xDDD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546F6B656E2069732063757272656E746C79206C6F636B656420666F72206D69 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6E74696E67 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B9 JUMP JUMPDEST PUSH2 0xDE7 DUP4 DUP4 PUSH2 0x505 JUMP JUMPDEST PUSH2 0xE33 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616C6C6572206973206E6F742077686974656C697374656400000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B9 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0xE58 CALLER DUP3 DUP8 DUP8 PUSH2 0x13F5 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0x6 DUP1 SLOAD SWAP2 PUSH2 0xE7C DUP4 PUSH2 0x2454 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xEA3 DUP2 PUSH2 0x121B JUMP JUMPDEST PUSH2 0x68E DUP4 DUP4 PUSH2 0x12AE JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x40 MLOAD PUSH4 0xDEBFDA3 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x0 SWAP3 AND SWAP1 PUSH4 0xDEBFDA30 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xEF8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF1C SWAP2 SWAP1 PUSH2 0x229A JUMP JUMPDEST ISZERO PUSH2 0xF29 JUMPI POP PUSH1 0x1 PUSH2 0x4E5 JUMP JUMPDEST POP PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF3D DUP2 PUSH2 0x121B JUMP JUMPDEST POP PUSH1 0xB DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER EQ DUP1 PUSH2 0xF7C JUMPI POP PUSH2 0xF7C DUP6 CALLER PUSH2 0xEAD JUMP JUMPDEST PUSH2 0xF98 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B9 SWAP1 PUSH2 0x224C JUMP JUMPDEST PUSH2 0x662 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x1518 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x6CDB3D13 PUSH1 0xE1 SHL EQ DUP1 PUSH2 0xFD6 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x3A24D07 PUSH1 0xE2 SHL EQ JUMPDEST DUP1 PUSH2 0x4E5 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x4E5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x4E5 JUMPI POP PUSH2 0x4E5 DUP3 PUSH2 0xFA5 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1027 DUP6 DUP5 PUSH2 0x1650 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x1092 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2069647320616E6420616D6F756E7473206C656E67746820 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0xDAD2E6DAC2E8C6D PUSH1 0xC3 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x10B8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B9 SWAP1 PUSH2 0x246D JUMP JUMPDEST CALLER PUSH2 0x10C7 DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x1695 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x11AD JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x10E7 JUMPI PUSH2 0x10E7 PUSH2 0x23A2 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1105 JUMPI PUSH2 0x1105 PUSH2 0x23A2 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x0 DUP5 DUP2 MSTORE DUP1 DUP4 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 AND DUP4 MSTORE SWAP1 SWAP4 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP2 DUP2 LT ISZERO PUSH2 0x1155 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B9 SWAP1 PUSH2 0x24B2 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP1 DUP12 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x1192 SWAP1 DUP5 SWAP1 PUSH2 0x22CD JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP POP POP DUP1 PUSH2 0x11A6 SWAP1 PUSH2 0x2454 JUMP JUMPDEST SWAP1 POP PUSH2 0x10CA JUMP JUMPDEST POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x11FD SWAP3 SWAP2 SWAP1 PUSH2 0x24FC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x1213 DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x16E8 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1225 DUP2 CALLER PUSH2 0x1843 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1232 DUP3 DUP3 PUSH2 0xD37 JUMP JUMPDEST PUSH2 0x70D JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x126A CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0x12B8 DUP3 DUP3 PUSH2 0xD37 JUMP JUMPDEST ISZERO PUSH2 0x70D JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x1388 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2073657474696E6720617070726F76616C20737461747573 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x103337B91039B2B633 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1455 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A206D696E7420746F20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B9 JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0x1461 DUP6 PUSH2 0x189C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x146E DUP6 PUSH2 0x189C JUMP JUMPDEST SWAP1 POP PUSH2 0x147F DUP4 PUSH1 0x0 DUP10 DUP6 DUP6 DUP10 PUSH2 0x1695 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP8 SWAP3 SWAP1 PUSH2 0x14AF SWAP1 DUP5 SWAP1 PUSH2 0x22CD JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP11 AND SWAP3 PUSH1 0x0 SWAP3 SWAP2 DUP8 AND SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x150F DUP4 PUSH1 0x0 DUP10 DUP10 DUP10 DUP10 PUSH2 0x18E7 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x153E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B9 SWAP1 PUSH2 0x246D JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0x154A DUP6 PUSH2 0x189C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1557 DUP6 PUSH2 0x189C JUMP JUMPDEST SWAP1 POP PUSH2 0x1567 DUP4 DUP10 DUP10 DUP6 DUP6 DUP10 PUSH2 0x1695 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP6 DUP2 LT ISZERO PUSH2 0x15A8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B9 SWAP1 PUSH2 0x24B2 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP10 DUP6 SUB SWAP1 SSTORE SWAP1 DUP11 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP9 SWAP3 SWAP1 PUSH2 0x15E5 SWAP1 DUP5 SWAP1 PUSH2 0x22CD JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP9 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP12 AND SWAP3 DUP13 DUP3 AND SWAP3 SWAP2 DUP9 AND SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x1645 DUP5 DUP11 DUP11 DUP11 DUP11 DUP11 PUSH2 0x18E7 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xD1E JUMPI PUSH2 0x1681 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1674 JUMPI PUSH2 0x1674 PUSH2 0x23A2 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x19A2 JUMP JUMPDEST SWAP2 POP DUP1 PUSH2 0x168D DUP2 PUSH2 0x2454 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1655 JUMP JUMPDEST PUSH2 0x169F DUP6 DUP8 PUSH2 0xEAD JUMP JUMPDEST PUSH2 0x16E3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x151C985B9CD9995C881B9BDD08185C1C1C9BDD9959 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B9 JUMP JUMPDEST PUSH2 0x1213 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x1213 JUMPI PUSH1 0x40 MLOAD PUSH4 0xBC197C81 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xBC197C81 SWAP1 PUSH2 0x172C SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x252A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1767 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1764 SWAP2 DUP2 ADD SWAP1 PUSH2 0x2588 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1813 JUMPI PUSH2 0x1773 PUSH2 0x25A5 JUMP JUMPDEST DUP1 PUSH4 0x8C379A0 SUB PUSH2 0x17AC JUMPI POP PUSH2 0x1787 PUSH2 0x25C1 JUMP JUMPDEST DUP1 PUSH2 0x1792 JUMPI POP PUSH2 0x17AE JUMP JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B9 SWAP2 SWAP1 PUSH2 0x1CEA JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x34 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F206E6F6E2D45524331313535 PUSH1 0x44 DUP3 ADD MSTORE PUSH20 0x2932B1B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x61 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xBC197C81 PUSH1 0xE0 SHL EQ PUSH2 0x150F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B9 SWAP1 PUSH2 0x264A JUMP JUMPDEST PUSH2 0x184D DUP3 DUP3 PUSH2 0xD37 JUMP JUMPDEST PUSH2 0x70D JUMPI PUSH2 0x185A DUP2 PUSH2 0x19D4 JUMP JUMPDEST PUSH2 0x1865 DUP4 PUSH1 0x20 PUSH2 0x19E6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1876 SWAP3 SWAP2 SWAP1 PUSH2 0x2692 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH2 0x4B9 SWAP2 PUSH1 0x4 ADD PUSH2 0x1CEA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP3 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x18D6 JUMPI PUSH2 0x18D6 PUSH2 0x23A2 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x1213 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF23A6E61 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xF23A6E61 SWAP1 PUSH2 0x192B SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x2707 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1966 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1963 SWAP2 DUP2 ADD SWAP1 PUSH2 0x2588 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1972 JUMPI PUSH2 0x1773 PUSH2 0x25A5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xF23A6E61 PUSH1 0xE0 SHL EQ PUSH2 0x150F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B9 SWAP1 PUSH2 0x264A JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x19BE JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x19CD JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4E5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x14 JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x19F5 DUP4 PUSH1 0x2 PUSH2 0x2350 JUMP JUMPDEST PUSH2 0x1A00 SWAP1 PUSH1 0x2 PUSH2 0x22CD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1A17 JUMPI PUSH2 0x1A17 PUSH2 0x1CFD JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1A41 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x3 PUSH1 0xFC SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1A5C JUMPI PUSH2 0x1A5C PUSH2 0x23A2 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xF PUSH1 0xFB SHL DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x1A8B JUMPI PUSH2 0x1A8B PUSH2 0x23A2 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH2 0x1AAF DUP5 PUSH1 0x2 PUSH2 0x2350 JUMP JUMPDEST PUSH2 0x1ABA SWAP1 PUSH1 0x1 PUSH2 0x22CD JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1B32 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH2 0x1AEE JUMPI PUSH2 0x1AEE PUSH2 0x23A2 JUMP JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1B04 JUMPI PUSH2 0x1B04 PUSH2 0x23A2 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH2 0x1B2B DUP2 PUSH2 0x2741 JUMP JUMPDEST SWAP1 POP PUSH2 0x1ABD JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0x19CD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1225 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1BA9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1BB4 DUP2 PUSH2 0x1B81 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x1225 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1BEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x19CD DUP2 PUSH2 0x1BC2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1C07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1C1E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x1C39 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C53 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1C69 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C75 DUP6 DUP3 DUP7 ADD PUSH2 0x1BF5 JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1CB5 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1C9D JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1CD6 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1C9A JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x19CD PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1CBE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1D38 JUMPI PUSH2 0x1D38 PUSH2 0x1CFD JUMP JUMPDEST PUSH1 0x40 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x1D58 JUMPI PUSH2 0x1D58 PUSH2 0x1CFD JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1D73 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x1D80 DUP3 PUSH2 0x1D3F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D8D DUP3 DUP3 PUSH2 0x1D13 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x5 SWAP4 SWAP1 SWAP4 SHL DUP6 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP2 POP DUP7 DUP5 GT ISZERO PUSH2 0x1DAD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1DC8 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x1DB1 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1DE4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1DFD JUMPI PUSH2 0x1DFD PUSH2 0x1CFD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E14 PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 PUSH2 0x1D13 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x1E29 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1E5E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x1E69 DUP2 PUSH2 0x1B81 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x1E79 DUP2 PUSH2 0x1B81 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1E95 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1EA1 DUP10 DUP4 DUP11 ADD PUSH2 0x1D62 JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1EB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1EC3 DUP10 DUP4 DUP11 ADD PUSH2 0x1D62 JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1ED9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1EE6 DUP9 DUP3 DUP10 ADD PUSH2 0x1DD3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1F06 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1F18 DUP2 PUSH2 0x1B81 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1F38 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1F4F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1F63 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1F72 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1F84 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 DUP4 ADD SWAP9 SWAP1 SWAP8 POP SWAP6 SWAP1 SWAP2 ADD CALLDATALOAD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1FAD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1FC4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1FD8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x1FE5 DUP3 PUSH2 0x1D3F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FF2 DUP3 DUP3 PUSH2 0x1D13 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x5 SWAP4 SWAP1 SWAP4 SHL DUP6 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP2 POP DUP10 DUP5 GT ISZERO PUSH2 0x2012 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 DUP3 ADD SWAP5 JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0x2039 JUMPI DUP6 CALLDATALOAD PUSH2 0x202A DUP2 PUSH2 0x1B81 JUMP JUMPDEST DUP3 MSTORE SWAP5 DUP3 ADD SWAP5 SWAP1 DUP3 ADD SWAP1 PUSH2 0x2017 JUMP JUMPDEST SWAP7 POP POP DUP7 ADD CALLDATALOAD SWAP3 POP POP DUP1 DUP3 GT ISZERO PUSH2 0x204F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x205C DUP6 DUP3 DUP7 ADD PUSH2 0x1D62 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2096 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x207A JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x19CD PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2066 JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1225 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x20D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x20E0 DUP2 PUSH2 0x1B81 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1F18 DUP2 PUSH2 0x20B4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2106 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x2124 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2130 DUP9 DUP4 DUP10 ADD PUSH2 0x1DD3 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2146 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2153 DUP8 DUP3 DUP9 ADD PUSH2 0x1BF5 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2172 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x217D DUP2 PUSH2 0x1B81 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1F18 DUP2 PUSH2 0x1B81 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x219F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x19CD DUP2 PUSH2 0x1B81 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x21C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x21CD DUP2 PUSH2 0x1B81 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x21DD DUP2 PUSH2 0x1B81 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2206 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1EE6 DUP9 DUP3 DUP10 ADD PUSH2 0x1DD3 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x2226 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2246 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A2063616C6C6572206973206E6F7420746F6B656E206F776E PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x195C881BDC88185C1C1C9BDD9959 PUSH1 0x92 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x22AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x19CD DUP2 PUSH2 0x20B4 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x4E5 JUMPI PUSH2 0x4E5 PUSH2 0x22B7 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP6 GT ISZERO PUSH2 0x22F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP7 GT ISZERO PUSH2 0x22FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 ADD SWAP4 SWAP2 SWAP1 SWAP3 SUB SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2320 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x232B DUP2 PUSH2 0x1B81 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x233B DUP2 PUSH2 0x1B81 JUMP JUMPDEST SWAP4 SWAP7 SWAP4 SWAP6 POP POP POP POP PUSH1 0x40 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0x60 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x4E5 JUMPI PUSH2 0x4E5 PUSH2 0x22B7 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2384 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x239B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2096 JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x23CC JUMP JUMPDEST PUSH1 0x80 DUP2 MSTORE PUSH1 0x0 PUSH2 0x2404 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x23B8 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x2416 DUP2 DUP8 PUSH2 0x23B8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x40 DUP6 ADD MSTORE DUP4 DUP2 SUB PUSH1 0x60 DUP6 ADD MSTORE SWAP1 POP PUSH2 0x2439 DUP2 DUP6 PUSH2 0x2066 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 DUP4 DUP3 CALLDATACOPY PUSH1 0x0 SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x2466 JUMPI PUSH2 0x2466 PUSH2 0x22B7 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F20746865207A65726F206164 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2A SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A20696E73756666696369656E742062616C616E636520666F PUSH1 0x40 DUP3 ADD MSTORE PUSH10 0x39103A3930B739B332B9 PUSH1 0xB1 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x250F PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x2066 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x2521 DUP2 DUP6 PUSH2 0x2066 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x2556 SWAP1 DUP4 ADD DUP7 PUSH2 0x2066 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x2568 DUP2 DUP7 PUSH2 0x2066 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x257C DUP2 DUP6 PUSH2 0x1CBE JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x259A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x19CD DUP2 PUSH2 0x1BC2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 RETURNDATASIZE GT ISZERO PUSH2 0x25BE JUMPI PUSH1 0x4 PUSH1 0x0 DUP1 RETURNDATACOPY POP PUSH1 0x0 MLOAD PUSH1 0xE0 SHR JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x44 RETURNDATASIZE LT ISZERO PUSH2 0x25CF JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x3 NOT RETURNDATASIZE DUP2 ADD PUSH1 0x4 DUP4 RETURNDATACOPY DUP2 MLOAD RETURNDATASIZE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 PUSH1 0x24 DUP5 ADD GT DUP2 DUP5 GT OR ISZERO PUSH2 0x25FE JUMPI POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP3 DUP6 ADD SWAP2 POP DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x2616 JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP5 RETURNDATASIZE DUP8 ADD ADD PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x2630 JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x263F PUSH1 0x20 DUP3 DUP7 ADD ADD DUP8 PUSH2 0x1D13 JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x28 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A204552433131353552656365697665722072656A65637465 PUSH1 0x40 DUP3 ADD MSTORE PUSH8 0x6420746F6B656E73 PUSH1 0xC0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH2 0x26CA DUP2 PUSH1 0x17 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x1C9A JUMP JUMPDEST PUSH17 0x1034B99036B4B9B9B4B733903937B6329 PUSH1 0x7D SHL PUSH1 0x17 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x26FB DUP2 PUSH1 0x28 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x1C9A JUMP JUMPDEST ADD PUSH1 0x28 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x2439 SWAP1 DUP4 ADD DUP5 PUSH2 0x1CBE JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x2750 JUMPI PUSH2 0x2750 PUSH2 0x22B7 JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP4 SWAP13 SWAP4 PUSH15 0x74E7E6373F8D82C45767BA82F0E5BB 0xD7 PUSH14 0x1701A025E9DF4EC77796A964736F PUSH13 0x63430008130033000000000000 ","sourceMap":"757:5293:15:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2185:227:3;;;;;;:::i;:::-;;:::i;:::-;;;616:25:17;;;604:2;589:18;2185:227:3;;;;;;;;3565::15;;;;;;:::i;:::-;;:::i;:::-;;;1203:14:17;;1196:22;1178:41;;1166:2;1151:18;3565:227:15;1038:187:17;3233:209:15;;;;;;:::i;:::-;;:::i;1024:66::-;;1064:26;1024:66;;1940:103:3;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1161:35:15:-;;;;;-1:-1:-1;;;;;1161:35:15;;;;;;-1:-1:-1;;;;;3354:32:17;;;3336:51;;3324:2;3309:18;1161:35:15;3167:226:17;4378:129:0;;;;;;:::i;:::-;4452:7;4478:12;;;:6;:12;;;;;:22;;;;4378:129;998:23:15;;;;;;4064:426:3;;;;;;:::i;:::-;;:::i;:::-;;805:25:15;;;;;;833:44;;;;;;:::i;:::-;;;;;;;;;;;;;;;;4803:145:0;;;;;;:::i;:::-;;:::i;5912:214::-;;;;;;:::i;:::-;;:::i;3953:2095:15:-;;;;;;:::i;:::-;;:::i;2569:508:3:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;945:25:15:-;;;;;;3445:117;;;;;;:::i;:::-;;:::i;973:22::-;;;;;;2895:145:0;;;;;;:::i;:::-;;:::i;2027:49::-;;2072:4;2027:49;;3145:153:3;;;;;;:::i;:::-;;:::i;1119:39:15:-;;;;;-1:-1:-1;;;;;1119:39:15;;;2646:584;;;;;;:::i;:::-;;:::i;1093:23::-;;;;;-1:-1:-1;;;;;1093:23:15;;;5228:147:0;;;;;;:::i;:::-;;:::i;1199:31:15:-;;;;;-1:-1:-1;;;;;1199:31:15;;;2134:188;;;;;;:::i;:::-;;:::i;3795:155::-;;;;;;:::i;:::-;;:::i;3598:394:3:-;;;;;;:::i;:::-;;:::i;2185:227::-;2271:7;-1:-1:-1;;;;;2298:21:3;;2290:76;;;;-1:-1:-1;;;2290:76:3;;12989:2:17;2290:76:3;;;12971:21:17;13028:2;13008:18;;;13001:30;13067:34;13047:18;;;13040:62;-1:-1:-1;;;13118:18:17;;;13111:40;13168:19;;2290:76:3;;;;;;;;;-1:-1:-1;2383:9:3;:13;;;;;;;;;;;-1:-1:-1;;;;;2383:22:3;;;;;;;;;;2185:227;;;;;:::o;3565::15:-;3679:4;3699:38;3725:11;3699:25;:38::i;:::-;:89;;;;3744:44;3776:11;3744:31;:44::i;3233:209::-;3349:28;;-1:-1:-1;;3366:10:15;13347:2:17;13343:15;13339:53;3349:28:15;;;13327:66:17;3314:4:15;;;;13409:12:17;;3349:28:15;;;;;;;;;;;;3339:39;;;;;;3324:54;;3389:49;3408:11;;3389:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3421:10:15;;;-1:-1:-1;3433:4:15;;-1:-1:-1;3389:18:15;:49::i;:::-;3382:56;3233:209;-1:-1:-1;;;;3233:209:15:o;1940:103:3:-;2000:13;2032:4;2025:11;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1940:103;;;:::o;4064:426::-;-1:-1:-1;;;;;4289:20:3;;719:10:9;4289:20:3;;:60;;-1:-1:-1;4313:36:3;4330:4;719:10:9;2134:188:15;:::i;4313:36:3:-;4268:153;;;;-1:-1:-1;;;4268:153:3;;;;;;;:::i;:::-;4431:52;4454:4;4460:2;4464:3;4469:7;4478:4;4431:22;:52::i;:::-;4064:426;;;;;:::o;4803:145:0:-;4452:7;4478:12;;;:6;:12;;;;;:22;;;2505:16;2516:4;2505:10;:16::i;:::-;4916:25:::1;4927:4;4933:7;4916:10;:25::i;:::-;4803:145:::0;;;:::o;5912:214::-;-1:-1:-1;;;;;6007:23:0;;719:10:9;6007:23:0;5999:83;;;;-1:-1:-1;;;5999:83:0;;14434:2:17;5999:83:0;;;14416:21:17;14473:2;14453:18;;;14446:30;14512:34;14492:18;;;14485:62;-1:-1:-1;;;14563:18:17;;;14556:45;14618:19;;5999:83:0;14232:411:17;5999:83:0;6093:26;6105:4;6111:7;6093:11;:26::i;:::-;5912:214;;:::o;3953:2095:15:-;4054:15;;:38;;-1:-1:-1;;;4054:38:15;;4081:10;4054:38;;;3336:51:17;-1:-1:-1;;;;;4054:15:15;;;;:26;;3309:18:17;;4054:38:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4042:97;;;;-1:-1:-1;;;4042:97:15;;15100:2:17;4042:97:15;;;15082:21:17;15139:2;15119:18;;;15112:30;15178:34;15158:18;;;15151:62;-1:-1:-1;;;15229:18:17;;;15222:34;15273:19;;4042:97:15;14898:400:17;4042:97:15;4204:6;4199:1608;4216:21;;;4199:1608;;;4260:13;;;;4386:10;4397:1;4386:10;4399:7;4397:1;4403:3;4399:7;:::i;:::-;4386:21;;;;;;;:::i;:::-;4369:87;;;;;;;:::i;:::-;4254:202;;;;;;;;4552:6;4522:26;4532:6;4540:7;4522:9;:26::i;:::-;:36;;4509:96;;;;-1:-1:-1;;;4509:96:15;;16649:2:17;4509:96:15;;;16631:21:17;16688:2;16668:18;;;16661:30;16727:34;16707:18;;;16700:62;-1:-1:-1;;;16778:18:17;;;16771:32;16820:19;;4509:96:15;16447:398:17;4509:96:15;4679:20;4711:13;;4702:6;:22;;;;:::i;:::-;4679:45;;4775:21;4829:3;4815:10;;4800:12;:25;;;;:::i;:::-;4799:33;;;;:::i;:::-;4775:57;;4837:22;4893:3;4878:11;;4863:12;:26;;;;:::i;:::-;4862:34;;;;:::i;:::-;4837:59;-1:-1:-1;4956:17:15;4837:59;4976:35;4995:16;4976:12;:35;:::i;:::-;:59;;;;:::i;:::-;5091:13;;5136:9;;5091:56;;-1:-1:-1;;;5091:56:15;;-1:-1:-1;;;;;17475:15:17;;;5091:56:15;;;17457:34:17;5136:9:15;;;17507:18:17;;;17500:43;4956:79:15;;-1:-1:-1;4956:79:15;;5091:13;;;:29;;17392:18:17;;5091:56:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:74;;5078:133;;;;-1:-1:-1;;;5078:133:15;;17945:2:17;5078:133:15;;;17927:21:17;17984:2;17964:18;;;17957:30;18023:34;18003:18;;;17996:62;-1:-1:-1;;;18074:18:17;;;18067:31;18115:19;;5078:133:15;17743:397:17;5078:133:15;5296:16;;;5310:1;5296:16;;;;;;;;5263:30;;5296:16;;;;;;;;;;-1:-1:-1;5296:16:15;5263:49;;5336:5;5317:13;5331:1;5317:16;;;;;;;;:::i;:::-;;;;;;:24;-1:-1:-1;;;;;5317:24:15;;;-1:-1:-1;;;;;5317:24:15;;;;;5365:5;5346:13;5360:1;5346:16;;;;;;;;:::i;:::-;-1:-1:-1;;;;;5346:24:15;;;;:16;;;;;;;;;;:24;5407:16;;;5421:1;5407:16;;;;;;;;5376:28;;5407:16;;5421:1;;5407:16;;;;;;;;;-1:-1:-1;5407:16:15;5376:47;;5445:6;5428:11;5440:1;5428:14;;;;;;;;:::i;:::-;-1:-1:-1;;;;;5428:23:15;;;:14;;;;;;;;;:23;5473:16;;5456:14;;5473:16;;;5456:11;;5473:16;;5456:14;;;;;;:::i;:::-;-1:-1:-1;;;;;5456:33:15;;;;:14;;;;;;;;;;:33;5519:13;;;5530:1;5519:13;;;;;;;;5495:21;;5519:13;;5530:1;;5519:13;;;;;;;;;-1:-1:-1;5519:13:15;5495:37;;5550:16;5537:7;5545:1;5537:10;;;;;;;;:::i;:::-;;;;;;:29;;;;;5584:17;5571:7;5579:1;5571:10;;;;;;;;:::i;:::-;;;;;;;;;;:30;5649:13;;5732:9;;5649:111;;-1:-1:-1;;;5649:111:15;;-1:-1:-1;;;;;5649:13:15;;;;:33;;:111;;5688:13;;5707:11;;5732:9;;5748:7;;5649:111;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4249:1558;;;;;;;;;;;4244:3;4239:8;;;;;:::i;:::-;;;4199:1608;;;;5864:18;5895:10;;5885:21;;;;;;;:::i;:::-;;;;;;;;;;19966:25:17;;;6025:15:15;20022:2:17;20007:18;;20000:34;5885:21:15;-1:-1:-1;5994:11:15;;5979:10;;5959:85;;19939:18:17;5959:85:15;;;;;;;4038:2010;3953:2095;;;:::o;2569:508:3:-;2720:16;2779:3;:10;2760:8;:15;:29;2752:83;;;;-1:-1:-1;;;2752:83:3;;20247:2:17;2752:83:3;;;20229:21:17;20286:2;20266:18;;;20259:30;20325:34;20305:18;;;20298:62;-1:-1:-1;;;20376:18:17;;;20369:39;20425:19;;2752:83:3;20045:405:17;2752:83:3;2846:30;2893:8;:15;-1:-1:-1;;;;;2879:30:3;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2879:30:3;;2846:63;;2925:9;2920:120;2944:8;:15;2940:1;:19;2920:120;;;2999:30;3009:8;3018:1;3009:11;;;;;;;;:::i;:::-;;;;;;;3022:3;3026:1;3022:6;;;;;;;;:::i;:::-;;;;;;;2999:9;:30::i;:::-;2980:13;2994:1;2980:16;;;;;;;;:::i;:::-;;;;;;;;;;:49;2961:3;;;:::i;:::-;;;2920:120;;;-1:-1:-1;3057:13:3;2569:508;-1:-1:-1;;;2569:508:3:o;3445:117:15:-;2072:4:0;2505:16;2072:4;2505:10;:16::i;:::-;-1:-1:-1;3534:10:15::1;:24:::0;3445:117::o;2895:145:0:-;2981:4;3004:12;;;:6;:12;;;;;;;;-1:-1:-1;;;;;3004:29:0;;;;;;;;;;;;;;;2895:145::o;3145:153:3:-;3239:52;719:10:9;3272:8:3;3282;3239:18;:52::i;2646:584:15:-;2769:14;;2756:10;2796:16;;;:12;:16;;;;;;;;2795:17;2787:67;;;;-1:-1:-1;;;2787:67:15;;20797:2:17;2787:67:15;;;20779:21:17;20836:2;20816:18;;;20809:30;20875:34;20855:18;;;20848:62;-1:-1:-1;;;20926:18:17;;;20919:35;20971:19;;2787:67:15;20595:401:17;2787:67:15;2914:26;2928:11;;2914:13;:26::i;:::-;2906:64;;;;-1:-1:-1;;;2906:64:15;;21203:2:17;2906:64:15;;;21185:21:17;21242:2;21222:18;;;21215:30;21281:27;21261:18;;;21254:55;21326:18;;2906:64:15;21001:349:17;2906:64:15;2975:16;;;;:12;:16;;;;;:23;;-1:-1:-1;;2975:23:15;2994:4;2975:23;;;3107:35;3113:10;2988:2;3129:6;3137:4;3107:5;:35::i;:::-;3166:5;3147:16;;;:12;:16;;;;;:24;;-1:-1:-1;;3147:24:15;;;3210:14;:16;;;;;;:::i;:::-;;;;;;2752:478;2646:584;;;;:::o;5228:147:0:-;4452:7;4478:12;;;:6;:12;;;;;:22;;;2505:16;2516:4;2505:10;:16::i;:::-;5342:26:::1;5354:4;5360:7;5342:11;:26::i;2134:188:15:-:0;2244:15;;:36;;-1:-1:-1;;;2244:36:15;;-1:-1:-1;;;;;3354:32:17;;;2244:36:15;;;3336:51:17;2230:4:15;;2244:15;;:26;;3309:18:17;;2244:36:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2240:63;;;-1:-1:-1;2294:4:15;2287:11;;2240:63;-1:-1:-1;2313:5:15;2134:188;;;;:::o;3795:155::-;2072:4:0;2505:16;2072:4;2505:10;:16::i;:::-;-1:-1:-1;3894:15:15::1;:52:::0;;-1:-1:-1;;;;;;3894:52:15::1;-1:-1:-1::0;;;;;3894:52:15;;;::::1;::::0;;;::::1;::::0;;3795:155::o;3598:394:3:-;-1:-1:-1;;;;;3798:20:3;;719:10:9;3798:20:3;;:60;;-1:-1:-1;3822:36:3;3839:4;719:10:9;2134:188:15;:::i;3822:36:3:-;3777:153;;;;-1:-1:-1;;;3777:153:3;;;;;;;:::i;:::-;3940:45;3958:4;3964:2;3968;3972:6;3980:4;3940:17;:45::i;1236:305::-;1338:4;-1:-1:-1;;;;;;1373:41:3;;-1:-1:-1;;;1373:41:3;;:109;;-1:-1:-1;;;;;;;1430:52:3;;-1:-1:-1;;;1430:52:3;1373:109;:161;;;-1:-1:-1;;;;;;;;;;937:40:12;;;1498:36:3;829:155:12;2606:202:0;2691:4;-1:-1:-1;;;;;;2714:47:0;;-1:-1:-1;;;2714:47:0;;:87;;;2765:36;2789:11;2765:23;:36::i;1156:184:11:-;1277:4;1329;1300:25;1313:5;1320:4;1300:12;:25::i;:::-;:33;;1156:184;-1:-1:-1;;;;1156:184:11:o;6233:1115:3:-;6453:7;:14;6439:3;:10;:28;6431:81;;;;-1:-1:-1;;;6431:81:3;;21557:2:17;6431:81:3;;;21539:21:17;21596:2;21576:18;;;21569:30;21635:34;21615:18;;;21608:62;-1:-1:-1;;;21686:18:17;;;21679:38;21734:19;;6431:81:3;21355:404:17;6431:81:3;-1:-1:-1;;;;;6530:16:3;;6522:66;;;;-1:-1:-1;;;6522:66:3;;;;;;;:::i;:::-;719:10:9;6641:60:3;719:10:9;6672:4:3;6678:2;6682:3;6687:7;6696:4;6641:20;:60::i;:::-;6717:9;6712:411;6736:3;:10;6732:1;:14;6712:411;;;6767:10;6780:3;6784:1;6780:6;;;;;;;;:::i;:::-;;;;;;;6767:19;;6800:14;6817:7;6825:1;6817:10;;;;;;;;:::i;:::-;;;;;;;;;;;;6842:19;6864:13;;;;;;;;;;-1:-1:-1;;;;;6864:19:3;;;;;;;;;;;;6817:10;;-1:-1:-1;6905:21:3;;;;6897:76;;;;-1:-1:-1;;;6897:76:3;;;;;;;:::i;:::-;7015:9;:13;;;;;;;;;;;-1:-1:-1;;;;;7015:19:3;;;;;;;;;;7037:20;;;7015:42;;7085:17;;;;;;;:27;;7037:20;;7015:9;7085:27;;7037:20;;7085:27;:::i;:::-;;;;;;;;6753:370;;;6748:3;;;;:::i;:::-;;;6712:411;;;;7168:2;-1:-1:-1;;;;;7138:47:3;7162:4;-1:-1:-1;;;;;7138:47:3;7152:8;-1:-1:-1;;;;;7138:47:3;;7172:3;7177:7;7138:47;;;;;;;:::i;:::-;;;;;;;;7266:75;7302:8;7312:4;7318:2;7322:3;7327:7;7336:4;7266:35;:75::i;:::-;6421:927;6233:1115;;;;;:::o;3334:103:0:-;3400:30;3411:4;719:10:9;3400::0;:30::i;:::-;3334:103;:::o;7461:233::-;7544:22;7552:4;7558:7;7544;:22::i;:::-;7539:149;;7582:12;;;;:6;:12;;;;;;;;-1:-1:-1;;;;;7582:29:0;;;;;;;;;:36;;-1:-1:-1;;7582:36:0;7614:4;7582:36;;;7664:12;719:10:9;;640:96;7664:12:0;-1:-1:-1;;;;;7637:40:0;7655:7;-1:-1:-1;;;;;7637:40:0;7649:4;7637:40;;;;;;;;;;7461:233;;:::o;7865:234::-;7948:22;7956:4;7962:7;7948;:22::i;:::-;7944:149;;;8018:5;7986:12;;;:6;:12;;;;;;;;-1:-1:-1;;;;;7986:29:0;;;;;;;;;;:37;;-1:-1:-1;;7986:37:0;;;8042:40;719:10:9;;7986:12:0;;8042:40;;8018:5;8042:40;7865:234;;:::o;12910:323:3:-;13060:8;-1:-1:-1;;;;;13051:17:3;:5;-1:-1:-1;;;;;13051:17:3;;13043:71;;;;-1:-1:-1;;;13043:71:3;;23253:2:17;13043:71:3;;;23235:21:17;23292:2;23272:18;;;23265:30;23331:34;23311:18;;;23304:62;-1:-1:-1;;;23382:18:17;;;23375:39;23431:19;;13043:71:3;23051:405:17;13043:71:3;-1:-1:-1;;;;;13124:25:3;;;;;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;:46;;-1:-1:-1;;13124:46:3;;;;;;;;;;13185:41;;1178::17;;;13185::3;;1151:18:17;13185:41:3;;;;;;;12910:323;;;:::o;8630:709::-;-1:-1:-1;;;;;8777:16:3;;8769:62;;;;-1:-1:-1;;;8769:62:3;;23663:2:17;8769:62:3;;;23645:21:17;23702:2;23682:18;;;23675:30;23741:34;23721:18;;;23714:62;-1:-1:-1;;;23792:18:17;;;23785:31;23833:19;;8769:62:3;23461:397:17;8769:62:3;719:10:9;8842:16:3;8906:21;8924:2;8906:17;:21::i;:::-;8883:44;;8937:24;8964:25;8982:6;8964:17;:25::i;:::-;8937:52;;9000:66;9021:8;9039:1;9043:2;9047:3;9052:7;9061:4;9000:20;:66::i;:::-;9077:9;:13;;;;;;;;;;;-1:-1:-1;;;;;9077:17:3;;;;;;;;;:27;;9098:6;;9077:9;:27;;9098:6;;9077:27;:::i;:::-;;;;-1:-1:-1;;9119:52:3;;;19966:25:17;;;20022:2;20007:18;;20000:34;;;-1:-1:-1;;;;;9119:52:3;;;;9152:1;;9119:52;;;;;;19939:18:17;9119:52:3;;;;;;;9258:74;9289:8;9307:1;9311:2;9315;9319:6;9327:4;9258:30;:74::i;:::-;8759:580;;;8630:709;;;;:::o;4940:947::-;-1:-1:-1;;;;;5121:16:3;;5113:66;;;;-1:-1:-1;;;5113:66:3;;;;;;;:::i;:::-;719:10:9;5190:16:3;5254:21;5272:2;5254:17;:21::i;:::-;5231:44;;5285:24;5312:25;5330:6;5312:17;:25::i;:::-;5285:52;;5348:60;5369:8;5379:4;5385:2;5389:3;5394:7;5403:4;5348:20;:60::i;:::-;5419:19;5441:13;;;;;;;;;;;-1:-1:-1;;;;;5441:19:3;;;;;;;;;;5478:21;;;;5470:76;;;;-1:-1:-1;;;5470:76:3;;;;;;;:::i;:::-;5580:9;:13;;;;;;;;;;;-1:-1:-1;;;;;5580:19:3;;;;;;;;;;5602:20;;;5580:42;;5642:17;;;;;;;:27;;5602:20;;5580:9;5642:27;;5602:20;;5642:27;:::i;:::-;;;;-1:-1:-1;;5685:46:3;;;19966:25:17;;;20022:2;20007:18;;20000:34;;;-1:-1:-1;;;;;5685:46:3;;;;;;;;;;;;;;19939:18:17;5685:46:3;;;;;;;5812:68;5843:8;5853:4;5859:2;5863;5867:6;5875:4;5812:30;:68::i;:::-;5103:784;;;;4940:947;;;;;:::o;1994:290:11:-;2077:7;2119:4;2077:7;2133:116;2157:5;:12;2153:1;:16;2133:116;;;2205:33;2215:12;2229:5;2235:1;2229:8;;;;;;;;:::i;:::-;;;;;;;2205:9;:33::i;:::-;2190:48;-1:-1:-1;2171:3:11;;;;:::i;:::-;;;;2133:116;;2325:318:15;2511:32;2528:4;2534:8;2511:16;:32::i;:::-;2503:66;;;;-1:-1:-1;;;2503:66:15;;24318:2:17;2503:66:15;;;24300:21:17;24357:2;24337:18;;;24330:30;-1:-1:-1;;;24376:18:17;;;24369:51;24437:18;;2503:66:15;24116:345:17;2503:66:15;2573;6233:1115:3;16266:792;-1:-1:-1;;;;;16498:13:3;;1465:19:8;:23;16494:558:3;;16533:79;;-1:-1:-1;;;16533:79:3;;-1:-1:-1;;;;;16533:43:3;;;;;:79;;16577:8;;16587:4;;16593:3;;16598:7;;16607:4;;16533:79;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;16533:79:3;;;;;;;;-1:-1:-1;;16533:79:3;;;;;;;;;;;;:::i;:::-;;;16529:513;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;16918:6;16911:14;;-1:-1:-1;;;16911:14:3;;;;;;;;:::i;16529:513::-;;;16965:62;;-1:-1:-1;;;16965:62:3;;26614:2:17;16965:62:3;;;26596:21:17;26653:2;26633:18;;;26626:30;26692:34;26672:18;;;26665:62;-1:-1:-1;;;26743:18:17;;;26736:50;26803:19;;16965:62:3;26412:416:17;16529:513:3;-1:-1:-1;;;;;;16691:60:3;;-1:-1:-1;;;16691:60:3;16687:157;;16775:50;;-1:-1:-1;;;16775:50:3;;;;;;;:::i;3718:479:0:-;3806:22;3814:4;3820:7;3806;:22::i;:::-;3801:390;;3989:28;4009:7;3989:19;:28::i;:::-;4088:38;4116:4;4123:2;4088:19;:38::i;:::-;3896:252;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3896:252:0;;;;;;;;;;-1:-1:-1;;;3844:336:0;;;;;;;:::i;17064:193:3:-;17183:16;;;17197:1;17183:16;;;;;;;;;17130;;17158:22;;17183:16;;;;;;;;;;;;-1:-1:-1;17183:16:3;17158:41;;17220:7;17209:5;17215:1;17209:8;;;;;;;;:::i;:::-;;;;;;;;;;:18;17245:5;17064:193;-1:-1:-1;;17064:193:3:o;15535:725::-;-1:-1:-1;;;;;15742:13:3;;1465:19:8;:23;15738:516:3;;15777:72;;-1:-1:-1;;;15777:72:3;;-1:-1:-1;;;;;15777:38:3;;;;;:72;;15816:8;;15826:4;;15832:2;;15836:6;;15844:4;;15777:72;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;15777:72:3;;;;;;;;-1:-1:-1;;15777:72:3;;;;;;;;;;;;:::i;:::-;;;15773:471;;;;:::i;:::-;-1:-1:-1;;;;;;15898:55:3;;-1:-1:-1;;;15898:55:3;15894:152;;15977:50;;-1:-1:-1;;;15977:50:3;;;;;;;:::i;8879:147:11:-;8942:7;8972:1;8968;:5;:51;;9100:13;9191:15;;;9226:4;9219:15;;;9272:4;9256:21;;8968:51;;;9100:13;9191:15;;;9226:4;9219:15;;;9272:4;9256:21;;8976:20;8961:58;8879:147;-1:-1:-1;;;8879:147:11:o;2102:149:10:-;2160:13;2192:52;-1:-1:-1;;;;;2204:22:10;;311:2;1513:437;1588:13;1613:19;1645:10;1649:6;1645:1;:10;:::i;:::-;:14;;1658:1;1645:14;:::i;:::-;-1:-1:-1;;;;;1635:25:10;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1635:25:10;;1613:47;;-1:-1:-1;;;1670:6:10;1677:1;1670:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;1670:15:10;;;;;;;;;-1:-1:-1;;;1695:6:10;1702:1;1695:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;1695:15:10;;;;;;;;-1:-1:-1;1725:9:10;1737:10;1741:6;1737:1;:10;:::i;:::-;:14;;1750:1;1737:14;:::i;:::-;1725:26;;1720:128;1757:1;1753;:5;1720:128;;;-1:-1:-1;;;1800:5:10;1808:3;1800:11;1791:21;;;;;;;:::i;:::-;;;;1779:6;1786:1;1779:9;;;;;;;;:::i;:::-;;;;:33;-1:-1:-1;;;;;1779:33:10;;;;;;;;-1:-1:-1;1836:1:10;1826:11;;;;;1760:3;;;:::i;:::-;;;1720:128;;;-1:-1:-1;1865:10:10;;1857:55;;;;-1:-1:-1;;;1857:55:10;;28968:2:17;1857:55:10;;;28950:21:17;;;28987:18;;;28980:30;29046:34;29026:18;;;29019:62;29098:18;;1857:55:10;28766:356:17;14:131;-1:-1:-1;;;;;89:31:17;;79:42;;69:70;;135:1;132;125:12;150:315;218:6;226;279:2;267:9;258:7;254:23;250:32;247:52;;;295:1;292;285:12;247:52;334:9;321:23;353:31;378:5;353:31;:::i;:::-;403:5;455:2;440:18;;;;427:32;;-1:-1:-1;;;150:315:17:o;652:131::-;-1:-1:-1;;;;;;726:32:17;;716:43;;706:71;;773:1;770;763:12;788:245;846:6;899:2;887:9;878:7;874:23;870:32;867:52;;;915:1;912;905:12;867:52;954:9;941:23;973:30;997:5;973:30;:::i;1230:367::-;1293:8;1303:6;1357:3;1350:4;1342:6;1338:17;1334:27;1324:55;;1375:1;1372;1365:12;1324:55;-1:-1:-1;1398:20:17;;-1:-1:-1;;;;;1430:30:17;;1427:50;;;1473:1;1470;1463:12;1427:50;1510:4;1502:6;1498:17;1486:29;;1570:3;1563:4;1553:6;1550:1;1546:14;1538:6;1534:27;1530:38;1527:47;1524:67;;;1587:1;1584;1577:12;1524:67;1230:367;;;;;:::o;1602:437::-;1688:6;1696;1749:2;1737:9;1728:7;1724:23;1720:32;1717:52;;;1765:1;1762;1755:12;1717:52;1805:9;1792:23;-1:-1:-1;;;;;1830:6:17;1827:30;1824:50;;;1870:1;1867;1860:12;1824:50;1909:70;1971:7;1962:6;1951:9;1947:22;1909:70;:::i;:::-;1998:8;;1883:96;;-1:-1:-1;1602:437:17;-1:-1:-1;;;;1602:437:17:o;2226:180::-;2285:6;2338:2;2326:9;2317:7;2313:23;2309:32;2306:52;;;2354:1;2351;2344:12;2306:52;-1:-1:-1;2377:23:17;;2226:180;-1:-1:-1;2226:180:17:o;2411:250::-;2496:1;2506:113;2520:6;2517:1;2514:13;2506:113;;;2596:11;;;2590:18;2577:11;;;2570:39;2542:2;2535:10;2506:113;;;-1:-1:-1;;2653:1:17;2635:16;;2628:27;2411:250::o;2666:271::-;2708:3;2746:5;2740:12;2773:6;2768:3;2761:19;2789:76;2858:6;2851:4;2846:3;2842:14;2835:4;2828:5;2824:16;2789:76;:::i;:::-;2919:2;2898:15;-1:-1:-1;;2894:29:17;2885:39;;;;2926:4;2881:50;;2666:271;-1:-1:-1;;2666:271:17:o;2942:220::-;3091:2;3080:9;3073:21;3054:4;3111:45;3152:2;3141:9;3137:18;3129:6;3111:45;:::i;3583:127::-;3644:10;3639:3;3635:20;3632:1;3625:31;3675:4;3672:1;3665:15;3699:4;3696:1;3689:15;3715:249;3825:2;3806:13;;-1:-1:-1;;3802:27:17;3790:40;;-1:-1:-1;;;;;3845:34:17;;3881:22;;;3842:62;3839:88;;;3907:18;;:::i;:::-;3943:2;3936:22;-1:-1:-1;;3715:249:17:o;3969:183::-;4029:4;-1:-1:-1;;;;;4054:6:17;4051:30;4048:56;;;4084:18;;:::i;:::-;-1:-1:-1;4129:1:17;4125:14;4141:4;4121:25;;3969:183::o;4157:724::-;4211:5;4264:3;4257:4;4249:6;4245:17;4241:27;4231:55;;4282:1;4279;4272:12;4231:55;4318:6;4305:20;4344:4;4367:43;4407:2;4367:43;:::i;:::-;4439:2;4433:9;4451:31;4479:2;4471:6;4451:31;:::i;:::-;4517:18;;;4609:1;4605:10;;;;4593:23;;4589:32;;;4551:15;;;;-1:-1:-1;4633:15:17;;;4630:35;;;4661:1;4658;4651:12;4630:35;4697:2;4689:6;4685:15;4709:142;4725:6;4720:3;4717:15;4709:142;;;4791:17;;4779:30;;4829:12;;;;4742;;4709:142;;;-1:-1:-1;4869:6:17;4157:724;-1:-1:-1;;;;;;4157:724:17:o;4886:555::-;4928:5;4981:3;4974:4;4966:6;4962:17;4958:27;4948:55;;4999:1;4996;4989:12;4948:55;5035:6;5022:20;-1:-1:-1;;;;;5057:2:17;5054:26;5051:52;;;5083:18;;:::i;:::-;5132:2;5126:9;5144:67;5199:2;5180:13;;-1:-1:-1;;5176:27:17;5205:4;5172:38;5126:9;5144:67;:::i;:::-;5235:2;5227:6;5220:18;5281:3;5274:4;5269:2;5261:6;5257:15;5253:26;5250:35;5247:55;;;5298:1;5295;5288:12;5247:55;5362:2;5355:4;5347:6;5343:17;5336:4;5328:6;5324:17;5311:54;5409:1;5385:15;;;5402:4;5381:26;5374:37;;;;5389:6;4886:555;-1:-1:-1;;;4886:555:17:o;5446:1071::-;5600:6;5608;5616;5624;5632;5685:3;5673:9;5664:7;5660:23;5656:33;5653:53;;;5702:1;5699;5692:12;5653:53;5741:9;5728:23;5760:31;5785:5;5760:31;:::i;:::-;5810:5;-1:-1:-1;5867:2:17;5852:18;;5839:32;5880:33;5839:32;5880:33;:::i;:::-;5932:7;-1:-1:-1;5990:2:17;5975:18;;5962:32;-1:-1:-1;;;;;6043:14:17;;;6040:34;;;6070:1;6067;6060:12;6040:34;6093:61;6146:7;6137:6;6126:9;6122:22;6093:61;:::i;:::-;6083:71;;6207:2;6196:9;6192:18;6179:32;6163:48;;6236:2;6226:8;6223:16;6220:36;;;6252:1;6249;6242:12;6220:36;6275:63;6330:7;6319:8;6308:9;6304:24;6275:63;:::i;:::-;6265:73;;6391:3;6380:9;6376:19;6363:33;6347:49;;6421:2;6411:8;6408:16;6405:36;;;6437:1;6434;6427:12;6405:36;;6460:51;6503:7;6492:8;6481:9;6477:24;6460:51;:::i;:::-;6450:61;;;5446:1071;;;;;;;;:::o;6522:315::-;6590:6;6598;6651:2;6639:9;6630:7;6626:23;6622:32;6619:52;;;6667:1;6664;6657:12;6619:52;6703:9;6690:23;6680:33;;6763:2;6752:9;6748:18;6735:32;6776:31;6801:5;6776:31;:::i;:::-;6826:5;6816:15;;;6522:315;;;;;:::o;6842:665::-;6921:6;6929;6937;6990:2;6978:9;6969:7;6965:23;6961:32;6958:52;;;7006:1;7003;6996:12;6958:52;7046:9;7033:23;-1:-1:-1;;;;;7116:2:17;7108:6;7105:14;7102:34;;;7132:1;7129;7122:12;7102:34;7170:6;7159:9;7155:22;7145:32;;7215:7;7208:4;7204:2;7200:13;7196:27;7186:55;;7237:1;7234;7227:12;7186:55;7277:2;7264:16;7303:2;7295:6;7292:14;7289:34;;;7319:1;7316;7309:12;7289:34;7366:7;7359:4;7350:6;7346:2;7342:15;7338:26;7335:39;7332:59;;;7387:1;7384;7377:12;7332:59;7418:4;7410:13;;;;7442:6;;-1:-1:-1;7480:20:17;;;;7467:34;;6842:665;-1:-1:-1;;;;6842:665:17:o;7512:1277::-;7630:6;7638;7691:2;7679:9;7670:7;7666:23;7662:32;7659:52;;;7707:1;7704;7697:12;7659:52;7747:9;7734:23;-1:-1:-1;;;;;7817:2:17;7809:6;7806:14;7803:34;;;7833:1;7830;7823:12;7803:34;7871:6;7860:9;7856:22;7846:32;;7916:7;7909:4;7905:2;7901:13;7897:27;7887:55;;7938:1;7935;7928:12;7887:55;7974:2;7961:16;7996:4;8019:43;8059:2;8019:43;:::i;:::-;8091:2;8085:9;8103:31;8131:2;8123:6;8103:31;:::i;:::-;8169:18;;;8257:1;8253:10;;;;8245:19;;8241:28;;;8203:15;;;;-1:-1:-1;8281:19:17;;;8278:39;;;8313:1;8310;8303:12;8278:39;8337:11;;;;8357:217;8373:6;8368:3;8365:15;8357:217;;;8453:3;8440:17;8470:31;8495:5;8470:31;:::i;:::-;8514:18;;8390:12;;;;8552;;;;8357:217;;;8593:6;-1:-1:-1;;8637:18:17;;8624:32;;-1:-1:-1;;8668:16:17;;;8665:36;;;8697:1;8694;8687:12;8665:36;;8720:63;8775:7;8764:8;8753:9;8749:24;8720:63;:::i;:::-;8710:73;;;7512:1277;;;;;:::o;8794:435::-;8847:3;8885:5;8879:12;8912:6;8907:3;8900:19;8938:4;8967:2;8962:3;8958:12;8951:19;;9004:2;8997:5;8993:14;9025:1;9035:169;9049:6;9046:1;9043:13;9035:169;;;9110:13;;9098:26;;9144:12;;;;9179:15;;;;9071:1;9064:9;9035:169;;;-1:-1:-1;9220:3:17;;8794:435;-1:-1:-1;;;;;8794:435:17:o;9234:261::-;9413:2;9402:9;9395:21;9376:4;9433:56;9485:2;9474:9;9470:18;9462:6;9433:56;:::i;9500:118::-;9586:5;9579:13;9572:21;9565:5;9562:32;9552:60;;9608:1;9605;9598:12;9623:382;9688:6;9696;9749:2;9737:9;9728:7;9724:23;9720:32;9717:52;;;9765:1;9762;9755:12;9717:52;9804:9;9791:23;9823:31;9848:5;9823:31;:::i;:::-;9873:5;-1:-1:-1;9930:2:17;9915:18;;9902:32;9943:30;9902:32;9943:30;:::i;10243:724::-;10356:6;10364;10372;10380;10433:2;10421:9;10412:7;10408:23;10404:32;10401:52;;;10449:1;10446;10439:12;10401:52;10485:9;10472:23;10462:33;;10546:2;10535:9;10531:18;10518:32;-1:-1:-1;;;;;10610:2:17;10602:6;10599:14;10596:34;;;10626:1;10623;10616:12;10596:34;10649:49;10690:7;10681:6;10670:9;10666:22;10649:49;:::i;:::-;10639:59;;10751:2;10740:9;10736:18;10723:32;10707:48;;10780:2;10770:8;10767:16;10764:36;;;10796:1;10793;10786:12;10764:36;;10835:72;10899:7;10888:8;10877:9;10873:24;10835:72;:::i;:::-;10243:724;;;;-1:-1:-1;10926:8:17;-1:-1:-1;;;;10243:724:17:o;11403:388::-;11471:6;11479;11532:2;11520:9;11511:7;11507:23;11503:32;11500:52;;;11548:1;11545;11538:12;11500:52;11587:9;11574:23;11606:31;11631:5;11606:31;:::i;:::-;11656:5;-1:-1:-1;11713:2:17;11698:18;;11685:32;11726:33;11685:32;11726:33;:::i;11796:247::-;11855:6;11908:2;11896:9;11887:7;11883:23;11879:32;11876:52;;;11924:1;11921;11914:12;11876:52;11963:9;11950:23;11982:31;12007:5;11982:31;:::i;12048:734::-;12152:6;12160;12168;12176;12184;12237:3;12225:9;12216:7;12212:23;12208:33;12205:53;;;12254:1;12251;12244:12;12205:53;12293:9;12280:23;12312:31;12337:5;12312:31;:::i;:::-;12362:5;-1:-1:-1;12419:2:17;12404:18;;12391:32;12432:33;12391:32;12432:33;:::i;:::-;12484:7;-1:-1:-1;12538:2:17;12523:18;;12510:32;;-1:-1:-1;12589:2:17;12574:18;;12561:32;;-1:-1:-1;12644:3:17;12629:19;;12616:33;-1:-1:-1;;;;;12661:30:17;;12658:50;;;12704:1;12701;12694:12;12658:50;12727:49;12768:7;12759:6;12748:9;12744:22;12727:49;:::i;13432:380::-;13511:1;13507:12;;;;13554;;;13575:61;;13629:4;13621:6;13617:17;13607:27;;13575:61;13682:2;13674:6;13671:14;13651:18;13648:38;13645:161;;13728:10;13723:3;13719:20;13716:1;13709:31;13763:4;13760:1;13753:15;13791:4;13788:1;13781:15;13645:161;;13432:380;;;:::o;13817:410::-;14019:2;14001:21;;;14058:2;14038:18;;;14031:30;14097:34;14092:2;14077:18;;14070:62;-1:-1:-1;;;14163:2:17;14148:18;;14141:44;14217:3;14202:19;;13817:410::o;14648:245::-;14715:6;14768:2;14756:9;14747:7;14743:23;14739:32;14736:52;;;14784:1;14781;14774:12;14736:52;14816:9;14810:16;14835:28;14857:5;14835:28;:::i;15303:127::-;15364:10;15359:3;15355:20;15352:1;15345:31;15395:4;15392:1;15385:15;15419:4;15416:1;15409:15;15435:125;15500:9;;;15521:10;;;15518:36;;;15534:18;;:::i;15565:331::-;15670:9;15681;15723:8;15711:10;15708:24;15705:44;;;15745:1;15742;15735:12;15705:44;15774:6;15764:8;15761:20;15758:40;;;15794:1;15791;15784:12;15758:40;-1:-1:-1;;15820:23:17;;;15865:25;;;;;-1:-1:-1;15565:331:17:o;15901:541::-;16003:6;16011;16019;16027;16080:3;16068:9;16059:7;16055:23;16051:33;16048:53;;;16097:1;16094;16087:12;16048:53;16136:9;16123:23;16155:31;16180:5;16155:31;:::i;:::-;16205:5;-1:-1:-1;16262:2:17;16247:18;;16234:32;16275:33;16234:32;16275:33;:::i;:::-;15901:541;;16327:7;;-1:-1:-1;;;;16381:2:17;16366:18;;16353:32;;16432:2;16417:18;16404:32;;15901:541::o;16850:168::-;16923:9;;;16954;;16971:15;;;16965:22;;16951:37;16941:71;;16992:18;;:::i;17023:217::-;17063:1;17089;17079:132;;17133:10;17128:3;17124:20;17121:1;17114:31;17168:4;17165:1;17158:15;17196:4;17193:1;17186:15;17079:132;-1:-1:-1;17225:9:17;;17023:217::o;17554:184::-;17624:6;17677:2;17665:9;17656:7;17652:23;17648:32;17645:52;;;17693:1;17690;17683:12;17645:52;-1:-1:-1;17716:16:17;;17554:184;-1:-1:-1;17554:184:17:o;18145:127::-;18206:10;18201:3;18197:20;18194:1;18187:31;18237:4;18234:1;18227:15;18261:4;18258:1;18251:15;18277:461;18330:3;18368:5;18362:12;18395:6;18390:3;18383:19;18421:4;18450:2;18445:3;18441:12;18434:19;;18487:2;18480:5;18476:14;18508:1;18518:195;18532:6;18529:1;18526:13;18518:195;;;18597:13;;-1:-1:-1;;;;;18593:39:17;18581:52;;18653:12;;;;18688:15;;;;18629:1;18547:9;18518:195;;18743:768;19106:3;19095:9;19088:22;19069:4;19133:57;19185:3;19174:9;19170:19;19162:6;19133:57;:::i;:::-;19238:9;19230:6;19226:22;19221:2;19210:9;19206:18;19199:50;19272:44;19309:6;19301;19272:44;:::i;:::-;-1:-1:-1;;;;;19352:32:17;;19347:2;19332:18;;19325:60;19421:22;;;19416:2;19401:18;;19394:50;19258:58;-1:-1:-1;19461:44:17;19258:58;19490:6;19461:44;:::i;:::-;19453:52;18743:768;-1:-1:-1;;;;;;;18743:768:17:o;19516:271::-;19699:6;19691;19686:3;19673:33;19655:3;19725:16;;19750:13;;;19725:16;19516:271;-1:-1:-1;19516:271:17:o;20455:135::-;20494:3;20515:17;;;20512:43;;20535:18;;:::i;:::-;-1:-1:-1;20582:1:17;20571:13;;20455:135::o;21764:401::-;21966:2;21948:21;;;22005:2;21985:18;;;21978:30;22044:34;22039:2;22024:18;;22017:62;-1:-1:-1;;;22110:2:17;22095:18;;22088:35;22155:3;22140:19;;21764:401::o;22170:406::-;22372:2;22354:21;;;22411:2;22391:18;;;22384:30;22450:34;22445:2;22430:18;;22423:62;-1:-1:-1;;;22516:2:17;22501:18;;22494:40;22566:3;22551:19;;22170:406::o;22581:465::-;22838:2;22827:9;22820:21;22801:4;22864:56;22916:2;22905:9;22901:18;22893:6;22864:56;:::i;:::-;22968:9;22960:6;22956:22;22951:2;22940:9;22936:18;22929:50;22996:44;23033:6;23025;22996:44;:::i;:::-;22988:52;22581:465;-1:-1:-1;;;;;22581:465:17:o;24466:827::-;-1:-1:-1;;;;;24863:15:17;;;24845:34;;24915:15;;24910:2;24895:18;;24888:43;24825:3;24962:2;24947:18;;24940:31;;;24788:4;;24994:57;;25031:19;;25023:6;24994:57;:::i;:::-;25099:9;25091:6;25087:22;25082:2;25071:9;25067:18;25060:50;25133:44;25170:6;25162;25133:44;:::i;:::-;25119:58;;25226:9;25218:6;25214:22;25208:3;25197:9;25193:19;25186:51;25254:33;25280:6;25272;25254:33;:::i;:::-;25246:41;24466:827;-1:-1:-1;;;;;;;;24466:827:17:o;25298:249::-;25367:6;25420:2;25408:9;25399:7;25395:23;25391:32;25388:52;;;25436:1;25433;25426:12;25388:52;25468:9;25462:16;25487:30;25511:5;25487:30;:::i;25552:179::-;25587:3;25629:1;25611:16;25608:23;25605:120;;;25675:1;25672;25669;25654:23;-1:-1:-1;25712:1:17;25706:8;25701:3;25697:18;25605:120;25552:179;:::o;25736:671::-;25775:3;25817:4;25799:16;25796:26;25793:39;;;25736:671;:::o;25793:39::-;25859:2;25853:9;-1:-1:-1;;25924:16:17;25920:25;;25917:1;25853:9;25896:50;25975:4;25969:11;25999:16;-1:-1:-1;;;;;26105:2:17;26098:4;26090:6;26086:17;26083:25;26078:2;26070:6;26067:14;26064:45;26061:58;;;26112:5;;;;;25736:671;:::o;26061:58::-;26149:6;26143:4;26139:17;26128:28;;26185:3;26179:10;26212:2;26204:6;26201:14;26198:27;;;26218:5;;;;;;25736:671;:::o;26198:27::-;26302:2;26283:16;26277:4;26273:27;26269:36;26262:4;26253:6;26248:3;26244:16;26240:27;26237:69;26234:82;;;26309:5;;;;;;25736:671;:::o;26234:82::-;26325:57;26376:4;26367:6;26359;26355:19;26351:30;26345:4;26325:57;:::i;:::-;-1:-1:-1;26398:3:17;;25736:671;-1:-1:-1;;;;;25736:671:17:o;26833:404::-;27035:2;27017:21;;;27074:2;27054:18;;;27047:30;27113:34;27108:2;27093:18;;27086:62;-1:-1:-1;;;27179:2:17;27164:18;;27157:38;27227:3;27212:19;;26833:404::o;27242:812::-;27653:25;27648:3;27641:38;27623:3;27708:6;27702:13;27724:75;27792:6;27787:2;27782:3;27778:12;27771:4;27763:6;27759:17;27724:75;:::i;:::-;-1:-1:-1;;;27858:2:17;27818:16;;;27850:11;;;27843:40;27908:13;;27930:76;27908:13;27992:2;27984:11;;27977:4;27965:17;;27930:76;:::i;:::-;28026:17;28045:2;28022:26;;27242:812;-1:-1:-1;;;;27242:812:17:o;28059:561::-;-1:-1:-1;;;;;28356:15:17;;;28338:34;;28408:15;;28403:2;28388:18;;28381:43;28455:2;28440:18;;28433:34;;;28498:2;28483:18;;28476:34;;;28318:3;28541;28526:19;;28519:32;;;28281:4;;28568:46;;28594:19;;28586:6;28568:46;:::i;28625:136::-;28664:3;28692:5;28682:39;;28701:18;;:::i;:::-;-1:-1:-1;;;28737:18:17;;28625:136::o"},"gasEstimates":{"creation":{"codeDepositCost":"2025200","executionCost":"infinite","totalCost":"infinite"},"external":{"DEFAULT_ADMIN_ROLE()":"273","EXECUTOR_ROLE()":"230","balanceOf(address,uint256)":"2717","balanceOfBatch(address[],uint256[])":"infinite","baseToken()":"2426","executorManager()":"2382","getRoleAdmin(bytes32)":"2545","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"2731","isApprovedForAll(address,address)":"infinite","isWhitelisted(bytes32[])":"infinite","lockingFlags(uint256)":"2495","merkleRoot()":"2374","platformFee()":"2330","platformTreasury()":"2381","pricePerToken()":"2352","processBundle(bytes,uint256)":"infinite","renounceRole(bytes32,address)":"29089","revokeRole(bytes32,address)":"infinite","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"infinite","safeTransferFrom(address,address,uint256,uint256,bytes)":"infinite","serviceFee()":"2329","setApprovalForAll(address,bool)":"infinite","setExecutorManager(address)":"infinite","setMerkleRoot(bytes32)":"infinite","supportsInterface(bytes4)":"infinite","tradingWallet()":"2427","uri(uint256)":"infinite","whitelistMint(uint256,bytes,bytes32[])":"infinite"},"internal":{"_beforeTokenTransfer(address,address,address,uint256[] memory,uint256[] memory,bytes memory)":"infinite"}},"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","EXECUTOR_ROLE()":"07bd0265","balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","baseToken()":"c55dae63","executorManager()":"c0883b92","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","isApprovedForAll(address,address)":"e985e9c5","isWhitelisted(bytes32[])":"069824fb","lockingFlags(uint256)":"2ecc6160","merkleRoot()":"2eb4a7ab","platformFee()":"26232a2e","platformTreasury()":"e138818c","pricePerToken()":"7b1b1de6","processBundle(bytes,uint256)":"3e352e62","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","serviceFee()":"8abdf5aa","setApprovalForAll(address,bool)":"a22cb465","setExecutorManager(address)":"ef0d4572","setMerkleRoot(bytes32)":"7cb64759","supportsInterface(bytes4)":"01ffc9a7","tradingWallet()":"207f1850","uri(uint256)":"0e89341c","whitelistMint(uint256,bytes,bytes32[])":"c3ae2b78"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"metadataUri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_executorManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_serviceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_platformFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_platformTreasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tradingWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bundleNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bundleHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BundleProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXECUTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executorManager\",\"outputs\":[{\"internalType\":\"contract IExecutorManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockingFlags\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"bundleData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"bundleNonce\",\"type\":\"uint256\"}],\"name\":\"processBundle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serviceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executorManager\",\"type\":\"address\"}],\"name\":\"setExecutorManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingWallet\",\"outputs\":[{\"internalType\":\"contract ITradingWallet\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"whitelistMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SAFTToken.sol\":\"SAFTToken\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xd917747dc87f189c6779b894f367a028f9dca4be930283cccec8f312966af820\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/SAFTToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ninterface IExecutorManager {\\n\\tfunction isExecutor(address _address) external view returns (bool);\\n}\\n\\ninterface IERC20 {\\n\\tfunction transferFrom(\\n\\t\\taddress sender,\\n\\t\\taddress recipient,\\n\\t\\tuint256 amount\\n\\t) external returns (bool);\\n}\\n\\ninterface ITradingWallet {\\n\\tfunction batchUpdateBalances(\\n\\t\\taddress[] memory fromAddresses,\\n\\t\\taddress[] memory toAddresses,\\n\\t\\taddress token,\\n\\t\\tuint256[] memory amounts\\n\\t) external;\\n\\n\\tfunction getERC20Balance(\\n\\t\\taddress user,\\n\\t\\taddress token\\n\\t) external view returns (uint256);\\n}\\n\\ncontract SAFTToken is ERC1155, AccessControl {\\n\\tbytes32 public merkleRoot;\\n\\tmapping(uint256 => bool) public lockingFlags; // Reentrancy guard for minting\\n\\tuint256 private tokenIdCounter;\\n\\tuint public pricePerToken;\\n\\tuint public serviceFee;\\n\\tuint public platformFee;\\n\\tbytes32 public constant EXECUTOR_ROLE = keccak256(\\\"EXECUTOR_ROLE\\\");\\n\\tIERC20 public baseToken;\\n\\tIExecutorManager public executorManager;\\n\\tITradingWallet public tradingWallet;\\n\\taddress public platformTreasury;\\n\\n\\tevent BundleProcessed(\\n\\t\\taddress indexed executor,\\n\\t\\tuint256 indexed bundleNonce,\\n\\t\\tbytes32 bundleHash,\\n\\t\\tuint256 timestamp\\n\\t);\\n\\n\\tconstructor(\\n\\t\\taddress _owner,\\n\\t\\tbytes32 _merkleRoot,\\n\\t\\tstring memory metadataUri,\\n\\t\\tuint totalSupply,\\n\\t\\tuint _pricePerToken,\\n\\t\\taddress _executorManager,\\n\\t\\tuint _serviceFee,\\n\\t\\tuint _platformFee,\\n\\t\\taddress _baseToken,\\n\\t\\taddress _platformTreasury,\\n\\t\\taddress _tradingWallet\\n\\t) ERC1155(metadataUri) {\\n\\t\\trequire(_owner != address(0), \\\"Owner address cannot be empty\\\");\\n\\t\\t_mint(msg.sender, tokenIdCounter++, totalSupply, \\\"\\\");\\n\\t\\t_setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\t\\tmerkleRoot = _merkleRoot;\\n\\t\\tserviceFee = _serviceFee;\\n\\t\\tplatformFee = _platformFee;\\n\\t\\tpricePerToken = _pricePerToken;\\n\\t\\tplatformTreasury = _platformTreasury;\\n\\t\\texecutorManager = IExecutorManager(_executorManager);\\n\\t\\tbaseToken = IERC20(_baseToken);\\n\\t\\ttradingWallet = ITradingWallet(_tradingWallet);\\n\\t}\\n\\n\\tfunction isApprovedForAll(\\n\\t\\taddress owner,\\n\\t\\taddress operator\\n\\t) public view override returns (bool) {\\n\\t\\tif (executorManager.isExecutor(operator)) {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n\\n\\tfunction _beforeTokenTransfer(\\n\\t\\taddress operator,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256[] memory ids,\\n\\t\\tuint256[] memory amounts,\\n\\t\\tbytes memory data\\n\\t) internal override {\\n\\t\\trequire(isApprovedForAll(from, operator), \\\"Transfer not approved\\\");\\n\\t\\tsuper._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\t}\\n\\n\\tfunction whitelistMint(\\n\\t\\tuint256 amount,\\n\\t\\tbytes memory data,\\n\\t\\tbytes32[] calldata merkleProof\\n\\t) public {\\n\\t\\tuint256 id = tokenIdCounter;\\n\\t\\trequire(!lockingFlags[id], \\\"Token is currently locked for minting\\\");\\n\\n\\t\\t// Validate merkle proof using a single call\\n\\t\\trequire(isWhitelisted(merkleProof), \\\"Caller is not whitelisted\\\");\\n\\n\\t\\tlockingFlags[id] = true; // Set locking flag to prevent duplicate mints\\n\\n\\t\\t// Minimize external function calls for gas efficiency\\n\\t\\t_mint(msg.sender, id, amount, data);\\n\\n\\t\\tlockingFlags[id] = false; // Unlock after successful minting\\n\\t\\ttokenIdCounter++;\\n\\t}\\n\\n\\tfunction isWhitelisted(\\n\\t\\tbytes32[] calldata merkleProof\\n\\t) public view returns (bool) {\\n\\t\\tbytes32 leaf = keccak256(abi.encodePacked(msg.sender));\\n\\t\\treturn MerkleProof.verify(merkleProof, merkleRoot, leaf);\\n\\t}\\n\\n\\tfunction setMerkleRoot(\\n\\t\\tbytes32 _merkleRoot\\n\\t) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\tmerkleRoot = _merkleRoot;\\n\\t}\\n\\n\\tfunction supportsInterface(\\n\\t\\tbytes4 interfaceId\\n\\t) public view virtual override(ERC1155, AccessControl) returns (bool) {\\n\\t\\treturn\\n\\t\\t\\tERC1155.supportsInterface(interfaceId) ||\\n\\t\\t\\tAccessControl.supportsInterface(interfaceId);\\n\\t}\\n\\n\\tfunction setExecutorManager(\\n\\t\\taddress _executorManager\\n\\t) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\texecutorManager = IExecutorManager(_executorManager);\\n\\t}\\n\\n\\tfunction processBundle(\\n\\t\\tbytes calldata bundleData,\\n\\t\\tuint256 bundleNonce\\n\\t) public {\\n\\t\\trequire(\\n\\t\\t\\texecutorManager.isExecutor(msg.sender),\\n\\t\\t\\t\\\"Caller is not an authorized executor\\\"\\n\\t\\t);\\n\\n\\t\\t// Decode and process each transaction in the bundle\\n\\t\\tfor (uint i = 0; i < bundleData.length; i += 104) {\\n\\t\\t\\t(\\n\\t\\t\\t\\taddress buyer,\\n\\t\\t\\t\\taddress seller,\\n\\t\\t\\t\\tuint256 tokenId,\\n\\t\\t\\t\\tuint256 amount // otc token amount bought\\n\\t\\t\\t) = abi.decode(\\n\\t\\t\\t\\t\\tbundleData[i:i + 104],\\n\\t\\t\\t\\t\\t(address, address, uint256, uint256)\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t// Ensure that the seller has enough tokens\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tbalanceOf(seller, tokenId) >= amount,\\n\\t\\t\\t\\t\\\"Seller does not have enough tokens\\\"\\n\\t\\t\\t);\\n\\n\\t\\t\\t// Calculate total payment by buyer in stablecoin excluding fees\\n\\t\\t\\tuint256 totalPayment = amount * pricePerToken;\\n\\n\\t\\t\\t// Calculate service fee and platform fee\\n\\t\\t\\tuint serviceFeeAmount = (totalPayment * serviceFee) / 100;\\n\\t\\t\\tuint platformFeeAmount = (totalPayment * platformFee) / 100;\\n\\n\\t\\t\\t// Calculate total cost to the buyer in stablecoin\\n\\t\\t\\tuint256 totalCost = totalPayment +\\n\\t\\t\\t\\tserviceFeeAmount +\\n\\t\\t\\t\\tplatformFeeAmount;\\n\\n\\t\\t\\t// Ensure buyer has enough tokens\\n\\t\\t\\trequire(\\n\\t\\t\\t\\ttradingWallet.getERC20Balance(buyer, address(baseToken)) >=\\n\\t\\t\\t\\t\\ttotalCost,\\n\\t\\t\\t\\t\\\"Buyer does not have enough tokens\\\"\\n\\t\\t\\t);\\n\\n\\t\\t\\t// Prepare the payment balance update data\\n\\t\\t\\taddress[] memory fromAddresses = new address[](2);\\n\\t\\t\\tfromAddresses[0] = buyer;\\n\\t\\t\\tfromAddresses[1] = buyer;\\n\\n\\t\\t\\taddress[] memory toAddresses = new address[](2);\\n\\t\\t\\ttoAddresses[0] = seller;\\n\\t\\t\\ttoAddresses[1] = platformTreasury;\\n\\n\\t\\t\\tuint[] memory amounts = new uint[](2);\\n\\t\\t\\tamounts[0] = serviceFeeAmount;\\n\\t\\t\\tamounts[1] = platformFeeAmount;\\n\\t\\t\\t// Perform the payment updates in batch\\n\\t\\t\\ttradingWallet.batchUpdateBalances(\\n\\t\\t\\t\\tfromAddresses,\\n\\t\\t\\t\\ttoAddresses,\\n\\t\\t\\t\\taddress(baseToken),\\n\\t\\t\\t\\tamounts\\n\\t\\t\\t);\\n\\n\\t\\t\\t// Perform the otc balance settlement\\n\\t\\t}\\n\\n\\t\\t// Compute the hash of the bundle data for logging\\n\\t\\tbytes32 bundleHash = keccak256(bundleData);\\n\\n\\t\\t// Emit the event with necessary details\\n\\t\\temit BundleProcessed(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tbundleNonce,\\n\\t\\t\\tbundleHash,\\n\\t\\t\\tblock.timestamp\\n\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0xc29c93cc4a78ca337b4119935b65f2f99aeb402795f109d39d304c0184a2eb25\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":468,"contract":"contracts/SAFTToken.sol:SAFTToken","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_uint256,t_mapping(t_address,t_uint256))"},{"astId":474,"contract":"contracts/SAFTToken.sol:SAFTToken","label":"_operatorApprovals","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":476,"contract":"contracts/SAFTToken.sol:SAFTToken","label":"_uri","offset":0,"slot":"2","type":"t_string_storage"},{"astId":24,"contract":"contracts/SAFTToken.sol:SAFTToken","label":"_roles","offset":0,"slot":"3","type":"t_mapping(t_bytes32,t_struct(RoleData)19_storage)"},{"astId":3906,"contract":"contracts/SAFTToken.sol:SAFTToken","label":"merkleRoot","offset":0,"slot":"4","type":"t_bytes32"},{"astId":3910,"contract":"contracts/SAFTToken.sol:SAFTToken","label":"lockingFlags","offset":0,"slot":"5","type":"t_mapping(t_uint256,t_bool)"},{"astId":3912,"contract":"contracts/SAFTToken.sol:SAFTToken","label":"tokenIdCounter","offset":0,"slot":"6","type":"t_uint256"},{"astId":3914,"contract":"contracts/SAFTToken.sol:SAFTToken","label":"pricePerToken","offset":0,"slot":"7","type":"t_uint256"},{"astId":3916,"contract":"contracts/SAFTToken.sol:SAFTToken","label":"serviceFee","offset":0,"slot":"8","type":"t_uint256"},{"astId":3918,"contract":"contracts/SAFTToken.sol:SAFTToken","label":"platformFee","offset":0,"slot":"9","type":"t_uint256"},{"astId":3926,"contract":"contracts/SAFTToken.sol:SAFTToken","label":"baseToken","offset":0,"slot":"10","type":"t_contract(IERC20)3876"},{"astId":3929,"contract":"contracts/SAFTToken.sol:SAFTToken","label":"executorManager","offset":0,"slot":"11","type":"t_contract(IExecutorManager)3864"},{"astId":3932,"contract":"contracts/SAFTToken.sol:SAFTToken","label":"tradingWallet","offset":0,"slot":"12","type":"t_contract(ITradingWallet)3900"},{"astId":3934,"contract":"contracts/SAFTToken.sol:SAFTToken","label":"platformTreasury","offset":0,"slot":"13","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_contract(IERC20)3876":{"encoding":"inplace","label":"contract IERC20","numberOfBytes":"20"},"t_contract(IExecutorManager)3864":{"encoding":"inplace","label":"contract IExecutorManager","numberOfBytes":"20"},"t_contract(ITradingWallet)3900":{"encoding":"inplace","label":"contract ITradingWallet","numberOfBytes":"20"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_bytes32,t_struct(RoleData)19_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControl.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)19_storage"},"t_mapping(t_uint256,t_bool)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint256,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(RoleData)19_storage":{"encoding":"inplace","label":"struct AccessControl.RoleData","members":[{"astId":16,"contract":"contracts/SAFTToken.sol:SAFTToken","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":18,"contract":"contracts/SAFTToken.sol:SAFTToken","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/TradingWallet.sol":{"IExecutorManager":{"abi":[{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"isExecutor","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isExecutor(address)":"debfda30"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isExecutor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TradingWallet.sol\":\"IExecutorManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/TradingWallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ninterface IExecutorManager {\\n\\tfunction isExecutor(address _address) external view returns (bool);\\n}\\n\\ncontract TradingWallet is ReentrancyGuard {\\n\\t// Mapping from user to token to balance\\n\\tmapping(address => mapping(address => uint256)) private _balances;\\n\\tIExecutorManager public executorManager;\\n\\n\\t// Event emitted when a deposit is made\\n\\tevent Deposit(address indexed user, address indexed token, uint256 amount);\\n\\t// Event emitted when a withdrawal is made\\n\\tevent Withdrawal(\\n\\t\\taddress indexed user,\\n\\t\\taddress indexed token,\\n\\t\\tuint256 amount\\n\\t);\\n\\t// Event emitted when a batch transfer is made\\n\\tevent UpdateBalance(\\n\\t\\taddress indexed from,\\n\\t\\taddress indexed to,\\n\\t\\taddress indexed token,\\n\\t\\tuint256 amount\\n\\t);\\n\\n\\tconstructor(address _executorManager) {\\n\\t\\texecutorManager = IExecutorManager(_executorManager);\\n\\t}\\n\\n\\t// Function to deposit ERC20 tokens\\n\\tfunction depositERC20(address token, uint256 amount) public nonReentrant {\\n\\t\\trequire(amount > 0, \\\"Deposit amount must be greater than 0\\\");\\n\\t\\trequire(\\n\\t\\t\\tIERC20(token).transferFrom(msg.sender, address(this), amount),\\n\\t\\t\\t\\\"Transfer failed\\\"\\n\\t\\t);\\n\\t\\t_balances[msg.sender][token] += amount;\\n\\t\\temit Deposit(msg.sender, token, amount);\\n\\t}\\n\\n\\t// Function to withdraw ERC20 tokens\\n\\tfunction withdrawERC20(address token, uint256 amount) public nonReentrant {\\n\\t\\trequire(_balances[msg.sender][token] >= amount, \\\"Insufficient balance\\\");\\n\\t\\t_balances[msg.sender][token] -= amount;\\n\\t\\trequire(IERC20(token).transfer(msg.sender, amount), \\\"Transfer failed\\\");\\n\\t\\temit Withdrawal(msg.sender, token, amount);\\n\\t}\\n\\n\\t// Function to deposit native cryptocurrency (e.g., ETH)\\n\\tfunction depositETH() public payable nonReentrant {\\n\\t\\trequire(msg.value > 0, \\\"Deposit amount must be greater than 0\\\");\\n\\t\\t_balances[msg.sender][address(0)] += msg.value;\\n\\t\\temit Deposit(msg.sender, address(0), msg.value);\\n\\t}\\n\\n\\t// Function to get ERC20 token balance\\n\\tfunction getERC20Balance(\\n\\t\\taddress user,\\n\\t\\taddress token\\n\\t) external view returns (uint256) {\\n\\t\\treturn _balances[user][token];\\n\\t}\\n\\n\\t// Function to batch update balances\\n\\tfunction batchUpdateBalances(\\n\\t\\taddress[] memory fromAddresses,\\n\\t\\taddress[] memory toAddresses,\\n\\t\\taddress token,\\n\\t\\tuint256[] memory amounts\\n\\t) external nonReentrant {\\n\\t\\trequire(\\n\\t\\t\\texecutorManager.isExecutor(msg.sender),\\n\\t\\t\\t\\\"Permission denied for non-executor\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tfromAddresses.length == toAddresses.length &&\\n\\t\\t\\t\\ttoAddresses.length == amounts.length,\\n\\t\\t\\t\\\"Arrays must have the same length\\\"\\n\\t\\t);\\n\\n\\t\\tfor (uint256 i = 0; i < fromAddresses.length; i++) {\\n\\t\\t\\taddress from = fromAddresses[i];\\n\\t\\t\\taddress to = toAddresses[i];\\n\\t\\t\\tuint256 amount = amounts[i];\\n\\n\\t\\t\\trequire(\\n\\t\\t\\t\\t_balances[from][token] >= amount,\\n\\t\\t\\t\\t\\\"Insufficient balance for transfer\\\"\\n\\t\\t\\t);\\n\\t\\t\\t_balances[from][token] -= amount;\\n\\t\\t\\t_balances[to][token] += amount;\\n\\n\\t\\t\\temit UpdateBalance(from, to, token, amount);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x2c174f8df557bfa325ae87cd678d6051e8612f11d0dc6117f914f4056cdf5776\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"TradingWallet":{"abi":[{"inputs":[{"internalType":"address","name":"_executorManager","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"UpdateBalance","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Withdrawal","type":"event"},{"inputs":[{"internalType":"address[]","name":"fromAddresses","type":"address[]"},{"internalType":"address[]","name":"toAddresses","type":"address[]"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"batchUpdateBalances","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"depositERC20","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"depositETH","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"executorManager","outputs":[{"internalType":"contract IExecutorManager","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"address","name":"token","type":"address"}],"name":"getERC20Balance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdrawERC20","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_407":{"entryPoint":null,"id":407,"parameterSlots":0,"returnSlots":0},"@_4495":{"entryPoint":null,"id":4495,"parameterSlots":1,"returnSlots":0},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":89,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:306:17","statements":[{"nodeType":"YulBlock","src":"6:3:17","statements":[]},{"body":{"nodeType":"YulBlock","src":"95:209:17","statements":[{"body":{"nodeType":"YulBlock","src":"141:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"150:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"153:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"143:6:17"},"nodeType":"YulFunctionCall","src":"143:12:17"},"nodeType":"YulExpressionStatement","src":"143:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"116:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"125:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"112:3:17"},"nodeType":"YulFunctionCall","src":"112:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"137:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"108:3:17"},"nodeType":"YulFunctionCall","src":"108:32:17"},"nodeType":"YulIf","src":"105:52:17"},{"nodeType":"YulVariableDeclaration","src":"166:29:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"185:9:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"179:5:17"},"nodeType":"YulFunctionCall","src":"179:16:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"170:5:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"258:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"267:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"270:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"260:6:17"},"nodeType":"YulFunctionCall","src":"260:12:17"},"nodeType":"YulExpressionStatement","src":"260:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"217:5:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"228:5:17"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"243:3:17","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"248:1:17","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"239:3:17"},"nodeType":"YulFunctionCall","src":"239:11:17"},{"kind":"number","nodeType":"YulLiteral","src":"252:1:17","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"235:3:17"},"nodeType":"YulFunctionCall","src":"235:19:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"224:3:17"},"nodeType":"YulFunctionCall","src":"224:31:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"214:2:17"},"nodeType":"YulFunctionCall","src":"214:42:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"207:6:17"},"nodeType":"YulFunctionCall","src":"207:50:17"},"nodeType":"YulIf","src":"204:70:17"},{"nodeType":"YulAssignment","src":"283:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"293:5:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"283:6:17"}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"61:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"72:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"84:6:17","type":""}],"src":"14:290:17"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n}","id":17,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"608060405234801561001057600080fd5b50604051610c44380380610c4483398101604081905261002f91610059565b6001600055600280546001600160a01b0319166001600160a01b0392909216919091179055610089565b60006020828403121561006b57600080fd5b81516001600160a01b038116811461008257600080fd5b9392505050565b610bac806100986000396000f3fe6080604052600436106100555760003560e01c8063384191041461005a57806397feb9261461007c578063a1db97821461009c578063c0883b92146100bc578063c3a8962c146100f9578063f6326fb314610127575b600080fd5b34801561006657600080fd5b5061007a610075366004610953565b61012f565b005b34801561008857600080fd5b5061007a610097366004610a40565b61043f565b3480156100a857600080fd5b5061007a6100b7366004610a40565b6105a3565b3480156100c857600080fd5b506002546100dc906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561010557600080fd5b50610119610114366004610a6a565b610739565b6040519081526020016100f0565b61007a610766565b610137610801565b600254604051630debfda360e41b81523360048201526001600160a01b039091169063debfda3090602401602060405180830381865afa15801561017f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101a39190610a9d565b6101ff5760405162461bcd60e51b815260206004820152602260248201527f5065726d697373696f6e2064656e69656420666f72206e6f6e2d65786563757460448201526137b960f11b60648201526084015b60405180910390fd5b82518451148015610211575080518351145b61025d5760405162461bcd60e51b815260206004820181905260248201527f417272617973206d7573742068617665207468652073616d65206c656e67746860448201526064016101f6565b60005b845181101561042e57600085828151811061027d5761027d610ac6565b60200260200101519050600085838151811061029b5761029b610ac6565b6020026020010151905060008484815181106102b9576102b9610ac6565b6020908102919091018101516001600160a01b038086166000908152600184526040808220928b16825291909352909120549091508111156103475760405162461bcd60e51b815260206004820152602160248201527f496e73756666696369656e742062616c616e636520666f72207472616e7366656044820152603960f91b60648201526084016101f6565b6001600160a01b038084166000908152600160209081526040808320938a168352929052908120805483929061037e908490610af2565b90915550506001600160a01b038083166000908152600160209081526040808320938a16835292905290812080548392906103ba908490610b05565b92505081905550856001600160a01b0316826001600160a01b0316846001600160a01b03167f574df9673a0ccb6b90a7b340bd6334f98323bd2b74c515ae8aa95243de848c488460405161041091815260200190565b60405180910390a4505050808061042690610b18565b915050610260565b506104396001600055565b50505050565b610447610801565b600081116104675760405162461bcd60e51b81526004016101f690610b31565b6040516323b872dd60e01b8152336004820152306024820152604481018290526001600160a01b038316906323b872dd906064016020604051808303816000875af11580156104ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104de9190610a9d565b61051c5760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b60448201526064016101f6565b3360009081526001602090815260408083206001600160a01b03861684529091528120805483929061054f908490610b05565b90915550506040518181526001600160a01b0383169033907f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62906020015b60405180910390a361059f6001600055565b5050565b6105ab610801565b3360009081526001602090815260408083206001600160a01b03861684529091529020548111156106155760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b60448201526064016101f6565b3360009081526001602090815260408083206001600160a01b038616845290915281208054839290610648908490610af2565b909155505060405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0383169063a9059cbb906044016020604051808303816000875af115801561069a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106be9190610a9d565b6106fc5760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b60448201526064016101f6565b6040518181526001600160a01b0383169033907f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b63989060200161058d565b6001600160a01b038083166000908152600160209081526040808320938516835292905220545b92915050565b61076e610801565b6000341161078e5760405162461bcd60e51b81526004016101f690610b31565b336000908152600160209081526040808320838052909152812080543492906107b8908490610b05565b909155505060405134815260009033907f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f629060200160405180910390a36107ff6001600055565b565b6002600054036108535760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016101f6565b6002600055565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156108995761089961085a565b604052919050565b600067ffffffffffffffff8211156108bb576108bb61085a565b5060051b60200190565b80356001600160a01b03811681146108dc57600080fd5b919050565b600082601f8301126108f257600080fd5b81356020610907610902836108a1565b610870565b82815260059290921b8401810191818101908684111561092657600080fd5b8286015b848110156109485761093b816108c5565b835291830191830161092a565b509695505050505050565b6000806000806080858703121561096957600080fd5b843567ffffffffffffffff8082111561098157600080fd5b61098d888389016108e1565b95506020915081870135818111156109a457600080fd5b6109b089828a016108e1565b9550506109bf604088016108c5565b93506060870135818111156109d357600080fd5b87019050601f810188136109e657600080fd5b80356109f4610902826108a1565b81815260059190911b8201830190838101908a831115610a1357600080fd5b928401925b82841015610a3157833582529284019290840190610a18565b979a9699509497505050505050565b60008060408385031215610a5357600080fd5b610a5c836108c5565b946020939093013593505050565b60008060408385031215610a7d57600080fd5b610a86836108c5565b9150610a94602084016108c5565b90509250929050565b600060208284031215610aaf57600080fd5b81518015158114610abf57600080fd5b9392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561076057610760610adc565b8082018082111561076057610760610adc565b600060018201610b2a57610b2a610adc565b5060010190565b60208082526025908201527f4465706f73697420616d6f756e74206d75737420626520677265617465722074604082015264068616e20360dc1b60608201526080019056fea264697066735822122047fd7a23e5d2253bec588b46b14e17c3132dd5c0cd3fa12af23432654792690164736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0xC44 CODESIZE SUB DUP1 PUSH2 0xC44 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x59 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x89 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xBAC DUP1 PUSH2 0x98 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x55 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x38419104 EQ PUSH2 0x5A JUMPI DUP1 PUSH4 0x97FEB926 EQ PUSH2 0x7C JUMPI DUP1 PUSH4 0xA1DB9782 EQ PUSH2 0x9C JUMPI DUP1 PUSH4 0xC0883B92 EQ PUSH2 0xBC JUMPI DUP1 PUSH4 0xC3A8962C EQ PUSH2 0xF9 JUMPI DUP1 PUSH4 0xF6326FB3 EQ PUSH2 0x127 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7A PUSH2 0x75 CALLDATASIZE PUSH1 0x4 PUSH2 0x953 JUMP JUMPDEST PUSH2 0x12F JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7A PUSH2 0x97 CALLDATASIZE PUSH1 0x4 PUSH2 0xA40 JUMP JUMPDEST PUSH2 0x43F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7A PUSH2 0xB7 CALLDATASIZE PUSH1 0x4 PUSH2 0xA40 JUMP JUMPDEST PUSH2 0x5A3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD PUSH2 0xDC SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x105 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x119 PUSH2 0x114 CALLDATASIZE PUSH1 0x4 PUSH2 0xA6A JUMP JUMPDEST PUSH2 0x739 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF0 JUMP JUMPDEST PUSH2 0x7A PUSH2 0x766 JUMP JUMPDEST PUSH2 0x137 PUSH2 0x801 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0xDEBFDA3 PUSH1 0xE4 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xDEBFDA30 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x17F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1A3 SWAP2 SWAP1 PUSH2 0xA9D JUMP JUMPDEST PUSH2 0x1FF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5065726D697373696F6E2064656E69656420666F72206E6F6E2D657865637574 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x37B9 PUSH1 0xF1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 MLOAD DUP5 MLOAD EQ DUP1 ISZERO PUSH2 0x211 JUMPI POP DUP1 MLOAD DUP4 MLOAD EQ JUMPDEST PUSH2 0x25D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x417272617973206D7573742068617665207468652073616D65206C656E677468 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1F6 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x42E JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x27D JUMPI PUSH2 0x27D PUSH2 0xAC6 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x29B JUMPI PUSH2 0x29B PUSH2 0xAC6 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2B9 JUMPI PUSH2 0x2B9 PUSH2 0xAC6 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP5 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP3 DUP12 AND DUP3 MSTORE SWAP2 SWAP1 SWAP4 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP2 GT ISZERO PUSH2 0x347 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E742062616C616E636520666F72207472616E736665 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP11 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x37E SWAP1 DUP5 SWAP1 PUSH2 0xAF2 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP11 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x3BA SWAP1 DUP5 SWAP1 PUSH2 0xB05 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x574DF9673A0CCB6B90A7B340BD6334F98323BD2B74C515AE8AA95243DE848C48 DUP5 PUSH1 0x40 MLOAD PUSH2 0x410 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP DUP1 DUP1 PUSH2 0x426 SWAP1 PUSH2 0xB18 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x260 JUMP JUMPDEST POP PUSH2 0x439 PUSH1 0x1 PUSH1 0x0 SSTORE JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x447 PUSH2 0x801 JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0x467 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F6 SWAP1 PUSH2 0xB31 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4BA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4DE SWAP2 SWAP1 PUSH2 0xA9D JUMP JUMPDEST PUSH2 0x51C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x151C985B9CD9995C8819985A5B1959 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1F6 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x54F SWAP1 DUP5 SWAP1 PUSH2 0xB05 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 CALLER SWAP1 PUSH32 0x5548C837AB068CF56A2C2479DF0882A4922FD203EDB7517321831D95078C5F62 SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x59F PUSH1 0x1 PUSH1 0x0 SSTORE JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x5AB PUSH2 0x801 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP2 GT ISZERO PUSH2 0x615 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x496E73756666696369656E742062616C616E6365 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1F6 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x648 SWAP1 DUP5 SWAP1 PUSH2 0xAF2 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x69A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6BE SWAP2 SWAP1 PUSH2 0xA9D JUMP JUMPDEST PUSH2 0x6FC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x151C985B9CD9995C8819985A5B1959 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1F6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 CALLER SWAP1 PUSH32 0x2717EAD6B9200DD235AAD468C9809EA400FE33AC69B5BFAA6D3E90FC922B6398 SWAP1 PUSH1 0x20 ADD PUSH2 0x58D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP6 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x76E PUSH2 0x801 JUMP JUMPDEST PUSH1 0x0 CALLVALUE GT PUSH2 0x78E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F6 SWAP1 PUSH2 0xB31 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP4 DUP1 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD CALLVALUE SWAP3 SWAP1 PUSH2 0x7B8 SWAP1 DUP5 SWAP1 PUSH2 0xB05 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD CALLVALUE DUP2 MSTORE PUSH1 0x0 SWAP1 CALLER SWAP1 PUSH32 0x5548C837AB068CF56A2C2479DF0882A4922FD203EDB7517321831D95078C5F62 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x7FF PUSH1 0x1 PUSH1 0x0 SSTORE JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD SUB PUSH2 0x853 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1F6 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x899 JUMPI PUSH2 0x899 PUSH2 0x85A JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x8BB JUMPI PUSH2 0x8BB PUSH2 0x85A JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x8DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x907 PUSH2 0x902 DUP4 PUSH2 0x8A1 JUMP JUMPDEST PUSH2 0x870 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x926 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x948 JUMPI PUSH2 0x93B DUP2 PUSH2 0x8C5 JUMP JUMPDEST DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x92A JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x969 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x981 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x98D DUP9 DUP4 DUP10 ADD PUSH2 0x8E1 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 SWAP2 POP DUP2 DUP8 ADD CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x9A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9B0 DUP10 DUP3 DUP11 ADD PUSH2 0x8E1 JUMP JUMPDEST SWAP6 POP POP PUSH2 0x9BF PUSH1 0x40 DUP9 ADD PUSH2 0x8C5 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x9D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 ADD SWAP1 POP PUSH1 0x1F DUP2 ADD DUP9 SGT PUSH2 0x9E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x9F4 PUSH2 0x902 DUP3 PUSH2 0x8A1 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP3 ADD DUP4 ADD SWAP1 DUP4 DUP2 ADD SWAP1 DUP11 DUP4 GT ISZERO PUSH2 0xA13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 DUP5 ADD SWAP3 JUMPDEST DUP3 DUP5 LT ISZERO PUSH2 0xA31 JUMPI DUP4 CALLDATALOAD DUP3 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH2 0xA18 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA53 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA5C DUP4 PUSH2 0x8C5 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA86 DUP4 PUSH2 0x8C5 JUMP JUMPDEST SWAP2 POP PUSH2 0xA94 PUSH1 0x20 DUP5 ADD PUSH2 0x8C5 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xABF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x760 JUMPI PUSH2 0x760 PUSH2 0xADC JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x760 JUMPI PUSH2 0x760 PUSH2 0xADC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0xB2A JUMPI PUSH2 0xB2A PUSH2 0xADC JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x4465706F73697420616D6F756E74206D75737420626520677265617465722074 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x68616E203 PUSH1 0xDC SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFBALANCE REVERT PUSH27 0x23E5D2253BEC588B46B14E17C3132DD5C0CD3FA12AF23432654792 PUSH10 0x164736F6C6343000813 STOP CALLER ","sourceMap":"279:2725:16:-:0;;;891:98;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1716:1:2;1821:7;:22;933:15:16;:52;;-1:-1:-1;;;;;;933:52:16;-1:-1:-1;;;;;933:52:16;;;;;;;;;;279:2725;;14:290:17;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:17;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:17:o;:::-;279:2725:16;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_nonReentrantAfter_441":{"entryPoint":null,"id":441,"parameterSlots":0,"returnSlots":0},"@_nonReentrantBefore_433":{"entryPoint":2049,"id":433,"parameterSlots":0,"returnSlots":0},"@batchUpdateBalances_4754":{"entryPoint":303,"id":4754,"parameterSlots":4,"returnSlots":0},"@depositERC20_4544":{"entryPoint":1087,"id":4544,"parameterSlots":2,"returnSlots":0},"@depositETH_4632":{"entryPoint":1894,"id":4632,"parameterSlots":0,"returnSlots":0},"@executorManager_4457":{"entryPoint":null,"id":4457,"parameterSlots":0,"returnSlots":0},"@getERC20Balance_4648":{"entryPoint":1849,"id":4648,"parameterSlots":2,"returnSlots":1},"@withdrawERC20_4594":{"entryPoint":1443,"id":4594,"parameterSlots":2,"returnSlots":0},"abi_decode_address":{"entryPoint":2245,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_address_dyn":{"entryPoint":2273,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":2666,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":2624,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_address_$dyn_memory_ptrt_addresst_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":2387,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":2717,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_contract$_IExecutorManager_$4446__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_13a95f22afc3675625865cebfeaad090cf74d28c398c97ca0506a9b656468077__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1cf5370f25734823c5feac6853b836d05520862485f150310f24689e28c1f9e6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":2865,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_23c363817f9879f3888017ece213d7d3388c222537fa7decb7e0d1ac65953f19__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_67b053d9c7b868e69c4855c461316e09c6febeb899c9666d9ec16f8fca1d60a8__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":2160,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_array_address_dyn":{"entryPoint":2209,"id":null,"parameterSlots":1,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":2821,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":2802,"id":null,"parameterSlots":2,"returnSlots":1},"increment_t_uint256":{"entryPoint":2840,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":2780,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":2758,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":2138,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:8286:17","statements":[{"nodeType":"YulBlock","src":"6:3:17","statements":[]},{"body":{"nodeType":"YulBlock","src":"46:95:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"63:1:17","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"70:3:17","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"75:10:17","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"66:3:17"},"nodeType":"YulFunctionCall","src":"66:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56:6:17"},"nodeType":"YulFunctionCall","src":"56:31:17"},"nodeType":"YulExpressionStatement","src":"56:31:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:1:17","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"106:4:17","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"96:6:17"},"nodeType":"YulFunctionCall","src":"96:15:17"},"nodeType":"YulExpressionStatement","src":"96:15:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"127:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"130:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"120:6:17"},"nodeType":"YulFunctionCall","src":"120:15:17"},"nodeType":"YulExpressionStatement","src":"120:15:17"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"14:127:17"},{"body":{"nodeType":"YulBlock","src":"191:230:17","statements":[{"nodeType":"YulAssignment","src":"201:19:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"217:2:17","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"211:5:17"},"nodeType":"YulFunctionCall","src":"211:9:17"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"201:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"229:58:17","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"251:6:17"},{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"267:4:17"},{"kind":"number","nodeType":"YulLiteral","src":"273:2:17","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"263:3:17"},"nodeType":"YulFunctionCall","src":"263:13:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"282:2:17","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"278:3:17"},"nodeType":"YulFunctionCall","src":"278:7:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"259:3:17"},"nodeType":"YulFunctionCall","src":"259:27:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"247:3:17"},"nodeType":"YulFunctionCall","src":"247:40:17"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"233:10:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"362:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"364:16:17"},"nodeType":"YulFunctionCall","src":"364:18:17"},"nodeType":"YulExpressionStatement","src":"364:18:17"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"305:10:17"},{"kind":"number","nodeType":"YulLiteral","src":"317:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"302:2:17"},"nodeType":"YulFunctionCall","src":"302:34:17"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"341:10:17"},{"name":"memPtr","nodeType":"YulIdentifier","src":"353:6:17"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"338:2:17"},"nodeType":"YulFunctionCall","src":"338:22:17"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"299:2:17"},"nodeType":"YulFunctionCall","src":"299:62:17"},"nodeType":"YulIf","src":"296:88:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"400:2:17","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"404:10:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"393:6:17"},"nodeType":"YulFunctionCall","src":"393:22:17"},"nodeType":"YulExpressionStatement","src":"393:22:17"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"171:4:17","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"180:6:17","type":""}],"src":"146:275:17"},{"body":{"nodeType":"YulBlock","src":"495:114:17","statements":[{"body":{"nodeType":"YulBlock","src":"539:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"541:16:17"},"nodeType":"YulFunctionCall","src":"541:18:17"},"nodeType":"YulExpressionStatement","src":"541:18:17"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"511:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"519:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"508:2:17"},"nodeType":"YulFunctionCall","src":"508:30:17"},"nodeType":"YulIf","src":"505:56:17"},{"nodeType":"YulAssignment","src":"570:33:17","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"586:1:17","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"589:6:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"582:3:17"},"nodeType":"YulFunctionCall","src":"582:14:17"},{"kind":"number","nodeType":"YulLiteral","src":"598:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"578:3:17"},"nodeType":"YulFunctionCall","src":"578:25:17"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"570:4:17"}]}]},"name":"array_allocation_size_array_address_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"475:6:17","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"486:4:17","type":""}],"src":"426:183:17"},{"body":{"nodeType":"YulBlock","src":"663:124:17","statements":[{"nodeType":"YulAssignment","src":"673:29:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"695:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"682:12:17"},"nodeType":"YulFunctionCall","src":"682:20:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"673:5:17"}]},{"body":{"nodeType":"YulBlock","src":"765:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"774:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"777:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"767:6:17"},"nodeType":"YulFunctionCall","src":"767:12:17"},"nodeType":"YulExpressionStatement","src":"767:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"724:5:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"735:5:17"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"750:3:17","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"755:1:17","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"746:3:17"},"nodeType":"YulFunctionCall","src":"746:11:17"},{"kind":"number","nodeType":"YulLiteral","src":"759:1:17","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"742:3:17"},"nodeType":"YulFunctionCall","src":"742:19:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"731:3:17"},"nodeType":"YulFunctionCall","src":"731:31:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"721:2:17"},"nodeType":"YulFunctionCall","src":"721:42:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"714:6:17"},"nodeType":"YulFunctionCall","src":"714:50:17"},"nodeType":"YulIf","src":"711:70:17"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"642:6:17","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"653:5:17","type":""}],"src":"614:173:17"},{"body":{"nodeType":"YulBlock","src":"856:604:17","statements":[{"body":{"nodeType":"YulBlock","src":"905:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"914:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"917:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"907:6:17"},"nodeType":"YulFunctionCall","src":"907:12:17"},"nodeType":"YulExpressionStatement","src":"907:12:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"884:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"892:4:17","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"880:3:17"},"nodeType":"YulFunctionCall","src":"880:17:17"},{"name":"end","nodeType":"YulIdentifier","src":"899:3:17"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"876:3:17"},"nodeType":"YulFunctionCall","src":"876:27:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"869:6:17"},"nodeType":"YulFunctionCall","src":"869:35:17"},"nodeType":"YulIf","src":"866:55:17"},{"nodeType":"YulVariableDeclaration","src":"930:30:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"953:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"940:12:17"},"nodeType":"YulFunctionCall","src":"940:20:17"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"934:2:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"969:14:17","value":{"kind":"number","nodeType":"YulLiteral","src":"979:4:17","type":"","value":"0x20"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"973:2:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"992:71:17","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"1059:2:17"}],"functionName":{"name":"array_allocation_size_array_address_dyn","nodeType":"YulIdentifier","src":"1019:39:17"},"nodeType":"YulFunctionCall","src":"1019:43:17"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"1003:15:17"},"nodeType":"YulFunctionCall","src":"1003:60:17"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"996:3:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1072:16:17","value":{"name":"dst","nodeType":"YulIdentifier","src":"1085:3:17"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"1076:5:17","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1104:3:17"},{"name":"_1","nodeType":"YulIdentifier","src":"1109:2:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1097:6:17"},"nodeType":"YulFunctionCall","src":"1097:15:17"},"nodeType":"YulExpressionStatement","src":"1097:15:17"},{"nodeType":"YulAssignment","src":"1121:19:17","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1132:3:17"},{"name":"_2","nodeType":"YulIdentifier","src":"1137:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1128:3:17"},"nodeType":"YulFunctionCall","src":"1128:12:17"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"1121:3:17"}]},{"nodeType":"YulVariableDeclaration","src":"1149:46:17","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1171:6:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1183:1:17","type":"","value":"5"},{"name":"_1","nodeType":"YulIdentifier","src":"1186:2:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1179:3:17"},"nodeType":"YulFunctionCall","src":"1179:10:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1167:3:17"},"nodeType":"YulFunctionCall","src":"1167:23:17"},{"name":"_2","nodeType":"YulIdentifier","src":"1192:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1163:3:17"},"nodeType":"YulFunctionCall","src":"1163:32:17"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"1153:6:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"1223:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1232:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1235:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1225:6:17"},"nodeType":"YulFunctionCall","src":"1225:12:17"},"nodeType":"YulExpressionStatement","src":"1225:12:17"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"1210:6:17"},{"name":"end","nodeType":"YulIdentifier","src":"1218:3:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1207:2:17"},"nodeType":"YulFunctionCall","src":"1207:15:17"},"nodeType":"YulIf","src":"1204:35:17"},{"nodeType":"YulVariableDeclaration","src":"1248:26:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1263:6:17"},{"name":"_2","nodeType":"YulIdentifier","src":"1271:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1259:3:17"},"nodeType":"YulFunctionCall","src":"1259:15:17"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"1252:3:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"1339:92:17","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1360:3:17"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1384:3:17"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1365:18:17"},"nodeType":"YulFunctionCall","src":"1365:23:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1353:6:17"},"nodeType":"YulFunctionCall","src":"1353:36:17"},"nodeType":"YulExpressionStatement","src":"1353:36:17"},{"nodeType":"YulAssignment","src":"1402:19:17","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1413:3:17"},{"name":"_2","nodeType":"YulIdentifier","src":"1418:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1409:3:17"},"nodeType":"YulFunctionCall","src":"1409:12:17"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"1402:3:17"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1294:3:17"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"1299:6:17"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1291:2:17"},"nodeType":"YulFunctionCall","src":"1291:15:17"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1307:23:17","statements":[{"nodeType":"YulAssignment","src":"1309:19:17","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1320:3:17"},{"name":"_2","nodeType":"YulIdentifier","src":"1325:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1316:3:17"},"nodeType":"YulFunctionCall","src":"1316:12:17"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"1309:3:17"}]}]},"pre":{"nodeType":"YulBlock","src":"1287:3:17","statements":[]},"src":"1283:148:17"},{"nodeType":"YulAssignment","src":"1440:14:17","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"1449:5:17"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1440:5:17"}]}]},"name":"abi_decode_array_address_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"830:6:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"838:3:17","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"846:5:17","type":""}],"src":"792:668:17"},{"body":{"nodeType":"YulBlock","src":"1661:1243:17","statements":[{"body":{"nodeType":"YulBlock","src":"1708:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1717:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1720:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1710:6:17"},"nodeType":"YulFunctionCall","src":"1710:12:17"},"nodeType":"YulExpressionStatement","src":"1710:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1682:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"1691:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1678:3:17"},"nodeType":"YulFunctionCall","src":"1678:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"1703:3:17","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1674:3:17"},"nodeType":"YulFunctionCall","src":"1674:33:17"},"nodeType":"YulIf","src":"1671:53:17"},{"nodeType":"YulVariableDeclaration","src":"1733:37:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1760:9:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1747:12:17"},"nodeType":"YulFunctionCall","src":"1747:23:17"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1737:6:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1779:28:17","value":{"kind":"number","nodeType":"YulLiteral","src":"1789:18:17","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1783:2:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"1834:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1843:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1846:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1836:6:17"},"nodeType":"YulFunctionCall","src":"1836:12:17"},"nodeType":"YulExpressionStatement","src":"1836:12:17"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1822:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"1830:2:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1819:2:17"},"nodeType":"YulFunctionCall","src":"1819:14:17"},"nodeType":"YulIf","src":"1816:34:17"},{"nodeType":"YulAssignment","src":"1859:71:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1902:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"1913:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1898:3:17"},"nodeType":"YulFunctionCall","src":"1898:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1922:7:17"}],"functionName":{"name":"abi_decode_array_address_dyn","nodeType":"YulIdentifier","src":"1869:28:17"},"nodeType":"YulFunctionCall","src":"1869:61:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1859:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"1939:12:17","value":{"kind":"number","nodeType":"YulLiteral","src":"1949:2:17","type":"","value":"32"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"1943:2:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1960:48:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1993:9:17"},{"name":"_2","nodeType":"YulIdentifier","src":"2004:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1989:3:17"},"nodeType":"YulFunctionCall","src":"1989:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1976:12:17"},"nodeType":"YulFunctionCall","src":"1976:32:17"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"1964:8:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"2037:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2046:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2049:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2039:6:17"},"nodeType":"YulFunctionCall","src":"2039:12:17"},"nodeType":"YulExpressionStatement","src":"2039:12:17"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"2023:8:17"},{"name":"_1","nodeType":"YulIdentifier","src":"2033:2:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2020:2:17"},"nodeType":"YulFunctionCall","src":"2020:16:17"},"nodeType":"YulIf","src":"2017:36:17"},{"nodeType":"YulAssignment","src":"2062:73:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2105:9:17"},{"name":"offset_1","nodeType":"YulIdentifier","src":"2116:8:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2101:3:17"},"nodeType":"YulFunctionCall","src":"2101:24:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2127:7:17"}],"functionName":{"name":"abi_decode_array_address_dyn","nodeType":"YulIdentifier","src":"2072:28:17"},"nodeType":"YulFunctionCall","src":"2072:63:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2062:6:17"}]},{"nodeType":"YulAssignment","src":"2144:48:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2177:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"2188:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2173:3:17"},"nodeType":"YulFunctionCall","src":"2173:18:17"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2154:18:17"},"nodeType":"YulFunctionCall","src":"2154:38:17"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2144:6:17"}]},{"nodeType":"YulVariableDeclaration","src":"2201:48:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2234:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"2245:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2230:3:17"},"nodeType":"YulFunctionCall","src":"2230:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2217:12:17"},"nodeType":"YulFunctionCall","src":"2217:32:17"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"2205:8:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"2278:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2287:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2290:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2280:6:17"},"nodeType":"YulFunctionCall","src":"2280:12:17"},"nodeType":"YulExpressionStatement","src":"2280:12:17"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"2264:8:17"},{"name":"_1","nodeType":"YulIdentifier","src":"2274:2:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2261:2:17"},"nodeType":"YulFunctionCall","src":"2261:16:17"},"nodeType":"YulIf","src":"2258:36:17"},{"nodeType":"YulVariableDeclaration","src":"2303:34:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2317:9:17"},{"name":"offset_2","nodeType":"YulIdentifier","src":"2328:8:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2313:3:17"},"nodeType":"YulFunctionCall","src":"2313:24:17"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"2307:2:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"2385:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2394:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2397:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2387:6:17"},"nodeType":"YulFunctionCall","src":"2387:12:17"},"nodeType":"YulExpressionStatement","src":"2387:12:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"2364:2:17"},{"kind":"number","nodeType":"YulLiteral","src":"2368:4:17","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2360:3:17"},"nodeType":"YulFunctionCall","src":"2360:13:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2375:7:17"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2356:3:17"},"nodeType":"YulFunctionCall","src":"2356:27:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2349:6:17"},"nodeType":"YulFunctionCall","src":"2349:35:17"},"nodeType":"YulIf","src":"2346:55:17"},{"nodeType":"YulVariableDeclaration","src":"2410:26:17","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"2433:2:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2420:12:17"},"nodeType":"YulFunctionCall","src":"2420:16:17"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"2414:2:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2445:71:17","value":{"arguments":[{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"2512:2:17"}],"functionName":{"name":"array_allocation_size_array_address_dyn","nodeType":"YulIdentifier","src":"2472:39:17"},"nodeType":"YulFunctionCall","src":"2472:43:17"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"2456:15:17"},"nodeType":"YulFunctionCall","src":"2456:60:17"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"2449:3:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2525:16:17","value":{"name":"dst","nodeType":"YulIdentifier","src":"2538:3:17"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"2529:5:17","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2557:3:17"},{"name":"_4","nodeType":"YulIdentifier","src":"2562:2:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2550:6:17"},"nodeType":"YulFunctionCall","src":"2550:15:17"},"nodeType":"YulExpressionStatement","src":"2550:15:17"},{"nodeType":"YulAssignment","src":"2574:19:17","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2585:3:17"},{"name":"_2","nodeType":"YulIdentifier","src":"2590:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2581:3:17"},"nodeType":"YulFunctionCall","src":"2581:12:17"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"2574:3:17"}]},{"nodeType":"YulVariableDeclaration","src":"2602:42:17","value":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"2624:2:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2632:1:17","type":"","value":"5"},{"name":"_4","nodeType":"YulIdentifier","src":"2635:2:17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2628:3:17"},"nodeType":"YulFunctionCall","src":"2628:10:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2620:3:17"},"nodeType":"YulFunctionCall","src":"2620:19:17"},{"name":"_2","nodeType":"YulIdentifier","src":"2641:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2616:3:17"},"nodeType":"YulFunctionCall","src":"2616:28:17"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"2606:6:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"2676:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2685:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2688:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2678:6:17"},"nodeType":"YulFunctionCall","src":"2678:12:17"},"nodeType":"YulExpressionStatement","src":"2678:12:17"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"2659:6:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2667:7:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2656:2:17"},"nodeType":"YulFunctionCall","src":"2656:19:17"},"nodeType":"YulIf","src":"2653:39:17"},{"nodeType":"YulVariableDeclaration","src":"2701:22:17","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"2716:2:17"},{"name":"_2","nodeType":"YulIdentifier","src":"2720:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2712:3:17"},"nodeType":"YulFunctionCall","src":"2712:11:17"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"2705:3:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"2788:86:17","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2809:3:17"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2827:3:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2814:12:17"},"nodeType":"YulFunctionCall","src":"2814:17:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2802:6:17"},"nodeType":"YulFunctionCall","src":"2802:30:17"},"nodeType":"YulExpressionStatement","src":"2802:30:17"},{"nodeType":"YulAssignment","src":"2845:19:17","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2856:3:17"},{"name":"_2","nodeType":"YulIdentifier","src":"2861:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2852:3:17"},"nodeType":"YulFunctionCall","src":"2852:12:17"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"2845:3:17"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2743:3:17"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"2748:6:17"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2740:2:17"},"nodeType":"YulFunctionCall","src":"2740:15:17"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2756:23:17","statements":[{"nodeType":"YulAssignment","src":"2758:19:17","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2769:3:17"},{"name":"_2","nodeType":"YulIdentifier","src":"2774:2:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2765:3:17"},"nodeType":"YulFunctionCall","src":"2765:12:17"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"2758:3:17"}]}]},"pre":{"nodeType":"YulBlock","src":"2736:3:17","statements":[]},"src":"2732:142:17"},{"nodeType":"YulAssignment","src":"2883:15:17","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"2893:5:17"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"2883:6:17"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_address_$dyn_memory_ptrt_addresst_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1603:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1614:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1626:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1634:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1642:6:17","type":""},{"name":"value3","nodeType":"YulTypedName","src":"1650:6:17","type":""}],"src":"1465:1439:17"},{"body":{"nodeType":"YulBlock","src":"2996:167:17","statements":[{"body":{"nodeType":"YulBlock","src":"3042:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3051:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3054:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3044:6:17"},"nodeType":"YulFunctionCall","src":"3044:12:17"},"nodeType":"YulExpressionStatement","src":"3044:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3017:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"3026:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3013:3:17"},"nodeType":"YulFunctionCall","src":"3013:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"3038:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3009:3:17"},"nodeType":"YulFunctionCall","src":"3009:32:17"},"nodeType":"YulIf","src":"3006:52:17"},{"nodeType":"YulAssignment","src":"3067:39:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3096:9:17"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3077:18:17"},"nodeType":"YulFunctionCall","src":"3077:29:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3067:6:17"}]},{"nodeType":"YulAssignment","src":"3115:42:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3142:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"3153:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3138:3:17"},"nodeType":"YulFunctionCall","src":"3138:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3125:12:17"},"nodeType":"YulFunctionCall","src":"3125:32:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3115:6:17"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2954:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2965:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2977:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2985:6:17","type":""}],"src":"2909:254:17"},{"body":{"nodeType":"YulBlock","src":"3294:102:17","statements":[{"nodeType":"YulAssignment","src":"3304:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3316:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"3327:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3312:3:17"},"nodeType":"YulFunctionCall","src":"3312:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3304:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3346:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3361:6:17"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3377:3:17","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"3382:1:17","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3373:3:17"},"nodeType":"YulFunctionCall","src":"3373:11:17"},{"kind":"number","nodeType":"YulLiteral","src":"3386:1:17","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3369:3:17"},"nodeType":"YulFunctionCall","src":"3369:19:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3357:3:17"},"nodeType":"YulFunctionCall","src":"3357:32:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3339:6:17"},"nodeType":"YulFunctionCall","src":"3339:51:17"},"nodeType":"YulExpressionStatement","src":"3339:51:17"}]},"name":"abi_encode_tuple_t_contract$_IExecutorManager_$4446__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3263:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3274:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3285:4:17","type":""}],"src":"3168:228:17"},{"body":{"nodeType":"YulBlock","src":"3488:173:17","statements":[{"body":{"nodeType":"YulBlock","src":"3534:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3543:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3546:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3536:6:17"},"nodeType":"YulFunctionCall","src":"3536:12:17"},"nodeType":"YulExpressionStatement","src":"3536:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3509:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"3518:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3505:3:17"},"nodeType":"YulFunctionCall","src":"3505:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"3530:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3501:3:17"},"nodeType":"YulFunctionCall","src":"3501:32:17"},"nodeType":"YulIf","src":"3498:52:17"},{"nodeType":"YulAssignment","src":"3559:39:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3588:9:17"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3569:18:17"},"nodeType":"YulFunctionCall","src":"3569:29:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3559:6:17"}]},{"nodeType":"YulAssignment","src":"3607:48:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3640:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"3651:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3636:3:17"},"nodeType":"YulFunctionCall","src":"3636:18:17"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3617:18:17"},"nodeType":"YulFunctionCall","src":"3617:38:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3607:6:17"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3446:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3457:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3469:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3477:6:17","type":""}],"src":"3401:260:17"},{"body":{"nodeType":"YulBlock","src":"3767:76:17","statements":[{"nodeType":"YulAssignment","src":"3777:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3789:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"3800:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3785:3:17"},"nodeType":"YulFunctionCall","src":"3785:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3777:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3819:9:17"},{"name":"value0","nodeType":"YulIdentifier","src":"3830:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3812:6:17"},"nodeType":"YulFunctionCall","src":"3812:25:17"},"nodeType":"YulExpressionStatement","src":"3812:25:17"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3736:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3747:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3758:4:17","type":""}],"src":"3666:177:17"},{"body":{"nodeType":"YulBlock","src":"3949:102:17","statements":[{"nodeType":"YulAssignment","src":"3959:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3971:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"3982:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3967:3:17"},"nodeType":"YulFunctionCall","src":"3967:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3959:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4001:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4016:6:17"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4032:3:17","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"4037:1:17","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4028:3:17"},"nodeType":"YulFunctionCall","src":"4028:11:17"},{"kind":"number","nodeType":"YulLiteral","src":"4041:1:17","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4024:3:17"},"nodeType":"YulFunctionCall","src":"4024:19:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4012:3:17"},"nodeType":"YulFunctionCall","src":"4012:32:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3994:6:17"},"nodeType":"YulFunctionCall","src":"3994:51:17"},"nodeType":"YulExpressionStatement","src":"3994:51:17"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3918:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3929:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3940:4:17","type":""}],"src":"3848:203:17"},{"body":{"nodeType":"YulBlock","src":"4134:199:17","statements":[{"body":{"nodeType":"YulBlock","src":"4180:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4189:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4192:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4182:6:17"},"nodeType":"YulFunctionCall","src":"4182:12:17"},"nodeType":"YulExpressionStatement","src":"4182:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4155:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"4164:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4151:3:17"},"nodeType":"YulFunctionCall","src":"4151:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"4176:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4147:3:17"},"nodeType":"YulFunctionCall","src":"4147:32:17"},"nodeType":"YulIf","src":"4144:52:17"},{"nodeType":"YulVariableDeclaration","src":"4205:29:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4224:9:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4218:5:17"},"nodeType":"YulFunctionCall","src":"4218:16:17"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4209:5:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"4287:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4296:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4299:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4289:6:17"},"nodeType":"YulFunctionCall","src":"4289:12:17"},"nodeType":"YulExpressionStatement","src":"4289:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4256:5:17"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4277:5:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4270:6:17"},"nodeType":"YulFunctionCall","src":"4270:13:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4263:6:17"},"nodeType":"YulFunctionCall","src":"4263:21:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4253:2:17"},"nodeType":"YulFunctionCall","src":"4253:32:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4246:6:17"},"nodeType":"YulFunctionCall","src":"4246:40:17"},"nodeType":"YulIf","src":"4243:60:17"},{"nodeType":"YulAssignment","src":"4312:15:17","value":{"name":"value","nodeType":"YulIdentifier","src":"4322:5:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4312:6:17"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4100:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4111:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4123:6:17","type":""}],"src":"4056:277:17"},{"body":{"nodeType":"YulBlock","src":"4512:224:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4529:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"4540:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4522:6:17"},"nodeType":"YulFunctionCall","src":"4522:21:17"},"nodeType":"YulExpressionStatement","src":"4522:21:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4563:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"4574:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4559:3:17"},"nodeType":"YulFunctionCall","src":"4559:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"4579:2:17","type":"","value":"34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4552:6:17"},"nodeType":"YulFunctionCall","src":"4552:30:17"},"nodeType":"YulExpressionStatement","src":"4552:30:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4602:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"4613:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4598:3:17"},"nodeType":"YulFunctionCall","src":"4598:18:17"},{"hexValue":"5065726d697373696f6e2064656e69656420666f72206e6f6e2d657865637574","kind":"string","nodeType":"YulLiteral","src":"4618:34:17","type":"","value":"Permission denied for non-execut"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4591:6:17"},"nodeType":"YulFunctionCall","src":"4591:62:17"},"nodeType":"YulExpressionStatement","src":"4591:62:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4673:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"4684:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4669:3:17"},"nodeType":"YulFunctionCall","src":"4669:18:17"},{"hexValue":"6f72","kind":"string","nodeType":"YulLiteral","src":"4689:4:17","type":"","value":"or"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4662:6:17"},"nodeType":"YulFunctionCall","src":"4662:32:17"},"nodeType":"YulExpressionStatement","src":"4662:32:17"},{"nodeType":"YulAssignment","src":"4703:27:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4715:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"4726:3:17","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4711:3:17"},"nodeType":"YulFunctionCall","src":"4711:19:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4703:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_13a95f22afc3675625865cebfeaad090cf74d28c398c97ca0506a9b656468077__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4489:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4503:4:17","type":""}],"src":"4338:398:17"},{"body":{"nodeType":"YulBlock","src":"4915:182:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4932:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"4943:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4925:6:17"},"nodeType":"YulFunctionCall","src":"4925:21:17"},"nodeType":"YulExpressionStatement","src":"4925:21:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4966:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"4977:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4962:3:17"},"nodeType":"YulFunctionCall","src":"4962:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"4982:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4955:6:17"},"nodeType":"YulFunctionCall","src":"4955:30:17"},"nodeType":"YulExpressionStatement","src":"4955:30:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5005:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"5016:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5001:3:17"},"nodeType":"YulFunctionCall","src":"5001:18:17"},{"hexValue":"417272617973206d7573742068617665207468652073616d65206c656e677468","kind":"string","nodeType":"YulLiteral","src":"5021:34:17","type":"","value":"Arrays must have the same length"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4994:6:17"},"nodeType":"YulFunctionCall","src":"4994:62:17"},"nodeType":"YulExpressionStatement","src":"4994:62:17"},{"nodeType":"YulAssignment","src":"5065:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5077:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"5088:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5073:3:17"},"nodeType":"YulFunctionCall","src":"5073:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5065:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_23c363817f9879f3888017ece213d7d3388c222537fa7decb7e0d1ac65953f19__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4892:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4906:4:17","type":""}],"src":"4741:356:17"},{"body":{"nodeType":"YulBlock","src":"5134:95:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5151:1:17","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5158:3:17","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"5163:10:17","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5154:3:17"},"nodeType":"YulFunctionCall","src":"5154:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5144:6:17"},"nodeType":"YulFunctionCall","src":"5144:31:17"},"nodeType":"YulExpressionStatement","src":"5144:31:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5191:1:17","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5194:4:17","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5184:6:17"},"nodeType":"YulFunctionCall","src":"5184:15:17"},"nodeType":"YulExpressionStatement","src":"5184:15:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5215:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5218:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5208:6:17"},"nodeType":"YulFunctionCall","src":"5208:15:17"},"nodeType":"YulExpressionStatement","src":"5208:15:17"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"5102:127:17"},{"body":{"nodeType":"YulBlock","src":"5408:223:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5425:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"5436:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5418:6:17"},"nodeType":"YulFunctionCall","src":"5418:21:17"},"nodeType":"YulExpressionStatement","src":"5418:21:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5459:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"5470:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5455:3:17"},"nodeType":"YulFunctionCall","src":"5455:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"5475:2:17","type":"","value":"33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5448:6:17"},"nodeType":"YulFunctionCall","src":"5448:30:17"},"nodeType":"YulExpressionStatement","src":"5448:30:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5498:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"5509:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5494:3:17"},"nodeType":"YulFunctionCall","src":"5494:18:17"},{"hexValue":"496e73756666696369656e742062616c616e636520666f72207472616e736665","kind":"string","nodeType":"YulLiteral","src":"5514:34:17","type":"","value":"Insufficient balance for transfe"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5487:6:17"},"nodeType":"YulFunctionCall","src":"5487:62:17"},"nodeType":"YulExpressionStatement","src":"5487:62:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5569:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"5580:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5565:3:17"},"nodeType":"YulFunctionCall","src":"5565:18:17"},{"hexValue":"72","kind":"string","nodeType":"YulLiteral","src":"5585:3:17","type":"","value":"r"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5558:6:17"},"nodeType":"YulFunctionCall","src":"5558:31:17"},"nodeType":"YulExpressionStatement","src":"5558:31:17"},{"nodeType":"YulAssignment","src":"5598:27:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5610:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"5621:3:17","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5606:3:17"},"nodeType":"YulFunctionCall","src":"5606:19:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5598:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_67b053d9c7b868e69c4855c461316e09c6febeb899c9666d9ec16f8fca1d60a8__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5385:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5399:4:17","type":""}],"src":"5234:397:17"},{"body":{"nodeType":"YulBlock","src":"5668:95:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5685:1:17","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5692:3:17","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"5697:10:17","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5688:3:17"},"nodeType":"YulFunctionCall","src":"5688:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5678:6:17"},"nodeType":"YulFunctionCall","src":"5678:31:17"},"nodeType":"YulExpressionStatement","src":"5678:31:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5725:1:17","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5728:4:17","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5718:6:17"},"nodeType":"YulFunctionCall","src":"5718:15:17"},"nodeType":"YulExpressionStatement","src":"5718:15:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5749:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5752:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5742:6:17"},"nodeType":"YulFunctionCall","src":"5742:15:17"},"nodeType":"YulExpressionStatement","src":"5742:15:17"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"5636:127:17"},{"body":{"nodeType":"YulBlock","src":"5817:79:17","statements":[{"nodeType":"YulAssignment","src":"5827:17:17","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5839:1:17"},{"name":"y","nodeType":"YulIdentifier","src":"5842:1:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5835:3:17"},"nodeType":"YulFunctionCall","src":"5835:9:17"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"5827:4:17"}]},{"body":{"nodeType":"YulBlock","src":"5868:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"5870:16:17"},"nodeType":"YulFunctionCall","src":"5870:18:17"},"nodeType":"YulExpressionStatement","src":"5870:18:17"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"5859:4:17"},{"name":"x","nodeType":"YulIdentifier","src":"5865:1:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5856:2:17"},"nodeType":"YulFunctionCall","src":"5856:11:17"},"nodeType":"YulIf","src":"5853:37:17"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"5799:1:17","type":""},{"name":"y","nodeType":"YulTypedName","src":"5802:1:17","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"5808:4:17","type":""}],"src":"5768:128:17"},{"body":{"nodeType":"YulBlock","src":"5949:77:17","statements":[{"nodeType":"YulAssignment","src":"5959:16:17","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5970:1:17"},{"name":"y","nodeType":"YulIdentifier","src":"5973:1:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5966:3:17"},"nodeType":"YulFunctionCall","src":"5966:9:17"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"5959:3:17"}]},{"body":{"nodeType":"YulBlock","src":"5998:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"6000:16:17"},"nodeType":"YulFunctionCall","src":"6000:18:17"},"nodeType":"YulExpressionStatement","src":"6000:18:17"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5990:1:17"},{"name":"sum","nodeType":"YulIdentifier","src":"5993:3:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5987:2:17"},"nodeType":"YulFunctionCall","src":"5987:10:17"},"nodeType":"YulIf","src":"5984:36:17"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"5932:1:17","type":""},{"name":"y","nodeType":"YulTypedName","src":"5935:1:17","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"5941:3:17","type":""}],"src":"5901:125:17"},{"body":{"nodeType":"YulBlock","src":"6078:88:17","statements":[{"body":{"nodeType":"YulBlock","src":"6109:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"6111:16:17"},"nodeType":"YulFunctionCall","src":"6111:18:17"},"nodeType":"YulExpressionStatement","src":"6111:18:17"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6094:5:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6105:1:17","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"6101:3:17"},"nodeType":"YulFunctionCall","src":"6101:6:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6091:2:17"},"nodeType":"YulFunctionCall","src":"6091:17:17"},"nodeType":"YulIf","src":"6088:43:17"},{"nodeType":"YulAssignment","src":"6140:20:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6151:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"6158:1:17","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6147:3:17"},"nodeType":"YulFunctionCall","src":"6147:13:17"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"6140:3:17"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6060:5:17","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"6070:3:17","type":""}],"src":"6031:135:17"},{"body":{"nodeType":"YulBlock","src":"6345:227:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6362:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"6373:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6355:6:17"},"nodeType":"YulFunctionCall","src":"6355:21:17"},"nodeType":"YulExpressionStatement","src":"6355:21:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6396:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"6407:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6392:3:17"},"nodeType":"YulFunctionCall","src":"6392:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"6412:2:17","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6385:6:17"},"nodeType":"YulFunctionCall","src":"6385:30:17"},"nodeType":"YulExpressionStatement","src":"6385:30:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6435:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"6446:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6431:3:17"},"nodeType":"YulFunctionCall","src":"6431:18:17"},{"hexValue":"4465706f73697420616d6f756e74206d75737420626520677265617465722074","kind":"string","nodeType":"YulLiteral","src":"6451:34:17","type":"","value":"Deposit amount must be greater t"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6424:6:17"},"nodeType":"YulFunctionCall","src":"6424:62:17"},"nodeType":"YulExpressionStatement","src":"6424:62:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6506:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"6517:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6502:3:17"},"nodeType":"YulFunctionCall","src":"6502:18:17"},{"hexValue":"68616e2030","kind":"string","nodeType":"YulLiteral","src":"6522:7:17","type":"","value":"han 0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6495:6:17"},"nodeType":"YulFunctionCall","src":"6495:35:17"},"nodeType":"YulExpressionStatement","src":"6495:35:17"},{"nodeType":"YulAssignment","src":"6539:27:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6551:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"6562:3:17","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6547:3:17"},"nodeType":"YulFunctionCall","src":"6547:19:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6539:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_1cf5370f25734823c5feac6853b836d05520862485f150310f24689e28c1f9e6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6322:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6336:4:17","type":""}],"src":"6171:401:17"},{"body":{"nodeType":"YulBlock","src":"6734:218:17","statements":[{"nodeType":"YulAssignment","src":"6744:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6756:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"6767:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6752:3:17"},"nodeType":"YulFunctionCall","src":"6752:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6744:4:17"}]},{"nodeType":"YulVariableDeclaration","src":"6779:29:17","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6797:3:17","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"6802:1:17","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6793:3:17"},"nodeType":"YulFunctionCall","src":"6793:11:17"},{"kind":"number","nodeType":"YulLiteral","src":"6806:1:17","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6789:3:17"},"nodeType":"YulFunctionCall","src":"6789:19:17"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"6783:2:17","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6824:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6839:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"6847:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6835:3:17"},"nodeType":"YulFunctionCall","src":"6835:15:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6817:6:17"},"nodeType":"YulFunctionCall","src":"6817:34:17"},"nodeType":"YulExpressionStatement","src":"6817:34:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6871:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"6882:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6867:3:17"},"nodeType":"YulFunctionCall","src":"6867:18:17"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"6891:6:17"},{"name":"_1","nodeType":"YulIdentifier","src":"6899:2:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6887:3:17"},"nodeType":"YulFunctionCall","src":"6887:15:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6860:6:17"},"nodeType":"YulFunctionCall","src":"6860:43:17"},"nodeType":"YulExpressionStatement","src":"6860:43:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6923:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"6934:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6919:3:17"},"nodeType":"YulFunctionCall","src":"6919:18:17"},{"name":"value2","nodeType":"YulIdentifier","src":"6939:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6912:6:17"},"nodeType":"YulFunctionCall","src":"6912:34:17"},"nodeType":"YulExpressionStatement","src":"6912:34:17"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6687:9:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"6698:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6706:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6714:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6725:4:17","type":""}],"src":"6577:375:17"},{"body":{"nodeType":"YulBlock","src":"7131:165:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7148:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"7159:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7141:6:17"},"nodeType":"YulFunctionCall","src":"7141:21:17"},"nodeType":"YulExpressionStatement","src":"7141:21:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7182:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"7193:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7178:3:17"},"nodeType":"YulFunctionCall","src":"7178:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"7198:2:17","type":"","value":"15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7171:6:17"},"nodeType":"YulFunctionCall","src":"7171:30:17"},"nodeType":"YulExpressionStatement","src":"7171:30:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7221:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"7232:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7217:3:17"},"nodeType":"YulFunctionCall","src":"7217:18:17"},{"hexValue":"5472616e73666572206661696c6564","kind":"string","nodeType":"YulLiteral","src":"7237:17:17","type":"","value":"Transfer failed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7210:6:17"},"nodeType":"YulFunctionCall","src":"7210:45:17"},"nodeType":"YulExpressionStatement","src":"7210:45:17"},{"nodeType":"YulAssignment","src":"7264:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7276:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"7287:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7272:3:17"},"nodeType":"YulFunctionCall","src":"7272:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7264:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7108:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7122:4:17","type":""}],"src":"6957:339:17"},{"body":{"nodeType":"YulBlock","src":"7475:170:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7492:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"7503:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7485:6:17"},"nodeType":"YulFunctionCall","src":"7485:21:17"},"nodeType":"YulExpressionStatement","src":"7485:21:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7526:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"7537:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7522:3:17"},"nodeType":"YulFunctionCall","src":"7522:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"7542:2:17","type":"","value":"20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7515:6:17"},"nodeType":"YulFunctionCall","src":"7515:30:17"},"nodeType":"YulExpressionStatement","src":"7515:30:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7565:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"7576:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7561:3:17"},"nodeType":"YulFunctionCall","src":"7561:18:17"},{"hexValue":"496e73756666696369656e742062616c616e6365","kind":"string","nodeType":"YulLiteral","src":"7581:22:17","type":"","value":"Insufficient balance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7554:6:17"},"nodeType":"YulFunctionCall","src":"7554:50:17"},"nodeType":"YulExpressionStatement","src":"7554:50:17"},{"nodeType":"YulAssignment","src":"7613:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7625:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"7636:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7621:3:17"},"nodeType":"YulFunctionCall","src":"7621:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7613:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7452:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7466:4:17","type":""}],"src":"7301:344:17"},{"body":{"nodeType":"YulBlock","src":"7779:145:17","statements":[{"nodeType":"YulAssignment","src":"7789:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7801:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"7812:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7797:3:17"},"nodeType":"YulFunctionCall","src":"7797:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7789:4:17"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7831:9:17"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7846:6:17"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7862:3:17","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"7867:1:17","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7858:3:17"},"nodeType":"YulFunctionCall","src":"7858:11:17"},{"kind":"number","nodeType":"YulLiteral","src":"7871:1:17","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7854:3:17"},"nodeType":"YulFunctionCall","src":"7854:19:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7842:3:17"},"nodeType":"YulFunctionCall","src":"7842:32:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7824:6:17"},"nodeType":"YulFunctionCall","src":"7824:51:17"},"nodeType":"YulExpressionStatement","src":"7824:51:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7895:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"7906:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7891:3:17"},"nodeType":"YulFunctionCall","src":"7891:18:17"},{"name":"value1","nodeType":"YulIdentifier","src":"7911:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7884:6:17"},"nodeType":"YulFunctionCall","src":"7884:34:17"},"nodeType":"YulExpressionStatement","src":"7884:34:17"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7740:9:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7751:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7759:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7770:4:17","type":""}],"src":"7650:274:17"},{"body":{"nodeType":"YulBlock","src":"8103:181:17","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8120:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"8131:2:17","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8113:6:17"},"nodeType":"YulFunctionCall","src":"8113:21:17"},"nodeType":"YulExpressionStatement","src":"8113:21:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8154:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"8165:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8150:3:17"},"nodeType":"YulFunctionCall","src":"8150:18:17"},{"kind":"number","nodeType":"YulLiteral","src":"8170:2:17","type":"","value":"31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8143:6:17"},"nodeType":"YulFunctionCall","src":"8143:30:17"},"nodeType":"YulExpressionStatement","src":"8143:30:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8193:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"8204:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8189:3:17"},"nodeType":"YulFunctionCall","src":"8189:18:17"},{"hexValue":"5265656e7472616e637947756172643a207265656e7472616e742063616c6c","kind":"string","nodeType":"YulLiteral","src":"8209:33:17","type":"","value":"ReentrancyGuard: reentrant call"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8182:6:17"},"nodeType":"YulFunctionCall","src":"8182:61:17"},"nodeType":"YulExpressionStatement","src":"8182:61:17"},{"nodeType":"YulAssignment","src":"8252:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8264:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"8275:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8260:3:17"},"nodeType":"YulFunctionCall","src":"8260:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8252:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8080:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8094:4:17","type":""}],"src":"7929:355:17"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_array_address_dyn(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(shl(5, length), 0x20)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_array_address_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_address_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, abi_decode_address(src))\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_address_$dyn_memory_ptrt_addresst_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_array_address_dyn(add(headStart, offset), dataEnd)\n        let _2 := 32\n        let offset_1 := calldataload(add(headStart, _2))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_array_address_dyn(add(headStart, offset_1), dataEnd)\n        value2 := abi_decode_address(add(headStart, 64))\n        let offset_2 := calldataload(add(headStart, 96))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let _3 := add(headStart, offset_2)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(0, 0) }\n        let _4 := calldataload(_3)\n        let dst := allocate_memory(array_allocation_size_array_address_dyn(_4))\n        let dst_1 := dst\n        mstore(dst, _4)\n        dst := add(dst, _2)\n        let srcEnd := add(add(_3, shl(5, _4)), _2)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_3, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _2)\n        }\n        value3 := dst_1\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_contract$_IExecutorManager_$4446__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_13a95f22afc3675625865cebfeaad090cf74d28c398c97ca0506a9b656468077__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"Permission denied for non-execut\")\n        mstore(add(headStart, 96), \"or\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_23c363817f9879f3888017ece213d7d3388c222537fa7decb7e0d1ac65953f19__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Arrays must have the same length\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_67b053d9c7b868e69c4855c461316e09c6febeb899c9666d9ec16f8fca1d60a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"Insufficient balance for transfe\")\n        mstore(add(headStart, 96), \"r\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_1cf5370f25734823c5feac6853b836d05520862485f150310f24689e28c1f9e6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"Deposit amount must be greater t\")\n        mstore(add(headStart, 96), \"han 0\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 15)\n        mstore(add(headStart, 64), \"Transfer failed\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"Insufficient balance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ReentrancyGuard: reentrant call\")\n        tail := add(headStart, 96)\n    }\n}","id":17,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"6080604052600436106100555760003560e01c8063384191041461005a57806397feb9261461007c578063a1db97821461009c578063c0883b92146100bc578063c3a8962c146100f9578063f6326fb314610127575b600080fd5b34801561006657600080fd5b5061007a610075366004610953565b61012f565b005b34801561008857600080fd5b5061007a610097366004610a40565b61043f565b3480156100a857600080fd5b5061007a6100b7366004610a40565b6105a3565b3480156100c857600080fd5b506002546100dc906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561010557600080fd5b50610119610114366004610a6a565b610739565b6040519081526020016100f0565b61007a610766565b610137610801565b600254604051630debfda360e41b81523360048201526001600160a01b039091169063debfda3090602401602060405180830381865afa15801561017f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101a39190610a9d565b6101ff5760405162461bcd60e51b815260206004820152602260248201527f5065726d697373696f6e2064656e69656420666f72206e6f6e2d65786563757460448201526137b960f11b60648201526084015b60405180910390fd5b82518451148015610211575080518351145b61025d5760405162461bcd60e51b815260206004820181905260248201527f417272617973206d7573742068617665207468652073616d65206c656e67746860448201526064016101f6565b60005b845181101561042e57600085828151811061027d5761027d610ac6565b60200260200101519050600085838151811061029b5761029b610ac6565b6020026020010151905060008484815181106102b9576102b9610ac6565b6020908102919091018101516001600160a01b038086166000908152600184526040808220928b16825291909352909120549091508111156103475760405162461bcd60e51b815260206004820152602160248201527f496e73756666696369656e742062616c616e636520666f72207472616e7366656044820152603960f91b60648201526084016101f6565b6001600160a01b038084166000908152600160209081526040808320938a168352929052908120805483929061037e908490610af2565b90915550506001600160a01b038083166000908152600160209081526040808320938a16835292905290812080548392906103ba908490610b05565b92505081905550856001600160a01b0316826001600160a01b0316846001600160a01b03167f574df9673a0ccb6b90a7b340bd6334f98323bd2b74c515ae8aa95243de848c488460405161041091815260200190565b60405180910390a4505050808061042690610b18565b915050610260565b506104396001600055565b50505050565b610447610801565b600081116104675760405162461bcd60e51b81526004016101f690610b31565b6040516323b872dd60e01b8152336004820152306024820152604481018290526001600160a01b038316906323b872dd906064016020604051808303816000875af11580156104ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104de9190610a9d565b61051c5760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b60448201526064016101f6565b3360009081526001602090815260408083206001600160a01b03861684529091528120805483929061054f908490610b05565b90915550506040518181526001600160a01b0383169033907f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62906020015b60405180910390a361059f6001600055565b5050565b6105ab610801565b3360009081526001602090815260408083206001600160a01b03861684529091529020548111156106155760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b60448201526064016101f6565b3360009081526001602090815260408083206001600160a01b038616845290915281208054839290610648908490610af2565b909155505060405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0383169063a9059cbb906044016020604051808303816000875af115801561069a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106be9190610a9d565b6106fc5760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b60448201526064016101f6565b6040518181526001600160a01b0383169033907f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b63989060200161058d565b6001600160a01b038083166000908152600160209081526040808320938516835292905220545b92915050565b61076e610801565b6000341161078e5760405162461bcd60e51b81526004016101f690610b31565b336000908152600160209081526040808320838052909152812080543492906107b8908490610b05565b909155505060405134815260009033907f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f629060200160405180910390a36107ff6001600055565b565b6002600054036108535760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016101f6565b6002600055565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156108995761089961085a565b604052919050565b600067ffffffffffffffff8211156108bb576108bb61085a565b5060051b60200190565b80356001600160a01b03811681146108dc57600080fd5b919050565b600082601f8301126108f257600080fd5b81356020610907610902836108a1565b610870565b82815260059290921b8401810191818101908684111561092657600080fd5b8286015b848110156109485761093b816108c5565b835291830191830161092a565b509695505050505050565b6000806000806080858703121561096957600080fd5b843567ffffffffffffffff8082111561098157600080fd5b61098d888389016108e1565b95506020915081870135818111156109a457600080fd5b6109b089828a016108e1565b9550506109bf604088016108c5565b93506060870135818111156109d357600080fd5b87019050601f810188136109e657600080fd5b80356109f4610902826108a1565b81815260059190911b8201830190838101908a831115610a1357600080fd5b928401925b82841015610a3157833582529284019290840190610a18565b979a9699509497505050505050565b60008060408385031215610a5357600080fd5b610a5c836108c5565b946020939093013593505050565b60008060408385031215610a7d57600080fd5b610a86836108c5565b9150610a94602084016108c5565b90509250929050565b600060208284031215610aaf57600080fd5b81518015158114610abf57600080fd5b9392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561076057610760610adc565b8082018082111561076057610760610adc565b600060018201610b2a57610b2a610adc565b5060010190565b60208082526025908201527f4465706f73697420616d6f756e74206d75737420626520677265617465722074604082015264068616e20360dc1b60608201526080019056fea264697066735822122047fd7a23e5d2253bec588b46b14e17c3132dd5c0cd3fa12af23432654792690164736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x55 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x38419104 EQ PUSH2 0x5A JUMPI DUP1 PUSH4 0x97FEB926 EQ PUSH2 0x7C JUMPI DUP1 PUSH4 0xA1DB9782 EQ PUSH2 0x9C JUMPI DUP1 PUSH4 0xC0883B92 EQ PUSH2 0xBC JUMPI DUP1 PUSH4 0xC3A8962C EQ PUSH2 0xF9 JUMPI DUP1 PUSH4 0xF6326FB3 EQ PUSH2 0x127 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7A PUSH2 0x75 CALLDATASIZE PUSH1 0x4 PUSH2 0x953 JUMP JUMPDEST PUSH2 0x12F JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7A PUSH2 0x97 CALLDATASIZE PUSH1 0x4 PUSH2 0xA40 JUMP JUMPDEST PUSH2 0x43F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7A PUSH2 0xB7 CALLDATASIZE PUSH1 0x4 PUSH2 0xA40 JUMP JUMPDEST PUSH2 0x5A3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD PUSH2 0xDC SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x105 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x119 PUSH2 0x114 CALLDATASIZE PUSH1 0x4 PUSH2 0xA6A JUMP JUMPDEST PUSH2 0x739 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF0 JUMP JUMPDEST PUSH2 0x7A PUSH2 0x766 JUMP JUMPDEST PUSH2 0x137 PUSH2 0x801 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0xDEBFDA3 PUSH1 0xE4 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xDEBFDA30 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x17F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1A3 SWAP2 SWAP1 PUSH2 0xA9D JUMP JUMPDEST PUSH2 0x1FF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5065726D697373696F6E2064656E69656420666F72206E6F6E2D657865637574 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x37B9 PUSH1 0xF1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 MLOAD DUP5 MLOAD EQ DUP1 ISZERO PUSH2 0x211 JUMPI POP DUP1 MLOAD DUP4 MLOAD EQ JUMPDEST PUSH2 0x25D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x417272617973206D7573742068617665207468652073616D65206C656E677468 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1F6 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x42E JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x27D JUMPI PUSH2 0x27D PUSH2 0xAC6 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x29B JUMPI PUSH2 0x29B PUSH2 0xAC6 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2B9 JUMPI PUSH2 0x2B9 PUSH2 0xAC6 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP5 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP3 DUP12 AND DUP3 MSTORE SWAP2 SWAP1 SWAP4 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP2 GT ISZERO PUSH2 0x347 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E742062616C616E636520666F72207472616E736665 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP11 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x37E SWAP1 DUP5 SWAP1 PUSH2 0xAF2 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP11 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x3BA SWAP1 DUP5 SWAP1 PUSH2 0xB05 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x574DF9673A0CCB6B90A7B340BD6334F98323BD2B74C515AE8AA95243DE848C48 DUP5 PUSH1 0x40 MLOAD PUSH2 0x410 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP DUP1 DUP1 PUSH2 0x426 SWAP1 PUSH2 0xB18 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x260 JUMP JUMPDEST POP PUSH2 0x439 PUSH1 0x1 PUSH1 0x0 SSTORE JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x447 PUSH2 0x801 JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0x467 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F6 SWAP1 PUSH2 0xB31 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4BA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4DE SWAP2 SWAP1 PUSH2 0xA9D JUMP JUMPDEST PUSH2 0x51C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x151C985B9CD9995C8819985A5B1959 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1F6 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x54F SWAP1 DUP5 SWAP1 PUSH2 0xB05 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 CALLER SWAP1 PUSH32 0x5548C837AB068CF56A2C2479DF0882A4922FD203EDB7517321831D95078C5F62 SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x59F PUSH1 0x1 PUSH1 0x0 SSTORE JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x5AB PUSH2 0x801 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP2 GT ISZERO PUSH2 0x615 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x496E73756666696369656E742062616C616E6365 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1F6 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x648 SWAP1 DUP5 SWAP1 PUSH2 0xAF2 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x69A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6BE SWAP2 SWAP1 PUSH2 0xA9D JUMP JUMPDEST PUSH2 0x6FC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x151C985B9CD9995C8819985A5B1959 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1F6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 CALLER SWAP1 PUSH32 0x2717EAD6B9200DD235AAD468C9809EA400FE33AC69B5BFAA6D3E90FC922B6398 SWAP1 PUSH1 0x20 ADD PUSH2 0x58D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP6 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x76E PUSH2 0x801 JUMP JUMPDEST PUSH1 0x0 CALLVALUE GT PUSH2 0x78E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F6 SWAP1 PUSH2 0xB31 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP4 DUP1 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD CALLVALUE SWAP3 SWAP1 PUSH2 0x7B8 SWAP1 DUP5 SWAP1 PUSH2 0xB05 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD CALLVALUE DUP2 MSTORE PUSH1 0x0 SWAP1 CALLER SWAP1 PUSH32 0x5548C837AB068CF56A2C2479DF0882A4922FD203EDB7517321831D95078C5F62 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x7FF PUSH1 0x1 PUSH1 0x0 SSTORE JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD SUB PUSH2 0x853 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1F6 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x899 JUMPI PUSH2 0x899 PUSH2 0x85A JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x8BB JUMPI PUSH2 0x8BB PUSH2 0x85A JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x8DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x907 PUSH2 0x902 DUP4 PUSH2 0x8A1 JUMP JUMPDEST PUSH2 0x870 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x926 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x948 JUMPI PUSH2 0x93B DUP2 PUSH2 0x8C5 JUMP JUMPDEST DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x92A JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x969 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x981 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x98D DUP9 DUP4 DUP10 ADD PUSH2 0x8E1 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 SWAP2 POP DUP2 DUP8 ADD CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x9A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9B0 DUP10 DUP3 DUP11 ADD PUSH2 0x8E1 JUMP JUMPDEST SWAP6 POP POP PUSH2 0x9BF PUSH1 0x40 DUP9 ADD PUSH2 0x8C5 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x9D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 ADD SWAP1 POP PUSH1 0x1F DUP2 ADD DUP9 SGT PUSH2 0x9E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x9F4 PUSH2 0x902 DUP3 PUSH2 0x8A1 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP3 ADD DUP4 ADD SWAP1 DUP4 DUP2 ADD SWAP1 DUP11 DUP4 GT ISZERO PUSH2 0xA13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 DUP5 ADD SWAP3 JUMPDEST DUP3 DUP5 LT ISZERO PUSH2 0xA31 JUMPI DUP4 CALLDATALOAD DUP3 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH2 0xA18 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA53 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA5C DUP4 PUSH2 0x8C5 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA86 DUP4 PUSH2 0x8C5 JUMP JUMPDEST SWAP2 POP PUSH2 0xA94 PUSH1 0x20 DUP5 ADD PUSH2 0x8C5 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xABF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x760 JUMPI PUSH2 0x760 PUSH2 0xADC JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x760 JUMPI PUSH2 0x760 PUSH2 0xADC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0xB2A JUMPI PUSH2 0xB2A PUSH2 0xADC JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x4465706F73697420616D6F756E74206D75737420626520677265617465722074 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x68616E203 PUSH1 0xDC SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFBALANCE REVERT PUSH27 0x23E5D2253BEC588B46B14E17C3132DD5C0CD3FA12AF23432654792 PUSH10 0x164736F6C6343000813 STOP CALLER ","sourceMap":"279:2725:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2211:791;;;;;;;;;;-1:-1:-1;2211:791:16;;;;;:::i;:::-;;:::i;:::-;;1029:329;;;;;;;;;;-1:-1:-1;1029:329:16;;;;;:::i;:::-;;:::i;1399:315::-;;;;;;;;;;-1:-1:-1;1399:315:16;;;;;:::i;:::-;;:::i;434:39::-;;;;;;;;;;-1:-1:-1;434:39:16;;;;-1:-1:-1;;;;;434:39:16;;;;;;-1:-1:-1;;;;;3357:32:17;;;3339:51;;3327:2;3312:18;434:39:16;;;;;;;;2040:130;;;;;;;;;;-1:-1:-1;2040:130:16;;;;;:::i;:::-;;:::i;:::-;;;3812:25:17;;;3800:2;3785:18;2040:130:16;3666:177:17;1775:222:16;;;:::i;2211:791::-;2261:21:2;:19;:21::i;:::-;2392:15:16::1;::::0;:38:::1;::::0;-1:-1:-1;;;2392:38:16;;2419:10:::1;2392:38;::::0;::::1;3339:51:17::0;-1:-1:-1;;;;;2392:15:16;;::::1;::::0;:26:::1;::::0;3312:18:17;;2392:38:16::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2380:95;;;::::0;-1:-1:-1;;;2380:95:16;;4540:2:17;2380:95:16::1;::::0;::::1;4522:21:17::0;4579:2;4559:18;;;4552:30;4618:34;4598:18;;;4591:62;-1:-1:-1;;;4669:18:17;;;4662:32;4711:19;;2380:95:16::1;;;;;;;;;2515:11;:18;2491:13;:20;:42;:86;;;;;2563:7;:14;2541:11;:18;:36;2491:86;2479:141;;;::::0;-1:-1:-1;;;2479:141:16;;4943:2:17;2479:141:16::1;::::0;::::1;4925:21:17::0;;;4962:18;;;4955:30;5021:34;5001:18;;;4994:62;5073:18;;2479:141:16::1;4741:356:17::0;2479:141:16::1;2630:9;2625:374;2649:13;:20;2645:1;:24;2625:374;;;2681:12;2696:13;2710:1;2696:16;;;;;;;;:::i;:::-;;;;;;;2681:31;;2717:10;2730:11;2742:1;2730:14;;;;;;;;:::i;:::-;;;;;;;2717:27;;2749:14;2766:7;2774:1;2766:10;;;;;;;;:::i;:::-;;::::0;;::::1;::::0;;;;;;;-1:-1:-1;;;;;2795:15:16;;::::1;;::::0;;;:9:::1;:15:::0;;;;;;:22;;::::1;::::0;;;;;;;;;;2766:10;;-1:-1:-1;2795:32:16;-1:-1:-1;2795:32:16::1;2782:91;;;::::0;-1:-1:-1;;;2782:91:16;;5436:2:17;2782:91:16::1;::::0;::::1;5418:21:17::0;5475:2;5455:18;;;5448:30;5514:34;5494:18;;;5487:62;-1:-1:-1;;;5565:18:17;;;5558:31;5606:19;;2782:91:16::1;5234:397:17::0;2782:91:16::1;-1:-1:-1::0;;;;;2878:15:16;;::::1;;::::0;;;:9:::1;:15;::::0;;;;;;;:22;;::::1;::::0;;;;;;;;:32;;2904:6;;2878:15;:32:::1;::::0;2904:6;;2878:32:::1;:::i;:::-;::::0;;;-1:-1:-1;;;;;;;2915:13:16;;::::1;;::::0;;;:9:::1;:13;::::0;;;;;;;:20;;::::1;::::0;;;;;;;;:30;;2939:6;;2915:13;:30:::1;::::0;2939:6;;2915:30:::1;:::i;:::-;;;;;;;;2980:5;-1:-1:-1::0;;;;;2956:38:16::1;2976:2;-1:-1:-1::0;;;;;2956:38:16::1;2970:4;-1:-1:-1::0;;;;;2956:38:16::1;;2987:6;2956:38;;;;3812:25:17::0;;3800:2;3785:18;;3666:177;2956:38:16::1;;;;;;;;2676:323;;;2671:3;;;;;:::i;:::-;;;;2625:374;;;;2303:20:2::0;1716:1;2809:7;:22;2629:209;2303:20;2211:791:16;;;;:::o;1029:329::-;2261:21:2;:19;:21::i;:::-;1123:1:16::1;1114:6;:10;1106:60;;;;-1:-1:-1::0;;;1106:60:16::1;;;;;;;:::i;:::-;1182:61;::::0;-1:-1:-1;;;1182:61:16;;1209:10:::1;1182:61;::::0;::::1;6817:34:17::0;1229:4:16::1;6867:18:17::0;;;6860:43;6919:18;;;6912:34;;;-1:-1:-1;;;;;1182:26:16;::::1;::::0;::::1;::::0;6752:18:17;;1182:61:16::1;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1170:99;;;::::0;-1:-1:-1;;;1170:99:16;;7159:2:17;1170:99:16::1;::::0;::::1;7141:21:17::0;7198:2;7178:18;;;7171:30;-1:-1:-1;;;7217:18:17;;;7210:45;7272:18;;1170:99:16::1;6957:339:17::0;1170:99:16::1;1283:10;1273:21;::::0;;;:9:::1;:21;::::0;;;;;;;-1:-1:-1;;;;;1273:28:16;::::1;::::0;;;;;;;:38;;1305:6;;1273:21;:38:::1;::::0;1305:6;;1273:38:::1;:::i;:::-;::::0;;;-1:-1:-1;;1320:34:16::1;::::0;3812:25:17;;;-1:-1:-1;;;;;1320:34:16;::::1;::::0;1328:10:::1;::::0;1320:34:::1;::::0;3800:2:17;3785:18;1320:34:16::1;;;;;;;;2303:20:2::0;1716:1;2809:7;:22;2629:209;2303:20;1029:329:16;;:::o;1399:315::-;2261:21:2;:19;:21::i;:::-;1495:10:16::1;1485:21;::::0;;;:9:::1;:21;::::0;;;;;;;-1:-1:-1;;;;;1485:28:16;::::1;::::0;;;;;;;;:38;-1:-1:-1;1485:38:16::1;1477:71;;;::::0;-1:-1:-1;;;1477:71:16;;7503:2:17;1477:71:16::1;::::0;::::1;7485:21:17::0;7542:2;7522:18;;;7515:30;-1:-1:-1;;;7561:18:17;;;7554:50;7621:18;;1477:71:16::1;7301:344:17::0;1477:71:16::1;1562:10;1552:21;::::0;;;:9:::1;:21;::::0;;;;;;;-1:-1:-1;;;;;1552:28:16;::::1;::::0;;;;;;;:38;;1584:6;;1552:21;:38:::1;::::0;1584:6;;1552:38:::1;:::i;:::-;::::0;;;-1:-1:-1;;1602:42:16::1;::::0;-1:-1:-1;;;1602:42:16;;1625:10:::1;1602:42;::::0;::::1;7824:51:17::0;7891:18;;;7884:34;;;-1:-1:-1;;;;;1602:22:16;::::1;::::0;::::1;::::0;7797:18:17;;1602:42:16::1;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1594:70;;;::::0;-1:-1:-1;;;1594:70:16;;7159:2:17;1594:70:16::1;::::0;::::1;7141:21:17::0;7198:2;7178:18;;;7171:30;-1:-1:-1;;;7217:18:17;;;7210:45;7272:18;;1594:70:16::1;6957:339:17::0;1594:70:16::1;1673:37;::::0;3812:25:17;;;-1:-1:-1;;;;;1673:37:16;::::1;::::0;1684:10:::1;::::0;1673:37:::1;::::0;3800:2:17;3785:18;1673:37:16::1;3666:177:17::0;2040:130:16;-1:-1:-1;;;;;2144:15:16;;;2124:7;2144:15;;;:9;:15;;;;;;;;:22;;;;;;;;;;2040:130;;;;;:::o;1775:222::-;2261:21:2;:19;:21::i;:::-;1849:1:16::1;1837:9;:13;1829:63;;;;-1:-1:-1::0;;;1829:63:16::1;;;;;;;:::i;:::-;1906:10;1896:21;::::0;;;:9:::1;:21;::::0;;;;;;;:33;;;;;;;;:46;;1933:9:::1;::::0;1896:21;:46:::1;::::0;1933:9;;1896:46:::1;:::i;:::-;::::0;;;-1:-1:-1;;1951:42:16::1;::::0;1983:9:::1;3812:25:17::0;;1979:1:16::1;::::0;1959:10:::1;::::0;1951:42:::1;::::0;3800:2:17;3785:18;1951:42:16::1;;;;;;;2303:20:2::0;1716:1;2809:7;:22;2629:209;2303:20;1775:222:16:o;2336:287:2:-;1759:1;2468:7;;:19;2460:63;;;;-1:-1:-1;;;2460:63:2;;8131:2:17;2460:63:2;;;8113:21:17;8170:2;8150:18;;;8143:30;8209:33;8189:18;;;8182:61;8260:18;;2460:63:2;7929:355:17;2460:63:2;1759:1;2598:7;:18;2336:287::o;14:127:17:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:275;217:2;211:9;282:2;263:13;;-1:-1:-1;;259:27:17;247:40;;317:18;302:34;;338:22;;;299:62;296:88;;;364:18;;:::i;:::-;400:2;393:22;146:275;;-1:-1:-1;146:275:17:o;426:183::-;486:4;519:18;511:6;508:30;505:56;;;541:18;;:::i;:::-;-1:-1:-1;586:1:17;582:14;598:4;578:25;;426:183::o;614:173::-;682:20;;-1:-1:-1;;;;;731:31:17;;721:42;;711:70;;777:1;774;767:12;711:70;614:173;;;:::o;792:668::-;846:5;899:3;892:4;884:6;880:17;876:27;866:55;;917:1;914;907:12;866:55;953:6;940:20;979:4;1003:60;1019:43;1059:2;1019:43;:::i;:::-;1003:60;:::i;:::-;1097:15;;;1183:1;1179:10;;;;1167:23;;1163:32;;;1128:12;;;;1207:15;;;1204:35;;;1235:1;1232;1225:12;1204:35;1271:2;1263:6;1259:15;1283:148;1299:6;1294:3;1291:15;1283:148;;;1365:23;1384:3;1365:23;:::i;:::-;1353:36;;1409:12;;;;1316;;1283:148;;;-1:-1:-1;1449:5:17;792:668;-1:-1:-1;;;;;;792:668:17:o;1465:1439::-;1626:6;1634;1642;1650;1703:3;1691:9;1682:7;1678:23;1674:33;1671:53;;;1720:1;1717;1710:12;1671:53;1760:9;1747:23;1789:18;1830:2;1822:6;1819:14;1816:34;;;1846:1;1843;1836:12;1816:34;1869:61;1922:7;1913:6;1902:9;1898:22;1869:61;:::i;:::-;1859:71;;1949:2;1939:12;;2004:2;1993:9;1989:18;1976:32;2033:2;2023:8;2020:16;2017:36;;;2049:1;2046;2039:12;2017:36;2072:63;2127:7;2116:8;2105:9;2101:24;2072:63;:::i;:::-;2062:73;;;2154:38;2188:2;2177:9;2173:18;2154:38;:::i;:::-;2144:48;;2245:2;2234:9;2230:18;2217:32;2274:2;2264:8;2261:16;2258:36;;;2290:1;2287;2280:12;2258:36;2313:24;;;-1:-1:-1;2368:4:17;2360:13;;2356:27;-1:-1:-1;2346:55:17;;2397:1;2394;2387:12;2346:55;2433:2;2420:16;2456:60;2472:43;2512:2;2472:43;:::i;2456:60::-;2550:15;;;2632:1;2628:10;;;;2620:19;;2616:28;;;2581:12;;;;2656:19;;;2653:39;;;2688:1;2685;2678:12;2653:39;2712:11;;;;2732:142;2748:6;2743:3;2740:15;2732:142;;;2814:17;;2802:30;;2765:12;;;;2852;;;;2732:142;;;1465:1439;;;;-1:-1:-1;1465:1439:17;;-1:-1:-1;;;;;;1465:1439:17:o;2909:254::-;2977:6;2985;3038:2;3026:9;3017:7;3013:23;3009:32;3006:52;;;3054:1;3051;3044:12;3006:52;3077:29;3096:9;3077:29;:::i;:::-;3067:39;3153:2;3138:18;;;;3125:32;;-1:-1:-1;;;2909:254:17:o;3401:260::-;3469:6;3477;3530:2;3518:9;3509:7;3505:23;3501:32;3498:52;;;3546:1;3543;3536:12;3498:52;3569:29;3588:9;3569:29;:::i;:::-;3559:39;;3617:38;3651:2;3640:9;3636:18;3617:38;:::i;:::-;3607:48;;3401:260;;;;;:::o;4056:277::-;4123:6;4176:2;4164:9;4155:7;4151:23;4147:32;4144:52;;;4192:1;4189;4182:12;4144:52;4224:9;4218:16;4277:5;4270:13;4263:21;4256:5;4253:32;4243:60;;4299:1;4296;4289:12;4243:60;4322:5;4056:277;-1:-1:-1;;;4056:277:17:o;5102:127::-;5163:10;5158:3;5154:20;5151:1;5144:31;5194:4;5191:1;5184:15;5218:4;5215:1;5208:15;5636:127;5697:10;5692:3;5688:20;5685:1;5678:31;5728:4;5725:1;5718:15;5752:4;5749:1;5742:15;5768:128;5835:9;;;5856:11;;;5853:37;;;5870:18;;:::i;5901:125::-;5966:9;;;5987:10;;;5984:36;;;6000:18;;:::i;6031:135::-;6070:3;6091:17;;;6088:43;;6111:18;;:::i;:::-;-1:-1:-1;6158:1:17;6147:13;;6031:135::o;6171:401::-;6373:2;6355:21;;;6412:2;6392:18;;;6385:30;6451:34;6446:2;6431:18;;6424:62;-1:-1:-1;;;6517:2:17;6502:18;;6495:35;6562:3;6547:19;;6171:401::o"},"gasEstimates":{"creation":{"codeDepositCost":"597600","executionCost":"infinite","totalCost":"infinite"},"external":{"batchUpdateBalances(address[],address[],address,uint256[])":"infinite","depositERC20(address,uint256)":"infinite","depositETH()":"72860","executorManager()":"2370","getERC20Balance(address,address)":"infinite","withdrawERC20(address,uint256)":"infinite"}},"methodIdentifiers":{"batchUpdateBalances(address[],address[],address,uint256[])":"38419104","depositERC20(address,uint256)":"97feb926","depositETH()":"f6326fb3","executorManager()":"c0883b92","getERC20Balance(address,address)":"c3a8962c","withdrawERC20(address,uint256)":"a1db9782"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executorManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UpdateBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"fromAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"toAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchUpdateBalances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executorManager\",\"outputs\":[{\"internalType\":\"contract IExecutorManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getERC20Balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TradingWallet.sol\":\"TradingWallet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/TradingWallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ninterface IExecutorManager {\\n\\tfunction isExecutor(address _address) external view returns (bool);\\n}\\n\\ncontract TradingWallet is ReentrancyGuard {\\n\\t// Mapping from user to token to balance\\n\\tmapping(address => mapping(address => uint256)) private _balances;\\n\\tIExecutorManager public executorManager;\\n\\n\\t// Event emitted when a deposit is made\\n\\tevent Deposit(address indexed user, address indexed token, uint256 amount);\\n\\t// Event emitted when a withdrawal is made\\n\\tevent Withdrawal(\\n\\t\\taddress indexed user,\\n\\t\\taddress indexed token,\\n\\t\\tuint256 amount\\n\\t);\\n\\t// Event emitted when a batch transfer is made\\n\\tevent UpdateBalance(\\n\\t\\taddress indexed from,\\n\\t\\taddress indexed to,\\n\\t\\taddress indexed token,\\n\\t\\tuint256 amount\\n\\t);\\n\\n\\tconstructor(address _executorManager) {\\n\\t\\texecutorManager = IExecutorManager(_executorManager);\\n\\t}\\n\\n\\t// Function to deposit ERC20 tokens\\n\\tfunction depositERC20(address token, uint256 amount) public nonReentrant {\\n\\t\\trequire(amount > 0, \\\"Deposit amount must be greater than 0\\\");\\n\\t\\trequire(\\n\\t\\t\\tIERC20(token).transferFrom(msg.sender, address(this), amount),\\n\\t\\t\\t\\\"Transfer failed\\\"\\n\\t\\t);\\n\\t\\t_balances[msg.sender][token] += amount;\\n\\t\\temit Deposit(msg.sender, token, amount);\\n\\t}\\n\\n\\t// Function to withdraw ERC20 tokens\\n\\tfunction withdrawERC20(address token, uint256 amount) public nonReentrant {\\n\\t\\trequire(_balances[msg.sender][token] >= amount, \\\"Insufficient balance\\\");\\n\\t\\t_balances[msg.sender][token] -= amount;\\n\\t\\trequire(IERC20(token).transfer(msg.sender, amount), \\\"Transfer failed\\\");\\n\\t\\temit Withdrawal(msg.sender, token, amount);\\n\\t}\\n\\n\\t// Function to deposit native cryptocurrency (e.g., ETH)\\n\\tfunction depositETH() public payable nonReentrant {\\n\\t\\trequire(msg.value > 0, \\\"Deposit amount must be greater than 0\\\");\\n\\t\\t_balances[msg.sender][address(0)] += msg.value;\\n\\t\\temit Deposit(msg.sender, address(0), msg.value);\\n\\t}\\n\\n\\t// Function to get ERC20 token balance\\n\\tfunction getERC20Balance(\\n\\t\\taddress user,\\n\\t\\taddress token\\n\\t) external view returns (uint256) {\\n\\t\\treturn _balances[user][token];\\n\\t}\\n\\n\\t// Function to batch update balances\\n\\tfunction batchUpdateBalances(\\n\\t\\taddress[] memory fromAddresses,\\n\\t\\taddress[] memory toAddresses,\\n\\t\\taddress token,\\n\\t\\tuint256[] memory amounts\\n\\t) external nonReentrant {\\n\\t\\trequire(\\n\\t\\t\\texecutorManager.isExecutor(msg.sender),\\n\\t\\t\\t\\\"Permission denied for non-executor\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tfromAddresses.length == toAddresses.length &&\\n\\t\\t\\t\\ttoAddresses.length == amounts.length,\\n\\t\\t\\t\\\"Arrays must have the same length\\\"\\n\\t\\t);\\n\\n\\t\\tfor (uint256 i = 0; i < fromAddresses.length; i++) {\\n\\t\\t\\taddress from = fromAddresses[i];\\n\\t\\t\\taddress to = toAddresses[i];\\n\\t\\t\\tuint256 amount = amounts[i];\\n\\n\\t\\t\\trequire(\\n\\t\\t\\t\\t_balances[from][token] >= amount,\\n\\t\\t\\t\\t\\\"Insufficient balance for transfer\\\"\\n\\t\\t\\t);\\n\\t\\t\\t_balances[from][token] -= amount;\\n\\t\\t\\t_balances[to][token] += amount;\\n\\n\\t\\t\\temit UpdateBalance(from, to, token, amount);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x2c174f8df557bfa325ae87cd678d6051e8612f11d0dc6117f914f4056cdf5776\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":399,"contract":"contracts/TradingWallet.sol:TradingWallet","label":"_status","offset":0,"slot":"0","type":"t_uint256"},{"astId":4454,"contract":"contracts/TradingWallet.sol:TradingWallet","label":"_balances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":4457,"contract":"contracts/TradingWallet.sol:TradingWallet","label":"executorManager","offset":0,"slot":"2","type":"t_contract(IExecutorManager)4446"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_contract(IExecutorManager)4446":{"encoding":"inplace","label":"contract IExecutorManager","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}