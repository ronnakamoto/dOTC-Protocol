{"id":"f7035c46906b4ba977bab4d721f6523f","_format":"hh-sol-build-info-1","solcVersion":"0.8.19","solcLongVersion":"0.8.19+commit.7dd6d404","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/access/AccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"},"@openzeppelin/contracts/access/IAccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"},"@openzeppelin/contracts/token/ERC1155/ERC1155.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"},"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"},"@openzeppelin/contracts/token/ERC1155/IERC1155.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"},"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\n * against this attack out of the box.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"},"contracts/BundlerManager.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ncontract BundlerManager {\n\tmapping(address => bool) public isBundler;\n\tmapping(address => uint256) public lastHeartbeat;\n\tuint256 public registrationFee;\n\n\tevent BundlerRegistered(address indexed bundler);\n\tevent Heartbeat(address indexed bundler, uint256 timestamp);\n\n\t// Registration function for Bundlers\n\tfunction registerAsBundler() public payable {\n\t\trequire(msg.value == registrationFee, \"Incorrect fee\");\n\t\tisBundler[msg.sender] = true;\n\t\temit BundlerRegistered(msg.sender);\n\t}\n\n\t// Function for Bundlers to signal activity\n\tfunction heartbeat() public {\n\t\trequire(isBundler[msg.sender], \"Not a registered bundler\");\n\t\tlastHeartbeat[msg.sender] = block.timestamp;\n\t\temit Heartbeat(msg.sender, block.timestamp);\n\t}\n\n\t// Admin function to set registration fee\n\tfunction setRegistrationFee(uint256 fee) public {\n\t\t// Only admin can set the fee\n\t\tregistrationFee = fee;\n\t}\n\n\t// Additional functions as needed...\n}\n"},"contracts/ExecutorManager.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\ncontract ExecutorManager is AccessControl {\n\tbytes32 public constant EXECUTOR_ROLE = keccak256(\"EXECUTOR_ROLE\");\n\n\tevent ExecutorRegistered(address indexed executor);\n\tevent ExecutorUnregistered(address indexed executor);\n\n\tconstructor() {\n\t\t_setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n\t}\n\n\t// Function to register as an Executor\n\tfunction registerExecutor(\n\t\taddress executor\n\t) public onlyRole(DEFAULT_ADMIN_ROLE) {\n\t\t_setupRole(EXECUTOR_ROLE, executor);\n\t\temit ExecutorRegistered(executor);\n\t}\n\n\t// Function to remove an Executor\n\tfunction unregisterExecutor(\n\t\taddress executor\n\t) public onlyRole(DEFAULT_ADMIN_ROLE) {\n\t\t_revokeRole(EXECUTOR_ROLE, executor);\n\t\temit ExecutorUnregistered(executor);\n\t}\n\n\t// Function to check if an address is an Executor\n\tfunction isExecutor(address executor) public view returns (bool) {\n\t\treturn hasRole(EXECUTOR_ROLE, executor);\n\t}\n}\n"},"contracts/SAFTToken.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\ninterface IExecutorManager {\n\tfunction isExecutor(address _address) external view returns (bool);\n}\n\ncontract SAFTToken is ERC1155, AccessControl {\n\tbytes32 public merkleRoot;\n\tmapping(uint256 => bool) public lockingFlags; // Reentrancy guard for minting\n\tuint256 private tokenIdCounter;\n\tbytes32 public constant EXECUTOR_ROLE = keccak256(\"EXECUTOR_ROLE\");\n\tIExecutorManager public executorManager;\n\n\tevent BundleProcessed(\n\t\taddress indexed executor,\n\t\tuint256 indexed bundleNonce,\n\t\tbytes32 bundleHash,\n\t\tuint256 timestamp\n\t);\n\n\tconstructor(\n\t\taddress _owner,\n\t\tbytes32 _merkleRoot,\n\t\tstring memory metadataUri,\n\t\tuint totalSupply,\n\t\taddress _executorManager\n\t) ERC1155(metadataUri) {\n\t\trequire(_owner != address(0), \"Owner address cannot be empty\");\n\t\t_mint(msg.sender, tokenIdCounter++, totalSupply, \"\");\n\t\t_setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n\t\tmerkleRoot = _merkleRoot;\n\t\texecutorManager = IExecutorManager(_executorManager);\n\t}\n\n\tfunction whitelistMint(\n\t\tuint256 amount,\n\t\tbytes memory data,\n\t\tbytes32[] calldata merkleProof\n\t) public {\n\t\tuint256 id = tokenIdCounter;\n\t\trequire(!lockingFlags[id], \"Token is currently locked for minting\");\n\n\t\t// Validate merkle proof using a single call\n\t\trequire(isWhitelisted(merkleProof), \"Caller is not whitelisted\");\n\n\t\tlockingFlags[id] = true; // Set locking flag to prevent duplicate mints\n\n\t\t// Minimize external function calls for gas efficiency\n\t\t_mint(msg.sender, id, amount, data);\n\n\t\tlockingFlags[id] = false; // Unlock after successful minting\n\t\ttokenIdCounter++;\n\t}\n\n\tfunction isWhitelisted(\n\t\tbytes32[] calldata merkleProof\n\t) public view returns (bool) {\n\t\tbytes32 leaf = keccak256(abi.encodePacked(msg.sender));\n\t\treturn MerkleProof.verify(merkleProof, merkleRoot, leaf);\n\t}\n\n\tfunction setMerkleRoot(\n\t\tbytes32 _merkleRoot\n\t) public onlyRole(DEFAULT_ADMIN_ROLE) {\n\t\tmerkleRoot = _merkleRoot;\n\t}\n\n\tfunction supportsInterface(\n\t\tbytes4 interfaceId\n\t) public view virtual override(ERC1155, AccessControl) returns (bool) {\n\t\treturn\n\t\t\tERC1155.supportsInterface(interfaceId) ||\n\t\t\tAccessControl.supportsInterface(interfaceId);\n\t}\n\n\tfunction setExecutorManager(\n\t\taddress _executorManager\n\t) public onlyRole(DEFAULT_ADMIN_ROLE) {\n\t\texecutorManager = IExecutorManager(_executorManager);\n\t}\n\n\tfunction processBundle(\n\t\tbytes calldata bundleData,\n\t\tuint256 bundleNonce\n\t) public {\n\t\trequire(\n\t\t\texecutorManager.isExecutor(msg.sender),\n\t\t\t\"Caller is not an authorized executor\"\n\t\t);\n\n\t\t// Decode and process each transaction in the bundle\n\t\tfor (uint i = 0; i < bundleData.length; i += 104) {\n\t\t\t(\n\t\t\t\taddress buyer,\n\t\t\t\taddress seller,\n\t\t\t\tuint256 tokenId,\n\t\t\t\tuint256 amount\n\t\t\t) = abi.decode(\n\t\t\t\t\tbundleData[i:i + 104],\n\t\t\t\t\t(address, address, uint256, uint256)\n\t\t\t\t);\n\n\t\t\t// Ensure that the seller has enough tokens\n\t\t\trequire(\n\t\t\t\tbalanceOf(seller, tokenId) >= amount,\n\t\t\t\t\"Seller does not have enough tokens\"\n\t\t\t);\n\n\t\t\t// Perform the token transfer from seller to buyer\n\t\t\t_safeTransferFrom(seller, buyer, tokenId, amount, \"\");\n\t\t}\n\n\t\t// Compute the hash of the bundle data for logging\n\t\tbytes32 bundleHash = keccak256(bundleData);\n\n\t\t// Emit the event with necessary details\n\t\temit BundleProcessed(\n\t\t\tmsg.sender,\n\t\t\tbundleNonce,\n\t\t\tbundleHash,\n\t\t\tblock.timestamp\n\t\t);\n\t}\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@openzeppelin/contracts/access/AccessControl.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/AccessControl.sol","exportedSymbols":{"AccessControl":[315],"Context":[2141],"ERC165":[2842],"IAccessControl":[388],"IERC165":[2854],"Math":[3719],"Strings":[2316]},"id":316,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"108:23:0"},{"absolutePath":"@openzeppelin/contracts/access/IAccessControl.sol","file":"./IAccessControl.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":316,"sourceUnit":389,"src":"133:30:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":316,"sourceUnit":2142,"src":"164:30:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../utils/Strings.sol","id":4,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":316,"sourceUnit":2317,"src":"195:30:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"../utils/introspection/ERC165.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":316,"sourceUnit":2843,"src":"226:43:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":7,"name":"Context","nameLocations":["1841:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":2141,"src":"1841:7:0"},"id":8,"nodeType":"InheritanceSpecifier","src":"1841:7:0"},{"baseName":{"id":9,"name":"IAccessControl","nameLocations":["1850:14:0"],"nodeType":"IdentifierPath","referencedDeclaration":388,"src":"1850:14:0"},"id":10,"nodeType":"InheritanceSpecifier","src":"1850:14:0"},{"baseName":{"id":11,"name":"ERC165","nameLocations":["1866:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":2842,"src":"1866:6:0"},"id":12,"nodeType":"InheritanceSpecifier","src":"1866:6:0"}],"canonicalName":"AccessControl","contractDependencies":[],"contractKind":"contract","documentation":{"id":6,"nodeType":"StructuredDocumentation","src":"271:1534:0","text":" @dev Contract module that allows children to implement role-based access\n control mechanisms. This is a lightweight version that doesn't allow enumerating role\n members except through off-chain means by accessing the contract event logs. Some\n applications may benefit from on-chain enumerability, for those cases see\n {AccessControlEnumerable}.\n Roles are referred to by their `bytes32` identifier. These should be exposed\n in the external API and be unique. The best way to achieve this is by\n using `public constant` hash digests:\n ```\n bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n ```\n Roles can be used to represent a set of permissions. To restrict access to a\n function call, use {hasRole}:\n ```\n function foo() public {\n     require(hasRole(MY_ROLE, msg.sender));\n     ...\n }\n ```\n Roles can be granted and revoked dynamically via the {grantRole} and\n {revokeRole} functions. Each role has an associated admin role, and only\n accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n that only accounts with this role will be able to grant or revoke other\n roles. More complex role relationships can be created by using\n {_setRoleAdmin}.\n WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n grant and revoke this role. Extra precautions should be taken to secure\n accounts that have been granted it."},"fullyImplemented":true,"id":315,"linearizedBaseContracts":[315,2842,2854,388,2141],"name":"AccessControl","nameLocation":"1824:13:0","nodeType":"ContractDefinition","nodes":[{"canonicalName":"AccessControl.RoleData","id":19,"members":[{"constant":false,"id":16,"mutability":"mutable","name":"members","nameLocation":"1930:7:0","nodeType":"VariableDeclaration","scope":19,"src":"1905:32:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":15,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":13,"name":"address","nodeType":"ElementaryTypeName","src":"1913:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1905:24:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":14,"name":"bool","nodeType":"ElementaryTypeName","src":"1924:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"constant":false,"id":18,"mutability":"mutable","name":"adminRole","nameLocation":"1955:9:0","nodeType":"VariableDeclaration","scope":19,"src":"1947:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":17,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1947:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"RoleData","nameLocation":"1886:8:0","nodeType":"StructDefinition","scope":315,"src":"1879:92:0","visibility":"public"},{"constant":false,"id":24,"mutability":"mutable","name":"_roles","nameLocation":"2014:6:0","nodeType":"VariableDeclaration","scope":315,"src":"1977:43:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData)"},"typeName":{"id":23,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":20,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1985:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"1977:28:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":22,"nodeType":"UserDefinedTypeName","pathNode":{"id":21,"name":"RoleData","nameLocations":["1996:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":19,"src":"1996:8:0"},"referencedDeclaration":19,"src":"1996:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$19_storage_ptr","typeString":"struct AccessControl.RoleData"}}},"visibility":"private"},{"constant":true,"functionSelector":"a217fddf","id":27,"mutability":"constant","name":"DEFAULT_ADMIN_ROLE","nameLocation":"2051:18:0","nodeType":"VariableDeclaration","scope":315,"src":"2027:49:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":25,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2027:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"30783030","id":26,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2072:4:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x00"},"visibility":"public"},{"body":{"id":37,"nodeType":"Block","src":"2495:44:0","statements":[{"expression":{"arguments":[{"id":33,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":30,"src":"2516:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":32,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[92,131],"referencedDeclaration":92,"src":"2505:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$__$","typeString":"function (bytes32) view"}},"id":34,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2505:16:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":35,"nodeType":"ExpressionStatement","src":"2505:16:0"},{"id":36,"nodeType":"PlaceholderStatement","src":"2531:1:0"}]},"documentation":{"id":28,"nodeType":"StructuredDocumentation","src":"2083:375:0","text":" @dev Modifier that checks that an account has a specific role. Reverts\n with a standardized message including the required role.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n _Available since v4.1._"},"id":38,"name":"onlyRole","nameLocation":"2472:8:0","nodeType":"ModifierDefinition","parameters":{"id":31,"nodeType":"ParameterList","parameters":[{"constant":false,"id":30,"mutability":"mutable","name":"role","nameLocation":"2489:4:0","nodeType":"VariableDeclaration","scope":38,"src":"2481:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":29,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2481:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2480:14:0"},"src":"2463:76:0","virtual":false,"visibility":"internal"},{"baseFunctions":[2841],"body":{"id":59,"nodeType":"Block","src":"2697:111:0","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":57,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":52,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":47,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":41,"src":"2714:11:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":49,"name":"IAccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":388,"src":"2734:14:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessControl_$388_$","typeString":"type(contract IAccessControl)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IAccessControl_$388_$","typeString":"type(contract IAccessControl)"}],"id":48,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2729:4:0","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":50,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2729:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IAccessControl_$388","typeString":"type(contract IAccessControl)"}},"id":51,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2750:11:0","memberName":"interfaceId","nodeType":"MemberAccess","src":"2729:32:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"2714:47:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":55,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":41,"src":"2789:11:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":53,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2765:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_AccessControl_$315_$","typeString":"type(contract super AccessControl)"}},"id":54,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2771:17:0","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":2841,"src":"2765:23:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":56,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2765:36:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2714:87:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":46,"id":58,"nodeType":"Return","src":"2707:94:0"}]},"documentation":{"id":39,"nodeType":"StructuredDocumentation","src":"2545:56:0","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":60,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"2615:17:0","nodeType":"FunctionDefinition","overrides":{"id":43,"nodeType":"OverrideSpecifier","overrides":[],"src":"2673:8:0"},"parameters":{"id":42,"nodeType":"ParameterList","parameters":[{"constant":false,"id":41,"mutability":"mutable","name":"interfaceId","nameLocation":"2640:11:0","nodeType":"VariableDeclaration","scope":60,"src":"2633:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":40,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2633:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2632:20:0"},"returnParameters":{"id":46,"nodeType":"ParameterList","parameters":[{"constant":false,"id":45,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":60,"src":"2691:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":44,"name":"bool","nodeType":"ElementaryTypeName","src":"2691:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2690:6:0"},"scope":315,"src":"2606:202:0","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[355],"body":{"id":78,"nodeType":"Block","src":"2987:53:0","statements":[{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":71,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24,"src":"3004:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":73,"indexExpression":{"id":72,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":63,"src":"3011:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3004:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$19_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":74,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3017:7:0","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":16,"src":"3004:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":76,"indexExpression":{"id":75,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":65,"src":"3025:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3004:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":70,"id":77,"nodeType":"Return","src":"2997:36:0"}]},"documentation":{"id":61,"nodeType":"StructuredDocumentation","src":"2814:76:0","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":79,"implemented":true,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"2904:7:0","nodeType":"FunctionDefinition","overrides":{"id":67,"nodeType":"OverrideSpecifier","overrides":[],"src":"2963:8:0"},"parameters":{"id":66,"nodeType":"ParameterList","parameters":[{"constant":false,"id":63,"mutability":"mutable","name":"role","nameLocation":"2920:4:0","nodeType":"VariableDeclaration","scope":79,"src":"2912:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":62,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2912:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":65,"mutability":"mutable","name":"account","nameLocation":"2934:7:0","nodeType":"VariableDeclaration","scope":79,"src":"2926:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":64,"name":"address","nodeType":"ElementaryTypeName","src":"2926:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2911:31:0"},"returnParameters":{"id":70,"nodeType":"ParameterList","parameters":[{"constant":false,"id":69,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":79,"src":"2981:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":68,"name":"bool","nodeType":"ElementaryTypeName","src":"2981:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2980:6:0"},"scope":315,"src":"2895:145:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":91,"nodeType":"Block","src":"3390:47:0","statements":[{"expression":{"arguments":[{"id":86,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":82,"src":"3411:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":87,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2131,"src":"3417:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":88,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3417:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":85,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[92,131],"referencedDeclaration":131,"src":"3400:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) view"}},"id":89,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3400:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":90,"nodeType":"ExpressionStatement","src":"3400:30:0"}]},"documentation":{"id":80,"nodeType":"StructuredDocumentation","src":"3046:283:0","text":" @dev Revert with a standard message if `_msgSender()` is missing `role`.\n Overriding this function changes the behavior of the {onlyRole} modifier.\n Format of the revert message is described in {_checkRole}.\n _Available since v4.6._"},"id":92,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"3343:10:0","nodeType":"FunctionDefinition","parameters":{"id":83,"nodeType":"ParameterList","parameters":[{"constant":false,"id":82,"mutability":"mutable","name":"role","nameLocation":"3362:4:0","nodeType":"VariableDeclaration","scope":92,"src":"3354:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":81,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3354:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3353:14:0"},"returnParameters":{"id":84,"nodeType":"ParameterList","parameters":[],"src":"3390:0:0"},"scope":315,"src":"3334:103:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":130,"nodeType":"Block","src":"3791:406:0","statements":[{"condition":{"id":104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3805:23:0","subExpression":{"arguments":[{"id":101,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":95,"src":"3814:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":102,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":97,"src":"3820:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":100,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":79,"src":"3806:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":103,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3806:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":129,"nodeType":"IfStatement","src":"3801:390:0","trueBody":{"id":128,"nodeType":"Block","src":"3830:361:0","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"416363657373436f6e74726f6c3a206163636f756e7420","id":110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3938:25:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","typeString":"literal_string \"AccessControl: account \""},"value":"AccessControl: account "},{"arguments":[{"id":113,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":97,"src":"4009:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":111,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2316,"src":"3989:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$2316_$","typeString":"type(library Strings)"}},"id":112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3997:11:0","memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":2315,"src":"3989:19:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_string_memory_ptr_$","typeString":"function (address) pure returns (string memory)"}},"id":114,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3989:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"206973206d697373696e6720726f6c6520","id":115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4043:19:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","typeString":"literal_string \" is missing role \""},"value":" is missing role "},{"arguments":[{"arguments":[{"id":120,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":95,"src":"4116:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":119,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4108:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":118,"name":"uint256","nodeType":"ElementaryTypeName","src":"4108:7:0","typeDescriptions":{}}},"id":121,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4108:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"3332","id":122,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4123:2:0","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"}],"expression":{"id":116,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2316,"src":"4088:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$2316_$","typeString":"type(library Strings)"}},"id":117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4096:11:0","memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":2295,"src":"4088:19:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4088:38:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","typeString":"literal_string \"AccessControl: account \""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","typeString":"literal_string \" is missing role \""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":108,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3896:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":109,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3900:12:0","memberName":"encodePacked","nodeType":"MemberAccess","src":"3896:16:0","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":124,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3896:252:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":107,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3868:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":106,"name":"string","nodeType":"ElementaryTypeName","src":"3868:6:0","typeDescriptions":{}}},"id":125,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3868:298:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":105,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"3844:6:0","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":126,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3844:336:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":127,"nodeType":"ExpressionStatement","src":"3844:336:0"}]}}]},"documentation":{"id":93,"nodeType":"StructuredDocumentation","src":"3443:270:0","text":" @dev Revert with a standard message if `account` is missing `role`.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/"},"id":131,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"3727:10:0","nodeType":"FunctionDefinition","parameters":{"id":98,"nodeType":"ParameterList","parameters":[{"constant":false,"id":95,"mutability":"mutable","name":"role","nameLocation":"3746:4:0","nodeType":"VariableDeclaration","scope":131,"src":"3738:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":94,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3738:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":97,"mutability":"mutable","name":"account","nameLocation":"3760:7:0","nodeType":"VariableDeclaration","scope":131,"src":"3752:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":96,"name":"address","nodeType":"ElementaryTypeName","src":"3752:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3737:31:0"},"returnParameters":{"id":99,"nodeType":"ParameterList","parameters":[],"src":"3791:0:0"},"scope":315,"src":"3718:479:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[363],"body":{"id":145,"nodeType":"Block","src":"4461:46:0","statements":[{"expression":{"expression":{"baseExpression":{"id":140,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24,"src":"4478:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":142,"indexExpression":{"id":141,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":134,"src":"4485:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4478:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$19_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":143,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4491:9:0","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":18,"src":"4478:22:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":139,"id":144,"nodeType":"Return","src":"4471:29:0"}]},"documentation":{"id":132,"nodeType":"StructuredDocumentation","src":"4203:170:0","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {_setRoleAdmin}."},"functionSelector":"248a9ca3","id":146,"implemented":true,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"4387:12:0","nodeType":"FunctionDefinition","overrides":{"id":136,"nodeType":"OverrideSpecifier","overrides":[],"src":"4434:8:0"},"parameters":{"id":135,"nodeType":"ParameterList","parameters":[{"constant":false,"id":134,"mutability":"mutable","name":"role","nameLocation":"4408:4:0","nodeType":"VariableDeclaration","scope":146,"src":"4400:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":133,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4400:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4399:14:0"},"returnParameters":{"id":139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":138,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":146,"src":"4452:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":137,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4452:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4451:9:0"},"scope":315,"src":"4378:129:0","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[371],"body":{"id":165,"nodeType":"Block","src":"4906:42:0","statements":[{"expression":{"arguments":[{"id":161,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":149,"src":"4927:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":162,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":151,"src":"4933:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":160,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":283,"src":"4916:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":163,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4916:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":164,"nodeType":"ExpressionStatement","src":"4916:25:0"}]},"documentation":{"id":147,"nodeType":"StructuredDocumentation","src":"4513:285:0","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleGranted} event."},"functionSelector":"2f2ff15d","id":166,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":156,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":149,"src":"4899:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":155,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"4886:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4886:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":158,"kind":"modifierInvocation","modifierName":{"id":154,"name":"onlyRole","nameLocations":["4877:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":38,"src":"4877:8:0"},"nodeType":"ModifierInvocation","src":"4877:28:0"}],"name":"grantRole","nameLocation":"4812:9:0","nodeType":"FunctionDefinition","overrides":{"id":153,"nodeType":"OverrideSpecifier","overrides":[],"src":"4868:8:0"},"parameters":{"id":152,"nodeType":"ParameterList","parameters":[{"constant":false,"id":149,"mutability":"mutable","name":"role","nameLocation":"4830:4:0","nodeType":"VariableDeclaration","scope":166,"src":"4822:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":148,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4822:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":151,"mutability":"mutable","name":"account","nameLocation":"4844:7:0","nodeType":"VariableDeclaration","scope":166,"src":"4836:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":150,"name":"address","nodeType":"ElementaryTypeName","src":"4836:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4821:31:0"},"returnParameters":{"id":159,"nodeType":"ParameterList","parameters":[],"src":"4906:0:0"},"scope":315,"src":"4803:145:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[379],"body":{"id":185,"nodeType":"Block","src":"5332:43:0","statements":[{"expression":{"arguments":[{"id":181,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":169,"src":"5354:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":182,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":171,"src":"5360:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":180,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":314,"src":"5342:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":183,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5342:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":184,"nodeType":"ExpressionStatement","src":"5342:26:0"}]},"documentation":{"id":167,"nodeType":"StructuredDocumentation","src":"4954:269:0","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleRevoked} event."},"functionSelector":"d547741f","id":186,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":176,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":169,"src":"5325:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":175,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"5312:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":177,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5312:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":178,"kind":"modifierInvocation","modifierName":{"id":174,"name":"onlyRole","nameLocations":["5303:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":38,"src":"5303:8:0"},"nodeType":"ModifierInvocation","src":"5303:28:0"}],"name":"revokeRole","nameLocation":"5237:10:0","nodeType":"FunctionDefinition","overrides":{"id":173,"nodeType":"OverrideSpecifier","overrides":[],"src":"5294:8:0"},"parameters":{"id":172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":169,"mutability":"mutable","name":"role","nameLocation":"5256:4:0","nodeType":"VariableDeclaration","scope":186,"src":"5248:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":168,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5248:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":171,"mutability":"mutable","name":"account","nameLocation":"5270:7:0","nodeType":"VariableDeclaration","scope":186,"src":"5262:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":170,"name":"address","nodeType":"ElementaryTypeName","src":"5262:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5247:31:0"},"returnParameters":{"id":179,"nodeType":"ParameterList","parameters":[],"src":"5332:0:0"},"scope":315,"src":"5228:147:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[387],"body":{"id":208,"nodeType":"Block","src":"5989:137:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":196,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":191,"src":"6007:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":197,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2131,"src":"6018:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6018:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6007:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66","id":200,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6032:49:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","typeString":"literal_string \"AccessControl: can only renounce roles for self\""},"value":"AccessControl: can only renounce roles for self"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","typeString":"literal_string \"AccessControl: can only renounce roles for self\""}],"id":195,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5999:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5999:83:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":202,"nodeType":"ExpressionStatement","src":"5999:83:0"},{"expression":{"arguments":[{"id":204,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"6105:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":205,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":191,"src":"6111:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":203,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":314,"src":"6093:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6093:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":207,"nodeType":"ExpressionStatement","src":"6093:26:0"}]},"documentation":{"id":187,"nodeType":"StructuredDocumentation","src":"5381:526:0","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been revoked `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`.\n May emit a {RoleRevoked} event."},"functionSelector":"36568abe","id":209,"implemented":true,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"5921:12:0","nodeType":"FunctionDefinition","overrides":{"id":193,"nodeType":"OverrideSpecifier","overrides":[],"src":"5980:8:0"},"parameters":{"id":192,"nodeType":"ParameterList","parameters":[{"constant":false,"id":189,"mutability":"mutable","name":"role","nameLocation":"5942:4:0","nodeType":"VariableDeclaration","scope":209,"src":"5934:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":188,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5934:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":191,"mutability":"mutable","name":"account","nameLocation":"5956:7:0","nodeType":"VariableDeclaration","scope":209,"src":"5948:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":190,"name":"address","nodeType":"ElementaryTypeName","src":"5948:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5933:31:0"},"returnParameters":{"id":194,"nodeType":"ParameterList","parameters":[],"src":"5989:0:0"},"scope":315,"src":"5912:214:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":222,"nodeType":"Block","src":"6879:42:0","statements":[{"expression":{"arguments":[{"id":218,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":212,"src":"6900:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":219,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":214,"src":"6906:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":217,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":283,"src":"6889:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":220,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6889:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":221,"nodeType":"ExpressionStatement","src":"6889:25:0"}]},"documentation":{"id":210,"nodeType":"StructuredDocumentation","src":"6132:674:0","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event. Note that unlike {grantRole}, this function doesn't perform any\n checks on the calling account.\n May emit a {RoleGranted} event.\n [WARNING]\n ====\n This function should only be called from the constructor when setting\n up the initial roles for the system.\n Using this function in any other way is effectively circumventing the admin\n system imposed by {AccessControl}.\n ====\n NOTE: This function is deprecated in favor of {_grantRole}."},"id":223,"implemented":true,"kind":"function","modifiers":[],"name":"_setupRole","nameLocation":"6820:10:0","nodeType":"FunctionDefinition","parameters":{"id":215,"nodeType":"ParameterList","parameters":[{"constant":false,"id":212,"mutability":"mutable","name":"role","nameLocation":"6839:4:0","nodeType":"VariableDeclaration","scope":223,"src":"6831:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":211,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6831:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":214,"mutability":"mutable","name":"account","nameLocation":"6853:7:0","nodeType":"VariableDeclaration","scope":223,"src":"6845:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":213,"name":"address","nodeType":"ElementaryTypeName","src":"6845:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6830:31:0"},"returnParameters":{"id":216,"nodeType":"ParameterList","parameters":[],"src":"6879:0:0"},"scope":315,"src":"6811:110:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":250,"nodeType":"Block","src":"7119:174:0","statements":[{"assignments":[232],"declarations":[{"constant":false,"id":232,"mutability":"mutable","name":"previousAdminRole","nameLocation":"7137:17:0","nodeType":"VariableDeclaration","scope":250,"src":"7129:25:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":231,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7129:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":236,"initialValue":{"arguments":[{"id":234,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":226,"src":"7170:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":233,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"7157:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":235,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7157:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"7129:46:0"},{"expression":{"id":242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":237,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24,"src":"7185:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":239,"indexExpression":{"id":238,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":226,"src":"7192:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7185:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$19_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":240,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7198:9:0","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":18,"src":"7185:22:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":241,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":228,"src":"7210:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"7185:34:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":243,"nodeType":"ExpressionStatement","src":"7185:34:0"},{"eventCall":{"arguments":[{"id":245,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":226,"src":"7251:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":246,"name":"previousAdminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":232,"src":"7257:17:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":247,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":228,"src":"7276:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":244,"name":"RoleAdminChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"7234:16:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32,bytes32)"}},"id":248,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7234:52:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":249,"nodeType":"EmitStatement","src":"7229:57:0"}]},"documentation":{"id":224,"nodeType":"StructuredDocumentation","src":"6927:114:0","text":" @dev Sets `adminRole` as ``role``'s admin role.\n Emits a {RoleAdminChanged} event."},"id":251,"implemented":true,"kind":"function","modifiers":[],"name":"_setRoleAdmin","nameLocation":"7055:13:0","nodeType":"FunctionDefinition","parameters":{"id":229,"nodeType":"ParameterList","parameters":[{"constant":false,"id":226,"mutability":"mutable","name":"role","nameLocation":"7077:4:0","nodeType":"VariableDeclaration","scope":251,"src":"7069:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":225,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7069:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":228,"mutability":"mutable","name":"adminRole","nameLocation":"7091:9:0","nodeType":"VariableDeclaration","scope":251,"src":"7083:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":227,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7083:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7068:33:0"},"returnParameters":{"id":230,"nodeType":"ParameterList","parameters":[],"src":"7119:0:0"},"scope":315,"src":"7046:247:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":282,"nodeType":"Block","src":"7529:165:0","statements":[{"condition":{"id":263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7543:23:0","subExpression":{"arguments":[{"id":260,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"7552:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":261,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"7558:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":259,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":79,"src":"7544:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":262,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7544:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":281,"nodeType":"IfStatement","src":"7539:149:0","trueBody":{"id":280,"nodeType":"Block","src":"7568:120:0","statements":[{"expression":{"id":271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":264,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24,"src":"7582:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":266,"indexExpression":{"id":265,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"7589:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7582:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$19_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":267,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7595:7:0","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":16,"src":"7582:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":269,"indexExpression":{"id":268,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"7603:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7582:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":270,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7614:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"7582:36:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":272,"nodeType":"ExpressionStatement","src":"7582:36:0"},{"eventCall":{"arguments":[{"id":274,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"7649:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":275,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"7655:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":276,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2131,"src":"7664:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7664:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":273,"name":"RoleGranted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":336,"src":"7637:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7637:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":279,"nodeType":"EmitStatement","src":"7632:45:0"}]}}]},"documentation":{"id":252,"nodeType":"StructuredDocumentation","src":"7299:157:0","text":" @dev Grants `role` to `account`.\n Internal function without access restriction.\n May emit a {RoleGranted} event."},"id":283,"implemented":true,"kind":"function","modifiers":[],"name":"_grantRole","nameLocation":"7470:10:0","nodeType":"FunctionDefinition","parameters":{"id":257,"nodeType":"ParameterList","parameters":[{"constant":false,"id":254,"mutability":"mutable","name":"role","nameLocation":"7489:4:0","nodeType":"VariableDeclaration","scope":283,"src":"7481:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":253,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7481:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":256,"mutability":"mutable","name":"account","nameLocation":"7503:7:0","nodeType":"VariableDeclaration","scope":283,"src":"7495:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":255,"name":"address","nodeType":"ElementaryTypeName","src":"7495:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7480:31:0"},"returnParameters":{"id":258,"nodeType":"ParameterList","parameters":[],"src":"7529:0:0"},"scope":315,"src":"7461:233:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":313,"nodeType":"Block","src":"7934:165:0","statements":[{"condition":{"arguments":[{"id":292,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":286,"src":"7956:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":293,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":288,"src":"7962:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":291,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":79,"src":"7948:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7948:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":312,"nodeType":"IfStatement","src":"7944:149:0","trueBody":{"id":311,"nodeType":"Block","src":"7972:121:0","statements":[{"expression":{"id":302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":295,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24,"src":"7986:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":297,"indexExpression":{"id":296,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":286,"src":"7993:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7986:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$19_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":298,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7999:7:0","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":16,"src":"7986:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":300,"indexExpression":{"id":299,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":288,"src":"8007:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7986:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":301,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8018:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"7986:37:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":303,"nodeType":"ExpressionStatement","src":"7986:37:0"},{"eventCall":{"arguments":[{"id":305,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":286,"src":"8054:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":306,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":288,"src":"8060:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":307,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2131,"src":"8069:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":308,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8069:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":304,"name":"RoleRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":345,"src":"8042:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":309,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8042:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":310,"nodeType":"EmitStatement","src":"8037:45:0"}]}}]},"documentation":{"id":284,"nodeType":"StructuredDocumentation","src":"7700:160:0","text":" @dev Revokes `role` from `account`.\n Internal function without access restriction.\n May emit a {RoleRevoked} event."},"id":314,"implemented":true,"kind":"function","modifiers":[],"name":"_revokeRole","nameLocation":"7874:11:0","nodeType":"FunctionDefinition","parameters":{"id":289,"nodeType":"ParameterList","parameters":[{"constant":false,"id":286,"mutability":"mutable","name":"role","nameLocation":"7894:4:0","nodeType":"VariableDeclaration","scope":314,"src":"7886:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":285,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7886:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":288,"mutability":"mutable","name":"account","nameLocation":"7908:7:0","nodeType":"VariableDeclaration","scope":314,"src":"7900:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":287,"name":"address","nodeType":"ElementaryTypeName","src":"7900:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7885:31:0"},"returnParameters":{"id":290,"nodeType":"ParameterList","parameters":[],"src":"7934:0:0"},"scope":315,"src":"7865:234:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":316,"src":"1806:6295:0","usedErrors":[]}],"src":"108:7994:0"},"id":0},"@openzeppelin/contracts/access/IAccessControl.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/IAccessControl.sol","exportedSymbols":{"IAccessControl":[388]},"id":389,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":317,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"94:23:1"},{"abstract":false,"baseContracts":[],"canonicalName":"IAccessControl","contractDependencies":[],"contractKind":"interface","documentation":{"id":318,"nodeType":"StructuredDocumentation","src":"119:89:1","text":" @dev External interface of AccessControl declared to support ERC165 detection."},"fullyImplemented":false,"id":388,"linearizedBaseContracts":[388],"name":"IAccessControl","nameLocation":"219:14:1","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":319,"nodeType":"StructuredDocumentation","src":"240:292:1","text":" @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n {RoleAdminChanged} not being emitted signaling this.\n _Available since v3.1._"},"eventSelector":"bd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff","id":327,"name":"RoleAdminChanged","nameLocation":"543:16:1","nodeType":"EventDefinition","parameters":{"id":326,"nodeType":"ParameterList","parameters":[{"constant":false,"id":321,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"576:4:1","nodeType":"VariableDeclaration","scope":327,"src":"560:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":320,"name":"bytes32","nodeType":"ElementaryTypeName","src":"560:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":323,"indexed":true,"mutability":"mutable","name":"previousAdminRole","nameLocation":"598:17:1","nodeType":"VariableDeclaration","scope":327,"src":"582:33:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":322,"name":"bytes32","nodeType":"ElementaryTypeName","src":"582:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":325,"indexed":true,"mutability":"mutable","name":"newAdminRole","nameLocation":"633:12:1","nodeType":"VariableDeclaration","scope":327,"src":"617:28:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":324,"name":"bytes32","nodeType":"ElementaryTypeName","src":"617:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"559:87:1"},"src":"537:110:1"},{"anonymous":false,"documentation":{"id":328,"nodeType":"StructuredDocumentation","src":"653:212:1","text":" @dev Emitted when `account` is granted `role`.\n `sender` is the account that originated the contract call, an admin role\n bearer except when using {AccessControl-_setupRole}."},"eventSelector":"2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","id":336,"name":"RoleGranted","nameLocation":"876:11:1","nodeType":"EventDefinition","parameters":{"id":335,"nodeType":"ParameterList","parameters":[{"constant":false,"id":330,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"904:4:1","nodeType":"VariableDeclaration","scope":336,"src":"888:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":329,"name":"bytes32","nodeType":"ElementaryTypeName","src":"888:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":332,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"926:7:1","nodeType":"VariableDeclaration","scope":336,"src":"910:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":331,"name":"address","nodeType":"ElementaryTypeName","src":"910:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":334,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"951:6:1","nodeType":"VariableDeclaration","scope":336,"src":"935:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":333,"name":"address","nodeType":"ElementaryTypeName","src":"935:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"887:71:1"},"src":"870:89:1"},{"anonymous":false,"documentation":{"id":337,"nodeType":"StructuredDocumentation","src":"965:275:1","text":" @dev Emitted when `account` is revoked `role`.\n `sender` is the account that originated the contract call:\n   - if using `revokeRole`, it is the admin role bearer\n   - if using `renounceRole`, it is the role bearer (i.e. `account`)"},"eventSelector":"f6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b","id":345,"name":"RoleRevoked","nameLocation":"1251:11:1","nodeType":"EventDefinition","parameters":{"id":344,"nodeType":"ParameterList","parameters":[{"constant":false,"id":339,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"1279:4:1","nodeType":"VariableDeclaration","scope":345,"src":"1263:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":338,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1263:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":341,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1301:7:1","nodeType":"VariableDeclaration","scope":345,"src":"1285:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":340,"name":"address","nodeType":"ElementaryTypeName","src":"1285:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":343,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1326:6:1","nodeType":"VariableDeclaration","scope":345,"src":"1310:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":342,"name":"address","nodeType":"ElementaryTypeName","src":"1310:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1262:71:1"},"src":"1245:89:1"},{"documentation":{"id":346,"nodeType":"StructuredDocumentation","src":"1340:76:1","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":355,"implemented":false,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"1430:7:1","nodeType":"FunctionDefinition","parameters":{"id":351,"nodeType":"ParameterList","parameters":[{"constant":false,"id":348,"mutability":"mutable","name":"role","nameLocation":"1446:4:1","nodeType":"VariableDeclaration","scope":355,"src":"1438:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":347,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1438:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":350,"mutability":"mutable","name":"account","nameLocation":"1460:7:1","nodeType":"VariableDeclaration","scope":355,"src":"1452:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":349,"name":"address","nodeType":"ElementaryTypeName","src":"1452:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1437:31:1"},"returnParameters":{"id":354,"nodeType":"ParameterList","parameters":[{"constant":false,"id":353,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":355,"src":"1492:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":352,"name":"bool","nodeType":"ElementaryTypeName","src":"1492:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1491:6:1"},"scope":388,"src":"1421:77:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":356,"nodeType":"StructuredDocumentation","src":"1504:184:1","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {AccessControl-_setRoleAdmin}."},"functionSelector":"248a9ca3","id":363,"implemented":false,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"1702:12:1","nodeType":"FunctionDefinition","parameters":{"id":359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":358,"mutability":"mutable","name":"role","nameLocation":"1723:4:1","nodeType":"VariableDeclaration","scope":363,"src":"1715:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":357,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1715:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1714:14:1"},"returnParameters":{"id":362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":361,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":363,"src":"1752:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":360,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1752:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1751:9:1"},"scope":388,"src":"1693:68:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":364,"nodeType":"StructuredDocumentation","src":"1767:239:1","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"2f2ff15d","id":371,"implemented":false,"kind":"function","modifiers":[],"name":"grantRole","nameLocation":"2020:9:1","nodeType":"FunctionDefinition","parameters":{"id":369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":366,"mutability":"mutable","name":"role","nameLocation":"2038:4:1","nodeType":"VariableDeclaration","scope":371,"src":"2030:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":365,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2030:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":368,"mutability":"mutable","name":"account","nameLocation":"2052:7:1","nodeType":"VariableDeclaration","scope":371,"src":"2044:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":367,"name":"address","nodeType":"ElementaryTypeName","src":"2044:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2029:31:1"},"returnParameters":{"id":370,"nodeType":"ParameterList","parameters":[],"src":"2069:0:1"},"scope":388,"src":"2011:59:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":372,"nodeType":"StructuredDocumentation","src":"2076:223:1","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"d547741f","id":379,"implemented":false,"kind":"function","modifiers":[],"name":"revokeRole","nameLocation":"2313:10:1","nodeType":"FunctionDefinition","parameters":{"id":377,"nodeType":"ParameterList","parameters":[{"constant":false,"id":374,"mutability":"mutable","name":"role","nameLocation":"2332:4:1","nodeType":"VariableDeclaration","scope":379,"src":"2324:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":373,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2324:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":376,"mutability":"mutable","name":"account","nameLocation":"2346:7:1","nodeType":"VariableDeclaration","scope":379,"src":"2338:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":375,"name":"address","nodeType":"ElementaryTypeName","src":"2338:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2323:31:1"},"returnParameters":{"id":378,"nodeType":"ParameterList","parameters":[],"src":"2363:0:1"},"scope":388,"src":"2304:60:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":380,"nodeType":"StructuredDocumentation","src":"2370:480:1","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been granted `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`."},"functionSelector":"36568abe","id":387,"implemented":false,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"2864:12:1","nodeType":"FunctionDefinition","parameters":{"id":385,"nodeType":"ParameterList","parameters":[{"constant":false,"id":382,"mutability":"mutable","name":"role","nameLocation":"2885:4:1","nodeType":"VariableDeclaration","scope":387,"src":"2877:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":381,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2877:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":384,"mutability":"mutable","name":"account","nameLocation":"2899:7:1","nodeType":"VariableDeclaration","scope":387,"src":"2891:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":383,"name":"address","nodeType":"ElementaryTypeName","src":"2891:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2876:31:1"},"returnParameters":{"id":386,"nodeType":"ParameterList","parameters":[],"src":"2916:0:1"},"scope":388,"src":"2855:62:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":389,"src":"209:2710:1","usedErrors":[]}],"src":"94:2826:1"},"id":1},"@openzeppelin/contracts/token/ERC1155/ERC1155.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC1155/ERC1155.sol","exportedSymbols":{"Address":[2119],"Context":[2141],"ERC1155":[1611],"ERC165":[2842],"IERC1155":[1733],"IERC1155MetadataURI":[1789],"IERC1155Receiver":[1774],"IERC165":[2854]},"id":1612,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":390,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"109:23:2"},{"absolutePath":"@openzeppelin/contracts/token/ERC1155/IERC1155.sol","file":"./IERC1155.sol","id":391,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1612,"sourceUnit":1734,"src":"134:24:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol","file":"./IERC1155Receiver.sol","id":392,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1612,"sourceUnit":1775,"src":"159:32:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol","file":"./extensions/IERC1155MetadataURI.sol","id":393,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1612,"sourceUnit":1790,"src":"192:46:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../utils/Address.sol","id":394,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1612,"sourceUnit":2120,"src":"239:33:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../utils/Context.sol","id":395,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1612,"sourceUnit":2142,"src":"273:33:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"../../utils/introspection/ERC165.sol","id":396,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1612,"sourceUnit":2843,"src":"307:46:2","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":398,"name":"Context","nameLocations":["590:7:2"],"nodeType":"IdentifierPath","referencedDeclaration":2141,"src":"590:7:2"},"id":399,"nodeType":"InheritanceSpecifier","src":"590:7:2"},{"baseName":{"id":400,"name":"ERC165","nameLocations":["599:6:2"],"nodeType":"IdentifierPath","referencedDeclaration":2842,"src":"599:6:2"},"id":401,"nodeType":"InheritanceSpecifier","src":"599:6:2"},{"baseName":{"id":402,"name":"IERC1155","nameLocations":["607:8:2"],"nodeType":"IdentifierPath","referencedDeclaration":1733,"src":"607:8:2"},"id":403,"nodeType":"InheritanceSpecifier","src":"607:8:2"},{"baseName":{"id":404,"name":"IERC1155MetadataURI","nameLocations":["617:19:2"],"nodeType":"IdentifierPath","referencedDeclaration":1789,"src":"617:19:2"},"id":405,"nodeType":"InheritanceSpecifier","src":"617:19:2"}],"canonicalName":"ERC1155","contractDependencies":[],"contractKind":"contract","documentation":{"id":397,"nodeType":"StructuredDocumentation","src":"355:214:2","text":" @dev Implementation of the basic standard multi-token.\n See https://eips.ethereum.org/EIPS/eip-1155\n Originally based on code by Enjin: https://github.com/enjin/erc-1155\n _Available since v3.1._"},"fullyImplemented":true,"id":1611,"linearizedBaseContracts":[1611,1789,1733,2842,2854,2141],"name":"ERC1155","nameLocation":"579:7:2","nodeType":"ContractDefinition","nodes":[{"global":false,"id":408,"libraryName":{"id":406,"name":"Address","nameLocations":["649:7:2"],"nodeType":"IdentifierPath","referencedDeclaration":2119,"src":"649:7:2"},"nodeType":"UsingForDirective","src":"643:26:2","typeName":{"id":407,"name":"address","nodeType":"ElementaryTypeName","src":"661:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"constant":false,"id":414,"mutability":"mutable","name":"_balances","nameLocation":"780:9:2","nodeType":"VariableDeclaration","scope":1611,"src":"724:65:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"},"typeName":{"id":413,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":409,"name":"uint256","nodeType":"ElementaryTypeName","src":"732:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"724:47:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":412,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":410,"name":"address","nodeType":"ElementaryTypeName","src":"751:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"743:27:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":411,"name":"uint256","nodeType":"ElementaryTypeName","src":"762:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"constant":false,"id":420,"mutability":"mutable","name":"_operatorApprovals","nameLocation":"899:18:2","nodeType":"VariableDeclaration","scope":1611,"src":"846:71:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":419,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":415,"name":"address","nodeType":"ElementaryTypeName","src":"854:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"846:44:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":418,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":416,"name":"address","nodeType":"ElementaryTypeName","src":"873:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"865:24:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":417,"name":"bool","nodeType":"ElementaryTypeName","src":"884:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"private"},{"constant":false,"id":422,"mutability":"mutable","name":"_uri","nameLocation":"1053:4:2","nodeType":"VariableDeclaration","scope":1611,"src":"1038:19:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":421,"name":"string","nodeType":"ElementaryTypeName","src":"1038:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"body":{"id":432,"nodeType":"Block","src":"1139:30:2","statements":[{"expression":{"arguments":[{"id":429,"name":"uri_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":425,"src":"1157:4:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":428,"name":"_setURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":944,"src":"1149:7:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory)"}},"id":430,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1149:13:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":431,"nodeType":"ExpressionStatement","src":"1149:13:2"}]},"documentation":{"id":423,"nodeType":"StructuredDocumentation","src":"1064:38:2","text":" @dev See {_setURI}."},"id":433,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":426,"nodeType":"ParameterList","parameters":[{"constant":false,"id":425,"mutability":"mutable","name":"uri_","nameLocation":"1133:4:2","nodeType":"VariableDeclaration","scope":433,"src":"1119:18:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":424,"name":"string","nodeType":"ElementaryTypeName","src":"1119:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1118:20:2"},"returnParameters":{"id":427,"nodeType":"ParameterList","parameters":[],"src":"1139:0:2"},"scope":1611,"src":"1107:62:2","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[2841,2853],"body":{"id":463,"nodeType":"Block","src":"1344:197:2","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":456,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":444,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":436,"src":"1373:11:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":446,"name":"IERC1155","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1733,"src":"1393:8:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155_$1733_$","typeString":"type(contract IERC1155)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC1155_$1733_$","typeString":"type(contract IERC1155)"}],"id":445,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1388:4:2","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":447,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1388:14:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC1155_$1733","typeString":"type(contract IERC1155)"}},"id":448,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1403:11:2","memberName":"interfaceId","nodeType":"MemberAccess","src":"1388:26:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1373:41:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":450,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":436,"src":"1430:11:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":452,"name":"IERC1155MetadataURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1789,"src":"1450:19:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155MetadataURI_$1789_$","typeString":"type(contract IERC1155MetadataURI)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC1155MetadataURI_$1789_$","typeString":"type(contract IERC1155MetadataURI)"}],"id":451,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1445:4:2","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":453,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1445:25:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC1155MetadataURI_$1789","typeString":"type(contract IERC1155MetadataURI)"}},"id":454,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1471:11:2","memberName":"interfaceId","nodeType":"MemberAccess","src":"1445:37:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1430:52:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1373:109:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":459,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":436,"src":"1522:11:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":457,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1498:5:2","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC1155_$1611_$","typeString":"type(contract super ERC1155)"}},"id":458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1504:17:2","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":2841,"src":"1498:23:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":460,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1498:36:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1373:161:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":443,"id":462,"nodeType":"Return","src":"1354:180:2"}]},"documentation":{"id":434,"nodeType":"StructuredDocumentation","src":"1175:56:2","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":464,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1245:17:2","nodeType":"FunctionDefinition","overrides":{"id":440,"nodeType":"OverrideSpecifier","overrides":[{"id":438,"name":"ERC165","nameLocations":["1312:6:2"],"nodeType":"IdentifierPath","referencedDeclaration":2842,"src":"1312:6:2"},{"id":439,"name":"IERC165","nameLocations":["1320:7:2"],"nodeType":"IdentifierPath","referencedDeclaration":2854,"src":"1320:7:2"}],"src":"1303:25:2"},"parameters":{"id":437,"nodeType":"ParameterList","parameters":[{"constant":false,"id":436,"mutability":"mutable","name":"interfaceId","nameLocation":"1270:11:2","nodeType":"VariableDeclaration","scope":464,"src":"1263:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":435,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1263:6:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1262:20:2"},"returnParameters":{"id":443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":442,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":464,"src":"1338:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":441,"name":"bool","nodeType":"ElementaryTypeName","src":"1338:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1337:6:2"},"scope":1611,"src":"1236:305:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1788],"body":{"id":475,"nodeType":"Block","src":"2015:28:2","statements":[{"expression":{"id":473,"name":"_uri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":422,"src":"2032:4:2","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":472,"id":474,"nodeType":"Return","src":"2025:11:2"}]},"documentation":{"id":465,"nodeType":"StructuredDocumentation","src":"1547:388:2","text":" @dev See {IERC1155MetadataURI-uri}.\n This implementation returns the same URI for *all* token types. It relies\n on the token type ID substitution mechanism\n https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n Clients calling this function must replace the `\\{id\\}` substring with the\n actual token type ID."},"functionSelector":"0e89341c","id":476,"implemented":true,"kind":"function","modifiers":[],"name":"uri","nameLocation":"1949:3:2","nodeType":"FunctionDefinition","overrides":{"id":469,"nodeType":"OverrideSpecifier","overrides":[],"src":"1982:8:2"},"parameters":{"id":468,"nodeType":"ParameterList","parameters":[{"constant":false,"id":467,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":476,"src":"1953:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":466,"name":"uint256","nodeType":"ElementaryTypeName","src":"1953:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1952:9:2"},"returnParameters":{"id":472,"nodeType":"ParameterList","parameters":[{"constant":false,"id":471,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":476,"src":"2000:13:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":470,"name":"string","nodeType":"ElementaryTypeName","src":"2000:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1999:15:2"},"scope":1611,"src":"1940:103:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1671],"body":{"id":503,"nodeType":"Block","src":"2280:132:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":488,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":479,"src":"2298:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":491,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2317:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":490,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2309:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":489,"name":"address","nodeType":"ElementaryTypeName","src":"2309:7:2","typeDescriptions":{}}},"id":492,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2309:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2298:21:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2061646472657373207a65726f206973206e6f7420612076616c6964206f776e6572","id":494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2321:44:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad","typeString":"literal_string \"ERC1155: address zero is not a valid owner\""},"value":"ERC1155: address zero is not a valid owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad","typeString":"literal_string \"ERC1155: address zero is not a valid owner\""}],"id":487,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2290:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":495,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2290:76:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":496,"nodeType":"ExpressionStatement","src":"2290:76:2"},{"expression":{"baseExpression":{"baseExpression":{"id":497,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"2383:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":499,"indexExpression":{"id":498,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":481,"src":"2393:2:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2383:13:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":501,"indexExpression":{"id":500,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":479,"src":"2397:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2383:22:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":486,"id":502,"nodeType":"Return","src":"2376:29:2"}]},"documentation":{"id":477,"nodeType":"StructuredDocumentation","src":"2049:131:2","text":" @dev See {IERC1155-balanceOf}.\n Requirements:\n - `account` cannot be the zero address."},"functionSelector":"00fdd58e","id":504,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"2194:9:2","nodeType":"FunctionDefinition","overrides":{"id":483,"nodeType":"OverrideSpecifier","overrides":[],"src":"2253:8:2"},"parameters":{"id":482,"nodeType":"ParameterList","parameters":[{"constant":false,"id":479,"mutability":"mutable","name":"account","nameLocation":"2212:7:2","nodeType":"VariableDeclaration","scope":504,"src":"2204:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":478,"name":"address","nodeType":"ElementaryTypeName","src":"2204:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":481,"mutability":"mutable","name":"id","nameLocation":"2229:2:2","nodeType":"VariableDeclaration","scope":504,"src":"2221:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":480,"name":"uint256","nodeType":"ElementaryTypeName","src":"2221:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2203:29:2"},"returnParameters":{"id":486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":485,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":504,"src":"2271:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":484,"name":"uint256","nodeType":"ElementaryTypeName","src":"2271:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2270:9:2"},"scope":1611,"src":"2185:227:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1684],"body":{"id":567,"nodeType":"Block","src":"2742:335:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":519,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":508,"src":"2760:8:2","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2769:6:2","memberName":"length","nodeType":"MemberAccess","src":"2760:15:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":521,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":511,"src":"2779:3:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2783:6:2","memberName":"length","nodeType":"MemberAccess","src":"2779:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2760:29:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206163636f756e747320616e6420696473206c656e677468206d69736d61746368","id":524,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2791:43:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5","typeString":"literal_string \"ERC1155: accounts and ids length mismatch\""},"value":"ERC1155: accounts and ids length mismatch"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5","typeString":"literal_string \"ERC1155: accounts and ids length mismatch\""}],"id":518,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2752:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":525,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2752:83:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":526,"nodeType":"ExpressionStatement","src":"2752:83:2"},{"assignments":[531],"declarations":[{"constant":false,"id":531,"mutability":"mutable","name":"batchBalances","nameLocation":"2863:13:2","nodeType":"VariableDeclaration","scope":567,"src":"2846:30:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":529,"name":"uint256","nodeType":"ElementaryTypeName","src":"2846:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":530,"nodeType":"ArrayTypeName","src":"2846:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":538,"initialValue":{"arguments":[{"expression":{"id":535,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":508,"src":"2893:8:2","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2902:6:2","memberName":"length","nodeType":"MemberAccess","src":"2893:15:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":534,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2879:13:2","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":532,"name":"uint256","nodeType":"ElementaryTypeName","src":"2883:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":533,"nodeType":"ArrayTypeName","src":"2883:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":537,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2879:30:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"2846:63:2"},{"body":{"id":563,"nodeType":"Block","src":"2966:74:2","statements":[{"expression":{"id":561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":550,"name":"batchBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":531,"src":"2980:13:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":552,"indexExpression":{"id":551,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":540,"src":"2994:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2980:16:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":554,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":508,"src":"3009:8:2","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":556,"indexExpression":{"id":555,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":540,"src":"3018:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3009:11:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":557,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":511,"src":"3022:3:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":559,"indexExpression":{"id":558,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":540,"src":"3026:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3022:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":553,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":504,"src":"2999:9:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,uint256) view returns (uint256)"}},"id":560,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2999:30:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2980:49:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":562,"nodeType":"ExpressionStatement","src":"2980:49:2"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":543,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":540,"src":"2940:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":544,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":508,"src":"2944:8:2","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2953:6:2","memberName":"length","nodeType":"MemberAccess","src":"2944:15:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2940:19:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":564,"initializationExpression":{"assignments":[540],"declarations":[{"constant":false,"id":540,"mutability":"mutable","name":"i","nameLocation":"2933:1:2","nodeType":"VariableDeclaration","scope":564,"src":"2925:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":539,"name":"uint256","nodeType":"ElementaryTypeName","src":"2925:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":542,"initialValue":{"hexValue":"30","id":541,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2937:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2925:13:2"},"loopExpression":{"expression":{"id":548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"2961:3:2","subExpression":{"id":547,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":540,"src":"2963:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":549,"nodeType":"ExpressionStatement","src":"2961:3:2"},"nodeType":"ForStatement","src":"2920:120:2"},{"expression":{"id":565,"name":"batchBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":531,"src":"3057:13:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":517,"id":566,"nodeType":"Return","src":"3050:20:2"}]},"documentation":{"id":505,"nodeType":"StructuredDocumentation","src":"2418:146:2","text":" @dev See {IERC1155-balanceOfBatch}.\n Requirements:\n - `accounts` and `ids` must have the same length."},"functionSelector":"4e1273f4","id":568,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOfBatch","nameLocation":"2578:14:2","nodeType":"FunctionDefinition","overrides":{"id":513,"nodeType":"OverrideSpecifier","overrides":[],"src":"2694:8:2"},"parameters":{"id":512,"nodeType":"ParameterList","parameters":[{"constant":false,"id":508,"mutability":"mutable","name":"accounts","nameLocation":"2610:8:2","nodeType":"VariableDeclaration","scope":568,"src":"2593:25:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":506,"name":"address","nodeType":"ElementaryTypeName","src":"2593:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":507,"nodeType":"ArrayTypeName","src":"2593:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":511,"mutability":"mutable","name":"ids","nameLocation":"2637:3:2","nodeType":"VariableDeclaration","scope":568,"src":"2620:20:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":509,"name":"uint256","nodeType":"ElementaryTypeName","src":"2620:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":510,"nodeType":"ArrayTypeName","src":"2620:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2592:49:2"},"returnParameters":{"id":517,"nodeType":"ParameterList","parameters":[{"constant":false,"id":516,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":568,"src":"2720:16:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":514,"name":"uint256","nodeType":"ElementaryTypeName","src":"2720:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":515,"nodeType":"ArrayTypeName","src":"2720:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2719:18:2"},"scope":1611,"src":"2569:508:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1692],"body":{"id":584,"nodeType":"Block","src":"3229:69:2","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":578,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2131,"src":"3258:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":579,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3258:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":580,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":571,"src":"3272:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":581,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":573,"src":"3282:8:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":577,"name":"_setApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1416,"src":"3239:18:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":582,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3239:52:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":583,"nodeType":"ExpressionStatement","src":"3239:52:2"}]},"documentation":{"id":569,"nodeType":"StructuredDocumentation","src":"3083:57:2","text":" @dev See {IERC1155-setApprovalForAll}."},"functionSelector":"a22cb465","id":585,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"3154:17:2","nodeType":"FunctionDefinition","overrides":{"id":575,"nodeType":"OverrideSpecifier","overrides":[],"src":"3220:8:2"},"parameters":{"id":574,"nodeType":"ParameterList","parameters":[{"constant":false,"id":571,"mutability":"mutable","name":"operator","nameLocation":"3180:8:2","nodeType":"VariableDeclaration","scope":585,"src":"3172:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":570,"name":"address","nodeType":"ElementaryTypeName","src":"3172:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":573,"mutability":"mutable","name":"approved","nameLocation":"3195:8:2","nodeType":"VariableDeclaration","scope":585,"src":"3190:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":572,"name":"bool","nodeType":"ElementaryTypeName","src":"3190:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3171:33:2"},"returnParameters":{"id":576,"nodeType":"ParameterList","parameters":[],"src":"3229:0:2"},"scope":1611,"src":"3145:153:2","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1702],"body":{"id":602,"nodeType":"Block","src":"3470:61:2","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":596,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":420,"src":"3487:18:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":598,"indexExpression":{"id":597,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":588,"src":"3506:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3487:27:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":600,"indexExpression":{"id":599,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":590,"src":"3515:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3487:37:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":595,"id":601,"nodeType":"Return","src":"3480:44:2"}]},"documentation":{"id":586,"nodeType":"StructuredDocumentation","src":"3304:56:2","text":" @dev See {IERC1155-isApprovedForAll}."},"functionSelector":"e985e9c5","id":603,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"3374:16:2","nodeType":"FunctionDefinition","overrides":{"id":592,"nodeType":"OverrideSpecifier","overrides":[],"src":"3446:8:2"},"parameters":{"id":591,"nodeType":"ParameterList","parameters":[{"constant":false,"id":588,"mutability":"mutable","name":"account","nameLocation":"3399:7:2","nodeType":"VariableDeclaration","scope":603,"src":"3391:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":587,"name":"address","nodeType":"ElementaryTypeName","src":"3391:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":590,"mutability":"mutable","name":"operator","nameLocation":"3416:8:2","nodeType":"VariableDeclaration","scope":603,"src":"3408:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":589,"name":"address","nodeType":"ElementaryTypeName","src":"3408:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3390:35:2"},"returnParameters":{"id":595,"nodeType":"ParameterList","parameters":[{"constant":false,"id":594,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":603,"src":"3464:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":593,"name":"bool","nodeType":"ElementaryTypeName","src":"3464:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3463:6:2"},"scope":1611,"src":"3365:166:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1716],"body":{"id":640,"nodeType":"Block","src":"3767:225:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":619,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"3798:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":620,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2131,"src":"3806:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":621,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3806:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3798:20:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":624,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"3839:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":625,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2131,"src":"3845:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":626,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3845:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":623,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":603,"src":"3822:16:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":627,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3822:36:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3798:60:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564","id":629,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3872:48:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156","typeString":"literal_string \"ERC1155: caller is not token owner or approved\""},"value":"ERC1155: caller is not token owner or approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156","typeString":"literal_string \"ERC1155: caller is not token owner or approved\""}],"id":618,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3777:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":630,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3777:153:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":631,"nodeType":"ExpressionStatement","src":"3777:153:2"},{"expression":{"arguments":[{"id":633,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"3958:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":634,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":608,"src":"3964:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":635,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":610,"src":"3968:2:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":636,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"3972:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":637,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":614,"src":"3980:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":632,"name":"_safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":798,"src":"3940:17:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,uint256,bytes memory)"}},"id":638,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3940:45:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":639,"nodeType":"ExpressionStatement","src":"3940:45:2"}]},"documentation":{"id":604,"nodeType":"StructuredDocumentation","src":"3537:56:2","text":" @dev See {IERC1155-safeTransferFrom}."},"functionSelector":"f242432a","id":641,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"3607:16:2","nodeType":"FunctionDefinition","overrides":{"id":616,"nodeType":"OverrideSpecifier","overrides":[],"src":"3758:8:2"},"parameters":{"id":615,"nodeType":"ParameterList","parameters":[{"constant":false,"id":606,"mutability":"mutable","name":"from","nameLocation":"3641:4:2","nodeType":"VariableDeclaration","scope":641,"src":"3633:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":605,"name":"address","nodeType":"ElementaryTypeName","src":"3633:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":608,"mutability":"mutable","name":"to","nameLocation":"3663:2:2","nodeType":"VariableDeclaration","scope":641,"src":"3655:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":607,"name":"address","nodeType":"ElementaryTypeName","src":"3655:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":610,"mutability":"mutable","name":"id","nameLocation":"3683:2:2","nodeType":"VariableDeclaration","scope":641,"src":"3675:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":609,"name":"uint256","nodeType":"ElementaryTypeName","src":"3675:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":612,"mutability":"mutable","name":"amount","nameLocation":"3703:6:2","nodeType":"VariableDeclaration","scope":641,"src":"3695:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":611,"name":"uint256","nodeType":"ElementaryTypeName","src":"3695:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":614,"mutability":"mutable","name":"data","nameLocation":"3732:4:2","nodeType":"VariableDeclaration","scope":641,"src":"3719:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":613,"name":"bytes","nodeType":"ElementaryTypeName","src":"3719:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3623:119:2"},"returnParameters":{"id":617,"nodeType":"ParameterList","parameters":[],"src":"3767:0:2"},"scope":1611,"src":"3598:394:2","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1732],"body":{"id":680,"nodeType":"Block","src":"4258:232:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":659,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":644,"src":"4289:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":660,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2131,"src":"4297:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":661,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4297:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4289:20:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":664,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":644,"src":"4330:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":665,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2131,"src":"4336:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":666,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4336:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":663,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":603,"src":"4313:16:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":667,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4313:36:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4289:60:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564","id":669,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4363:48:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156","typeString":"literal_string \"ERC1155: caller is not token owner or approved\""},"value":"ERC1155: caller is not token owner or approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156","typeString":"literal_string \"ERC1155: caller is not token owner or approved\""}],"id":658,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4268:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":670,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4268:153:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":671,"nodeType":"ExpressionStatement","src":"4268:153:2"},{"expression":{"arguments":[{"id":673,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":644,"src":"4454:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":674,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":646,"src":"4460:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":675,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":649,"src":"4464:3:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":676,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":652,"src":"4469:7:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":677,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":654,"src":"4478:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":672,"name":"_safeBatchTransferFrom","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"4431:22:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":678,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4431:52:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":679,"nodeType":"ExpressionStatement","src":"4431:52:2"}]},"documentation":{"id":642,"nodeType":"StructuredDocumentation","src":"3998:61:2","text":" @dev See {IERC1155-safeBatchTransferFrom}."},"functionSelector":"2eb2c2d6","id":681,"implemented":true,"kind":"function","modifiers":[],"name":"safeBatchTransferFrom","nameLocation":"4073:21:2","nodeType":"FunctionDefinition","overrides":{"id":656,"nodeType":"OverrideSpecifier","overrides":[],"src":"4249:8:2"},"parameters":{"id":655,"nodeType":"ParameterList","parameters":[{"constant":false,"id":644,"mutability":"mutable","name":"from","nameLocation":"4112:4:2","nodeType":"VariableDeclaration","scope":681,"src":"4104:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":643,"name":"address","nodeType":"ElementaryTypeName","src":"4104:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":646,"mutability":"mutable","name":"to","nameLocation":"4134:2:2","nodeType":"VariableDeclaration","scope":681,"src":"4126:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":645,"name":"address","nodeType":"ElementaryTypeName","src":"4126:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":649,"mutability":"mutable","name":"ids","nameLocation":"4163:3:2","nodeType":"VariableDeclaration","scope":681,"src":"4146:20:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":647,"name":"uint256","nodeType":"ElementaryTypeName","src":"4146:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":648,"nodeType":"ArrayTypeName","src":"4146:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":652,"mutability":"mutable","name":"amounts","nameLocation":"4193:7:2","nodeType":"VariableDeclaration","scope":681,"src":"4176:24:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":650,"name":"uint256","nodeType":"ElementaryTypeName","src":"4176:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":651,"nodeType":"ArrayTypeName","src":"4176:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":654,"mutability":"mutable","name":"data","nameLocation":"4223:4:2","nodeType":"VariableDeclaration","scope":681,"src":"4210:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":653,"name":"bytes","nodeType":"ElementaryTypeName","src":"4210:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4094:139:2"},"returnParameters":{"id":657,"nodeType":"ParameterList","parameters":[],"src":"4258:0:2"},"scope":1611,"src":"4064:426:2","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":797,"nodeType":"Block","src":"5103:784:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":696,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":686,"src":"5121:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":699,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5135:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":698,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5127:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":697,"name":"address","nodeType":"ElementaryTypeName","src":"5127:7:2","typeDescriptions":{}}},"id":700,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5127:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5121:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a207472616e7366657220746f20746865207a65726f2061646472657373","id":702,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5139:39:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d","typeString":"literal_string \"ERC1155: transfer to the zero address\""},"value":"ERC1155: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d","typeString":"literal_string \"ERC1155: transfer to the zero address\""}],"id":695,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5113:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":703,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5113:66:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":704,"nodeType":"ExpressionStatement","src":"5113:66:2"},{"assignments":[706],"declarations":[{"constant":false,"id":706,"mutability":"mutable","name":"operator","nameLocation":"5198:8:2","nodeType":"VariableDeclaration","scope":797,"src":"5190:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":705,"name":"address","nodeType":"ElementaryTypeName","src":"5190:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":709,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":707,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2131,"src":"5209:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":708,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5209:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5190:31:2"},{"assignments":[714],"declarations":[{"constant":false,"id":714,"mutability":"mutable","name":"ids","nameLocation":"5248:3:2","nodeType":"VariableDeclaration","scope":797,"src":"5231:20:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":712,"name":"uint256","nodeType":"ElementaryTypeName","src":"5231:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":713,"nodeType":"ArrayTypeName","src":"5231:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":718,"initialValue":{"arguments":[{"id":716,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":688,"src":"5272:2:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":715,"name":"_asSingletonArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1610,"src":"5254:17:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"}},"id":717,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5254:21:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"5231:44:2"},{"assignments":[723],"declarations":[{"constant":false,"id":723,"mutability":"mutable","name":"amounts","nameLocation":"5302:7:2","nodeType":"VariableDeclaration","scope":797,"src":"5285:24:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":721,"name":"uint256","nodeType":"ElementaryTypeName","src":"5285:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":722,"nodeType":"ArrayTypeName","src":"5285:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":727,"initialValue":{"arguments":[{"id":725,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":690,"src":"5330:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":724,"name":"_asSingletonArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1610,"src":"5312:17:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"}},"id":726,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5312:25:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"5285:52:2"},{"expression":{"arguments":[{"id":729,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":706,"src":"5369:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":730,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":684,"src":"5379:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":731,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":686,"src":"5385:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":732,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":714,"src":"5389:3:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":733,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":723,"src":"5394:7:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":734,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"5403:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":728,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1435,"src":"5348:20:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":735,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5348:60:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":736,"nodeType":"ExpressionStatement","src":"5348:60:2"},{"assignments":[738],"declarations":[{"constant":false,"id":738,"mutability":"mutable","name":"fromBalance","nameLocation":"5427:11:2","nodeType":"VariableDeclaration","scope":797,"src":"5419:19:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":737,"name":"uint256","nodeType":"ElementaryTypeName","src":"5419:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":744,"initialValue":{"baseExpression":{"baseExpression":{"id":739,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"5441:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":741,"indexExpression":{"id":740,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":688,"src":"5451:2:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5441:13:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":743,"indexExpression":{"id":742,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":684,"src":"5455:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5441:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5419:41:2"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":746,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":738,"src":"5478:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":747,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":690,"src":"5493:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5478:21:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a20696e73756666696369656e742062616c616e636520666f72207472616e73666572","id":749,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5501:44:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf","typeString":"literal_string \"ERC1155: insufficient balance for transfer\""},"value":"ERC1155: insufficient balance for transfer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf","typeString":"literal_string \"ERC1155: insufficient balance for transfer\""}],"id":745,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5470:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":750,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5470:76:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":751,"nodeType":"ExpressionStatement","src":"5470:76:2"},{"id":762,"nodeType":"UncheckedBlock","src":"5556:77:2","statements":[{"expression":{"id":760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":752,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"5580:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":755,"indexExpression":{"id":753,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":688,"src":"5590:2:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5580:13:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":756,"indexExpression":{"id":754,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":684,"src":"5594:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5580:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":757,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":738,"src":"5602:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":758,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":690,"src":"5616:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5602:20:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5580:42:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":761,"nodeType":"ExpressionStatement","src":"5580:42:2"}]},{"expression":{"id":769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":763,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"5642:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":766,"indexExpression":{"id":764,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":688,"src":"5652:2:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5642:13:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":767,"indexExpression":{"id":765,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":686,"src":"5656:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5642:17:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":768,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":690,"src":"5663:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5642:27:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":770,"nodeType":"ExpressionStatement","src":"5642:27:2"},{"eventCall":{"arguments":[{"id":772,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":706,"src":"5700:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":773,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":684,"src":"5710:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":774,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":686,"src":"5716:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":775,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":688,"src":"5720:2:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":776,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":690,"src":"5724:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":771,"name":"TransferSingle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1630,"src":"5685:14:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256,uint256)"}},"id":777,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5685:46:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":778,"nodeType":"EmitStatement","src":"5680:51:2"},{"expression":{"arguments":[{"id":780,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":706,"src":"5762:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":781,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":684,"src":"5772:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":782,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":686,"src":"5778:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":783,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":714,"src":"5782:3:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":784,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":723,"src":"5787:7:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":785,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"5796:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":779,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1454,"src":"5742:19:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":786,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5742:59:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":787,"nodeType":"ExpressionStatement","src":"5742:59:2"},{"expression":{"arguments":[{"id":789,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":706,"src":"5843:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":790,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":684,"src":"5853:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":791,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":686,"src":"5859:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":792,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":688,"src":"5863:2:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":793,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":690,"src":"5867:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":794,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"5875:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":788,"name":"_doSafeTransferAcceptanceCheck","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1517,"src":"5812:30:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256,uint256,bytes memory)"}},"id":795,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5812:68:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":796,"nodeType":"ExpressionStatement","src":"5812:68:2"}]},"documentation":{"id":682,"nodeType":"StructuredDocumentation","src":"4496:439:2","text":" @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n Emits a {TransferSingle} event.\n Requirements:\n - `to` cannot be the zero address.\n - `from` must have a balance of tokens of type `id` of at least `amount`.\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n acceptance magic value."},"id":798,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransferFrom","nameLocation":"4949:17:2","nodeType":"FunctionDefinition","parameters":{"id":693,"nodeType":"ParameterList","parameters":[{"constant":false,"id":684,"mutability":"mutable","name":"from","nameLocation":"4984:4:2","nodeType":"VariableDeclaration","scope":798,"src":"4976:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":683,"name":"address","nodeType":"ElementaryTypeName","src":"4976:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":686,"mutability":"mutable","name":"to","nameLocation":"5006:2:2","nodeType":"VariableDeclaration","scope":798,"src":"4998:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":685,"name":"address","nodeType":"ElementaryTypeName","src":"4998:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":688,"mutability":"mutable","name":"id","nameLocation":"5026:2:2","nodeType":"VariableDeclaration","scope":798,"src":"5018:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":687,"name":"uint256","nodeType":"ElementaryTypeName","src":"5018:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":690,"mutability":"mutable","name":"amount","nameLocation":"5046:6:2","nodeType":"VariableDeclaration","scope":798,"src":"5038:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":689,"name":"uint256","nodeType":"ElementaryTypeName","src":"5038:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":692,"mutability":"mutable","name":"data","nameLocation":"5075:4:2","nodeType":"VariableDeclaration","scope":798,"src":"5062:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":691,"name":"bytes","nodeType":"ElementaryTypeName","src":"5062:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4966:119:2"},"returnParameters":{"id":694,"nodeType":"ParameterList","parameters":[],"src":"5103:0:2"},"scope":1611,"src":"4940:947:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":932,"nodeType":"Block","src":"6421:927:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":815,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":806,"src":"6439:3:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6443:6:2","memberName":"length","nodeType":"MemberAccess","src":"6439:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":817,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":809,"src":"6453:7:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":818,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6461:6:2","memberName":"length","nodeType":"MemberAccess","src":"6453:14:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6439:28:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2069647320616e6420616d6f756e7473206c656e677468206d69736d61746368","id":820,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6469:42:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807","typeString":"literal_string \"ERC1155: ids and amounts length mismatch\""},"value":"ERC1155: ids and amounts length mismatch"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807","typeString":"literal_string \"ERC1155: ids and amounts length mismatch\""}],"id":814,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6431:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":821,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6431:81:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":822,"nodeType":"ExpressionStatement","src":"6431:81:2"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":829,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":824,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":803,"src":"6530:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":827,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6544:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":826,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6536:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":825,"name":"address","nodeType":"ElementaryTypeName","src":"6536:7:2","typeDescriptions":{}}},"id":828,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6536:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6530:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a207472616e7366657220746f20746865207a65726f2061646472657373","id":830,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6548:39:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d","typeString":"literal_string \"ERC1155: transfer to the zero address\""},"value":"ERC1155: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d","typeString":"literal_string \"ERC1155: transfer to the zero address\""}],"id":823,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6522:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":831,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6522:66:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":832,"nodeType":"ExpressionStatement","src":"6522:66:2"},{"assignments":[834],"declarations":[{"constant":false,"id":834,"mutability":"mutable","name":"operator","nameLocation":"6607:8:2","nodeType":"VariableDeclaration","scope":932,"src":"6599:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":833,"name":"address","nodeType":"ElementaryTypeName","src":"6599:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":837,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":835,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2131,"src":"6618:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":836,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6618:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6599:31:2"},{"expression":{"arguments":[{"id":839,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"6662:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":840,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":801,"src":"6672:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":841,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":803,"src":"6678:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":842,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":806,"src":"6682:3:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":843,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":809,"src":"6687:7:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":844,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":811,"src":"6696:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":838,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1435,"src":"6641:20:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":845,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6641:60:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":846,"nodeType":"ExpressionStatement","src":"6641:60:2"},{"body":{"id":904,"nodeType":"Block","src":"6753:370:2","statements":[{"assignments":[859],"declarations":[{"constant":false,"id":859,"mutability":"mutable","name":"id","nameLocation":"6775:2:2","nodeType":"VariableDeclaration","scope":904,"src":"6767:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":858,"name":"uint256","nodeType":"ElementaryTypeName","src":"6767:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":863,"initialValue":{"baseExpression":{"id":860,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":806,"src":"6780:3:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":862,"indexExpression":{"id":861,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":848,"src":"6784:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6780:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6767:19:2"},{"assignments":[865],"declarations":[{"constant":false,"id":865,"mutability":"mutable","name":"amount","nameLocation":"6808:6:2","nodeType":"VariableDeclaration","scope":904,"src":"6800:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":864,"name":"uint256","nodeType":"ElementaryTypeName","src":"6800:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":869,"initialValue":{"baseExpression":{"id":866,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":809,"src":"6817:7:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":868,"indexExpression":{"id":867,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":848,"src":"6825:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6817:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6800:27:2"},{"assignments":[871],"declarations":[{"constant":false,"id":871,"mutability":"mutable","name":"fromBalance","nameLocation":"6850:11:2","nodeType":"VariableDeclaration","scope":904,"src":"6842:19:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":870,"name":"uint256","nodeType":"ElementaryTypeName","src":"6842:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":877,"initialValue":{"baseExpression":{"baseExpression":{"id":872,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"6864:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":874,"indexExpression":{"id":873,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":859,"src":"6874:2:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6864:13:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":876,"indexExpression":{"id":875,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":801,"src":"6878:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6864:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6842:41:2"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":879,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":871,"src":"6905:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":880,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":865,"src":"6920:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6905:21:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a20696e73756666696369656e742062616c616e636520666f72207472616e73666572","id":882,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6928:44:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf","typeString":"literal_string \"ERC1155: insufficient balance for transfer\""},"value":"ERC1155: insufficient balance for transfer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf","typeString":"literal_string \"ERC1155: insufficient balance for transfer\""}],"id":878,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6897:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":883,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6897:76:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":884,"nodeType":"ExpressionStatement","src":"6897:76:2"},{"id":895,"nodeType":"UncheckedBlock","src":"6987:85:2","statements":[{"expression":{"id":893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":885,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"7015:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":888,"indexExpression":{"id":886,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":859,"src":"7025:2:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7015:13:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":889,"indexExpression":{"id":887,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":801,"src":"7029:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7015:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":890,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":871,"src":"7037:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":891,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":865,"src":"7051:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7037:20:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7015:42:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":894,"nodeType":"ExpressionStatement","src":"7015:42:2"}]},{"expression":{"id":902,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":896,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"7085:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":899,"indexExpression":{"id":897,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":859,"src":"7095:2:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7085:13:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":900,"indexExpression":{"id":898,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":803,"src":"7099:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7085:17:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":901,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":865,"src":"7106:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7085:27:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":903,"nodeType":"ExpressionStatement","src":"7085:27:2"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":851,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":848,"src":"6732:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":852,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":806,"src":"6736:3:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6740:6:2","memberName":"length","nodeType":"MemberAccess","src":"6736:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6732:14:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":905,"initializationExpression":{"assignments":[848],"declarations":[{"constant":false,"id":848,"mutability":"mutable","name":"i","nameLocation":"6725:1:2","nodeType":"VariableDeclaration","scope":905,"src":"6717:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":847,"name":"uint256","nodeType":"ElementaryTypeName","src":"6717:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":850,"initialValue":{"hexValue":"30","id":849,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6729:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6717:13:2"},"loopExpression":{"expression":{"id":856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"6748:3:2","subExpression":{"id":855,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":848,"src":"6750:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":857,"nodeType":"ExpressionStatement","src":"6748:3:2"},"nodeType":"ForStatement","src":"6712:411:2"},{"eventCall":{"arguments":[{"id":907,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"7152:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":908,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":801,"src":"7162:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":909,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":803,"src":"7168:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":910,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":806,"src":"7172:3:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":911,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":809,"src":"7177:7:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":906,"name":"TransferBatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1645,"src":"7138:13:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory)"}},"id":912,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7138:47:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":913,"nodeType":"EmitStatement","src":"7133:52:2"},{"expression":{"arguments":[{"id":915,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"7216:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":916,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":801,"src":"7226:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":917,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":803,"src":"7232:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":918,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":806,"src":"7236:3:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":919,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":809,"src":"7241:7:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":920,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":811,"src":"7250:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":914,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1454,"src":"7196:19:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":921,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7196:59:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":922,"nodeType":"ExpressionStatement","src":"7196:59:2"},{"expression":{"arguments":[{"id":924,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"7302:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":925,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":801,"src":"7312:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":926,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":803,"src":"7318:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":927,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":806,"src":"7322:3:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":928,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":809,"src":"7327:7:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":929,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":811,"src":"7336:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":923,"name":"_doSafeBatchTransferAcceptanceCheck","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1582,"src":"7266:35:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":930,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7266:75:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":931,"nodeType":"ExpressionStatement","src":"7266:75:2"}]},"documentation":{"id":799,"nodeType":"StructuredDocumentation","src":"5893:335:2","text":" @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n Emits a {TransferBatch} event.\n Requirements:\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n acceptance magic value."},"id":933,"implemented":true,"kind":"function","modifiers":[],"name":"_safeBatchTransferFrom","nameLocation":"6242:22:2","nodeType":"FunctionDefinition","parameters":{"id":812,"nodeType":"ParameterList","parameters":[{"constant":false,"id":801,"mutability":"mutable","name":"from","nameLocation":"6282:4:2","nodeType":"VariableDeclaration","scope":933,"src":"6274:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":800,"name":"address","nodeType":"ElementaryTypeName","src":"6274:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":803,"mutability":"mutable","name":"to","nameLocation":"6304:2:2","nodeType":"VariableDeclaration","scope":933,"src":"6296:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":802,"name":"address","nodeType":"ElementaryTypeName","src":"6296:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":806,"mutability":"mutable","name":"ids","nameLocation":"6333:3:2","nodeType":"VariableDeclaration","scope":933,"src":"6316:20:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":804,"name":"uint256","nodeType":"ElementaryTypeName","src":"6316:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":805,"nodeType":"ArrayTypeName","src":"6316:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":809,"mutability":"mutable","name":"amounts","nameLocation":"6363:7:2","nodeType":"VariableDeclaration","scope":933,"src":"6346:24:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":807,"name":"uint256","nodeType":"ElementaryTypeName","src":"6346:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":808,"nodeType":"ArrayTypeName","src":"6346:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":811,"mutability":"mutable","name":"data","nameLocation":"6393:4:2","nodeType":"VariableDeclaration","scope":933,"src":"6380:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":810,"name":"bytes","nodeType":"ElementaryTypeName","src":"6380:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6264:139:2"},"returnParameters":{"id":813,"nodeType":"ParameterList","parameters":[],"src":"6421:0:2"},"scope":1611,"src":"6233:1115:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":943,"nodeType":"Block","src":"8227:30:2","statements":[{"expression":{"id":941,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":939,"name":"_uri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":422,"src":"8237:4:2","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":940,"name":"newuri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":936,"src":"8244:6:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"8237:13:2","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":942,"nodeType":"ExpressionStatement","src":"8237:13:2"}]},"documentation":{"id":934,"nodeType":"StructuredDocumentation","src":"7354:812:2","text":" @dev Sets a new URI for all token types, by relying on the token type ID\n substitution mechanism\n https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n URI or any of the amounts in the JSON file at said URI will be replaced by\n clients with the token type ID.\n For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n interpreted by clients as\n `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n for token type ID 0x4cce0.\n See {uri}.\n Because these URIs cannot be meaningfully represented by the {URI} event,\n this function emits no events."},"id":944,"implemented":true,"kind":"function","modifiers":[],"name":"_setURI","nameLocation":"8180:7:2","nodeType":"FunctionDefinition","parameters":{"id":937,"nodeType":"ParameterList","parameters":[{"constant":false,"id":936,"mutability":"mutable","name":"newuri","nameLocation":"8202:6:2","nodeType":"VariableDeclaration","scope":944,"src":"8188:20:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":935,"name":"string","nodeType":"ElementaryTypeName","src":"8188:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8187:22:2"},"returnParameters":{"id":938,"nodeType":"ParameterList","parameters":[],"src":"8227:0:2"},"scope":1611,"src":"8171:86:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1044,"nodeType":"Block","src":"8759:580:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":962,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":957,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":947,"src":"8777:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":960,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8791:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":959,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8783:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":958,"name":"address","nodeType":"ElementaryTypeName","src":"8783:7:2","typeDescriptions":{}}},"id":961,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8783:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8777:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206d696e7420746f20746865207a65726f2061646472657373","id":963,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8795:35:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2","typeString":"literal_string \"ERC1155: mint to the zero address\""},"value":"ERC1155: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2","typeString":"literal_string \"ERC1155: mint to the zero address\""}],"id":956,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8769:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":964,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8769:62:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":965,"nodeType":"ExpressionStatement","src":"8769:62:2"},{"assignments":[967],"declarations":[{"constant":false,"id":967,"mutability":"mutable","name":"operator","nameLocation":"8850:8:2","nodeType":"VariableDeclaration","scope":1044,"src":"8842:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":966,"name":"address","nodeType":"ElementaryTypeName","src":"8842:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":970,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":968,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2131,"src":"8861:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":969,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8861:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"8842:31:2"},{"assignments":[975],"declarations":[{"constant":false,"id":975,"mutability":"mutable","name":"ids","nameLocation":"8900:3:2","nodeType":"VariableDeclaration","scope":1044,"src":"8883:20:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":973,"name":"uint256","nodeType":"ElementaryTypeName","src":"8883:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":974,"nodeType":"ArrayTypeName","src":"8883:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":979,"initialValue":{"arguments":[{"id":977,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":949,"src":"8924:2:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":976,"name":"_asSingletonArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1610,"src":"8906:17:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"}},"id":978,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8906:21:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"8883:44:2"},{"assignments":[984],"declarations":[{"constant":false,"id":984,"mutability":"mutable","name":"amounts","nameLocation":"8954:7:2","nodeType":"VariableDeclaration","scope":1044,"src":"8937:24:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":982,"name":"uint256","nodeType":"ElementaryTypeName","src":"8937:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":983,"nodeType":"ArrayTypeName","src":"8937:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":988,"initialValue":{"arguments":[{"id":986,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":951,"src":"8982:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":985,"name":"_asSingletonArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1610,"src":"8964:17:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"}},"id":987,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8964:25:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"8937:52:2"},{"expression":{"arguments":[{"id":990,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"9021:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":993,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9039:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":992,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9031:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":991,"name":"address","nodeType":"ElementaryTypeName","src":"9031:7:2","typeDescriptions":{}}},"id":994,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9031:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":995,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":947,"src":"9043:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":996,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":975,"src":"9047:3:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":997,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":984,"src":"9052:7:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":998,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":953,"src":"9061:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":989,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1435,"src":"9000:20:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":999,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9000:66:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1000,"nodeType":"ExpressionStatement","src":"9000:66:2"},{"expression":{"id":1007,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1001,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"9077:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1004,"indexExpression":{"id":1002,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":949,"src":"9087:2:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9077:13:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1005,"indexExpression":{"id":1003,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":947,"src":"9091:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9077:17:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1006,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":951,"src":"9098:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9077:27:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1008,"nodeType":"ExpressionStatement","src":"9077:27:2"},{"eventCall":{"arguments":[{"id":1010,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"9134:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1013,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9152:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1012,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9144:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1011,"name":"address","nodeType":"ElementaryTypeName","src":"9144:7:2","typeDescriptions":{}}},"id":1014,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9144:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1015,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":947,"src":"9156:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1016,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":949,"src":"9160:2:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1017,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":951,"src":"9164:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1009,"name":"TransferSingle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1630,"src":"9119:14:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256,uint256)"}},"id":1018,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9119:52:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1019,"nodeType":"EmitStatement","src":"9114:57:2"},{"expression":{"arguments":[{"id":1021,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"9202:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1024,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9220:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1023,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9212:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1022,"name":"address","nodeType":"ElementaryTypeName","src":"9212:7:2","typeDescriptions":{}}},"id":1025,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9212:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1026,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":947,"src":"9224:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1027,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":975,"src":"9228:3:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1028,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":984,"src":"9233:7:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1029,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":953,"src":"9242:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1020,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1454,"src":"9182:19:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1030,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9182:65:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1031,"nodeType":"ExpressionStatement","src":"9182:65:2"},{"expression":{"arguments":[{"id":1033,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"9289:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1036,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9307:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1035,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9299:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1034,"name":"address","nodeType":"ElementaryTypeName","src":"9299:7:2","typeDescriptions":{}}},"id":1037,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9299:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1038,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":947,"src":"9311:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1039,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":949,"src":"9315:2:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1040,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":951,"src":"9319:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1041,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":953,"src":"9327:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1032,"name":"_doSafeTransferAcceptanceCheck","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1517,"src":"9258:30:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256,uint256,bytes memory)"}},"id":1042,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9258:74:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1043,"nodeType":"ExpressionStatement","src":"9258:74:2"}]},"documentation":{"id":945,"nodeType":"StructuredDocumentation","src":"8263:362:2","text":" @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n Emits a {TransferSingle} event.\n Requirements:\n - `to` cannot be the zero address.\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n acceptance magic value."},"id":1045,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"8639:5:2","nodeType":"FunctionDefinition","parameters":{"id":954,"nodeType":"ParameterList","parameters":[{"constant":false,"id":947,"mutability":"mutable","name":"to","nameLocation":"8662:2:2","nodeType":"VariableDeclaration","scope":1045,"src":"8654:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":946,"name":"address","nodeType":"ElementaryTypeName","src":"8654:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":949,"mutability":"mutable","name":"id","nameLocation":"8682:2:2","nodeType":"VariableDeclaration","scope":1045,"src":"8674:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":948,"name":"uint256","nodeType":"ElementaryTypeName","src":"8674:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":951,"mutability":"mutable","name":"amount","nameLocation":"8702:6:2","nodeType":"VariableDeclaration","scope":1045,"src":"8694:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":950,"name":"uint256","nodeType":"ElementaryTypeName","src":"8694:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":953,"mutability":"mutable","name":"data","nameLocation":"8731:4:2","nodeType":"VariableDeclaration","scope":1045,"src":"8718:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":952,"name":"bytes","nodeType":"ElementaryTypeName","src":"8718:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8644:97:2"},"returnParameters":{"id":955,"nodeType":"ParameterList","parameters":[],"src":"8759:0:2"},"scope":1611,"src":"8630:709:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1155,"nodeType":"Block","src":"9883:637:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1060,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1048,"src":"9901:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1063,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9915:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1062,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9907:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1061,"name":"address","nodeType":"ElementaryTypeName","src":"9907:7:2","typeDescriptions":{}}},"id":1064,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9907:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9901:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206d696e7420746f20746865207a65726f2061646472657373","id":1066,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9919:35:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2","typeString":"literal_string \"ERC1155: mint to the zero address\""},"value":"ERC1155: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2","typeString":"literal_string \"ERC1155: mint to the zero address\""}],"id":1059,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9893:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1067,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9893:62:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1068,"nodeType":"ExpressionStatement","src":"9893:62:2"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1070,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1051,"src":"9973:3:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9977:6:2","memberName":"length","nodeType":"MemberAccess","src":"9973:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1072,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"9987:7:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9995:6:2","memberName":"length","nodeType":"MemberAccess","src":"9987:14:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9973:28:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2069647320616e6420616d6f756e7473206c656e677468206d69736d61746368","id":1075,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10003:42:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807","typeString":"literal_string \"ERC1155: ids and amounts length mismatch\""},"value":"ERC1155: ids and amounts length mismatch"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807","typeString":"literal_string \"ERC1155: ids and amounts length mismatch\""}],"id":1069,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9965:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1076,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9965:81:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1077,"nodeType":"ExpressionStatement","src":"9965:81:2"},{"assignments":[1079],"declarations":[{"constant":false,"id":1079,"mutability":"mutable","name":"operator","nameLocation":"10065:8:2","nodeType":"VariableDeclaration","scope":1155,"src":"10057:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1078,"name":"address","nodeType":"ElementaryTypeName","src":"10057:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1082,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1080,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2131,"src":"10076:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1081,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10076:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"10057:31:2"},{"expression":{"arguments":[{"id":1084,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1079,"src":"10120:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1087,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10138:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1086,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10130:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1085,"name":"address","nodeType":"ElementaryTypeName","src":"10130:7:2","typeDescriptions":{}}},"id":1088,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10130:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1089,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1048,"src":"10142:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1090,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1051,"src":"10146:3:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1091,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"10151:7:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1092,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1056,"src":"10160:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1083,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1435,"src":"10099:20:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1093,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10099:66:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1094,"nodeType":"ExpressionStatement","src":"10099:66:2"},{"body":{"id":1118,"nodeType":"Block","src":"10217:60:2","statements":[{"expression":{"id":1116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1106,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"10231:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1111,"indexExpression":{"baseExpression":{"id":1107,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1051,"src":"10241:3:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1109,"indexExpression":{"id":1108,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1096,"src":"10245:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10241:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10231:17:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1112,"indexExpression":{"id":1110,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1048,"src":"10249:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10231:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"baseExpression":{"id":1113,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"10256:7:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1115,"indexExpression":{"id":1114,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1096,"src":"10264:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10256:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10231:35:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1117,"nodeType":"ExpressionStatement","src":"10231:35:2"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1099,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1096,"src":"10196:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1100,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1051,"src":"10200:3:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10204:6:2","memberName":"length","nodeType":"MemberAccess","src":"10200:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10196:14:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1119,"initializationExpression":{"assignments":[1096],"declarations":[{"constant":false,"id":1096,"mutability":"mutable","name":"i","nameLocation":"10189:1:2","nodeType":"VariableDeclaration","scope":1119,"src":"10181:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1095,"name":"uint256","nodeType":"ElementaryTypeName","src":"10181:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1098,"initialValue":{"hexValue":"30","id":1097,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10193:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10181:13:2"},"loopExpression":{"expression":{"id":1104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10212:3:2","subExpression":{"id":1103,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1096,"src":"10212:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1105,"nodeType":"ExpressionStatement","src":"10212:3:2"},"nodeType":"ForStatement","src":"10176:101:2"},{"eventCall":{"arguments":[{"id":1121,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1079,"src":"10306:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1124,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10324:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1123,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10316:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1122,"name":"address","nodeType":"ElementaryTypeName","src":"10316:7:2","typeDescriptions":{}}},"id":1125,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10316:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1126,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1048,"src":"10328:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1127,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1051,"src":"10332:3:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1128,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"10337:7:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":1120,"name":"TransferBatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1645,"src":"10292:13:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory)"}},"id":1129,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10292:53:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1130,"nodeType":"EmitStatement","src":"10287:58:2"},{"expression":{"arguments":[{"id":1132,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1079,"src":"10376:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1135,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10394:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1134,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10386:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1133,"name":"address","nodeType":"ElementaryTypeName","src":"10386:7:2","typeDescriptions":{}}},"id":1136,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10386:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1137,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1048,"src":"10398:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1138,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1051,"src":"10402:3:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1139,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"10407:7:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1140,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1056,"src":"10416:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1131,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1454,"src":"10356:19:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1141,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10356:65:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1142,"nodeType":"ExpressionStatement","src":"10356:65:2"},{"expression":{"arguments":[{"id":1144,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1079,"src":"10468:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1147,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10486:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1146,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10478:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1145,"name":"address","nodeType":"ElementaryTypeName","src":"10478:7:2","typeDescriptions":{}}},"id":1148,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10478:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1149,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1048,"src":"10490:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1150,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1051,"src":"10494:3:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1151,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"10499:7:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1152,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1056,"src":"10508:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1143,"name":"_doSafeBatchTransferAcceptanceCheck","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1582,"src":"10432:35:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1153,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10432:81:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1154,"nodeType":"ExpressionStatement","src":"10432:81:2"}]},"documentation":{"id":1046,"nodeType":"StructuredDocumentation","src":"9345:379:2","text":" @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n Emits a {TransferBatch} event.\n Requirements:\n - `ids` and `amounts` must have the same length.\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n acceptance magic value."},"id":1156,"implemented":true,"kind":"function","modifiers":[],"name":"_mintBatch","nameLocation":"9738:10:2","nodeType":"FunctionDefinition","parameters":{"id":1057,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1048,"mutability":"mutable","name":"to","nameLocation":"9766:2:2","nodeType":"VariableDeclaration","scope":1156,"src":"9758:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1047,"name":"address","nodeType":"ElementaryTypeName","src":"9758:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1051,"mutability":"mutable","name":"ids","nameLocation":"9795:3:2","nodeType":"VariableDeclaration","scope":1156,"src":"9778:20:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1049,"name":"uint256","nodeType":"ElementaryTypeName","src":"9778:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1050,"nodeType":"ArrayTypeName","src":"9778:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1054,"mutability":"mutable","name":"amounts","nameLocation":"9825:7:2","nodeType":"VariableDeclaration","scope":1156,"src":"9808:24:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1052,"name":"uint256","nodeType":"ElementaryTypeName","src":"9808:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1053,"nodeType":"ArrayTypeName","src":"9808:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1056,"mutability":"mutable","name":"data","nameLocation":"9855:4:2","nodeType":"VariableDeclaration","scope":1156,"src":"9842:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1055,"name":"bytes","nodeType":"ElementaryTypeName","src":"9842:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9748:117:2"},"returnParameters":{"id":1058,"nodeType":"ParameterList","parameters":[],"src":"9883:0:2"},"scope":1611,"src":"9729:791:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1260,"nodeType":"Block","src":"10910:682:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1167,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1159,"src":"10928:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1170,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10944:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1169,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10936:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1168,"name":"address","nodeType":"ElementaryTypeName","src":"10936:7:2","typeDescriptions":{}}},"id":1171,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10936:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10928:18:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206275726e2066726f6d20746865207a65726f2061646472657373","id":1173,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10948:37:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_87fd4aee52f5758d127cd9704d5ffef70f36ed1e87eb99b6f40e37a25c79a76a","typeString":"literal_string \"ERC1155: burn from the zero address\""},"value":"ERC1155: burn from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_87fd4aee52f5758d127cd9704d5ffef70f36ed1e87eb99b6f40e37a25c79a76a","typeString":"literal_string \"ERC1155: burn from the zero address\""}],"id":1166,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10920:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1174,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10920:66:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1175,"nodeType":"ExpressionStatement","src":"10920:66:2"},{"assignments":[1177],"declarations":[{"constant":false,"id":1177,"mutability":"mutable","name":"operator","nameLocation":"11005:8:2","nodeType":"VariableDeclaration","scope":1260,"src":"10997:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1176,"name":"address","nodeType":"ElementaryTypeName","src":"10997:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1180,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1178,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2131,"src":"11016:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1179,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11016:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"10997:31:2"},{"assignments":[1185],"declarations":[{"constant":false,"id":1185,"mutability":"mutable","name":"ids","nameLocation":"11055:3:2","nodeType":"VariableDeclaration","scope":1260,"src":"11038:20:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1183,"name":"uint256","nodeType":"ElementaryTypeName","src":"11038:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1184,"nodeType":"ArrayTypeName","src":"11038:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":1189,"initialValue":{"arguments":[{"id":1187,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1161,"src":"11079:2:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1186,"name":"_asSingletonArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1610,"src":"11061:17:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"}},"id":1188,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11061:21:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"11038:44:2"},{"assignments":[1194],"declarations":[{"constant":false,"id":1194,"mutability":"mutable","name":"amounts","nameLocation":"11109:7:2","nodeType":"VariableDeclaration","scope":1260,"src":"11092:24:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1192,"name":"uint256","nodeType":"ElementaryTypeName","src":"11092:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1193,"nodeType":"ArrayTypeName","src":"11092:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":1198,"initialValue":{"arguments":[{"id":1196,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1163,"src":"11137:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1195,"name":"_asSingletonArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1610,"src":"11119:17:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"}},"id":1197,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11119:25:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"11092:52:2"},{"expression":{"arguments":[{"id":1200,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"11176:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1201,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1159,"src":"11186:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1204,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11200:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1203,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11192:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1202,"name":"address","nodeType":"ElementaryTypeName","src":"11192:7:2","typeDescriptions":{}}},"id":1205,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11192:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1206,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1185,"src":"11204:3:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1207,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1194,"src":"11209:7:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"hexValue":"","id":1208,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11218:2:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":1199,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1435,"src":"11155:20:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1209,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11155:66:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1210,"nodeType":"ExpressionStatement","src":"11155:66:2"},{"assignments":[1212],"declarations":[{"constant":false,"id":1212,"mutability":"mutable","name":"fromBalance","nameLocation":"11240:11:2","nodeType":"VariableDeclaration","scope":1260,"src":"11232:19:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1211,"name":"uint256","nodeType":"ElementaryTypeName","src":"11232:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1218,"initialValue":{"baseExpression":{"baseExpression":{"id":1213,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"11254:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1215,"indexExpression":{"id":1214,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1161,"src":"11264:2:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11254:13:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1217,"indexExpression":{"id":1216,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1159,"src":"11268:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11254:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11232:41:2"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1220,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1212,"src":"11291:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1221,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1163,"src":"11306:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11291:21:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206275726e20616d6f756e7420657863656564732062616c616e6365","id":1223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11314:38:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_294a5de01910e2350ff231c633ae2d453ed6b1b72c75506234b7aace63eae685","typeString":"literal_string \"ERC1155: burn amount exceeds balance\""},"value":"ERC1155: burn amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_294a5de01910e2350ff231c633ae2d453ed6b1b72c75506234b7aace63eae685","typeString":"literal_string \"ERC1155: burn amount exceeds balance\""}],"id":1219,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11283:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11283:70:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1225,"nodeType":"ExpressionStatement","src":"11283:70:2"},{"id":1236,"nodeType":"UncheckedBlock","src":"11363:77:2","statements":[{"expression":{"id":1234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1226,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"11387:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1229,"indexExpression":{"id":1227,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1161,"src":"11397:2:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11387:13:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1230,"indexExpression":{"id":1228,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1159,"src":"11401:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11387:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1231,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1212,"src":"11409:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1232,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1163,"src":"11423:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11409:20:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11387:42:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1235,"nodeType":"ExpressionStatement","src":"11387:42:2"}]},{"eventCall":{"arguments":[{"id":1238,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"11470:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1239,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1159,"src":"11480:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1242,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11494:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1241,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11486:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1240,"name":"address","nodeType":"ElementaryTypeName","src":"11486:7:2","typeDescriptions":{}}},"id":1243,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11486:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1244,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1161,"src":"11498:2:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1245,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1163,"src":"11502:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1237,"name":"TransferSingle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1630,"src":"11455:14:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256,uint256)"}},"id":1246,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11455:54:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1247,"nodeType":"EmitStatement","src":"11450:59:2"},{"expression":{"arguments":[{"id":1249,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"11540:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1250,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1159,"src":"11550:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1253,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11564:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1252,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11556:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1251,"name":"address","nodeType":"ElementaryTypeName","src":"11556:7:2","typeDescriptions":{}}},"id":1254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11556:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1255,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1185,"src":"11568:3:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1256,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1194,"src":"11573:7:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"hexValue":"","id":1257,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11582:2:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":1248,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1454,"src":"11520:19:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1258,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11520:65:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1259,"nodeType":"ExpressionStatement","src":"11520:65:2"}]},"documentation":{"id":1157,"nodeType":"StructuredDocumentation","src":"10526:275:2","text":" @dev Destroys `amount` tokens of token type `id` from `from`\n Emits a {TransferSingle} event.\n Requirements:\n - `from` cannot be the zero address.\n - `from` must have at least `amount` tokens of token type `id`."},"id":1261,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"10815:5:2","nodeType":"FunctionDefinition","parameters":{"id":1164,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1159,"mutability":"mutable","name":"from","nameLocation":"10838:4:2","nodeType":"VariableDeclaration","scope":1261,"src":"10830:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1158,"name":"address","nodeType":"ElementaryTypeName","src":"10830:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1161,"mutability":"mutable","name":"id","nameLocation":"10860:2:2","nodeType":"VariableDeclaration","scope":1261,"src":"10852:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1160,"name":"uint256","nodeType":"ElementaryTypeName","src":"10852:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1163,"mutability":"mutable","name":"amount","nameLocation":"10880:6:2","nodeType":"VariableDeclaration","scope":1261,"src":"10872:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1162,"name":"uint256","nodeType":"ElementaryTypeName","src":"10872:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10820:72:2"},"returnParameters":{"id":1165,"nodeType":"ParameterList","parameters":[],"src":"10910:0:2"},"scope":1611,"src":"10806:786:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1383,"nodeType":"Block","src":"11960:814:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1274,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1264,"src":"11978:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1277,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11994:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1276,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11986:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1275,"name":"address","nodeType":"ElementaryTypeName","src":"11986:7:2","typeDescriptions":{}}},"id":1278,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11986:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11978:18:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206275726e2066726f6d20746865207a65726f2061646472657373","id":1280,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11998:37:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_87fd4aee52f5758d127cd9704d5ffef70f36ed1e87eb99b6f40e37a25c79a76a","typeString":"literal_string \"ERC1155: burn from the zero address\""},"value":"ERC1155: burn from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_87fd4aee52f5758d127cd9704d5ffef70f36ed1e87eb99b6f40e37a25c79a76a","typeString":"literal_string \"ERC1155: burn from the zero address\""}],"id":1273,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11970:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1281,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11970:66:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1282,"nodeType":"ExpressionStatement","src":"11970:66:2"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1284,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1267,"src":"12054:3:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12058:6:2","memberName":"length","nodeType":"MemberAccess","src":"12054:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1286,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1270,"src":"12068:7:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12076:6:2","memberName":"length","nodeType":"MemberAccess","src":"12068:14:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12054:28:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2069647320616e6420616d6f756e7473206c656e677468206d69736d61746368","id":1289,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12084:42:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807","typeString":"literal_string \"ERC1155: ids and amounts length mismatch\""},"value":"ERC1155: ids and amounts length mismatch"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807","typeString":"literal_string \"ERC1155: ids and amounts length mismatch\""}],"id":1283,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12046:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1290,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12046:81:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1291,"nodeType":"ExpressionStatement","src":"12046:81:2"},{"assignments":[1293],"declarations":[{"constant":false,"id":1293,"mutability":"mutable","name":"operator","nameLocation":"12146:8:2","nodeType":"VariableDeclaration","scope":1383,"src":"12138:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1292,"name":"address","nodeType":"ElementaryTypeName","src":"12138:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1296,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1294,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2131,"src":"12157:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1295,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12157:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"12138:31:2"},{"expression":{"arguments":[{"id":1298,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1293,"src":"12201:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1299,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1264,"src":"12211:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1302,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12225:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1301,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12217:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1300,"name":"address","nodeType":"ElementaryTypeName","src":"12217:7:2","typeDescriptions":{}}},"id":1303,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12217:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1304,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1267,"src":"12229:3:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1305,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1270,"src":"12234:7:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"hexValue":"","id":1306,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12243:2:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":1297,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1435,"src":"12180:20:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1307,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12180:66:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1308,"nodeType":"ExpressionStatement","src":"12180:66:2"},{"body":{"id":1358,"nodeType":"Block","src":"12298:323:2","statements":[{"assignments":[1321],"declarations":[{"constant":false,"id":1321,"mutability":"mutable","name":"id","nameLocation":"12320:2:2","nodeType":"VariableDeclaration","scope":1358,"src":"12312:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1320,"name":"uint256","nodeType":"ElementaryTypeName","src":"12312:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1325,"initialValue":{"baseExpression":{"id":1322,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1267,"src":"12325:3:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1324,"indexExpression":{"id":1323,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1310,"src":"12329:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12325:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12312:19:2"},{"assignments":[1327],"declarations":[{"constant":false,"id":1327,"mutability":"mutable","name":"amount","nameLocation":"12353:6:2","nodeType":"VariableDeclaration","scope":1358,"src":"12345:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1326,"name":"uint256","nodeType":"ElementaryTypeName","src":"12345:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1331,"initialValue":{"baseExpression":{"id":1328,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1270,"src":"12362:7:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1330,"indexExpression":{"id":1329,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1310,"src":"12370:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12362:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12345:27:2"},{"assignments":[1333],"declarations":[{"constant":false,"id":1333,"mutability":"mutable","name":"fromBalance","nameLocation":"12395:11:2","nodeType":"VariableDeclaration","scope":1358,"src":"12387:19:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1332,"name":"uint256","nodeType":"ElementaryTypeName","src":"12387:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1339,"initialValue":{"baseExpression":{"baseExpression":{"id":1334,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"12409:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1336,"indexExpression":{"id":1335,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1321,"src":"12419:2:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12409:13:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1338,"indexExpression":{"id":1337,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1264,"src":"12423:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12409:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12387:41:2"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1341,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1333,"src":"12450:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1342,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1327,"src":"12465:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12450:21:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206275726e20616d6f756e7420657863656564732062616c616e6365","id":1344,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12473:38:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_294a5de01910e2350ff231c633ae2d453ed6b1b72c75506234b7aace63eae685","typeString":"literal_string \"ERC1155: burn amount exceeds balance\""},"value":"ERC1155: burn amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_294a5de01910e2350ff231c633ae2d453ed6b1b72c75506234b7aace63eae685","typeString":"literal_string \"ERC1155: burn amount exceeds balance\""}],"id":1340,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12442:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1345,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12442:70:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1346,"nodeType":"ExpressionStatement","src":"12442:70:2"},{"id":1357,"nodeType":"UncheckedBlock","src":"12526:85:2","statements":[{"expression":{"id":1355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1347,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"12554:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1350,"indexExpression":{"id":1348,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1321,"src":"12564:2:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12554:13:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1351,"indexExpression":{"id":1349,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1264,"src":"12568:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12554:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1352,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1333,"src":"12576:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1353,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1327,"src":"12590:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12576:20:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12554:42:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1356,"nodeType":"ExpressionStatement","src":"12554:42:2"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1313,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1310,"src":"12277:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1314,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1267,"src":"12281:3:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12285:6:2","memberName":"length","nodeType":"MemberAccess","src":"12281:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12277:14:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1359,"initializationExpression":{"assignments":[1310],"declarations":[{"constant":false,"id":1310,"mutability":"mutable","name":"i","nameLocation":"12270:1:2","nodeType":"VariableDeclaration","scope":1359,"src":"12262:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1309,"name":"uint256","nodeType":"ElementaryTypeName","src":"12262:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1312,"initialValue":{"hexValue":"30","id":1311,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12274:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"12262:13:2"},"loopExpression":{"expression":{"id":1318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"12293:3:2","subExpression":{"id":1317,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1310,"src":"12293:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1319,"nodeType":"ExpressionStatement","src":"12293:3:2"},"nodeType":"ForStatement","src":"12257:364:2"},{"eventCall":{"arguments":[{"id":1361,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1293,"src":"12650:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1362,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1264,"src":"12660:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12674:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1364,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12666:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1363,"name":"address","nodeType":"ElementaryTypeName","src":"12666:7:2","typeDescriptions":{}}},"id":1366,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12666:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1367,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1267,"src":"12678:3:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1368,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1270,"src":"12683:7:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":1360,"name":"TransferBatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1645,"src":"12636:13:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory)"}},"id":1369,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12636:55:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1370,"nodeType":"EmitStatement","src":"12631:60:2"},{"expression":{"arguments":[{"id":1372,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1293,"src":"12722:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1373,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1264,"src":"12732:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1376,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12746:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1375,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12738:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1374,"name":"address","nodeType":"ElementaryTypeName","src":"12738:7:2","typeDescriptions":{}}},"id":1377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12738:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1378,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1267,"src":"12750:3:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1379,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1270,"src":"12755:7:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"hexValue":"","id":1380,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12764:2:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":1371,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1454,"src":"12702:19:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1381,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12702:65:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1382,"nodeType":"ExpressionStatement","src":"12702:65:2"}]},"documentation":{"id":1262,"nodeType":"StructuredDocumentation","src":"11598:228:2","text":" @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n Emits a {TransferBatch} event.\n Requirements:\n - `ids` and `amounts` must have the same length."},"id":1384,"implemented":true,"kind":"function","modifiers":[],"name":"_burnBatch","nameLocation":"11840:10:2","nodeType":"FunctionDefinition","parameters":{"id":1271,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1264,"mutability":"mutable","name":"from","nameLocation":"11868:4:2","nodeType":"VariableDeclaration","scope":1384,"src":"11860:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1263,"name":"address","nodeType":"ElementaryTypeName","src":"11860:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1267,"mutability":"mutable","name":"ids","nameLocation":"11899:3:2","nodeType":"VariableDeclaration","scope":1384,"src":"11882:20:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1265,"name":"uint256","nodeType":"ElementaryTypeName","src":"11882:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1266,"nodeType":"ArrayTypeName","src":"11882:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1270,"mutability":"mutable","name":"amounts","nameLocation":"11929:7:2","nodeType":"VariableDeclaration","scope":1384,"src":"11912:24:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1268,"name":"uint256","nodeType":"ElementaryTypeName","src":"11912:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1269,"nodeType":"ArrayTypeName","src":"11912:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"11850:92:2"},"returnParameters":{"id":1272,"nodeType":"ParameterList","parameters":[],"src":"11960:0:2"},"scope":1611,"src":"11831:943:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1415,"nodeType":"Block","src":"13033:200:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1395,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"13051:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1396,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1389,"src":"13060:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13051:17:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2073657474696e6720617070726f76616c2073746174757320666f722073656c66","id":1398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13070:43:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2","typeString":"literal_string \"ERC1155: setting approval status for self\""},"value":"ERC1155: setting approval status for self"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2","typeString":"literal_string \"ERC1155: setting approval status for self\""}],"id":1394,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13043:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1399,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13043:71:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1400,"nodeType":"ExpressionStatement","src":"13043:71:2"},{"expression":{"id":1407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1401,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":420,"src":"13124:18:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":1404,"indexExpression":{"id":1402,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"13143:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13124:25:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":1405,"indexExpression":{"id":1403,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1389,"src":"13150:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13124:35:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1406,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1391,"src":"13162:8:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13124:46:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1408,"nodeType":"ExpressionStatement","src":"13124:46:2"},{"eventCall":{"arguments":[{"id":1410,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"13200:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1411,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1389,"src":"13207:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1412,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1391,"src":"13217:8:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1409,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1654,"src":"13185:14:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":1413,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13185:41:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1414,"nodeType":"EmitStatement","src":"13180:46:2"}]},"documentation":{"id":1385,"nodeType":"StructuredDocumentation","src":"12780:125:2","text":" @dev Approve `operator` to operate on all of `owner` tokens\n Emits an {ApprovalForAll} event."},"id":1416,"implemented":true,"kind":"function","modifiers":[],"name":"_setApprovalForAll","nameLocation":"12919:18:2","nodeType":"FunctionDefinition","parameters":{"id":1392,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1387,"mutability":"mutable","name":"owner","nameLocation":"12955:5:2","nodeType":"VariableDeclaration","scope":1416,"src":"12947:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1386,"name":"address","nodeType":"ElementaryTypeName","src":"12947:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1389,"mutability":"mutable","name":"operator","nameLocation":"12978:8:2","nodeType":"VariableDeclaration","scope":1416,"src":"12970:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1388,"name":"address","nodeType":"ElementaryTypeName","src":"12970:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1391,"mutability":"mutable","name":"approved","nameLocation":"13001:8:2","nodeType":"VariableDeclaration","scope":1416,"src":"12996:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1390,"name":"bool","nodeType":"ElementaryTypeName","src":"12996:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"12937:78:2"},"returnParameters":{"id":1393,"nodeType":"ParameterList","parameters":[],"src":"13033:0:2"},"scope":1611,"src":"12910:323:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1434,"nodeType":"Block","src":"14381:2:2","statements":[]},"documentation":{"id":1417,"nodeType":"StructuredDocumentation","src":"13239:925:2","text":" @dev Hook that is called before any token transfer. This includes minting\n and burning, as well as batched variants.\n The same hook is called on both single and batched variants. For single\n transfers, the length of the `ids` and `amounts` arrays will be 1.\n Calling conditions (for each `id` and `amount` pair):\n - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n of token type `id` will be  transferred to `to`.\n - When `from` is zero, `amount` tokens of token type `id` will be minted\n for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n will be burned.\n - `from` and `to` are never both zero.\n - `ids` and `amounts` have the same, non-zero length.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":1435,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"14178:20:2","nodeType":"FunctionDefinition","parameters":{"id":1432,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1419,"mutability":"mutable","name":"operator","nameLocation":"14216:8:2","nodeType":"VariableDeclaration","scope":1435,"src":"14208:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1418,"name":"address","nodeType":"ElementaryTypeName","src":"14208:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1421,"mutability":"mutable","name":"from","nameLocation":"14242:4:2","nodeType":"VariableDeclaration","scope":1435,"src":"14234:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1420,"name":"address","nodeType":"ElementaryTypeName","src":"14234:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1423,"mutability":"mutable","name":"to","nameLocation":"14264:2:2","nodeType":"VariableDeclaration","scope":1435,"src":"14256:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1422,"name":"address","nodeType":"ElementaryTypeName","src":"14256:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1426,"mutability":"mutable","name":"ids","nameLocation":"14293:3:2","nodeType":"VariableDeclaration","scope":1435,"src":"14276:20:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1424,"name":"uint256","nodeType":"ElementaryTypeName","src":"14276:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1425,"nodeType":"ArrayTypeName","src":"14276:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1429,"mutability":"mutable","name":"amounts","nameLocation":"14323:7:2","nodeType":"VariableDeclaration","scope":1435,"src":"14306:24:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1427,"name":"uint256","nodeType":"ElementaryTypeName","src":"14306:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1428,"nodeType":"ArrayTypeName","src":"14306:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1431,"mutability":"mutable","name":"data","nameLocation":"14353:4:2","nodeType":"VariableDeclaration","scope":1435,"src":"14340:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1430,"name":"bytes","nodeType":"ElementaryTypeName","src":"14340:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14198:165:2"},"returnParameters":{"id":1433,"nodeType":"ParameterList","parameters":[],"src":"14381:0:2"},"scope":1611,"src":"14169:214:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1453,"nodeType":"Block","src":"15527:2:2","statements":[]},"documentation":{"id":1436,"nodeType":"StructuredDocumentation","src":"14389:922:2","text":" @dev Hook that is called after any token transfer. This includes minting\n and burning, as well as batched variants.\n The same hook is called on both single and batched variants. For single\n transfers, the length of the `id` and `amount` arrays will be 1.\n Calling conditions (for each `id` and `amount` pair):\n - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n of token type `id` will be  transferred to `to`.\n - When `from` is zero, `amount` tokens of token type `id` will be minted\n for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n will be burned.\n - `from` and `to` are never both zero.\n - `ids` and `amounts` have the same, non-zero length.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":1454,"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokenTransfer","nameLocation":"15325:19:2","nodeType":"FunctionDefinition","parameters":{"id":1451,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1438,"mutability":"mutable","name":"operator","nameLocation":"15362:8:2","nodeType":"VariableDeclaration","scope":1454,"src":"15354:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1437,"name":"address","nodeType":"ElementaryTypeName","src":"15354:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1440,"mutability":"mutable","name":"from","nameLocation":"15388:4:2","nodeType":"VariableDeclaration","scope":1454,"src":"15380:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1439,"name":"address","nodeType":"ElementaryTypeName","src":"15380:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1442,"mutability":"mutable","name":"to","nameLocation":"15410:2:2","nodeType":"VariableDeclaration","scope":1454,"src":"15402:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1441,"name":"address","nodeType":"ElementaryTypeName","src":"15402:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1445,"mutability":"mutable","name":"ids","nameLocation":"15439:3:2","nodeType":"VariableDeclaration","scope":1454,"src":"15422:20:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1443,"name":"uint256","nodeType":"ElementaryTypeName","src":"15422:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1444,"nodeType":"ArrayTypeName","src":"15422:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1448,"mutability":"mutable","name":"amounts","nameLocation":"15469:7:2","nodeType":"VariableDeclaration","scope":1454,"src":"15452:24:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1446,"name":"uint256","nodeType":"ElementaryTypeName","src":"15452:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1447,"nodeType":"ArrayTypeName","src":"15452:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1450,"mutability":"mutable","name":"data","nameLocation":"15499:4:2","nodeType":"VariableDeclaration","scope":1454,"src":"15486:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1449,"name":"bytes","nodeType":"ElementaryTypeName","src":"15486:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"15344:165:2"},"returnParameters":{"id":1452,"nodeType":"ParameterList","parameters":[],"src":"15527:0:2"},"scope":1611,"src":"15316:213:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1516,"nodeType":"Block","src":"15728:532:2","statements":[{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1469,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1460,"src":"15742:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15745:10:2","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1807,"src":"15742:13:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":1471,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15742:15:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1515,"nodeType":"IfStatement","src":"15738:516:2","trueBody":{"id":1514,"nodeType":"Block","src":"15759:495:2","statements":[{"clauses":[{"block":{"id":1496,"nodeType":"Block","src":"15876:184:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1485,"name":"response","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1483,"src":"15898:8:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"expression":{"id":1486,"name":"IERC1155Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1774,"src":"15910:16:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155Receiver_$1774_$","typeString":"type(contract IERC1155Receiver)"}},"id":1487,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"15927:17:2","memberName":"onERC1155Received","nodeType":"MemberAccess","referencedDeclaration":1755,"src":"15910:34:2","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC1155Receiver.onERC1155Received(address,address,uint256,uint256,bytes calldata) returns (bytes4)"}},"id":1488,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"15945:8:2","memberName":"selector","nodeType":"MemberAccess","src":"15910:43:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"15898:55:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1495,"nodeType":"IfStatement","src":"15894:152:2","trueBody":{"id":1494,"nodeType":"Block","src":"15955:91:2","statements":[{"expression":{"arguments":[{"hexValue":"455243313135353a204552433131353552656365697665722072656a656374656420746f6b656e73","id":1491,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"15984:42:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503","typeString":"literal_string \"ERC1155: ERC1155Receiver rejected tokens\""},"value":"ERC1155: ERC1155Receiver rejected tokens"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503","typeString":"literal_string \"ERC1155: ERC1155Receiver rejected tokens\""}],"id":1490,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"15977:6:2","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1492,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15977:50:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1493,"nodeType":"ExpressionStatement","src":"15977:50:2"}]}}]},"errorName":"","id":1497,"nodeType":"TryCatchClause","parameters":{"id":1484,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1483,"mutability":"mutable","name":"response","nameLocation":"15866:8:2","nodeType":"VariableDeclaration","scope":1497,"src":"15859:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1482,"name":"bytes4","nodeType":"ElementaryTypeName","src":"15859:6:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"15858:17:2"},"src":"15850:210:2"},{"block":{"id":1505,"nodeType":"Block","src":"16095:47:2","statements":[{"expression":{"arguments":[{"id":1502,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1499,"src":"16120:6:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1501,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"16113:6:2","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1503,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16113:14:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1504,"nodeType":"ExpressionStatement","src":"16113:14:2"}]},"errorName":"Error","id":1506,"nodeType":"TryCatchClause","parameters":{"id":1500,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1499,"mutability":"mutable","name":"reason","nameLocation":"16087:6:2","nodeType":"VariableDeclaration","scope":1506,"src":"16073:20:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1498,"name":"string","nodeType":"ElementaryTypeName","src":"16073:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"16072:22:2"},"src":"16061:81:2"},{"block":{"id":1511,"nodeType":"Block","src":"16149:95:2","statements":[{"expression":{"arguments":[{"hexValue":"455243313135353a207472616e7366657220746f206e6f6e2d45524331313535526563656976657220696d706c656d656e746572","id":1508,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"16174:54:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d","typeString":"literal_string \"ERC1155: transfer to non-ERC1155Receiver implementer\""},"value":"ERC1155: transfer to non-ERC1155Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d","typeString":"literal_string \"ERC1155: transfer to non-ERC1155Receiver implementer\""}],"id":1507,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"16167:6:2","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1509,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16167:62:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1510,"nodeType":"ExpressionStatement","src":"16167:62:2"}]},"errorName":"","id":1512,"nodeType":"TryCatchClause","src":"16143:101:2"}],"externalCall":{"arguments":[{"id":1476,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1456,"src":"15816:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1477,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1458,"src":"15826:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1478,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1462,"src":"15832:2:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1479,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1464,"src":"15836:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1480,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1466,"src":"15844:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":1473,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1460,"src":"15794:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1472,"name":"IERC1155Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1774,"src":"15777:16:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155Receiver_$1774_$","typeString":"type(contract IERC1155Receiver)"}},"id":1474,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15777:20:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Receiver_$1774","typeString":"contract IERC1155Receiver"}},"id":1475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15798:17:2","memberName":"onERC1155Received","nodeType":"MemberAccess","referencedDeclaration":1755,"src":"15777:38:2","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,uint256,bytes memory) external returns (bytes4)"}},"id":1481,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15777:72:2","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":1513,"nodeType":"TryStatement","src":"15773:471:2"}]}}]},"id":1517,"implemented":true,"kind":"function","modifiers":[],"name":"_doSafeTransferAcceptanceCheck","nameLocation":"15544:30:2","nodeType":"FunctionDefinition","parameters":{"id":1467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1456,"mutability":"mutable","name":"operator","nameLocation":"15592:8:2","nodeType":"VariableDeclaration","scope":1517,"src":"15584:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1455,"name":"address","nodeType":"ElementaryTypeName","src":"15584:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1458,"mutability":"mutable","name":"from","nameLocation":"15618:4:2","nodeType":"VariableDeclaration","scope":1517,"src":"15610:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1457,"name":"address","nodeType":"ElementaryTypeName","src":"15610:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1460,"mutability":"mutable","name":"to","nameLocation":"15640:2:2","nodeType":"VariableDeclaration","scope":1517,"src":"15632:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1459,"name":"address","nodeType":"ElementaryTypeName","src":"15632:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1462,"mutability":"mutable","name":"id","nameLocation":"15660:2:2","nodeType":"VariableDeclaration","scope":1517,"src":"15652:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1461,"name":"uint256","nodeType":"ElementaryTypeName","src":"15652:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1464,"mutability":"mutable","name":"amount","nameLocation":"15680:6:2","nodeType":"VariableDeclaration","scope":1517,"src":"15672:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1463,"name":"uint256","nodeType":"ElementaryTypeName","src":"15672:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1466,"mutability":"mutable","name":"data","nameLocation":"15709:4:2","nodeType":"VariableDeclaration","scope":1517,"src":"15696:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1465,"name":"bytes","nodeType":"ElementaryTypeName","src":"15696:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"15574:145:2"},"returnParameters":{"id":1468,"nodeType":"ParameterList","parameters":[],"src":"15728:0:2"},"scope":1611,"src":"15535:725:2","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1581,"nodeType":"Block","src":"16484:574:2","statements":[{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1534,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1523,"src":"16498:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16501:10:2","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1807,"src":"16498:13:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":1536,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16498:15:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1580,"nodeType":"IfStatement","src":"16494:558:2","trueBody":{"id":1579,"nodeType":"Block","src":"16515:537:2","statements":[{"clauses":[{"block":{"id":1561,"nodeType":"Block","src":"16669:189:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1550,"name":"response","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1548,"src":"16691:8:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"expression":{"id":1551,"name":"IERC1155Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1774,"src":"16703:16:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155Receiver_$1774_$","typeString":"type(contract IERC1155Receiver)"}},"id":1552,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16720:22:2","memberName":"onERC1155BatchReceived","nodeType":"MemberAccess","referencedDeclaration":1773,"src":"16703:39:2","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_calldata_ptr_$_t_array$_t_uint256_$dyn_calldata_ptr_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC1155Receiver.onERC1155BatchReceived(address,address,uint256[] calldata,uint256[] calldata,bytes calldata) returns (bytes4)"}},"id":1553,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16743:8:2","memberName":"selector","nodeType":"MemberAccess","src":"16703:48:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"16691:60:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1560,"nodeType":"IfStatement","src":"16687:157:2","trueBody":{"id":1559,"nodeType":"Block","src":"16753:91:2","statements":[{"expression":{"arguments":[{"hexValue":"455243313135353a204552433131353552656365697665722072656a656374656420746f6b656e73","id":1556,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"16782:42:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503","typeString":"literal_string \"ERC1155: ERC1155Receiver rejected tokens\""},"value":"ERC1155: ERC1155Receiver rejected tokens"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503","typeString":"literal_string \"ERC1155: ERC1155Receiver rejected tokens\""}],"id":1555,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"16775:6:2","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1557,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16775:50:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1558,"nodeType":"ExpressionStatement","src":"16775:50:2"}]}}]},"errorName":"","id":1562,"nodeType":"TryCatchClause","parameters":{"id":1549,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1548,"mutability":"mutable","name":"response","nameLocation":"16646:8:2","nodeType":"VariableDeclaration","scope":1562,"src":"16639:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1547,"name":"bytes4","nodeType":"ElementaryTypeName","src":"16639:6:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"16621:47:2"},"src":"16613:245:2"},{"block":{"id":1570,"nodeType":"Block","src":"16893:47:2","statements":[{"expression":{"arguments":[{"id":1567,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1564,"src":"16918:6:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1566,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"16911:6:2","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1568,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16911:14:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1569,"nodeType":"ExpressionStatement","src":"16911:14:2"}]},"errorName":"Error","id":1571,"nodeType":"TryCatchClause","parameters":{"id":1565,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1564,"mutability":"mutable","name":"reason","nameLocation":"16885:6:2","nodeType":"VariableDeclaration","scope":1571,"src":"16871:20:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1563,"name":"string","nodeType":"ElementaryTypeName","src":"16871:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"16870:22:2"},"src":"16859:81:2"},{"block":{"id":1576,"nodeType":"Block","src":"16947:95:2","statements":[{"expression":{"arguments":[{"hexValue":"455243313135353a207472616e7366657220746f206e6f6e2d45524331313535526563656976657220696d706c656d656e746572","id":1573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"16972:54:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d","typeString":"literal_string \"ERC1155: transfer to non-ERC1155Receiver implementer\""},"value":"ERC1155: transfer to non-ERC1155Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d","typeString":"literal_string \"ERC1155: transfer to non-ERC1155Receiver implementer\""}],"id":1572,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"16965:6:2","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1574,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16965:62:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1575,"nodeType":"ExpressionStatement","src":"16965:62:2"}]},"errorName":"","id":1577,"nodeType":"TryCatchClause","src":"16941:101:2"}],"externalCall":{"arguments":[{"id":1541,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1519,"src":"16577:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1542,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1521,"src":"16587:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1543,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1526,"src":"16593:3:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1544,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1529,"src":"16598:7:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1545,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1531,"src":"16607:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":1538,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1523,"src":"16550:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1537,"name":"IERC1155Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1774,"src":"16533:16:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155Receiver_$1774_$","typeString":"type(contract IERC1155Receiver)"}},"id":1539,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16533:20:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Receiver_$1774","typeString":"contract IERC1155Receiver"}},"id":1540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16554:22:2","memberName":"onERC1155BatchReceived","nodeType":"MemberAccess","referencedDeclaration":1773,"src":"16533:43:2","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256[] memory,uint256[] memory,bytes memory) external returns (bytes4)"}},"id":1546,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16533:79:2","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":1578,"nodeType":"TryStatement","src":"16529:513:2"}]}}]},"id":1582,"implemented":true,"kind":"function","modifiers":[],"name":"_doSafeBatchTransferAcceptanceCheck","nameLocation":"16275:35:2","nodeType":"FunctionDefinition","parameters":{"id":1532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1519,"mutability":"mutable","name":"operator","nameLocation":"16328:8:2","nodeType":"VariableDeclaration","scope":1582,"src":"16320:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1518,"name":"address","nodeType":"ElementaryTypeName","src":"16320:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1521,"mutability":"mutable","name":"from","nameLocation":"16354:4:2","nodeType":"VariableDeclaration","scope":1582,"src":"16346:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1520,"name":"address","nodeType":"ElementaryTypeName","src":"16346:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1523,"mutability":"mutable","name":"to","nameLocation":"16376:2:2","nodeType":"VariableDeclaration","scope":1582,"src":"16368:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1522,"name":"address","nodeType":"ElementaryTypeName","src":"16368:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1526,"mutability":"mutable","name":"ids","nameLocation":"16405:3:2","nodeType":"VariableDeclaration","scope":1582,"src":"16388:20:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1524,"name":"uint256","nodeType":"ElementaryTypeName","src":"16388:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1525,"nodeType":"ArrayTypeName","src":"16388:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1529,"mutability":"mutable","name":"amounts","nameLocation":"16435:7:2","nodeType":"VariableDeclaration","scope":1582,"src":"16418:24:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1527,"name":"uint256","nodeType":"ElementaryTypeName","src":"16418:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1528,"nodeType":"ArrayTypeName","src":"16418:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1531,"mutability":"mutable","name":"data","nameLocation":"16465:4:2","nodeType":"VariableDeclaration","scope":1582,"src":"16452:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1530,"name":"bytes","nodeType":"ElementaryTypeName","src":"16452:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"16310:165:2"},"returnParameters":{"id":1533,"nodeType":"ParameterList","parameters":[],"src":"16484:0:2"},"scope":1611,"src":"16266:792:2","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1609,"nodeType":"Block","src":"17148:109:2","statements":[{"assignments":[1594],"declarations":[{"constant":false,"id":1594,"mutability":"mutable","name":"array","nameLocation":"17175:5:2","nodeType":"VariableDeclaration","scope":1609,"src":"17158:22:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1592,"name":"uint256","nodeType":"ElementaryTypeName","src":"17158:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1593,"nodeType":"ArrayTypeName","src":"17158:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":1600,"initialValue":{"arguments":[{"hexValue":"31","id":1598,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17197:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":1597,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"17183:13:2","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":1595,"name":"uint256","nodeType":"ElementaryTypeName","src":"17187:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1596,"nodeType":"ArrayTypeName","src":"17187:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":1599,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17183:16:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"17158:41:2"},{"expression":{"id":1605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1601,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1594,"src":"17209:5:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1603,"indexExpression":{"hexValue":"30","id":1602,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17215:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"17209:8:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1604,"name":"element","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1584,"src":"17220:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17209:18:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1606,"nodeType":"ExpressionStatement","src":"17209:18:2"},{"expression":{"id":1607,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1594,"src":"17245:5:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":1589,"id":1608,"nodeType":"Return","src":"17238:12:2"}]},"id":1610,"implemented":true,"kind":"function","modifiers":[],"name":"_asSingletonArray","nameLocation":"17073:17:2","nodeType":"FunctionDefinition","parameters":{"id":1585,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1584,"mutability":"mutable","name":"element","nameLocation":"17099:7:2","nodeType":"VariableDeclaration","scope":1610,"src":"17091:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1583,"name":"uint256","nodeType":"ElementaryTypeName","src":"17091:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17090:17:2"},"returnParameters":{"id":1589,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1588,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1610,"src":"17130:16:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1586,"name":"uint256","nodeType":"ElementaryTypeName","src":"17130:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1587,"nodeType":"ArrayTypeName","src":"17130:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"17129:18:2"},"scope":1611,"src":"17064:193:2","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1612,"src":"570:16689:2","usedErrors":[]}],"src":"109:17151:2"},"id":2},"@openzeppelin/contracts/token/ERC1155/IERC1155.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC1155/IERC1155.sol","exportedSymbols":{"IERC1155":[1733],"IERC165":[2854]},"id":1734,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1613,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"110:23:3"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../../utils/introspection/IERC165.sol","id":1614,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1734,"sourceUnit":2855,"src":"135:47:3","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1616,"name":"IERC165","nameLocations":["372:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":2854,"src":"372:7:3"},"id":1617,"nodeType":"InheritanceSpecifier","src":"372:7:3"}],"canonicalName":"IERC1155","contractDependencies":[],"contractKind":"interface","documentation":{"id":1615,"nodeType":"StructuredDocumentation","src":"184:165:3","text":" @dev Required interface of an ERC1155 compliant contract, as defined in the\n https://eips.ethereum.org/EIPS/eip-1155[EIP].\n _Available since v3.1._"},"fullyImplemented":false,"id":1733,"linearizedBaseContracts":[1733,2854],"name":"IERC1155","nameLocation":"360:8:3","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1618,"nodeType":"StructuredDocumentation","src":"386:121:3","text":" @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."},"eventSelector":"c3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62","id":1630,"name":"TransferSingle","nameLocation":"518:14:3","nodeType":"EventDefinition","parameters":{"id":1629,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1620,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"549:8:3","nodeType":"VariableDeclaration","scope":1630,"src":"533:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1619,"name":"address","nodeType":"ElementaryTypeName","src":"533:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1622,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"575:4:3","nodeType":"VariableDeclaration","scope":1630,"src":"559:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1621,"name":"address","nodeType":"ElementaryTypeName","src":"559:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1624,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"597:2:3","nodeType":"VariableDeclaration","scope":1630,"src":"581:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1623,"name":"address","nodeType":"ElementaryTypeName","src":"581:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1626,"indexed":false,"mutability":"mutable","name":"id","nameLocation":"609:2:3","nodeType":"VariableDeclaration","scope":1630,"src":"601:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1625,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1628,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"621:5:3","nodeType":"VariableDeclaration","scope":1630,"src":"613:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1627,"name":"uint256","nodeType":"ElementaryTypeName","src":"613:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"532:95:3"},"src":"512:116:3"},{"anonymous":false,"documentation":{"id":1631,"nodeType":"StructuredDocumentation","src":"634:144:3","text":" @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n transfers."},"eventSelector":"4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb","id":1645,"name":"TransferBatch","nameLocation":"789:13:3","nodeType":"EventDefinition","parameters":{"id":1644,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1633,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"828:8:3","nodeType":"VariableDeclaration","scope":1645,"src":"812:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1632,"name":"address","nodeType":"ElementaryTypeName","src":"812:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1635,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"862:4:3","nodeType":"VariableDeclaration","scope":1645,"src":"846:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1634,"name":"address","nodeType":"ElementaryTypeName","src":"846:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1637,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"892:2:3","nodeType":"VariableDeclaration","scope":1645,"src":"876:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1636,"name":"address","nodeType":"ElementaryTypeName","src":"876:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1640,"indexed":false,"mutability":"mutable","name":"ids","nameLocation":"914:3:3","nodeType":"VariableDeclaration","scope":1645,"src":"904:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1638,"name":"uint256","nodeType":"ElementaryTypeName","src":"904:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1639,"nodeType":"ArrayTypeName","src":"904:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1643,"indexed":false,"mutability":"mutable","name":"values","nameLocation":"937:6:3","nodeType":"VariableDeclaration","scope":1645,"src":"927:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1641,"name":"uint256","nodeType":"ElementaryTypeName","src":"927:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1642,"nodeType":"ArrayTypeName","src":"927:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"802:147:3"},"src":"783:167:3"},{"anonymous":false,"documentation":{"id":1646,"nodeType":"StructuredDocumentation","src":"956:147:3","text":" @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n `approved`."},"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":1654,"name":"ApprovalForAll","nameLocation":"1114:14:3","nodeType":"EventDefinition","parameters":{"id":1653,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1648,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1145:7:3","nodeType":"VariableDeclaration","scope":1654,"src":"1129:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1647,"name":"address","nodeType":"ElementaryTypeName","src":"1129:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1650,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"1170:8:3","nodeType":"VariableDeclaration","scope":1654,"src":"1154:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1649,"name":"address","nodeType":"ElementaryTypeName","src":"1154:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1652,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"1185:8:3","nodeType":"VariableDeclaration","scope":1654,"src":"1180:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1651,"name":"bool","nodeType":"ElementaryTypeName","src":"1180:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1128:66:3"},"src":"1108:87:3"},{"anonymous":false,"documentation":{"id":1655,"nodeType":"StructuredDocumentation","src":"1201:343:3","text":" @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n If an {URI} event was emitted for `id`, the standard\n https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n returned by {IERC1155MetadataURI-uri}."},"eventSelector":"6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b","id":1661,"name":"URI","nameLocation":"1555:3:3","nodeType":"EventDefinition","parameters":{"id":1660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1657,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"1566:5:3","nodeType":"VariableDeclaration","scope":1661,"src":"1559:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1656,"name":"string","nodeType":"ElementaryTypeName","src":"1559:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1659,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"1589:2:3","nodeType":"VariableDeclaration","scope":1661,"src":"1573:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1658,"name":"uint256","nodeType":"ElementaryTypeName","src":"1573:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1558:34:3"},"src":"1549:44:3"},{"documentation":{"id":1662,"nodeType":"StructuredDocumentation","src":"1599:173:3","text":" @dev Returns the amount of tokens of token type `id` owned by `account`.\n Requirements:\n - `account` cannot be the zero address."},"functionSelector":"00fdd58e","id":1671,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"1786:9:3","nodeType":"FunctionDefinition","parameters":{"id":1667,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1664,"mutability":"mutable","name":"account","nameLocation":"1804:7:3","nodeType":"VariableDeclaration","scope":1671,"src":"1796:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1663,"name":"address","nodeType":"ElementaryTypeName","src":"1796:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1666,"mutability":"mutable","name":"id","nameLocation":"1821:2:3","nodeType":"VariableDeclaration","scope":1671,"src":"1813:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1665,"name":"uint256","nodeType":"ElementaryTypeName","src":"1813:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1795:29:3"},"returnParameters":{"id":1670,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1669,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1671,"src":"1848:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1668,"name":"uint256","nodeType":"ElementaryTypeName","src":"1848:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1847:9:3"},"scope":1733,"src":"1777:80:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1672,"nodeType":"StructuredDocumentation","src":"1863:188:3","text":" @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n Requirements:\n - `accounts` and `ids` must have the same length."},"functionSelector":"4e1273f4","id":1684,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOfBatch","nameLocation":"2065:14:3","nodeType":"FunctionDefinition","parameters":{"id":1679,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1675,"mutability":"mutable","name":"accounts","nameLocation":"2099:8:3","nodeType":"VariableDeclaration","scope":1684,"src":"2080:27:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1673,"name":"address","nodeType":"ElementaryTypeName","src":"2080:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1674,"nodeType":"ArrayTypeName","src":"2080:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":1678,"mutability":"mutable","name":"ids","nameLocation":"2128:3:3","nodeType":"VariableDeclaration","scope":1684,"src":"2109:22:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1676,"name":"uint256","nodeType":"ElementaryTypeName","src":"2109:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1677,"nodeType":"ArrayTypeName","src":"2109:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2079:53:3"},"returnParameters":{"id":1683,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1682,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1684,"src":"2180:16:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1680,"name":"uint256","nodeType":"ElementaryTypeName","src":"2180:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1681,"nodeType":"ArrayTypeName","src":"2180:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2179:18:3"},"scope":1733,"src":"2056:142:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1685,"nodeType":"StructuredDocumentation","src":"2204:248:3","text":" @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n Emits an {ApprovalForAll} event.\n Requirements:\n - `operator` cannot be the caller."},"functionSelector":"a22cb465","id":1692,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"2466:17:3","nodeType":"FunctionDefinition","parameters":{"id":1690,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1687,"mutability":"mutable","name":"operator","nameLocation":"2492:8:3","nodeType":"VariableDeclaration","scope":1692,"src":"2484:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1686,"name":"address","nodeType":"ElementaryTypeName","src":"2484:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1689,"mutability":"mutable","name":"approved","nameLocation":"2507:8:3","nodeType":"VariableDeclaration","scope":1692,"src":"2502:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1688,"name":"bool","nodeType":"ElementaryTypeName","src":"2502:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2483:33:3"},"returnParameters":{"id":1691,"nodeType":"ParameterList","parameters":[],"src":"2525:0:3"},"scope":1733,"src":"2457:69:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1693,"nodeType":"StructuredDocumentation","src":"2532:135:3","text":" @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n See {setApprovalForAll}."},"functionSelector":"e985e9c5","id":1702,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"2681:16:3","nodeType":"FunctionDefinition","parameters":{"id":1698,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1695,"mutability":"mutable","name":"account","nameLocation":"2706:7:3","nodeType":"VariableDeclaration","scope":1702,"src":"2698:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1694,"name":"address","nodeType":"ElementaryTypeName","src":"2698:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1697,"mutability":"mutable","name":"operator","nameLocation":"2723:8:3","nodeType":"VariableDeclaration","scope":1702,"src":"2715:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1696,"name":"address","nodeType":"ElementaryTypeName","src":"2715:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2697:35:3"},"returnParameters":{"id":1701,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1700,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1702,"src":"2756:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1699,"name":"bool","nodeType":"ElementaryTypeName","src":"2756:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2755:6:3"},"scope":1733,"src":"2672:90:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1703,"nodeType":"StructuredDocumentation","src":"2768:556:3","text":" @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n Emits a {TransferSingle} event.\n Requirements:\n - `to` cannot be the zero address.\n - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n - `from` must have a balance of tokens of type `id` of at least `amount`.\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n acceptance magic value."},"functionSelector":"f242432a","id":1716,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"3338:16:3","nodeType":"FunctionDefinition","parameters":{"id":1714,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1705,"mutability":"mutable","name":"from","nameLocation":"3372:4:3","nodeType":"VariableDeclaration","scope":1716,"src":"3364:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1704,"name":"address","nodeType":"ElementaryTypeName","src":"3364:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1707,"mutability":"mutable","name":"to","nameLocation":"3394:2:3","nodeType":"VariableDeclaration","scope":1716,"src":"3386:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1706,"name":"address","nodeType":"ElementaryTypeName","src":"3386:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1709,"mutability":"mutable","name":"id","nameLocation":"3414:2:3","nodeType":"VariableDeclaration","scope":1716,"src":"3406:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1708,"name":"uint256","nodeType":"ElementaryTypeName","src":"3406:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1711,"mutability":"mutable","name":"amount","nameLocation":"3434:6:3","nodeType":"VariableDeclaration","scope":1716,"src":"3426:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1710,"name":"uint256","nodeType":"ElementaryTypeName","src":"3426:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1713,"mutability":"mutable","name":"data","nameLocation":"3465:4:3","nodeType":"VariableDeclaration","scope":1716,"src":"3450:19:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1712,"name":"bytes","nodeType":"ElementaryTypeName","src":"3450:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3354:121:3"},"returnParameters":{"id":1715,"nodeType":"ParameterList","parameters":[],"src":"3484:0:3"},"scope":1733,"src":"3329:156:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1717,"nodeType":"StructuredDocumentation","src":"3491:390:3","text":" @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n Emits a {TransferBatch} event.\n Requirements:\n - `ids` and `amounts` must have the same length.\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n acceptance magic value."},"functionSelector":"2eb2c2d6","id":1732,"implemented":false,"kind":"function","modifiers":[],"name":"safeBatchTransferFrom","nameLocation":"3895:21:3","nodeType":"FunctionDefinition","parameters":{"id":1730,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1719,"mutability":"mutable","name":"from","nameLocation":"3934:4:3","nodeType":"VariableDeclaration","scope":1732,"src":"3926:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1718,"name":"address","nodeType":"ElementaryTypeName","src":"3926:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1721,"mutability":"mutable","name":"to","nameLocation":"3956:2:3","nodeType":"VariableDeclaration","scope":1732,"src":"3948:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1720,"name":"address","nodeType":"ElementaryTypeName","src":"3948:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1724,"mutability":"mutable","name":"ids","nameLocation":"3987:3:3","nodeType":"VariableDeclaration","scope":1732,"src":"3968:22:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1722,"name":"uint256","nodeType":"ElementaryTypeName","src":"3968:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1723,"nodeType":"ArrayTypeName","src":"3968:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1727,"mutability":"mutable","name":"amounts","nameLocation":"4019:7:3","nodeType":"VariableDeclaration","scope":1732,"src":"4000:26:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1725,"name":"uint256","nodeType":"ElementaryTypeName","src":"4000:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1726,"nodeType":"ArrayTypeName","src":"4000:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1729,"mutability":"mutable","name":"data","nameLocation":"4051:4:3","nodeType":"VariableDeclaration","scope":1732,"src":"4036:19:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1728,"name":"bytes","nodeType":"ElementaryTypeName","src":"4036:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3916:145:3"},"returnParameters":{"id":1731,"nodeType":"ParameterList","parameters":[],"src":"4070:0:3"},"scope":1733,"src":"3886:185:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1734,"src":"350:3723:3","usedErrors":[]}],"src":"110:3964:3"},"id":3},"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol","exportedSymbols":{"IERC1155Receiver":[1774],"IERC165":[2854]},"id":1775,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1735,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"118:23:4"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../../utils/introspection/IERC165.sol","id":1736,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1775,"sourceUnit":2855,"src":"143:47:4","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1738,"name":"IERC165","nameLocations":["262:7:4"],"nodeType":"IdentifierPath","referencedDeclaration":2854,"src":"262:7:4"},"id":1739,"nodeType":"InheritanceSpecifier","src":"262:7:4"}],"canonicalName":"IERC1155Receiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":1737,"nodeType":"StructuredDocumentation","src":"192:39:4","text":" @dev _Available since v3.1._"},"fullyImplemented":false,"id":1774,"linearizedBaseContracts":[1774,2854],"name":"IERC1155Receiver","nameLocation":"242:16:4","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1740,"nodeType":"StructuredDocumentation","src":"276:826:4","text":" @dev Handles the receipt of a single ERC1155 token type. This function is\n called at the end of a `safeTransferFrom` after the balance has been updated.\n NOTE: To accept the transfer, this must return\n `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n (i.e. 0xf23a6e61, or its own function selector).\n @param operator The address which initiated the transfer (i.e. msg.sender)\n @param from The address which previously owned the token\n @param id The ID of the token being transferred\n @param value The amount of tokens being transferred\n @param data Additional data with no specified format\n @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed"},"functionSelector":"f23a6e61","id":1755,"implemented":false,"kind":"function","modifiers":[],"name":"onERC1155Received","nameLocation":"1116:17:4","nodeType":"FunctionDefinition","parameters":{"id":1751,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1742,"mutability":"mutable","name":"operator","nameLocation":"1151:8:4","nodeType":"VariableDeclaration","scope":1755,"src":"1143:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1741,"name":"address","nodeType":"ElementaryTypeName","src":"1143:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1744,"mutability":"mutable","name":"from","nameLocation":"1177:4:4","nodeType":"VariableDeclaration","scope":1755,"src":"1169:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1743,"name":"address","nodeType":"ElementaryTypeName","src":"1169:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1746,"mutability":"mutable","name":"id","nameLocation":"1199:2:4","nodeType":"VariableDeclaration","scope":1755,"src":"1191:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1745,"name":"uint256","nodeType":"ElementaryTypeName","src":"1191:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1748,"mutability":"mutable","name":"value","nameLocation":"1219:5:4","nodeType":"VariableDeclaration","scope":1755,"src":"1211:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1747,"name":"uint256","nodeType":"ElementaryTypeName","src":"1211:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1750,"mutability":"mutable","name":"data","nameLocation":"1249:4:4","nodeType":"VariableDeclaration","scope":1755,"src":"1234:19:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1749,"name":"bytes","nodeType":"ElementaryTypeName","src":"1234:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1133:126:4"},"returnParameters":{"id":1754,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1753,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1755,"src":"1278:6:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1752,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1278:6:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1277:8:4"},"scope":1774,"src":"1107:179:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1756,"nodeType":"StructuredDocumentation","src":"1292:994:4","text":" @dev Handles the receipt of a multiple ERC1155 token types. This function\n is called at the end of a `safeBatchTransferFrom` after the balances have\n been updated.\n NOTE: To accept the transfer(s), this must return\n `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n (i.e. 0xbc197c81, or its own function selector).\n @param operator The address which initiated the batch transfer (i.e. msg.sender)\n @param from The address which previously owned the token\n @param ids An array containing ids of each token being transferred (order and length must match values array)\n @param values An array containing amounts of each token being transferred (order and length must match ids array)\n @param data Additional data with no specified format\n @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed"},"functionSelector":"bc197c81","id":1773,"implemented":false,"kind":"function","modifiers":[],"name":"onERC1155BatchReceived","nameLocation":"2300:22:4","nodeType":"FunctionDefinition","parameters":{"id":1769,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1758,"mutability":"mutable","name":"operator","nameLocation":"2340:8:4","nodeType":"VariableDeclaration","scope":1773,"src":"2332:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1757,"name":"address","nodeType":"ElementaryTypeName","src":"2332:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1760,"mutability":"mutable","name":"from","nameLocation":"2366:4:4","nodeType":"VariableDeclaration","scope":1773,"src":"2358:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1759,"name":"address","nodeType":"ElementaryTypeName","src":"2358:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1763,"mutability":"mutable","name":"ids","nameLocation":"2399:3:4","nodeType":"VariableDeclaration","scope":1773,"src":"2380:22:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1761,"name":"uint256","nodeType":"ElementaryTypeName","src":"2380:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1762,"nodeType":"ArrayTypeName","src":"2380:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1766,"mutability":"mutable","name":"values","nameLocation":"2431:6:4","nodeType":"VariableDeclaration","scope":1773,"src":"2412:25:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1764,"name":"uint256","nodeType":"ElementaryTypeName","src":"2412:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1765,"nodeType":"ArrayTypeName","src":"2412:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1768,"mutability":"mutable","name":"data","nameLocation":"2462:4:4","nodeType":"VariableDeclaration","scope":1773,"src":"2447:19:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1767,"name":"bytes","nodeType":"ElementaryTypeName","src":"2447:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2322:150:4"},"returnParameters":{"id":1772,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1771,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1773,"src":"2491:6:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1770,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2491:6:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2490:8:4"},"scope":1774,"src":"2291:208:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1775,"src":"232:2269:4","usedErrors":[]}],"src":"118:2384:4"},"id":4},"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol","exportedSymbols":{"IERC1155":[1733],"IERC1155MetadataURI":[1789],"IERC165":[2854]},"id":1790,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1776,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"117:23:5"},{"absolutePath":"@openzeppelin/contracts/token/ERC1155/IERC1155.sol","file":"../IERC1155.sol","id":1777,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1790,"sourceUnit":1734,"src":"142:25:5","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1779,"name":"IERC1155","nameLocations":["397:8:5"],"nodeType":"IdentifierPath","referencedDeclaration":1733,"src":"397:8:5"},"id":1780,"nodeType":"InheritanceSpecifier","src":"397:8:5"}],"canonicalName":"IERC1155MetadataURI","contractDependencies":[],"contractKind":"interface","documentation":{"id":1778,"nodeType":"StructuredDocumentation","src":"169:194:5","text":" @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n _Available since v3.1._"},"fullyImplemented":false,"id":1789,"linearizedBaseContracts":[1789,1733,2854],"name":"IERC1155MetadataURI","nameLocation":"374:19:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1781,"nodeType":"StructuredDocumentation","src":"412:192:5","text":" @dev Returns the URI for token type `id`.\n If the `\\{id\\}` substring is present in the URI, it must be replaced by\n clients with the actual token type ID."},"functionSelector":"0e89341c","id":1788,"implemented":false,"kind":"function","modifiers":[],"name":"uri","nameLocation":"618:3:5","nodeType":"FunctionDefinition","parameters":{"id":1784,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1783,"mutability":"mutable","name":"id","nameLocation":"630:2:5","nodeType":"VariableDeclaration","scope":1788,"src":"622:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1782,"name":"uint256","nodeType":"ElementaryTypeName","src":"622:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"621:12:5"},"returnParameters":{"id":1787,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1786,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1788,"src":"657:13:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1785,"name":"string","nodeType":"ElementaryTypeName","src":"657:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"656:15:5"},"scope":1789,"src":"609:63:5","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1790,"src":"364:310:5","usedErrors":[]}],"src":"117:558:5"},"id":5},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[2119]},"id":2120,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1791,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:6"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":1792,"nodeType":"StructuredDocumentation","src":"126:67:6","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":2119,"linearizedBaseContracts":[2119],"name":"Address","nameLocation":"202:7:6","nodeType":"ContractDefinition","nodes":[{"body":{"id":1806,"nodeType":"Block","src":"1241:254:6","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1800,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1795,"src":"1465:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1473:4:6","memberName":"code","nodeType":"MemberAccess","src":"1465:12:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1478:6:6","memberName":"length","nodeType":"MemberAccess","src":"1465:19:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1803,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1487:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1465:23:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1799,"id":1805,"nodeType":"Return","src":"1458:30:6"}]},"documentation":{"id":1793,"nodeType":"StructuredDocumentation","src":"216:954:6","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":1807,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1184:10:6","nodeType":"FunctionDefinition","parameters":{"id":1796,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1795,"mutability":"mutable","name":"account","nameLocation":"1203:7:6","nodeType":"VariableDeclaration","scope":1807,"src":"1195:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1794,"name":"address","nodeType":"ElementaryTypeName","src":"1195:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1194:17:6"},"returnParameters":{"id":1799,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1798,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1807,"src":"1235:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1797,"name":"bool","nodeType":"ElementaryTypeName","src":"1235:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1234:6:6"},"scope":2119,"src":"1175:320:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1840,"nodeType":"Block","src":"2483:241:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1818,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2509:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$2119","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$2119","typeString":"library Address"}],"id":1817,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2501:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1816,"name":"address","nodeType":"ElementaryTypeName","src":"2501:7:6","typeDescriptions":{}}},"id":1819,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2501:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2515:7:6","memberName":"balance","nodeType":"MemberAccess","src":"2501:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1821,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1812,"src":"2526:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2501:31:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":1823,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2534:31:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":1815,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2493:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1824,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2493:73:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1825,"nodeType":"ExpressionStatement","src":"2493:73:6"},{"assignments":[1827,null],"declarations":[{"constant":false,"id":1827,"mutability":"mutable","name":"success","nameLocation":"2583:7:6","nodeType":"VariableDeclaration","scope":1840,"src":"2578:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1826,"name":"bool","nodeType":"ElementaryTypeName","src":"2578:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1834,"initialValue":{"arguments":[{"hexValue":"","id":1832,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2626:2:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":1828,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1810,"src":"2596:9:6","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1829,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2606:4:6","memberName":"call","nodeType":"MemberAccess","src":"2596:14:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1830,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1812,"src":"2618:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2596:29:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1833,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2596:33:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2577:52:6"},{"expression":{"arguments":[{"id":1836,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1827,"src":"2647:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":1837,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2656:60:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":1835,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2639:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1838,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2639:78:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1839,"nodeType":"ExpressionStatement","src":"2639:78:6"}]},"documentation":{"id":1808,"nodeType":"StructuredDocumentation","src":"1501:906:6","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":1841,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2421:9:6","nodeType":"FunctionDefinition","parameters":{"id":1813,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1810,"mutability":"mutable","name":"recipient","nameLocation":"2447:9:6","nodeType":"VariableDeclaration","scope":1841,"src":"2431:25:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1809,"name":"address","nodeType":"ElementaryTypeName","src":"2431:15:6","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":1812,"mutability":"mutable","name":"amount","nameLocation":"2466:6:6","nodeType":"VariableDeclaration","scope":1841,"src":"2458:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1811,"name":"uint256","nodeType":"ElementaryTypeName","src":"2458:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2430:43:6"},"returnParameters":{"id":1814,"nodeType":"ParameterList","parameters":[],"src":"2483:0:6"},"scope":2119,"src":"2412:312:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1858,"nodeType":"Block","src":"3555:96:6","statements":[{"expression":{"arguments":[{"id":1852,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1844,"src":"3594:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1853,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1846,"src":"3602:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1854,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3608:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":1855,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3611:32:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":1851,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1899,1943],"referencedDeclaration":1943,"src":"3572:21:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1856,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3572:72:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1850,"id":1857,"nodeType":"Return","src":"3565:79:6"}]},"documentation":{"id":1842,"nodeType":"StructuredDocumentation","src":"2730:731:6","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":1859,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3475:12:6","nodeType":"FunctionDefinition","parameters":{"id":1847,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1844,"mutability":"mutable","name":"target","nameLocation":"3496:6:6","nodeType":"VariableDeclaration","scope":1859,"src":"3488:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1843,"name":"address","nodeType":"ElementaryTypeName","src":"3488:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1846,"mutability":"mutable","name":"data","nameLocation":"3517:4:6","nodeType":"VariableDeclaration","scope":1859,"src":"3504:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1845,"name":"bytes","nodeType":"ElementaryTypeName","src":"3504:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3487:35:6"},"returnParameters":{"id":1850,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1849,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1859,"src":"3541:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1848,"name":"bytes","nodeType":"ElementaryTypeName","src":"3541:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3540:14:6"},"scope":2119,"src":"3466:185:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1878,"nodeType":"Block","src":"4020:76:6","statements":[{"expression":{"arguments":[{"id":1872,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1862,"src":"4059:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1873,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1864,"src":"4067:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1874,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4073:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":1875,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1866,"src":"4076:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1871,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1899,1943],"referencedDeclaration":1943,"src":"4037:21:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1876,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4037:52:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1870,"id":1877,"nodeType":"Return","src":"4030:59:6"}]},"documentation":{"id":1860,"nodeType":"StructuredDocumentation","src":"3657:211:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1879,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3882:12:6","nodeType":"FunctionDefinition","parameters":{"id":1867,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1862,"mutability":"mutable","name":"target","nameLocation":"3912:6:6","nodeType":"VariableDeclaration","scope":1879,"src":"3904:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1861,"name":"address","nodeType":"ElementaryTypeName","src":"3904:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1864,"mutability":"mutable","name":"data","nameLocation":"3941:4:6","nodeType":"VariableDeclaration","scope":1879,"src":"3928:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1863,"name":"bytes","nodeType":"ElementaryTypeName","src":"3928:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1866,"mutability":"mutable","name":"errorMessage","nameLocation":"3969:12:6","nodeType":"VariableDeclaration","scope":1879,"src":"3955:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1865,"name":"string","nodeType":"ElementaryTypeName","src":"3955:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3894:93:6"},"returnParameters":{"id":1870,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1869,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1879,"src":"4006:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1868,"name":"bytes","nodeType":"ElementaryTypeName","src":"4006:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4005:14:6"},"scope":2119,"src":"3873:223:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1898,"nodeType":"Block","src":"4601:111:6","statements":[{"expression":{"arguments":[{"id":1892,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1882,"src":"4640:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1893,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1884,"src":"4648:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1894,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1886,"src":"4654:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":1895,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4661:43:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":1891,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1899,1943],"referencedDeclaration":1943,"src":"4618:21:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1896,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4618:87:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1890,"id":1897,"nodeType":"Return","src":"4611:94:6"}]},"documentation":{"id":1880,"nodeType":"StructuredDocumentation","src":"4102:351:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":1899,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4467:21:6","nodeType":"FunctionDefinition","parameters":{"id":1887,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1882,"mutability":"mutable","name":"target","nameLocation":"4506:6:6","nodeType":"VariableDeclaration","scope":1899,"src":"4498:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1881,"name":"address","nodeType":"ElementaryTypeName","src":"4498:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1884,"mutability":"mutable","name":"data","nameLocation":"4535:4:6","nodeType":"VariableDeclaration","scope":1899,"src":"4522:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1883,"name":"bytes","nodeType":"ElementaryTypeName","src":"4522:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1886,"mutability":"mutable","name":"value","nameLocation":"4557:5:6","nodeType":"VariableDeclaration","scope":1899,"src":"4549:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1885,"name":"uint256","nodeType":"ElementaryTypeName","src":"4549:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4488:80:6"},"returnParameters":{"id":1890,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1889,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1899,"src":"4587:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1888,"name":"bytes","nodeType":"ElementaryTypeName","src":"4587:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4586:14:6"},"scope":2119,"src":"4458:254:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1942,"nodeType":"Block","src":"5139:267:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1916,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5165:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$2119","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$2119","typeString":"library Address"}],"id":1915,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5157:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1914,"name":"address","nodeType":"ElementaryTypeName","src":"5157:7:6","typeDescriptions":{}}},"id":1917,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5157:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5171:7:6","memberName":"balance","nodeType":"MemberAccess","src":"5157:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1919,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1906,"src":"5182:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5157:30:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":1921,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5189:40:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":1913,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5149:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1922,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5149:81:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1923,"nodeType":"ExpressionStatement","src":"5149:81:6"},{"assignments":[1925,1927],"declarations":[{"constant":false,"id":1925,"mutability":"mutable","name":"success","nameLocation":"5246:7:6","nodeType":"VariableDeclaration","scope":1942,"src":"5241:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1924,"name":"bool","nodeType":"ElementaryTypeName","src":"5241:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1927,"mutability":"mutable","name":"returndata","nameLocation":"5268:10:6","nodeType":"VariableDeclaration","scope":1942,"src":"5255:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1926,"name":"bytes","nodeType":"ElementaryTypeName","src":"5255:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1934,"initialValue":{"arguments":[{"id":1932,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1904,"src":"5308:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1928,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1902,"src":"5282:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1929,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5289:4:6","memberName":"call","nodeType":"MemberAccess","src":"5282:11:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1930,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1906,"src":"5301:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5282:25:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1933,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5282:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5240:73:6"},{"expression":{"arguments":[{"id":1936,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1902,"src":"5357:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1937,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1925,"src":"5365:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1938,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1927,"src":"5374:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1939,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1908,"src":"5386:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1935,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2074,"src":"5330:26:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1940,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5330:69:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1912,"id":1941,"nodeType":"Return","src":"5323:76:6"}]},"documentation":{"id":1900,"nodeType":"StructuredDocumentation","src":"4718:237:6","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1943,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4969:21:6","nodeType":"FunctionDefinition","parameters":{"id":1909,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1902,"mutability":"mutable","name":"target","nameLocation":"5008:6:6","nodeType":"VariableDeclaration","scope":1943,"src":"5000:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1901,"name":"address","nodeType":"ElementaryTypeName","src":"5000:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1904,"mutability":"mutable","name":"data","nameLocation":"5037:4:6","nodeType":"VariableDeclaration","scope":1943,"src":"5024:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1903,"name":"bytes","nodeType":"ElementaryTypeName","src":"5024:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1906,"mutability":"mutable","name":"value","nameLocation":"5059:5:6","nodeType":"VariableDeclaration","scope":1943,"src":"5051:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1905,"name":"uint256","nodeType":"ElementaryTypeName","src":"5051:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1908,"mutability":"mutable","name":"errorMessage","nameLocation":"5088:12:6","nodeType":"VariableDeclaration","scope":1943,"src":"5074:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1907,"name":"string","nodeType":"ElementaryTypeName","src":"5074:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4990:116:6"},"returnParameters":{"id":1912,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1911,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1943,"src":"5125:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1910,"name":"bytes","nodeType":"ElementaryTypeName","src":"5125:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5124:14:6"},"scope":2119,"src":"4960:446:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1959,"nodeType":"Block","src":"5683:97:6","statements":[{"expression":{"arguments":[{"id":1954,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1946,"src":"5719:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1955,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1948,"src":"5727:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":1956,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5733:39:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":1953,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[1960,1989],"referencedDeclaration":1989,"src":"5700:18:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":1957,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5700:73:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1952,"id":1958,"nodeType":"Return","src":"5693:80:6"}]},"documentation":{"id":1944,"nodeType":"StructuredDocumentation","src":"5412:166:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1960,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5592:18:6","nodeType":"FunctionDefinition","parameters":{"id":1949,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1946,"mutability":"mutable","name":"target","nameLocation":"5619:6:6","nodeType":"VariableDeclaration","scope":1960,"src":"5611:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1945,"name":"address","nodeType":"ElementaryTypeName","src":"5611:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1948,"mutability":"mutable","name":"data","nameLocation":"5640:4:6","nodeType":"VariableDeclaration","scope":1960,"src":"5627:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1947,"name":"bytes","nodeType":"ElementaryTypeName","src":"5627:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5610:35:6"},"returnParameters":{"id":1952,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1951,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1960,"src":"5669:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1950,"name":"bytes","nodeType":"ElementaryTypeName","src":"5669:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5668:14:6"},"scope":2119,"src":"5583:197:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1988,"nodeType":"Block","src":"6122:168:6","statements":[{"assignments":[1973,1975],"declarations":[{"constant":false,"id":1973,"mutability":"mutable","name":"success","nameLocation":"6138:7:6","nodeType":"VariableDeclaration","scope":1988,"src":"6133:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1972,"name":"bool","nodeType":"ElementaryTypeName","src":"6133:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1975,"mutability":"mutable","name":"returndata","nameLocation":"6160:10:6","nodeType":"VariableDeclaration","scope":1988,"src":"6147:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1974,"name":"bytes","nodeType":"ElementaryTypeName","src":"6147:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1980,"initialValue":{"arguments":[{"id":1978,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1965,"src":"6192:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1976,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1963,"src":"6174:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6181:10:6","memberName":"staticcall","nodeType":"MemberAccess","src":"6174:17:6","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":1979,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6174:23:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6132:65:6"},{"expression":{"arguments":[{"id":1982,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1963,"src":"6241:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1983,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1973,"src":"6249:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1984,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1975,"src":"6258:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1985,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1967,"src":"6270:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1981,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2074,"src":"6214:26:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1986,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6214:69:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1971,"id":1987,"nodeType":"Return","src":"6207:76:6"}]},"documentation":{"id":1961,"nodeType":"StructuredDocumentation","src":"5786:173:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1989,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5973:18:6","nodeType":"FunctionDefinition","parameters":{"id":1968,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1963,"mutability":"mutable","name":"target","nameLocation":"6009:6:6","nodeType":"VariableDeclaration","scope":1989,"src":"6001:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1962,"name":"address","nodeType":"ElementaryTypeName","src":"6001:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1965,"mutability":"mutable","name":"data","nameLocation":"6038:4:6","nodeType":"VariableDeclaration","scope":1989,"src":"6025:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1964,"name":"bytes","nodeType":"ElementaryTypeName","src":"6025:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1967,"mutability":"mutable","name":"errorMessage","nameLocation":"6066:12:6","nodeType":"VariableDeclaration","scope":1989,"src":"6052:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1966,"name":"string","nodeType":"ElementaryTypeName","src":"6052:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5991:93:6"},"returnParameters":{"id":1971,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1970,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1989,"src":"6108:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1969,"name":"bytes","nodeType":"ElementaryTypeName","src":"6108:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6107:14:6"},"scope":2119,"src":"5964:326:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2005,"nodeType":"Block","src":"6566:101:6","statements":[{"expression":{"arguments":[{"id":2000,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"6604:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2001,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1994,"src":"6612:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":2002,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6618:41:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":1999,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[2006,2035],"referencedDeclaration":2035,"src":"6583:20:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":2003,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6583:77:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1998,"id":2004,"nodeType":"Return","src":"6576:84:6"}]},"documentation":{"id":1990,"nodeType":"StructuredDocumentation","src":"6296:168:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":2006,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6478:20:6","nodeType":"FunctionDefinition","parameters":{"id":1995,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1992,"mutability":"mutable","name":"target","nameLocation":"6507:6:6","nodeType":"VariableDeclaration","scope":2006,"src":"6499:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1991,"name":"address","nodeType":"ElementaryTypeName","src":"6499:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1994,"mutability":"mutable","name":"data","nameLocation":"6528:4:6","nodeType":"VariableDeclaration","scope":2006,"src":"6515:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1993,"name":"bytes","nodeType":"ElementaryTypeName","src":"6515:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6498:35:6"},"returnParameters":{"id":1998,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1997,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2006,"src":"6552:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1996,"name":"bytes","nodeType":"ElementaryTypeName","src":"6552:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6551:14:6"},"scope":2119,"src":"6469:198:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2034,"nodeType":"Block","src":"7008:170:6","statements":[{"assignments":[2019,2021],"declarations":[{"constant":false,"id":2019,"mutability":"mutable","name":"success","nameLocation":"7024:7:6","nodeType":"VariableDeclaration","scope":2034,"src":"7019:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2018,"name":"bool","nodeType":"ElementaryTypeName","src":"7019:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2021,"mutability":"mutable","name":"returndata","nameLocation":"7046:10:6","nodeType":"VariableDeclaration","scope":2034,"src":"7033:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2020,"name":"bytes","nodeType":"ElementaryTypeName","src":"7033:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2026,"initialValue":{"arguments":[{"id":2024,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2011,"src":"7080:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2022,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2009,"src":"7060:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7067:12:6","memberName":"delegatecall","nodeType":"MemberAccess","src":"7060:19:6","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":2025,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7060:25:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7018:67:6"},{"expression":{"arguments":[{"id":2028,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2009,"src":"7129:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2029,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2019,"src":"7137:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2030,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2021,"src":"7146:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2031,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2013,"src":"7158:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2027,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2074,"src":"7102:26:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":2032,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7102:69:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2017,"id":2033,"nodeType":"Return","src":"7095:76:6"}]},"documentation":{"id":2007,"nodeType":"StructuredDocumentation","src":"6673:175:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":2035,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6862:20:6","nodeType":"FunctionDefinition","parameters":{"id":2014,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2009,"mutability":"mutable","name":"target","nameLocation":"6900:6:6","nodeType":"VariableDeclaration","scope":2035,"src":"6892:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2008,"name":"address","nodeType":"ElementaryTypeName","src":"6892:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2011,"mutability":"mutable","name":"data","nameLocation":"6929:4:6","nodeType":"VariableDeclaration","scope":2035,"src":"6916:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2010,"name":"bytes","nodeType":"ElementaryTypeName","src":"6916:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2013,"mutability":"mutable","name":"errorMessage","nameLocation":"6957:12:6","nodeType":"VariableDeclaration","scope":2035,"src":"6943:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2012,"name":"string","nodeType":"ElementaryTypeName","src":"6943:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6882:93:6"},"returnParameters":{"id":2017,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2016,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2035,"src":"6994:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2015,"name":"bytes","nodeType":"ElementaryTypeName","src":"6994:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6993:14:6"},"scope":2119,"src":"6853:325:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2073,"nodeType":"Block","src":"7660:434:6","statements":[{"condition":{"id":2049,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2040,"src":"7674:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2071,"nodeType":"Block","src":"8030:58:6","statements":[{"expression":{"arguments":[{"id":2067,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2042,"src":"8052:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2068,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2044,"src":"8064:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2066,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2118,"src":"8044:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":2069,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8044:33:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2070,"nodeType":"ExpressionStatement","src":"8044:33:6"}]},"id":2072,"nodeType":"IfStatement","src":"7670:418:6","trueBody":{"id":2065,"nodeType":"Block","src":"7683:341:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2050,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2042,"src":"7701:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2051,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7712:6:6","memberName":"length","nodeType":"MemberAccess","src":"7701:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2052,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7722:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7701:22:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2062,"nodeType":"IfStatement","src":"7697:286:6","trueBody":{"id":2061,"nodeType":"Block","src":"7725:258:6","statements":[{"expression":{"arguments":[{"arguments":[{"id":2056,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2038,"src":"7927:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2055,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1807,"src":"7916:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":2057,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7916:18:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":2058,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7936:31:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":2054,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7908:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2059,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7908:60:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2060,"nodeType":"ExpressionStatement","src":"7908:60:6"}]}},{"expression":{"id":2063,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2042,"src":"8003:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2048,"id":2064,"nodeType":"Return","src":"7996:17:6"}]}}]},"documentation":{"id":2036,"nodeType":"StructuredDocumentation","src":"7184:277:6","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":2074,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7475:26:6","nodeType":"FunctionDefinition","parameters":{"id":2045,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2038,"mutability":"mutable","name":"target","nameLocation":"7519:6:6","nodeType":"VariableDeclaration","scope":2074,"src":"7511:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2037,"name":"address","nodeType":"ElementaryTypeName","src":"7511:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2040,"mutability":"mutable","name":"success","nameLocation":"7540:7:6","nodeType":"VariableDeclaration","scope":2074,"src":"7535:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2039,"name":"bool","nodeType":"ElementaryTypeName","src":"7535:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2042,"mutability":"mutable","name":"returndata","nameLocation":"7570:10:6","nodeType":"VariableDeclaration","scope":2074,"src":"7557:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2041,"name":"bytes","nodeType":"ElementaryTypeName","src":"7557:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2044,"mutability":"mutable","name":"errorMessage","nameLocation":"7604:12:6","nodeType":"VariableDeclaration","scope":2074,"src":"7590:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2043,"name":"string","nodeType":"ElementaryTypeName","src":"7590:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7501:121:6"},"returnParameters":{"id":2048,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2047,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2074,"src":"7646:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2046,"name":"bytes","nodeType":"ElementaryTypeName","src":"7646:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7645:14:6"},"scope":2119,"src":"7466:628:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2097,"nodeType":"Block","src":"8475:135:6","statements":[{"condition":{"id":2086,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2077,"src":"8489:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2095,"nodeType":"Block","src":"8546:58:6","statements":[{"expression":{"arguments":[{"id":2091,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2079,"src":"8568:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2092,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2081,"src":"8580:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2090,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2118,"src":"8560:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":2093,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8560:33:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2094,"nodeType":"ExpressionStatement","src":"8560:33:6"}]},"id":2096,"nodeType":"IfStatement","src":"8485:119:6","trueBody":{"id":2089,"nodeType":"Block","src":"8498:42:6","statements":[{"expression":{"id":2087,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2079,"src":"8519:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2085,"id":2088,"nodeType":"Return","src":"8512:17:6"}]}}]},"documentation":{"id":2075,"nodeType":"StructuredDocumentation","src":"8100:210:6","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":2098,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8324:16:6","nodeType":"FunctionDefinition","parameters":{"id":2082,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2077,"mutability":"mutable","name":"success","nameLocation":"8355:7:6","nodeType":"VariableDeclaration","scope":2098,"src":"8350:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2076,"name":"bool","nodeType":"ElementaryTypeName","src":"8350:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2079,"mutability":"mutable","name":"returndata","nameLocation":"8385:10:6","nodeType":"VariableDeclaration","scope":2098,"src":"8372:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2078,"name":"bytes","nodeType":"ElementaryTypeName","src":"8372:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2081,"mutability":"mutable","name":"errorMessage","nameLocation":"8419:12:6","nodeType":"VariableDeclaration","scope":2098,"src":"8405:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2080,"name":"string","nodeType":"ElementaryTypeName","src":"8405:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8340:97:6"},"returnParameters":{"id":2085,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2084,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2098,"src":"8461:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2083,"name":"bytes","nodeType":"ElementaryTypeName","src":"8461:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8460:14:6"},"scope":2119,"src":"8315:295:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2117,"nodeType":"Block","src":"8699:457:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2105,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2100,"src":"8775:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8786:6:6","memberName":"length","nodeType":"MemberAccess","src":"8775:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2107,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8795:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8775:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2115,"nodeType":"Block","src":"9105:45:6","statements":[{"expression":{"arguments":[{"id":2112,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2102,"src":"9126:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2111,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9119:6:6","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2113,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9119:20:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2114,"nodeType":"ExpressionStatement","src":"9119:20:6"}]},"id":2116,"nodeType":"IfStatement","src":"8771:379:6","trueBody":{"id":2110,"nodeType":"Block","src":"8798:301:6","statements":[{"AST":{"nodeType":"YulBlock","src":"8956:133:6","statements":[{"nodeType":"YulVariableDeclaration","src":"8974:40:6","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9003:10:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8997:5:6"},"nodeType":"YulFunctionCall","src":"8997:17:6"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"8978:15:6","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9042:2:6","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9046:10:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9038:3:6"},"nodeType":"YulFunctionCall","src":"9038:19:6"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9059:15:6"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9031:6:6"},"nodeType":"YulFunctionCall","src":"9031:44:6"},"nodeType":"YulExpressionStatement","src":"9031:44:6"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2100,"isOffset":false,"isSlot":false,"src":"9003:10:6","valueSize":1},{"declaration":2100,"isOffset":false,"isSlot":false,"src":"9046:10:6","valueSize":1}],"id":2109,"nodeType":"InlineAssembly","src":"8947:142:6"}]}}]},"id":2118,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8625:7:6","nodeType":"FunctionDefinition","parameters":{"id":2103,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2100,"mutability":"mutable","name":"returndata","nameLocation":"8646:10:6","nodeType":"VariableDeclaration","scope":2118,"src":"8633:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2099,"name":"bytes","nodeType":"ElementaryTypeName","src":"8633:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2102,"mutability":"mutable","name":"errorMessage","nameLocation":"8672:12:6","nodeType":"VariableDeclaration","scope":2118,"src":"8658:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2101,"name":"string","nodeType":"ElementaryTypeName","src":"8658:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8632:53:6"},"returnParameters":{"id":2104,"nodeType":"ParameterList","parameters":[],"src":"8699:0:6"},"scope":2119,"src":"8616:540:6","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":2120,"src":"194:8964:6","usedErrors":[]}],"src":"101:9058:6"},"id":6},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[2141]},"id":2142,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2121,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:7"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":2122,"nodeType":"StructuredDocumentation","src":"111:496:7","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":2141,"linearizedBaseContracts":[2141],"name":"Context","nameLocation":"626:7:7","nodeType":"ContractDefinition","nodes":[{"body":{"id":2130,"nodeType":"Block","src":"702:34:7","statements":[{"expression":{"expression":{"id":2127,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"723:6:7","memberName":"sender","nodeType":"MemberAccess","src":"719:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2126,"id":2129,"nodeType":"Return","src":"712:17:7"}]},"id":2131,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:7","nodeType":"FunctionDefinition","parameters":{"id":2123,"nodeType":"ParameterList","parameters":[],"src":"659:2:7"},"returnParameters":{"id":2126,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2125,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2131,"src":"693:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2124,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:7"},"scope":2141,"src":"640:96:7","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2139,"nodeType":"Block","src":"809:32:7","statements":[{"expression":{"expression":{"id":2136,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"830:4:7","memberName":"data","nodeType":"MemberAccess","src":"826:8:7","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":2135,"id":2138,"nodeType":"Return","src":"819:15:7"}]},"id":2140,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:7","nodeType":"FunctionDefinition","parameters":{"id":2132,"nodeType":"ParameterList","parameters":[],"src":"759:2:7"},"returnParameters":{"id":2135,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2134,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2140,"src":"793:14:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2133,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:7"},"scope":2141,"src":"742:99:7","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":2142,"src":"608:235:7","usedErrors":[]}],"src":"86:758:7"},"id":7},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[3719],"Strings":[2316]},"id":2317,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2143,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:8"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":2144,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2317,"sourceUnit":3720,"src":"126:25:8","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":2145,"nodeType":"StructuredDocumentation","src":"153:34:8","text":" @dev String operations."},"fullyImplemented":true,"id":2316,"linearizedBaseContracts":[2316],"name":"Strings","nameLocation":"196:7:8","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":2148,"mutability":"constant","name":"_SYMBOLS","nameLocation":"235:8:8","nodeType":"VariableDeclaration","scope":2316,"src":"210:54:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":2146,"name":"bytes16","nodeType":"ElementaryTypeName","src":"210:7:8","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":2147,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"246:18:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":2151,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"293:15:8","nodeType":"VariableDeclaration","scope":2316,"src":"270:43:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2149,"name":"uint8","nodeType":"ElementaryTypeName","src":"270:5:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":2150,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"311:2:8","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":2198,"nodeType":"Block","src":"486:625:8","statements":[{"id":2197,"nodeType":"UncheckedBlock","src":"496:609:8","statements":[{"assignments":[2160],"declarations":[{"constant":false,"id":2160,"mutability":"mutable","name":"length","nameLocation":"528:6:8","nodeType":"VariableDeclaration","scope":2197,"src":"520:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2159,"name":"uint256","nodeType":"ElementaryTypeName","src":"520:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2167,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2166,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2163,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2154,"src":"548:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2161,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3719,"src":"537:4:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$3719_$","typeString":"type(library Math)"}},"id":2162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"542:5:8","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":3556,"src":"537:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2164,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"537:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2165,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"557:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"537:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"520:38:8"},{"assignments":[2169],"declarations":[{"constant":false,"id":2169,"mutability":"mutable","name":"buffer","nameLocation":"586:6:8","nodeType":"VariableDeclaration","scope":2197,"src":"572:20:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2168,"name":"string","nodeType":"ElementaryTypeName","src":"572:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":2174,"initialValue":{"arguments":[{"id":2172,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2160,"src":"606:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2171,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"595:10:8","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":2170,"name":"string","nodeType":"ElementaryTypeName","src":"599:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":2173,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"595:18:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"572:41:8"},{"assignments":[2176],"declarations":[{"constant":false,"id":2176,"mutability":"mutable","name":"ptr","nameLocation":"635:3:8","nodeType":"VariableDeclaration","scope":2197,"src":"627:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2175,"name":"uint256","nodeType":"ElementaryTypeName","src":"627:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2177,"nodeType":"VariableDeclarationStatement","src":"627:11:8"},{"AST":{"nodeType":"YulBlock","src":"708:67:8","statements":[{"nodeType":"YulAssignment","src":"726:35:8","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"737:6:8"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"749:2:8","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"753:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"745:3:8"},"nodeType":"YulFunctionCall","src":"745:15:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"733:3:8"},"nodeType":"YulFunctionCall","src":"733:28:8"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"726:3:8"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2169,"isOffset":false,"isSlot":false,"src":"737:6:8","valueSize":1},{"declaration":2160,"isOffset":false,"isSlot":false,"src":"753:6:8","valueSize":1},{"declaration":2176,"isOffset":false,"isSlot":false,"src":"726:3:8","valueSize":1}],"id":2178,"nodeType":"InlineAssembly","src":"699:76:8"},{"body":{"id":2193,"nodeType":"Block","src":"801:267:8","statements":[{"expression":{"id":2181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"819:5:8","subExpression":{"id":2180,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2176,"src":"819:3:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2182,"nodeType":"ExpressionStatement","src":"819:5:8"},{"AST":{"nodeType":"YulBlock","src":"902:84:8","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"932:3:8"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"946:5:8"},{"kind":"number","nodeType":"YulLiteral","src":"953:2:8","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"942:3:8"},"nodeType":"YulFunctionCall","src":"942:14:8"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"958:8:8"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"937:4:8"},"nodeType":"YulFunctionCall","src":"937:30:8"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"924:7:8"},"nodeType":"YulFunctionCall","src":"924:44:8"},"nodeType":"YulExpressionStatement","src":"924:44:8"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2148,"isOffset":false,"isSlot":false,"src":"958:8:8","valueSize":1},{"declaration":2176,"isOffset":false,"isSlot":false,"src":"932:3:8","valueSize":1},{"declaration":2154,"isOffset":false,"isSlot":false,"src":"946:5:8","valueSize":1}],"id":2183,"nodeType":"InlineAssembly","src":"893:93:8"},{"expression":{"id":2186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2184,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2154,"src":"1003:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":2185,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1012:2:8","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1003:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2187,"nodeType":"ExpressionStatement","src":"1003:11:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2188,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2154,"src":"1036:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2189,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1045:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1036:10:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2192,"nodeType":"IfStatement","src":"1032:21:8","trueBody":{"id":2191,"nodeType":"Break","src":"1048:5:8"}}]},"condition":{"hexValue":"74727565","id":2179,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"795:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":2194,"nodeType":"WhileStatement","src":"788:280:8"},{"expression":{"id":2195,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2169,"src":"1088:6:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2158,"id":2196,"nodeType":"Return","src":"1081:13:8"}]}]},"documentation":{"id":2152,"nodeType":"StructuredDocumentation","src":"320:90:8","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":2199,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"424:8:8","nodeType":"FunctionDefinition","parameters":{"id":2155,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2154,"mutability":"mutable","name":"value","nameLocation":"441:5:8","nodeType":"VariableDeclaration","scope":2199,"src":"433:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2153,"name":"uint256","nodeType":"ElementaryTypeName","src":"433:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"432:15:8"},"returnParameters":{"id":2158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2157,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2199,"src":"471:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2156,"name":"string","nodeType":"ElementaryTypeName","src":"471:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"470:15:8"},"scope":2316,"src":"415:696:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2218,"nodeType":"Block","src":"1290:100:8","statements":[{"id":2217,"nodeType":"UncheckedBlock","src":"1300:84:8","statements":[{"expression":{"arguments":[{"id":2208,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2202,"src":"1343:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2211,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2202,"src":"1362:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2209,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3719,"src":"1350:4:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$3719_$","typeString":"type(library Math)"}},"id":2210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1355:6:8","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":3679,"src":"1350:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2212,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1350:18:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2213,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1371:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1350:22:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2207,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[2219,2295,2315],"referencedDeclaration":2295,"src":"1331:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":2215,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1331:42:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2206,"id":2216,"nodeType":"Return","src":"1324:49:8"}]}]},"documentation":{"id":2200,"nodeType":"StructuredDocumentation","src":"1117:94:8","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":2219,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1225:11:8","nodeType":"FunctionDefinition","parameters":{"id":2203,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2202,"mutability":"mutable","name":"value","nameLocation":"1245:5:8","nodeType":"VariableDeclaration","scope":2219,"src":"1237:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2201,"name":"uint256","nodeType":"ElementaryTypeName","src":"1237:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1236:15:8"},"returnParameters":{"id":2206,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2205,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2219,"src":"1275:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2204,"name":"string","nodeType":"ElementaryTypeName","src":"1275:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1274:15:8"},"scope":2316,"src":"1216:174:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2294,"nodeType":"Block","src":"1603:347:8","statements":[{"assignments":[2230],"declarations":[{"constant":false,"id":2230,"mutability":"mutable","name":"buffer","nameLocation":"1626:6:8","nodeType":"VariableDeclaration","scope":2294,"src":"1613:19:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2229,"name":"bytes","nodeType":"ElementaryTypeName","src":"1613:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2239,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2233,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1645:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2234,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2224,"src":"1649:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1645:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":2236,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1658:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1645:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2232,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1635:9:8","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":2231,"name":"bytes","nodeType":"ElementaryTypeName","src":"1639:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":2238,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1635:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1613:47:8"},{"expression":{"id":2244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2240,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2230,"src":"1670:6:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2242,"indexExpression":{"hexValue":"30","id":2241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1677:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1670:9:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":2243,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1682:3:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1670:15:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2245,"nodeType":"ExpressionStatement","src":"1670:15:8"},{"expression":{"id":2250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2246,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2230,"src":"1695:6:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2248,"indexExpression":{"hexValue":"31","id":2247,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1702:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1695:9:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":2249,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1707:3:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"1695:15:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2251,"nodeType":"ExpressionStatement","src":"1695:15:8"},{"body":{"id":2280,"nodeType":"Block","src":"1765:83:8","statements":[{"expression":{"id":2274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2266,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2230,"src":"1779:6:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2268,"indexExpression":{"id":2267,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2253,"src":"1786:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1779:9:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":2269,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2148,"src":"1791:8:8","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":2273,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2270,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"1800:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":2271,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1808:3:8","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"1800:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1791:21:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"1779:33:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2275,"nodeType":"ExpressionStatement","src":"1779:33:8"},{"expression":{"id":2278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2276,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"1826:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2277,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1836:1:8","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"1826:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2279,"nodeType":"ExpressionStatement","src":"1826:11:8"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2260,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2253,"src":"1753:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":2261,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1757:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1753:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2281,"initializationExpression":{"assignments":[2253],"declarations":[{"constant":false,"id":2253,"mutability":"mutable","name":"i","nameLocation":"1733:1:8","nodeType":"VariableDeclaration","scope":2281,"src":"1725:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2252,"name":"uint256","nodeType":"ElementaryTypeName","src":"1725:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2259,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1737:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2255,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2224,"src":"1741:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1737:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2257,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1750:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1737:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1725:26:8"},"loopExpression":{"expression":{"id":2264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"1760:3:8","subExpression":{"id":2263,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2253,"src":"1762:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2265,"nodeType":"ExpressionStatement","src":"1760:3:8"},"nodeType":"ForStatement","src":"1720:128:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2283,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"1865:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2284,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1874:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1865:10:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":2286,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1877:34:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":2282,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1857:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2287,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1857:55:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2288,"nodeType":"ExpressionStatement","src":"1857:55:8"},{"expression":{"arguments":[{"id":2291,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2230,"src":"1936:6:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2290,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1929:6:8","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":2289,"name":"string","nodeType":"ElementaryTypeName","src":"1929:6:8","typeDescriptions":{}}},"id":2292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1929:14:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2228,"id":2293,"nodeType":"Return","src":"1922:21:8"}]},"documentation":{"id":2220,"nodeType":"StructuredDocumentation","src":"1396:112:8","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":2295,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1522:11:8","nodeType":"FunctionDefinition","parameters":{"id":2225,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2222,"mutability":"mutable","name":"value","nameLocation":"1542:5:8","nodeType":"VariableDeclaration","scope":2295,"src":"1534:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2221,"name":"uint256","nodeType":"ElementaryTypeName","src":"1534:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2224,"mutability":"mutable","name":"length","nameLocation":"1557:6:8","nodeType":"VariableDeclaration","scope":2295,"src":"1549:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2223,"name":"uint256","nodeType":"ElementaryTypeName","src":"1549:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1533:31:8"},"returnParameters":{"id":2228,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2227,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2295,"src":"1588:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2226,"name":"string","nodeType":"ElementaryTypeName","src":"1588:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1587:15:8"},"scope":2316,"src":"1513:437:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2314,"nodeType":"Block","src":"2175:76:8","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":2308,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2298,"src":"2220:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2307,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2212:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2306,"name":"uint160","nodeType":"ElementaryTypeName","src":"2212:7:8","typeDescriptions":{}}},"id":2309,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2212:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2305,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2204:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2304,"name":"uint256","nodeType":"ElementaryTypeName","src":"2204:7:8","typeDescriptions":{}}},"id":2310,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2204:22:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2311,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2151,"src":"2228:15:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2303,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[2219,2295,2315],"referencedDeclaration":2295,"src":"2192:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":2312,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2192:52:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2302,"id":2313,"nodeType":"Return","src":"2185:59:8"}]},"documentation":{"id":2296,"nodeType":"StructuredDocumentation","src":"1956:141:8","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":2315,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2111:11:8","nodeType":"FunctionDefinition","parameters":{"id":2299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2298,"mutability":"mutable","name":"addr","nameLocation":"2131:4:8","nodeType":"VariableDeclaration","scope":2315,"src":"2123:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2297,"name":"address","nodeType":"ElementaryTypeName","src":"2123:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2122:14:8"},"returnParameters":{"id":2302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2301,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2315,"src":"2160:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2300,"name":"string","nodeType":"ElementaryTypeName","src":"2160:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2159:15:8"},"scope":2316,"src":"2102:149:8","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2317,"src":"188:2065:8","usedErrors":[]}],"src":"101:2153:8"},"id":8},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","exportedSymbols":{"MerkleProof":[2818]},"id":2819,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2318,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"118:23:9"},{"abstract":false,"baseContracts":[],"canonicalName":"MerkleProof","contractDependencies":[],"contractKind":"library","documentation":{"id":2319,"nodeType":"StructuredDocumentation","src":"143:658:9","text":" @dev These functions deal with verification of Merkle Tree proofs.\n The tree and the proofs can be generated using our\n https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n You will find a quickstart guide in the readme.\n WARNING: You should avoid using leaf values that are 64 bytes long prior to\n hashing, or use a hash function other than keccak256 for hashing leaves.\n This is because the concatenation of a sorted pair of internal nodes in\n the merkle tree could be reinterpreted as a leaf value.\n OpenZeppelin's JavaScript library generates merkle trees that are safe\n against this attack out of the box."},"fullyImplemented":true,"id":2818,"linearizedBaseContracts":[2818],"name":"MerkleProof","nameLocation":"810:11:9","nodeType":"ContractDefinition","nodes":[{"body":{"id":2339,"nodeType":"Block","src":"1283:57:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2333,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2323,"src":"1313:5:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":2334,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2327,"src":"1320:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2332,"name":"processProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2401,"src":"1300:12:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bytes32) pure returns (bytes32)"}},"id":2335,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1300:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2336,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2325,"src":"1329:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1300:33:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2331,"id":2338,"nodeType":"Return","src":"1293:40:9"}]},"documentation":{"id":2320,"nodeType":"StructuredDocumentation","src":"828:323:9","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted."},"id":2340,"implemented":true,"kind":"function","modifiers":[],"name":"verify","nameLocation":"1165:6:9","nodeType":"FunctionDefinition","parameters":{"id":2328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2323,"mutability":"mutable","name":"proof","nameLocation":"1198:5:9","nodeType":"VariableDeclaration","scope":2340,"src":"1181:22:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2321,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1181:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2322,"nodeType":"ArrayTypeName","src":"1181:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2325,"mutability":"mutable","name":"root","nameLocation":"1221:4:9","nodeType":"VariableDeclaration","scope":2340,"src":"1213:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2324,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1213:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2327,"mutability":"mutable","name":"leaf","nameLocation":"1243:4:9","nodeType":"VariableDeclaration","scope":2340,"src":"1235:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2326,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1235:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1171:82:9"},"returnParameters":{"id":2331,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2330,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2340,"src":"1277:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2329,"name":"bool","nodeType":"ElementaryTypeName","src":"1277:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1276:6:9"},"scope":2818,"src":"1156:184:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2360,"nodeType":"Block","src":"1578:65:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2354,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2344,"src":"1616:5:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":2355,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"1623:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2353,"name":"processProofCalldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2441,"src":"1595:20:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bytes32) pure returns (bytes32)"}},"id":2356,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1595:33:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2357,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2346,"src":"1632:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1595:41:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2352,"id":2359,"nodeType":"Return","src":"1588:48:9"}]},"documentation":{"id":2341,"nodeType":"StructuredDocumentation","src":"1346:90:9","text":" @dev Calldata version of {verify}\n _Available since v4.7._"},"id":2361,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCalldata","nameLocation":"1450:14:9","nodeType":"FunctionDefinition","parameters":{"id":2349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2344,"mutability":"mutable","name":"proof","nameLocation":"1493:5:9","nodeType":"VariableDeclaration","scope":2361,"src":"1474:24:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2342,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1474:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2343,"nodeType":"ArrayTypeName","src":"1474:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2346,"mutability":"mutable","name":"root","nameLocation":"1516:4:9","nodeType":"VariableDeclaration","scope":2361,"src":"1508:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2345,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1508:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2348,"mutability":"mutable","name":"leaf","nameLocation":"1538:4:9","nodeType":"VariableDeclaration","scope":2361,"src":"1530:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2347,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1530:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1464:84:9"},"returnParameters":{"id":2352,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2351,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2361,"src":"1572:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2350,"name":"bool","nodeType":"ElementaryTypeName","src":"1572:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1571:6:9"},"scope":2818,"src":"1441:202:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2400,"nodeType":"Block","src":"2086:198:9","statements":[{"assignments":[2373],"declarations":[{"constant":false,"id":2373,"mutability":"mutable","name":"computedHash","nameLocation":"2104:12:9","nodeType":"VariableDeclaration","scope":2400,"src":"2096:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2372,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2096:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2375,"initialValue":{"id":2374,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2367,"src":"2119:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2096:27:9"},{"body":{"id":2396,"nodeType":"Block","src":"2176:73:9","statements":[{"expression":{"id":2394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2387,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2373,"src":"2190:12:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2389,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2373,"src":"2215:12:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":2390,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2365,"src":"2229:5:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2392,"indexExpression":{"id":2391,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2377,"src":"2235:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2229:8:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2388,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2806,"src":"2205:9:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":2393,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2205:33:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2190:48:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2395,"nodeType":"ExpressionStatement","src":"2190:48:9"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2380,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2377,"src":"2153:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2381,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2365,"src":"2157:5:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2163:6:9","memberName":"length","nodeType":"MemberAccess","src":"2157:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2153:16:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2397,"initializationExpression":{"assignments":[2377],"declarations":[{"constant":false,"id":2377,"mutability":"mutable","name":"i","nameLocation":"2146:1:9","nodeType":"VariableDeclaration","scope":2397,"src":"2138:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2376,"name":"uint256","nodeType":"ElementaryTypeName","src":"2138:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2379,"initialValue":{"hexValue":"30","id":2378,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2150:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2138:13:9"},"loopExpression":{"expression":{"id":2385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2171:3:9","subExpression":{"id":2384,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2377,"src":"2171:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2386,"nodeType":"ExpressionStatement","src":"2171:3:9"},"nodeType":"ForStatement","src":"2133:116:9"},{"expression":{"id":2398,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2373,"src":"2265:12:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2371,"id":2399,"nodeType":"Return","src":"2258:19:9"}]},"documentation":{"id":2362,"nodeType":"StructuredDocumentation","src":"1649:340:9","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leafs & pre-images are assumed to be sorted.\n _Available since v4.4._"},"id":2401,"implemented":true,"kind":"function","modifiers":[],"name":"processProof","nameLocation":"2003:12:9","nodeType":"FunctionDefinition","parameters":{"id":2368,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2365,"mutability":"mutable","name":"proof","nameLocation":"2033:5:9","nodeType":"VariableDeclaration","scope":2401,"src":"2016:22:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2363,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2016:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2364,"nodeType":"ArrayTypeName","src":"2016:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2367,"mutability":"mutable","name":"leaf","nameLocation":"2048:4:9","nodeType":"VariableDeclaration","scope":2401,"src":"2040:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2366,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2040:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2015:38:9"},"returnParameters":{"id":2371,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2370,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2401,"src":"2077:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2369,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2077:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2076:9:9"},"scope":2818,"src":"1994:290:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2440,"nodeType":"Block","src":"2493:198:9","statements":[{"assignments":[2413],"declarations":[{"constant":false,"id":2413,"mutability":"mutable","name":"computedHash","nameLocation":"2511:12:9","nodeType":"VariableDeclaration","scope":2440,"src":"2503:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2412,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2503:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2415,"initialValue":{"id":2414,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2407,"src":"2526:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2503:27:9"},{"body":{"id":2436,"nodeType":"Block","src":"2583:73:9","statements":[{"expression":{"id":2434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2427,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2413,"src":"2597:12:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2429,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2413,"src":"2622:12:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":2430,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2405,"src":"2636:5:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":2432,"indexExpression":{"id":2431,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2417,"src":"2642:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2636:8:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2428,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2806,"src":"2612:9:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":2433,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2612:33:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2597:48:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2435,"nodeType":"ExpressionStatement","src":"2597:48:9"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2420,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2417,"src":"2560:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2421,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2405,"src":"2564:5:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":2422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2570:6:9","memberName":"length","nodeType":"MemberAccess","src":"2564:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2560:16:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2437,"initializationExpression":{"assignments":[2417],"declarations":[{"constant":false,"id":2417,"mutability":"mutable","name":"i","nameLocation":"2553:1:9","nodeType":"VariableDeclaration","scope":2437,"src":"2545:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2416,"name":"uint256","nodeType":"ElementaryTypeName","src":"2545:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2419,"initialValue":{"hexValue":"30","id":2418,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2557:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2545:13:9"},"loopExpression":{"expression":{"id":2425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2578:3:9","subExpression":{"id":2424,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2417,"src":"2578:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2426,"nodeType":"ExpressionStatement","src":"2578:3:9"},"nodeType":"ForStatement","src":"2540:116:9"},{"expression":{"id":2438,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2413,"src":"2672:12:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2411,"id":2439,"nodeType":"Return","src":"2665:19:9"}]},"documentation":{"id":2402,"nodeType":"StructuredDocumentation","src":"2290:96:9","text":" @dev Calldata version of {processProof}\n _Available since v4.7._"},"id":2441,"implemented":true,"kind":"function","modifiers":[],"name":"processProofCalldata","nameLocation":"2400:20:9","nodeType":"FunctionDefinition","parameters":{"id":2408,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2405,"mutability":"mutable","name":"proof","nameLocation":"2440:5:9","nodeType":"VariableDeclaration","scope":2441,"src":"2421:24:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2403,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2421:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2404,"nodeType":"ArrayTypeName","src":"2421:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2407,"mutability":"mutable","name":"leaf","nameLocation":"2455:4:9","nodeType":"VariableDeclaration","scope":2441,"src":"2447:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2406,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2447:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2420:40:9"},"returnParameters":{"id":2411,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2410,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2441,"src":"2484:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2409,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2484:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2483:9:9"},"scope":2818,"src":"2391:300:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2466,"nodeType":"Block","src":"3234:76:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2459,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2445,"src":"3269:5:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":2460,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2448,"src":"3276:10:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},{"id":2461,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2453,"src":"3288:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":2458,"name":"processMultiProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2638,"src":"3251:17:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bool[] memory,bytes32[] memory) pure returns (bytes32)"}},"id":2462,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3251:44:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2463,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2450,"src":"3299:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3251:52:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2457,"id":2465,"nodeType":"Return","src":"3244:59:9"}]},"documentation":{"id":2442,"nodeType":"StructuredDocumentation","src":"2697:350:9","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":2467,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerify","nameLocation":"3061:16:9","nodeType":"FunctionDefinition","parameters":{"id":2454,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2445,"mutability":"mutable","name":"proof","nameLocation":"3104:5:9","nodeType":"VariableDeclaration","scope":2467,"src":"3087:22:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2443,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3087:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2444,"nodeType":"ArrayTypeName","src":"3087:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2448,"mutability":"mutable","name":"proofFlags","nameLocation":"3133:10:9","nodeType":"VariableDeclaration","scope":2467,"src":"3119:24:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":2446,"name":"bool","nodeType":"ElementaryTypeName","src":"3119:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2447,"nodeType":"ArrayTypeName","src":"3119:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":2450,"mutability":"mutable","name":"root","nameLocation":"3161:4:9","nodeType":"VariableDeclaration","scope":2467,"src":"3153:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2449,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3153:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2453,"mutability":"mutable","name":"leaves","nameLocation":"3192:6:9","nodeType":"VariableDeclaration","scope":2467,"src":"3175:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2451,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3175:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2452,"nodeType":"ArrayTypeName","src":"3175:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"3077:127:9"},"returnParameters":{"id":2457,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2456,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2467,"src":"3228:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2455,"name":"bool","nodeType":"ElementaryTypeName","src":"3228:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3227:6:9"},"scope":2818,"src":"3052:258:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2492,"nodeType":"Block","src":"3715:84:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2485,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2471,"src":"3758:5:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":2486,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2474,"src":"3765:10:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},{"id":2487,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2479,"src":"3777:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":2484,"name":"processMultiProofCalldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2783,"src":"3732:25:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_bool_$dyn_calldata_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bool[] calldata,bytes32[] memory) pure returns (bytes32)"}},"id":2488,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3732:52:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2489,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2476,"src":"3788:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3732:60:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2483,"id":2491,"nodeType":"Return","src":"3725:67:9"}]},"documentation":{"id":2468,"nodeType":"StructuredDocumentation","src":"3316:200:9","text":" @dev Calldata version of {multiProofVerify}\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":2493,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerifyCalldata","nameLocation":"3530:24:9","nodeType":"FunctionDefinition","parameters":{"id":2480,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2471,"mutability":"mutable","name":"proof","nameLocation":"3583:5:9","nodeType":"VariableDeclaration","scope":2493,"src":"3564:24:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2469,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3564:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2470,"nodeType":"ArrayTypeName","src":"3564:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2474,"mutability":"mutable","name":"proofFlags","nameLocation":"3614:10:9","nodeType":"VariableDeclaration","scope":2493,"src":"3598:26:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":2472,"name":"bool","nodeType":"ElementaryTypeName","src":"3598:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2473,"nodeType":"ArrayTypeName","src":"3598:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":2476,"mutability":"mutable","name":"root","nameLocation":"3642:4:9","nodeType":"VariableDeclaration","scope":2493,"src":"3634:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2475,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3634:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2479,"mutability":"mutable","name":"leaves","nameLocation":"3673:6:9","nodeType":"VariableDeclaration","scope":2493,"src":"3656:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2477,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3656:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2478,"nodeType":"ArrayTypeName","src":"3656:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"3554:131:9"},"returnParameters":{"id":2483,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2482,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2493,"src":"3709:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2481,"name":"bool","nodeType":"ElementaryTypeName","src":"3709:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3708:6:9"},"scope":2818,"src":"3521:278:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2637,"nodeType":"Block","src":"4753:1860:9","statements":[{"assignments":[2509],"declarations":[{"constant":false,"id":2509,"mutability":"mutable","name":"leavesLen","nameLocation":"5144:9:9","nodeType":"VariableDeclaration","scope":2637,"src":"5136:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2508,"name":"uint256","nodeType":"ElementaryTypeName","src":"5136:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2512,"initialValue":{"expression":{"id":2510,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2503,"src":"5156:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5163:6:9","memberName":"length","nodeType":"MemberAccess","src":"5156:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5136:33:9"},{"assignments":[2514],"declarations":[{"constant":false,"id":2514,"mutability":"mutable","name":"totalHashes","nameLocation":"5187:11:9","nodeType":"VariableDeclaration","scope":2637,"src":"5179:19:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2513,"name":"uint256","nodeType":"ElementaryTypeName","src":"5179:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2517,"initialValue":{"expression":{"id":2515,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2500,"src":"5201:10:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":2516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5212:6:9","memberName":"length","nodeType":"MemberAccess","src":"5201:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5179:39:9"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2519,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2509,"src":"5270:9:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":2520,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2497,"src":"5282:5:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2521,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5288:6:9","memberName":"length","nodeType":"MemberAccess","src":"5282:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5270:24:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2523,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5297:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5270:28:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2525,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2514,"src":"5302:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5270:43:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d65726b6c6550726f6f663a20696e76616c6964206d756c746970726f6f66","id":2527,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5315:33:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""},"value":"MerkleProof: invalid multiproof"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""}],"id":2518,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5262:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2528,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5262:87:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2529,"nodeType":"ExpressionStatement","src":"5262:87:9"},{"assignments":[2534],"declarations":[{"constant":false,"id":2534,"mutability":"mutable","name":"hashes","nameLocation":"5611:6:9","nodeType":"VariableDeclaration","scope":2637,"src":"5594:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2532,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5594:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2533,"nodeType":"ArrayTypeName","src":"5594:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":2540,"initialValue":{"arguments":[{"id":2538,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2514,"src":"5634:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2537,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"5620:13:9","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":2535,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5624:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2536,"nodeType":"ArrayTypeName","src":"5624:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":2539,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5620:26:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"5594:52:9"},{"assignments":[2542],"declarations":[{"constant":false,"id":2542,"mutability":"mutable","name":"leafPos","nameLocation":"5664:7:9","nodeType":"VariableDeclaration","scope":2637,"src":"5656:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2541,"name":"uint256","nodeType":"ElementaryTypeName","src":"5656:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2544,"initialValue":{"hexValue":"30","id":2543,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5674:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5656:19:9"},{"assignments":[2546],"declarations":[{"constant":false,"id":2546,"mutability":"mutable","name":"hashPos","nameLocation":"5693:7:9","nodeType":"VariableDeclaration","scope":2637,"src":"5685:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2545,"name":"uint256","nodeType":"ElementaryTypeName","src":"5685:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2548,"initialValue":{"hexValue":"30","id":2547,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5703:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5685:19:9"},{"assignments":[2550],"declarations":[{"constant":false,"id":2550,"mutability":"mutable","name":"proofPos","nameLocation":"5722:8:9","nodeType":"VariableDeclaration","scope":2637,"src":"5714:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2549,"name":"uint256","nodeType":"ElementaryTypeName","src":"5714:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2552,"initialValue":{"hexValue":"30","id":2551,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5733:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5714:20:9"},{"body":{"id":2610,"nodeType":"Block","src":"6151:258:9","statements":[{"assignments":[2564],"declarations":[{"constant":false,"id":2564,"mutability":"mutable","name":"a","nameLocation":"6173:1:9","nodeType":"VariableDeclaration","scope":2610,"src":"6165:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2563,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6165:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2577,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2565,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2542,"src":"6177:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2566,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2509,"src":"6187:9:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6177:19:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":2572,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2534,"src":"6219:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2575,"indexExpression":{"id":2574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6226:9:9","subExpression":{"id":2573,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2546,"src":"6226:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6219:17:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6177:59:9","trueExpression":{"baseExpression":{"id":2568,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2503,"src":"6199:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2571,"indexExpression":{"id":2570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6206:9:9","subExpression":{"id":2569,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2542,"src":"6206:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6199:17:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6165:71:9"},{"assignments":[2579],"declarations":[{"constant":false,"id":2579,"mutability":"mutable","name":"b","nameLocation":"6258:1:9","nodeType":"VariableDeclaration","scope":2610,"src":"6250:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2578,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6250:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2600,"initialValue":{"condition":{"baseExpression":{"id":2580,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2500,"src":"6262:10:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":2582,"indexExpression":{"id":2581,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2554,"src":"6273:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6262:13:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":2595,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2497,"src":"6340:5:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2598,"indexExpression":{"id":2597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6346:10:9","subExpression":{"id":2596,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2550,"src":"6346:8:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6340:17:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6262:95:9","trueExpression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2583,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2542,"src":"6278:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2584,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2509,"src":"6288:9:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6278:19:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":2590,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2534,"src":"6320:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2593,"indexExpression":{"id":2592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6327:9:9","subExpression":{"id":2591,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2546,"src":"6327:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6320:17:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6278:59:9","trueExpression":{"baseExpression":{"id":2586,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2503,"src":"6300:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2589,"indexExpression":{"id":2588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6307:9:9","subExpression":{"id":2587,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2542,"src":"6307:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6300:17:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6250:107:9"},{"expression":{"id":2608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2601,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2534,"src":"6371:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2603,"indexExpression":{"id":2602,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2554,"src":"6378:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6371:9:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2605,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2564,"src":"6393:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2606,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2579,"src":"6396:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2604,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2806,"src":"6383:9:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":2607,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6383:15:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6371:27:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2609,"nodeType":"ExpressionStatement","src":"6371:27:9"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2557,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2554,"src":"6129:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2558,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2514,"src":"6133:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6129:15:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2611,"initializationExpression":{"assignments":[2554],"declarations":[{"constant":false,"id":2554,"mutability":"mutable","name":"i","nameLocation":"6122:1:9","nodeType":"VariableDeclaration","scope":2611,"src":"6114:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2553,"name":"uint256","nodeType":"ElementaryTypeName","src":"6114:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2556,"initialValue":{"hexValue":"30","id":2555,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6126:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6114:13:9"},"loopExpression":{"expression":{"id":2561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6146:3:9","subExpression":{"id":2560,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2554,"src":"6146:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2562,"nodeType":"ExpressionStatement","src":"6146:3:9"},"nodeType":"ForStatement","src":"6109:300:9"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2612,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2514,"src":"6423:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2613,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6437:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6423:15:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2622,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2509,"src":"6505:9:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2623,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6517:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6505:13:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2634,"nodeType":"Block","src":"6567:40:9","statements":[{"expression":{"baseExpression":{"id":2630,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2497,"src":"6588:5:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2632,"indexExpression":{"hexValue":"30","id":2631,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6594:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6588:8:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2507,"id":2633,"nodeType":"Return","src":"6581:15:9"}]},"id":2635,"nodeType":"IfStatement","src":"6501:106:9","trueBody":{"id":2629,"nodeType":"Block","src":"6520:41:9","statements":[{"expression":{"baseExpression":{"id":2625,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2503,"src":"6541:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2627,"indexExpression":{"hexValue":"30","id":2626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6548:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6541:9:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2507,"id":2628,"nodeType":"Return","src":"6534:16:9"}]}},"id":2636,"nodeType":"IfStatement","src":"6419:188:9","trueBody":{"id":2621,"nodeType":"Block","src":"6440:55:9","statements":[{"expression":{"baseExpression":{"id":2615,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2534,"src":"6461:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2619,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2616,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2514,"src":"6468:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2617,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6482:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6468:15:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6461:23:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2507,"id":2620,"nodeType":"Return","src":"6454:30:9"}]}}]},"documentation":{"id":2494,"nodeType":"StructuredDocumentation","src":"3805:768:9","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n _Available since v4.7._"},"id":2638,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProof","nameLocation":"4587:17:9","nodeType":"FunctionDefinition","parameters":{"id":2504,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2497,"mutability":"mutable","name":"proof","nameLocation":"4631:5:9","nodeType":"VariableDeclaration","scope":2638,"src":"4614:22:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2495,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4614:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2496,"nodeType":"ArrayTypeName","src":"4614:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2500,"mutability":"mutable","name":"proofFlags","nameLocation":"4660:10:9","nodeType":"VariableDeclaration","scope":2638,"src":"4646:24:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":2498,"name":"bool","nodeType":"ElementaryTypeName","src":"4646:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2499,"nodeType":"ArrayTypeName","src":"4646:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":2503,"mutability":"mutable","name":"leaves","nameLocation":"4697:6:9","nodeType":"VariableDeclaration","scope":2638,"src":"4680:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2501,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4680:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2502,"nodeType":"ArrayTypeName","src":"4680:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"4604:105:9"},"returnParameters":{"id":2507,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2506,"mutability":"mutable","name":"merkleRoot","nameLocation":"4741:10:9","nodeType":"VariableDeclaration","scope":2638,"src":"4733:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2505,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4733:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4732:20:9"},"scope":2818,"src":"4578:2035:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2782,"nodeType":"Block","src":"7013:1860:9","statements":[{"assignments":[2654],"declarations":[{"constant":false,"id":2654,"mutability":"mutable","name":"leavesLen","nameLocation":"7404:9:9","nodeType":"VariableDeclaration","scope":2782,"src":"7396:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2653,"name":"uint256","nodeType":"ElementaryTypeName","src":"7396:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2657,"initialValue":{"expression":{"id":2655,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2648,"src":"7416:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7423:6:9","memberName":"length","nodeType":"MemberAccess","src":"7416:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7396:33:9"},{"assignments":[2659],"declarations":[{"constant":false,"id":2659,"mutability":"mutable","name":"totalHashes","nameLocation":"7447:11:9","nodeType":"VariableDeclaration","scope":2782,"src":"7439:19:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2658,"name":"uint256","nodeType":"ElementaryTypeName","src":"7439:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2662,"initialValue":{"expression":{"id":2660,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2645,"src":"7461:10:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":2661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7472:6:9","memberName":"length","nodeType":"MemberAccess","src":"7461:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7439:39:9"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2664,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2654,"src":"7530:9:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":2665,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2642,"src":"7542:5:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":2666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7548:6:9","memberName":"length","nodeType":"MemberAccess","src":"7542:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7530:24:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2668,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7557:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7530:28:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2670,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2659,"src":"7562:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7530:43:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d65726b6c6550726f6f663a20696e76616c6964206d756c746970726f6f66","id":2672,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7575:33:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""},"value":"MerkleProof: invalid multiproof"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""}],"id":2663,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7522:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2673,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7522:87:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2674,"nodeType":"ExpressionStatement","src":"7522:87:9"},{"assignments":[2679],"declarations":[{"constant":false,"id":2679,"mutability":"mutable","name":"hashes","nameLocation":"7871:6:9","nodeType":"VariableDeclaration","scope":2782,"src":"7854:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2677,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7854:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2678,"nodeType":"ArrayTypeName","src":"7854:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":2685,"initialValue":{"arguments":[{"id":2683,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2659,"src":"7894:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2682,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"7880:13:9","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":2680,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7884:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2681,"nodeType":"ArrayTypeName","src":"7884:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":2684,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7880:26:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"7854:52:9"},{"assignments":[2687],"declarations":[{"constant":false,"id":2687,"mutability":"mutable","name":"leafPos","nameLocation":"7924:7:9","nodeType":"VariableDeclaration","scope":2782,"src":"7916:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2686,"name":"uint256","nodeType":"ElementaryTypeName","src":"7916:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2689,"initialValue":{"hexValue":"30","id":2688,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7934:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7916:19:9"},{"assignments":[2691],"declarations":[{"constant":false,"id":2691,"mutability":"mutable","name":"hashPos","nameLocation":"7953:7:9","nodeType":"VariableDeclaration","scope":2782,"src":"7945:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2690,"name":"uint256","nodeType":"ElementaryTypeName","src":"7945:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2693,"initialValue":{"hexValue":"30","id":2692,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7963:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7945:19:9"},{"assignments":[2695],"declarations":[{"constant":false,"id":2695,"mutability":"mutable","name":"proofPos","nameLocation":"7982:8:9","nodeType":"VariableDeclaration","scope":2782,"src":"7974:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2694,"name":"uint256","nodeType":"ElementaryTypeName","src":"7974:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2697,"initialValue":{"hexValue":"30","id":2696,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7993:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7974:20:9"},{"body":{"id":2755,"nodeType":"Block","src":"8411:258:9","statements":[{"assignments":[2709],"declarations":[{"constant":false,"id":2709,"mutability":"mutable","name":"a","nameLocation":"8433:1:9","nodeType":"VariableDeclaration","scope":2755,"src":"8425:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2708,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8425:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2722,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2710,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2687,"src":"8437:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2711,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2654,"src":"8447:9:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8437:19:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":2717,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2679,"src":"8479:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2720,"indexExpression":{"id":2719,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8486:9:9","subExpression":{"id":2718,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2691,"src":"8486:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8479:17:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2721,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8437:59:9","trueExpression":{"baseExpression":{"id":2713,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2648,"src":"8459:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2716,"indexExpression":{"id":2715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8466:9:9","subExpression":{"id":2714,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2687,"src":"8466:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8459:17:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"8425:71:9"},{"assignments":[2724],"declarations":[{"constant":false,"id":2724,"mutability":"mutable","name":"b","nameLocation":"8518:1:9","nodeType":"VariableDeclaration","scope":2755,"src":"8510:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2723,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8510:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2745,"initialValue":{"condition":{"baseExpression":{"id":2725,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2645,"src":"8522:10:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":2727,"indexExpression":{"id":2726,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2699,"src":"8533:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8522:13:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":2740,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2642,"src":"8600:5:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":2743,"indexExpression":{"id":2742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8606:10:9","subExpression":{"id":2741,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2695,"src":"8606:8:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8600:17:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8522:95:9","trueExpression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2728,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2687,"src":"8538:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2729,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2654,"src":"8548:9:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8538:19:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":2735,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2679,"src":"8580:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2738,"indexExpression":{"id":2737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8587:9:9","subExpression":{"id":2736,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2691,"src":"8587:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8580:17:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8538:59:9","trueExpression":{"baseExpression":{"id":2731,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2648,"src":"8560:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2734,"indexExpression":{"id":2733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8567:9:9","subExpression":{"id":2732,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2687,"src":"8567:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8560:17:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"8510:107:9"},{"expression":{"id":2753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2746,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2679,"src":"8631:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2748,"indexExpression":{"id":2747,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2699,"src":"8638:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8631:9:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2750,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2709,"src":"8653:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2751,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2724,"src":"8656:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2749,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2806,"src":"8643:9:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":2752,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8643:15:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"8631:27:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2754,"nodeType":"ExpressionStatement","src":"8631:27:9"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2702,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2699,"src":"8389:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2703,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2659,"src":"8393:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8389:15:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2756,"initializationExpression":{"assignments":[2699],"declarations":[{"constant":false,"id":2699,"mutability":"mutable","name":"i","nameLocation":"8382:1:9","nodeType":"VariableDeclaration","scope":2756,"src":"8374:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2698,"name":"uint256","nodeType":"ElementaryTypeName","src":"8374:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2701,"initialValue":{"hexValue":"30","id":2700,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8386:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8374:13:9"},"loopExpression":{"expression":{"id":2706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8406:3:9","subExpression":{"id":2705,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2699,"src":"8406:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2707,"nodeType":"ExpressionStatement","src":"8406:3:9"},"nodeType":"ForStatement","src":"8369:300:9"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2757,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2659,"src":"8683:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2758,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8697:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8683:15:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2767,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2654,"src":"8765:9:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2768,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8777:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8765:13:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2779,"nodeType":"Block","src":"8827:40:9","statements":[{"expression":{"baseExpression":{"id":2775,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2642,"src":"8848:5:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":2777,"indexExpression":{"hexValue":"30","id":2776,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8854:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8848:8:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2652,"id":2778,"nodeType":"Return","src":"8841:15:9"}]},"id":2780,"nodeType":"IfStatement","src":"8761:106:9","trueBody":{"id":2774,"nodeType":"Block","src":"8780:41:9","statements":[{"expression":{"baseExpression":{"id":2770,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2648,"src":"8801:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2772,"indexExpression":{"hexValue":"30","id":2771,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8808:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8801:9:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2652,"id":2773,"nodeType":"Return","src":"8794:16:9"}]}},"id":2781,"nodeType":"IfStatement","src":"8679:188:9","trueBody":{"id":2766,"nodeType":"Block","src":"8700:55:9","statements":[{"expression":{"baseExpression":{"id":2760,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2679,"src":"8721:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2764,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2763,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2761,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2659,"src":"8728:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2762,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8742:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8728:15:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8721:23:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2652,"id":2765,"nodeType":"Return","src":"8714:30:9"}]}}]},"documentation":{"id":2639,"nodeType":"StructuredDocumentation","src":"6619:202:9","text":" @dev Calldata version of {processMultiProof}.\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":2783,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProofCalldata","nameLocation":"6835:25:9","nodeType":"FunctionDefinition","parameters":{"id":2649,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2642,"mutability":"mutable","name":"proof","nameLocation":"6889:5:9","nodeType":"VariableDeclaration","scope":2783,"src":"6870:24:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2640,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6870:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2641,"nodeType":"ArrayTypeName","src":"6870:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2645,"mutability":"mutable","name":"proofFlags","nameLocation":"6920:10:9","nodeType":"VariableDeclaration","scope":2783,"src":"6904:26:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":2643,"name":"bool","nodeType":"ElementaryTypeName","src":"6904:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2644,"nodeType":"ArrayTypeName","src":"6904:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":2648,"mutability":"mutable","name":"leaves","nameLocation":"6957:6:9","nodeType":"VariableDeclaration","scope":2783,"src":"6940:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2646,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6940:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2647,"nodeType":"ArrayTypeName","src":"6940:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"6860:109:9"},"returnParameters":{"id":2652,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2651,"mutability":"mutable","name":"merkleRoot","nameLocation":"7001:10:9","nodeType":"VariableDeclaration","scope":2783,"src":"6993:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2650,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6993:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6992:20:9"},"scope":2818,"src":"6826:2047:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2805,"nodeType":"Block","src":"8951:75:9","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2792,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"8968:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2793,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2787,"src":"8972:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"8968:5:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":2800,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2787,"src":"9014:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2801,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"9017:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2799,"name":"_efficientHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2817,"src":"8999:14:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":2802,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8999:20:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8968:51:9","trueExpression":{"arguments":[{"id":2796,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"8991:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2797,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2787,"src":"8994:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2795,"name":"_efficientHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2817,"src":"8976:14:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":2798,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8976:20:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2791,"id":2804,"nodeType":"Return","src":"8961:58:9"}]},"id":2806,"implemented":true,"kind":"function","modifiers":[],"name":"_hashPair","nameLocation":"8888:9:9","nodeType":"FunctionDefinition","parameters":{"id":2788,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2785,"mutability":"mutable","name":"a","nameLocation":"8906:1:9","nodeType":"VariableDeclaration","scope":2806,"src":"8898:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2784,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8898:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2787,"mutability":"mutable","name":"b","nameLocation":"8917:1:9","nodeType":"VariableDeclaration","scope":2806,"src":"8909:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2786,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8909:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8897:22:9"},"returnParameters":{"id":2791,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2790,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2806,"src":"8942:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2789,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8942:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8941:9:9"},"scope":2818,"src":"8879:147:9","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":2816,"nodeType":"Block","src":"9115:178:9","statements":[{"AST":{"nodeType":"YulBlock","src":"9177:110:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9198:4:9","type":"","value":"0x00"},{"name":"a","nodeType":"YulIdentifier","src":"9204:1:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9191:6:9"},"nodeType":"YulFunctionCall","src":"9191:15:9"},"nodeType":"YulExpressionStatement","src":"9191:15:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9226:4:9","type":"","value":"0x20"},{"name":"b","nodeType":"YulIdentifier","src":"9232:1:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9219:6:9"},"nodeType":"YulFunctionCall","src":"9219:15:9"},"nodeType":"YulExpressionStatement","src":"9219:15:9"},{"nodeType":"YulAssignment","src":"9247:30:9","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9266:4:9","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"9272:4:9","type":"","value":"0x40"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"9256:9:9"},"nodeType":"YulFunctionCall","src":"9256:21:9"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"9247:5:9"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2808,"isOffset":false,"isSlot":false,"src":"9204:1:9","valueSize":1},{"declaration":2810,"isOffset":false,"isSlot":false,"src":"9232:1:9","valueSize":1},{"declaration":2813,"isOffset":false,"isSlot":false,"src":"9247:5:9","valueSize":1}],"id":2815,"nodeType":"InlineAssembly","src":"9168:119:9"}]},"id":2817,"implemented":true,"kind":"function","modifiers":[],"name":"_efficientHash","nameLocation":"9041:14:9","nodeType":"FunctionDefinition","parameters":{"id":2811,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2808,"mutability":"mutable","name":"a","nameLocation":"9064:1:9","nodeType":"VariableDeclaration","scope":2817,"src":"9056:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2807,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9056:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2810,"mutability":"mutable","name":"b","nameLocation":"9075:1:9","nodeType":"VariableDeclaration","scope":2817,"src":"9067:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2809,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9067:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9055:22:9"},"returnParameters":{"id":2814,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2813,"mutability":"mutable","name":"value","nameLocation":"9108:5:9","nodeType":"VariableDeclaration","scope":2817,"src":"9100:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2812,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9100:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9099:15:9"},"scope":2818,"src":"9032:261:9","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":2819,"src":"802:8493:9","usedErrors":[]}],"src":"118:9178:9"},"id":9},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","exportedSymbols":{"ERC165":[2842],"IERC165":[2854]},"id":2843,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2820,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"99:23:10"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"./IERC165.sol","id":2821,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2843,"sourceUnit":2855,"src":"124:23:10","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2823,"name":"IERC165","nameLocations":["754:7:10"],"nodeType":"IdentifierPath","referencedDeclaration":2854,"src":"754:7:10"},"id":2824,"nodeType":"InheritanceSpecifier","src":"754:7:10"}],"canonicalName":"ERC165","contractDependencies":[],"contractKind":"contract","documentation":{"id":2822,"nodeType":"StructuredDocumentation","src":"149:576:10","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."},"fullyImplemented":true,"id":2842,"linearizedBaseContracts":[2842,2854],"name":"ERC165","nameLocation":"744:6:10","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[2853],"body":{"id":2840,"nodeType":"Block","src":"920:64:10","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2833,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2827,"src":"937:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":2835,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2854,"src":"957:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$2854_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$2854_$","typeString":"type(contract IERC165)"}],"id":2834,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"952:4:10","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2836,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"952:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$2854","typeString":"type(contract IERC165)"}},"id":2837,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"966:11:10","memberName":"interfaceId","nodeType":"MemberAccess","src":"952:25:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"937:40:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2832,"id":2839,"nodeType":"Return","src":"930:47:10"}]},"documentation":{"id":2825,"nodeType":"StructuredDocumentation","src":"768:56:10","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":2841,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"838:17:10","nodeType":"FunctionDefinition","overrides":{"id":2829,"nodeType":"OverrideSpecifier","overrides":[],"src":"896:8:10"},"parameters":{"id":2828,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2827,"mutability":"mutable","name":"interfaceId","nameLocation":"863:11:10","nodeType":"VariableDeclaration","scope":2841,"src":"856:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2826,"name":"bytes4","nodeType":"ElementaryTypeName","src":"856:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"855:20:10"},"returnParameters":{"id":2832,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2831,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2841,"src":"914:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2830,"name":"bool","nodeType":"ElementaryTypeName","src":"914:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"913:6:10"},"scope":2842,"src":"829:155:10","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":2843,"src":"726:260:10","usedErrors":[]}],"src":"99:888:10"},"id":10},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[2854]},"id":2855,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2844,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:11"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":2845,"nodeType":"StructuredDocumentation","src":"125:279:11","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":2854,"linearizedBaseContracts":[2854],"name":"IERC165","nameLocation":"415:7:11","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2846,"nodeType":"StructuredDocumentation","src":"429:340:11","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":2853,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"783:17:11","nodeType":"FunctionDefinition","parameters":{"id":2849,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2848,"mutability":"mutable","name":"interfaceId","nameLocation":"808:11:11","nodeType":"VariableDeclaration","scope":2853,"src":"801:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2847,"name":"bytes4","nodeType":"ElementaryTypeName","src":"801:6:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"800:20:11"},"returnParameters":{"id":2852,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2851,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2853,"src":"844:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2850,"name":"bool","nodeType":"ElementaryTypeName","src":"844:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"843:6:11"},"scope":2854,"src":"774:76:11","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2855,"src":"405:447:11","usedErrors":[]}],"src":"100:753:11"},"id":11},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[3719]},"id":3720,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2856,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:12"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":2857,"nodeType":"StructuredDocumentation","src":"128:73:12","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":3719,"linearizedBaseContracts":[3719],"name":"Math","nameLocation":"210:4:12","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":2861,"members":[{"id":2858,"name":"Down","nameLocation":"245:4:12","nodeType":"EnumValue","src":"245:4:12"},{"id":2859,"name":"Up","nameLocation":"287:2:12","nodeType":"EnumValue","src":"287:2:12"},{"id":2860,"name":"Zero","nameLocation":"318:4:12","nodeType":"EnumValue","src":"318:4:12"}],"name":"Rounding","nameLocation":"226:8:12","nodeType":"EnumDefinition","src":"221:122:12"},{"body":{"id":2878,"nodeType":"Block","src":"480:37:12","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2873,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2871,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2864,"src":"497:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2872,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2866,"src":"501:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"497:5:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2875,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2866,"src":"509:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"497:13:12","trueExpression":{"id":2874,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2864,"src":"505:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2870,"id":2877,"nodeType":"Return","src":"490:20:12"}]},"documentation":{"id":2862,"nodeType":"StructuredDocumentation","src":"349:59:12","text":" @dev Returns the largest of two numbers."},"id":2879,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"422:3:12","nodeType":"FunctionDefinition","parameters":{"id":2867,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2864,"mutability":"mutable","name":"a","nameLocation":"434:1:12","nodeType":"VariableDeclaration","scope":2879,"src":"426:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2863,"name":"uint256","nodeType":"ElementaryTypeName","src":"426:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2866,"mutability":"mutable","name":"b","nameLocation":"445:1:12","nodeType":"VariableDeclaration","scope":2879,"src":"437:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2865,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"425:22:12"},"returnParameters":{"id":2870,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2869,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2879,"src":"471:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2868,"name":"uint256","nodeType":"ElementaryTypeName","src":"471:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"470:9:12"},"scope":3719,"src":"413:104:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2896,"nodeType":"Block","src":"655:37:12","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2889,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2882,"src":"672:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2890,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2884,"src":"676:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"672:5:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2893,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2884,"src":"684:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2894,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"672:13:12","trueExpression":{"id":2892,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2882,"src":"680:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2888,"id":2895,"nodeType":"Return","src":"665:20:12"}]},"documentation":{"id":2880,"nodeType":"StructuredDocumentation","src":"523:60:12","text":" @dev Returns the smallest of two numbers."},"id":2897,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"597:3:12","nodeType":"FunctionDefinition","parameters":{"id":2885,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2882,"mutability":"mutable","name":"a","nameLocation":"609:1:12","nodeType":"VariableDeclaration","scope":2897,"src":"601:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2881,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2884,"mutability":"mutable","name":"b","nameLocation":"620:1:12","nodeType":"VariableDeclaration","scope":2897,"src":"612:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2883,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:12"},"returnParameters":{"id":2888,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2887,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2897,"src":"646:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2886,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:9:12"},"scope":3719,"src":"588:104:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2919,"nodeType":"Block","src":"876:82:12","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2907,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2900,"src":"931:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2908,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2902,"src":"935:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"931:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2910,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"930:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2911,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2900,"src":"941:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2912,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2902,"src":"945:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2914,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"940:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":2915,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"950:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"940:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"930:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2906,"id":2918,"nodeType":"Return","src":"923:28:12"}]},"documentation":{"id":2898,"nodeType":"StructuredDocumentation","src":"698:102:12","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":2920,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"814:7:12","nodeType":"FunctionDefinition","parameters":{"id":2903,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2900,"mutability":"mutable","name":"a","nameLocation":"830:1:12","nodeType":"VariableDeclaration","scope":2920,"src":"822:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2899,"name":"uint256","nodeType":"ElementaryTypeName","src":"822:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2902,"mutability":"mutable","name":"b","nameLocation":"841:1:12","nodeType":"VariableDeclaration","scope":2920,"src":"833:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2901,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"821:22:12"},"returnParameters":{"id":2906,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2905,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2920,"src":"867:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2904,"name":"uint256","nodeType":"ElementaryTypeName","src":"867:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"866:9:12"},"scope":3719,"src":"805:153:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2944,"nodeType":"Block","src":"1228:123:12","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2930,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2923,"src":"1316:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2931,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1321:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1316:6:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2941,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2939,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2934,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2923,"src":"1330:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2935,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1334:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1330:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2937,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1329:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2938,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2925,"src":"1339:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1329:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2940,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1343:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1329:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1316:28:12","trueExpression":{"hexValue":"30","id":2933,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1325:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2929,"id":2943,"nodeType":"Return","src":"1309:35:12"}]},"documentation":{"id":2921,"nodeType":"StructuredDocumentation","src":"964:188:12","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":2945,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1166:7:12","nodeType":"FunctionDefinition","parameters":{"id":2926,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2923,"mutability":"mutable","name":"a","nameLocation":"1182:1:12","nodeType":"VariableDeclaration","scope":2945,"src":"1174:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2922,"name":"uint256","nodeType":"ElementaryTypeName","src":"1174:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2925,"mutability":"mutable","name":"b","nameLocation":"1193:1:12","nodeType":"VariableDeclaration","scope":2945,"src":"1185:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2924,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1173:22:12"},"returnParameters":{"id":2929,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2928,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2945,"src":"1219:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2927,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1218:9:12"},"scope":3719,"src":"1157:194:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3066,"nodeType":"Block","src":"1795:3797:12","statements":[{"id":3065,"nodeType":"UncheckedBlock","src":"1805:3781:12","statements":[{"assignments":[2958],"declarations":[{"constant":false,"id":2958,"mutability":"mutable","name":"prod0","nameLocation":"2134:5:12","nodeType":"VariableDeclaration","scope":3065,"src":"2126:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2957,"name":"uint256","nodeType":"ElementaryTypeName","src":"2126:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2959,"nodeType":"VariableDeclarationStatement","src":"2126:13:12"},{"assignments":[2961],"declarations":[{"constant":false,"id":2961,"mutability":"mutable","name":"prod1","nameLocation":"2206:5:12","nodeType":"VariableDeclaration","scope":3065,"src":"2198:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2960,"name":"uint256","nodeType":"ElementaryTypeName","src":"2198:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2962,"nodeType":"VariableDeclarationStatement","src":"2198:13:12"},{"AST":{"nodeType":"YulBlock","src":"2278:157:12","statements":[{"nodeType":"YulVariableDeclaration","src":"2296:30:12","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2313:1:12"},{"name":"y","nodeType":"YulIdentifier","src":"2316:1:12"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2323:1:12","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2319:3:12"},"nodeType":"YulFunctionCall","src":"2319:6:12"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2306:6:12"},"nodeType":"YulFunctionCall","src":"2306:20:12"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2300:2:12","type":""}]},{"nodeType":"YulAssignment","src":"2343:18:12","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2356:1:12"},{"name":"y","nodeType":"YulIdentifier","src":"2359:1:12"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2352:3:12"},"nodeType":"YulFunctionCall","src":"2352:9:12"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2343:5:12"}]},{"nodeType":"YulAssignment","src":"2378:43:12","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2395:2:12"},{"name":"prod0","nodeType":"YulIdentifier","src":"2399:5:12"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2391:3:12"},"nodeType":"YulFunctionCall","src":"2391:14:12"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2410:2:12"},{"name":"prod0","nodeType":"YulIdentifier","src":"2414:5:12"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2407:2:12"},"nodeType":"YulFunctionCall","src":"2407:13:12"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2387:3:12"},"nodeType":"YulFunctionCall","src":"2387:34:12"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2378:5:12"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2958,"isOffset":false,"isSlot":false,"src":"2343:5:12","valueSize":1},{"declaration":2958,"isOffset":false,"isSlot":false,"src":"2399:5:12","valueSize":1},{"declaration":2958,"isOffset":false,"isSlot":false,"src":"2414:5:12","valueSize":1},{"declaration":2961,"isOffset":false,"isSlot":false,"src":"2378:5:12","valueSize":1},{"declaration":2948,"isOffset":false,"isSlot":false,"src":"2313:1:12","valueSize":1},{"declaration":2948,"isOffset":false,"isSlot":false,"src":"2356:1:12","valueSize":1},{"declaration":2950,"isOffset":false,"isSlot":false,"src":"2316:1:12","valueSize":1},{"declaration":2950,"isOffset":false,"isSlot":false,"src":"2359:1:12","valueSize":1}],"id":2963,"nodeType":"InlineAssembly","src":"2269:166:12"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2964,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2961,"src":"2516:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2965,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2525:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2516:10:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2972,"nodeType":"IfStatement","src":"2512:75:12","trueBody":{"id":2971,"nodeType":"Block","src":"2528:59:12","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2969,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2967,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2958,"src":"2553:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2968,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2952,"src":"2561:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2553:19:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2956,"id":2970,"nodeType":"Return","src":"2546:26:12"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2976,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2974,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2952,"src":"2697:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2975,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2961,"src":"2711:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2697:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2973,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2689:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":2977,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2689:28:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2978,"nodeType":"ExpressionStatement","src":"2689:28:12"},{"assignments":[2980],"declarations":[{"constant":false,"id":2980,"mutability":"mutable","name":"remainder","nameLocation":"2981:9:12","nodeType":"VariableDeclaration","scope":3065,"src":"2973:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2979,"name":"uint256","nodeType":"ElementaryTypeName","src":"2973:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2981,"nodeType":"VariableDeclarationStatement","src":"2973:17:12"},{"AST":{"nodeType":"YulBlock","src":"3013:291:12","statements":[{"nodeType":"YulAssignment","src":"3082:38:12","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3102:1:12"},{"name":"y","nodeType":"YulIdentifier","src":"3105:1:12"},{"name":"denominator","nodeType":"YulIdentifier","src":"3108:11:12"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3095:6:12"},"nodeType":"YulFunctionCall","src":"3095:25:12"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3082:9:12"}]},{"nodeType":"YulAssignment","src":"3202:41:12","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3215:5:12"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3225:9:12"},{"name":"prod0","nodeType":"YulIdentifier","src":"3236:5:12"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3222:2:12"},"nodeType":"YulFunctionCall","src":"3222:20:12"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3211:3:12"},"nodeType":"YulFunctionCall","src":"3211:32:12"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3202:5:12"}]},{"nodeType":"YulAssignment","src":"3260:30:12","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3273:5:12"},{"name":"remainder","nodeType":"YulIdentifier","src":"3280:9:12"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3269:3:12"},"nodeType":"YulFunctionCall","src":"3269:21:12"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3260:5:12"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2952,"isOffset":false,"isSlot":false,"src":"3108:11:12","valueSize":1},{"declaration":2958,"isOffset":false,"isSlot":false,"src":"3236:5:12","valueSize":1},{"declaration":2958,"isOffset":false,"isSlot":false,"src":"3260:5:12","valueSize":1},{"declaration":2958,"isOffset":false,"isSlot":false,"src":"3273:5:12","valueSize":1},{"declaration":2961,"isOffset":false,"isSlot":false,"src":"3202:5:12","valueSize":1},{"declaration":2961,"isOffset":false,"isSlot":false,"src":"3215:5:12","valueSize":1},{"declaration":2980,"isOffset":false,"isSlot":false,"src":"3082:9:12","valueSize":1},{"declaration":2980,"isOffset":false,"isSlot":false,"src":"3225:9:12","valueSize":1},{"declaration":2980,"isOffset":false,"isSlot":false,"src":"3280:9:12","valueSize":1},{"declaration":2948,"isOffset":false,"isSlot":false,"src":"3102:1:12","valueSize":1},{"declaration":2950,"isOffset":false,"isSlot":false,"src":"3105:1:12","valueSize":1}],"id":2982,"nodeType":"InlineAssembly","src":"3004:300:12"},{"assignments":[2984],"declarations":[{"constant":false,"id":2984,"mutability":"mutable","name":"twos","nameLocation":"3619:4:12","nodeType":"VariableDeclaration","scope":3065,"src":"3611:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2983,"name":"uint256","nodeType":"ElementaryTypeName","src":"3611:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2992,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2985,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2952,"src":"3626:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2987,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3641:12:12","subExpression":{"id":2986,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2952,"src":"3642:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2988,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3656:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3641:16:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2990,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3640:18:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3626:32:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3611:47:12"},{"AST":{"nodeType":"YulBlock","src":"3681:362:12","statements":[{"nodeType":"YulAssignment","src":"3746:37:12","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"3765:11:12"},{"name":"twos","nodeType":"YulIdentifier","src":"3778:4:12"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3761:3:12"},"nodeType":"YulFunctionCall","src":"3761:22:12"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"3746:11:12"}]},{"nodeType":"YulAssignment","src":"3850:25:12","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3863:5:12"},{"name":"twos","nodeType":"YulIdentifier","src":"3870:4:12"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3859:3:12"},"nodeType":"YulFunctionCall","src":"3859:16:12"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3850:5:12"}]},{"nodeType":"YulAssignment","src":"3990:39:12","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4010:1:12","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4013:4:12"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4006:3:12"},"nodeType":"YulFunctionCall","src":"4006:12:12"},{"name":"twos","nodeType":"YulIdentifier","src":"4020:4:12"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4002:3:12"},"nodeType":"YulFunctionCall","src":"4002:23:12"},{"kind":"number","nodeType":"YulLiteral","src":"4027:1:12","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3998:3:12"},"nodeType":"YulFunctionCall","src":"3998:31:12"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"3990:4:12"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2952,"isOffset":false,"isSlot":false,"src":"3746:11:12","valueSize":1},{"declaration":2952,"isOffset":false,"isSlot":false,"src":"3765:11:12","valueSize":1},{"declaration":2958,"isOffset":false,"isSlot":false,"src":"3850:5:12","valueSize":1},{"declaration":2958,"isOffset":false,"isSlot":false,"src":"3863:5:12","valueSize":1},{"declaration":2984,"isOffset":false,"isSlot":false,"src":"3778:4:12","valueSize":1},{"declaration":2984,"isOffset":false,"isSlot":false,"src":"3870:4:12","valueSize":1},{"declaration":2984,"isOffset":false,"isSlot":false,"src":"3990:4:12","valueSize":1},{"declaration":2984,"isOffset":false,"isSlot":false,"src":"4013:4:12","valueSize":1},{"declaration":2984,"isOffset":false,"isSlot":false,"src":"4020:4:12","valueSize":1}],"id":2993,"nodeType":"InlineAssembly","src":"3672:371:12"},{"expression":{"id":2998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2994,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2958,"src":"4109:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2995,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2961,"src":"4118:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2996,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2984,"src":"4126:4:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4118:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4109:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2999,"nodeType":"ExpressionStatement","src":"4109:21:12"},{"assignments":[3001],"declarations":[{"constant":false,"id":3001,"mutability":"mutable","name":"inverse","nameLocation":"4456:7:12","nodeType":"VariableDeclaration","scope":3065,"src":"4448:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3000,"name":"uint256","nodeType":"ElementaryTypeName","src":"4448:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3008,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3007,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":3002,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4467:1:12","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3003,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2952,"src":"4471:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4467:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3005,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4466:17:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":3006,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4486:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4466:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4448:39:12"},{"expression":{"id":3015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3009,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3001,"src":"4704:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3010,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4715:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3011,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2952,"src":"4719:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3012,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3001,"src":"4733:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4719:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4715:25:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4704:36:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3016,"nodeType":"ExpressionStatement","src":"4704:36:12"},{"expression":{"id":3023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3017,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3001,"src":"4773:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3018,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4784:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3019,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2952,"src":"4788:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3020,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3001,"src":"4802:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4788:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4784:25:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4773:36:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3024,"nodeType":"ExpressionStatement","src":"4773:36:12"},{"expression":{"id":3031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3025,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3001,"src":"4843:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3026,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4854:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3027,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2952,"src":"4858:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3028,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3001,"src":"4872:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4858:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4854:25:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4843:36:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3032,"nodeType":"ExpressionStatement","src":"4843:36:12"},{"expression":{"id":3039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3033,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3001,"src":"4913:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3034,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4924:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3035,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2952,"src":"4928:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3036,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3001,"src":"4942:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4928:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4924:25:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4913:36:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3040,"nodeType":"ExpressionStatement","src":"4913:36:12"},{"expression":{"id":3047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3041,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3001,"src":"4983:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3042,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4994:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3043,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2952,"src":"4998:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3044,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3001,"src":"5012:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4998:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4994:25:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4983:36:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3048,"nodeType":"ExpressionStatement","src":"4983:36:12"},{"expression":{"id":3055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3049,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3001,"src":"5054:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3054,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3050,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5065:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3051,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2952,"src":"5069:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3052,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3001,"src":"5083:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5069:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5065:25:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5054:36:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3056,"nodeType":"ExpressionStatement","src":"5054:36:12"},{"expression":{"id":3061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3057,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2955,"src":"5524:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3058,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2958,"src":"5533:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3059,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3001,"src":"5541:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5533:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5524:24:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3062,"nodeType":"ExpressionStatement","src":"5524:24:12"},{"expression":{"id":3063,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2955,"src":"5569:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2956,"id":3064,"nodeType":"Return","src":"5562:13:12"}]}]},"documentation":{"id":2946,"nodeType":"StructuredDocumentation","src":"1357:305:12","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":3067,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1676:6:12","nodeType":"FunctionDefinition","parameters":{"id":2953,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2948,"mutability":"mutable","name":"x","nameLocation":"1700:1:12","nodeType":"VariableDeclaration","scope":3067,"src":"1692:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2947,"name":"uint256","nodeType":"ElementaryTypeName","src":"1692:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2950,"mutability":"mutable","name":"y","nameLocation":"1719:1:12","nodeType":"VariableDeclaration","scope":3067,"src":"1711:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2949,"name":"uint256","nodeType":"ElementaryTypeName","src":"1711:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2952,"mutability":"mutable","name":"denominator","nameLocation":"1738:11:12","nodeType":"VariableDeclaration","scope":3067,"src":"1730:19:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2951,"name":"uint256","nodeType":"ElementaryTypeName","src":"1730:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1682:73:12"},"returnParameters":{"id":2956,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2955,"mutability":"mutable","name":"result","nameLocation":"1787:6:12","nodeType":"VariableDeclaration","scope":3067,"src":"1779:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2954,"name":"uint256","nodeType":"ElementaryTypeName","src":"1779:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1778:16:12"},"scope":3719,"src":"1667:3925:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3110,"nodeType":"Block","src":"5872:189:12","statements":[{"assignments":[3083],"declarations":[{"constant":false,"id":3083,"mutability":"mutable","name":"result","nameLocation":"5890:6:12","nodeType":"VariableDeclaration","scope":3110,"src":"5882:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3082,"name":"uint256","nodeType":"ElementaryTypeName","src":"5882:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3089,"initialValue":{"arguments":[{"id":3085,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3070,"src":"5906:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3086,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3072,"src":"5909:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3087,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3074,"src":"5912:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3084,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[3067,3111],"referencedDeclaration":3067,"src":"5899:6:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":3088,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5899:25:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5882:42:12"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2861","typeString":"enum Math.Rounding"},"id":3093,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3090,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3077,"src":"5938:8:12","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2861","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3091,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2861,"src":"5950:8:12","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2861_$","typeString":"type(enum Math.Rounding)"}},"id":3092,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5959:2:12","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2859,"src":"5950:11:12","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2861","typeString":"enum Math.Rounding"}},"src":"5938:23:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3095,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3070,"src":"5972:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3096,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3072,"src":"5975:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3097,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3074,"src":"5978:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3094,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"5965:6:12","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":3098,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5965:25:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3099,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5993:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5965:29:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5938:56:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3107,"nodeType":"IfStatement","src":"5934:98:12","trueBody":{"id":3106,"nodeType":"Block","src":"5996:36:12","statements":[{"expression":{"id":3104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3102,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3083,"src":"6010:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6020:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6010:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3105,"nodeType":"ExpressionStatement","src":"6010:11:12"}]}},{"expression":{"id":3108,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3083,"src":"6048:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3081,"id":3109,"nodeType":"Return","src":"6041:13:12"}]},"documentation":{"id":3068,"nodeType":"StructuredDocumentation","src":"5598:121:12","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":3111,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"5733:6:12","nodeType":"FunctionDefinition","parameters":{"id":3078,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3070,"mutability":"mutable","name":"x","nameLocation":"5757:1:12","nodeType":"VariableDeclaration","scope":3111,"src":"5749:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3069,"name":"uint256","nodeType":"ElementaryTypeName","src":"5749:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3072,"mutability":"mutable","name":"y","nameLocation":"5776:1:12","nodeType":"VariableDeclaration","scope":3111,"src":"5768:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3071,"name":"uint256","nodeType":"ElementaryTypeName","src":"5768:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3074,"mutability":"mutable","name":"denominator","nameLocation":"5795:11:12","nodeType":"VariableDeclaration","scope":3111,"src":"5787:19:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3073,"name":"uint256","nodeType":"ElementaryTypeName","src":"5787:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3077,"mutability":"mutable","name":"rounding","nameLocation":"5825:8:12","nodeType":"VariableDeclaration","scope":3111,"src":"5816:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2861","typeString":"enum Math.Rounding"},"typeName":{"id":3076,"nodeType":"UserDefinedTypeName","pathNode":{"id":3075,"name":"Rounding","nameLocations":["5816:8:12"],"nodeType":"IdentifierPath","referencedDeclaration":2861,"src":"5816:8:12"},"referencedDeclaration":2861,"src":"5816:8:12","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2861","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"5739:100:12"},"returnParameters":{"id":3081,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3080,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3111,"src":"5863:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3079,"name":"uint256","nodeType":"ElementaryTypeName","src":"5863:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5862:9:12"},"scope":3719,"src":"5724:337:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3222,"nodeType":"Block","src":"6337:1585:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3119,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3114,"src":"6351:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3120,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6356:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6351:6:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3125,"nodeType":"IfStatement","src":"6347:45:12","trueBody":{"id":3124,"nodeType":"Block","src":"6359:33:12","statements":[{"expression":{"hexValue":"30","id":3122,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6380:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3118,"id":3123,"nodeType":"Return","src":"6373:8:12"}]}},{"assignments":[3127],"declarations":[{"constant":false,"id":3127,"mutability":"mutable","name":"result","nameLocation":"7079:6:12","nodeType":"VariableDeclaration","scope":3222,"src":"7071:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3126,"name":"uint256","nodeType":"ElementaryTypeName","src":"7071:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3136,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3128,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7088:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3130,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3114,"src":"7099:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3129,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[3391,3427],"referencedDeclaration":3391,"src":"7094:4:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3131,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7094:7:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3132,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7105:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7094:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3134,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7093:14:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7088:19:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7071:36:12"},{"id":3221,"nodeType":"UncheckedBlock","src":"7508:408:12","statements":[{"expression":{"id":3146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3137,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3127,"src":"7532:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3138,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3127,"src":"7542:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3139,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3114,"src":"7551:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3140,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3127,"src":"7555:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7551:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7542:19:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3143,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7541:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3144,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7566:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7541:26:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7532:35:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3147,"nodeType":"ExpressionStatement","src":"7532:35:12"},{"expression":{"id":3157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3148,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3127,"src":"7581:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3149,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3127,"src":"7591:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3150,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3114,"src":"7600:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3151,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3127,"src":"7604:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7600:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7591:19:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3154,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7590:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3155,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7615:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7590:26:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7581:35:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3158,"nodeType":"ExpressionStatement","src":"7581:35:12"},{"expression":{"id":3168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3159,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3127,"src":"7630:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3160,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3127,"src":"7640:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3161,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3114,"src":"7649:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3162,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3127,"src":"7653:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7649:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7640:19:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3165,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7639:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7664:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7639:26:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7630:35:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3169,"nodeType":"ExpressionStatement","src":"7630:35:12"},{"expression":{"id":3179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3170,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3127,"src":"7679:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3171,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3127,"src":"7689:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3172,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3114,"src":"7698:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3173,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3127,"src":"7702:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7698:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7689:19:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3176,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7688:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3177,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7713:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7688:26:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7679:35:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3180,"nodeType":"ExpressionStatement","src":"7679:35:12"},{"expression":{"id":3190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3181,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3127,"src":"7728:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3189,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3182,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3127,"src":"7738:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3183,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3114,"src":"7747:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3184,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3127,"src":"7751:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7747:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7738:19:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3187,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7737:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3188,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7762:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7737:26:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7728:35:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3191,"nodeType":"ExpressionStatement","src":"7728:35:12"},{"expression":{"id":3201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3192,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3127,"src":"7777:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3193,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3127,"src":"7787:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3194,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3114,"src":"7796:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3195,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3127,"src":"7800:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7796:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7787:19:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3198,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7786:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3199,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7811:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7786:26:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7777:35:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3202,"nodeType":"ExpressionStatement","src":"7777:35:12"},{"expression":{"id":3212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3203,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3127,"src":"7826:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3204,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3127,"src":"7836:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3205,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3114,"src":"7845:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3206,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3127,"src":"7849:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7845:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7836:19:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3209,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7835:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3210,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7860:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7835:26:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7826:35:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3213,"nodeType":"ExpressionStatement","src":"7826:35:12"},{"expression":{"arguments":[{"id":3215,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3127,"src":"7886:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3216,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3114,"src":"7894:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3217,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3127,"src":"7898:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7894:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3214,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2897,"src":"7882:3:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3219,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7882:23:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3118,"id":3220,"nodeType":"Return","src":"7875:30:12"}]}]},"documentation":{"id":3112,"nodeType":"StructuredDocumentation","src":"6067:208:12","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":3223,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6289:4:12","nodeType":"FunctionDefinition","parameters":{"id":3115,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3114,"mutability":"mutable","name":"a","nameLocation":"6302:1:12","nodeType":"VariableDeclaration","scope":3223,"src":"6294:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3113,"name":"uint256","nodeType":"ElementaryTypeName","src":"6294:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6293:11:12"},"returnParameters":{"id":3118,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3117,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3223,"src":"6328:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3116,"name":"uint256","nodeType":"ElementaryTypeName","src":"6328:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6327:9:12"},"scope":3719,"src":"6280:1642:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3258,"nodeType":"Block","src":"8098:161:12","statements":[{"id":3257,"nodeType":"UncheckedBlock","src":"8108:145:12","statements":[{"assignments":[3235],"declarations":[{"constant":false,"id":3235,"mutability":"mutable","name":"result","nameLocation":"8140:6:12","nodeType":"VariableDeclaration","scope":3257,"src":"8132:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3234,"name":"uint256","nodeType":"ElementaryTypeName","src":"8132:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3239,"initialValue":{"arguments":[{"id":3237,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3226,"src":"8154:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3236,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[3223,3259],"referencedDeclaration":3223,"src":"8149:4:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3238,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8149:7:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8132:24:12"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3240,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3235,"src":"8177:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2861","typeString":"enum Math.Rounding"},"id":3244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3241,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3229,"src":"8187:8:12","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2861","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3242,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2861,"src":"8199:8:12","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2861_$","typeString":"type(enum Math.Rounding)"}},"id":3243,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8208:2:12","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2859,"src":"8199:11:12","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2861","typeString":"enum Math.Rounding"}},"src":"8187:23:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3245,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3235,"src":"8214:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3246,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3235,"src":"8223:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8214:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3248,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3226,"src":"8232:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8214:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8187:46:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3252,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8240:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8187:54:12","trueExpression":{"hexValue":"31","id":3251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8236:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3254,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8186:56:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8177:65:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3233,"id":3256,"nodeType":"Return","src":"8170:72:12"}]}]},"documentation":{"id":3224,"nodeType":"StructuredDocumentation","src":"7928:89:12","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":3259,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8031:4:12","nodeType":"FunctionDefinition","parameters":{"id":3230,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3226,"mutability":"mutable","name":"a","nameLocation":"8044:1:12","nodeType":"VariableDeclaration","scope":3259,"src":"8036:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3225,"name":"uint256","nodeType":"ElementaryTypeName","src":"8036:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3229,"mutability":"mutable","name":"rounding","nameLocation":"8056:8:12","nodeType":"VariableDeclaration","scope":3259,"src":"8047:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2861","typeString":"enum Math.Rounding"},"typeName":{"id":3228,"nodeType":"UserDefinedTypeName","pathNode":{"id":3227,"name":"Rounding","nameLocations":["8047:8:12"],"nodeType":"IdentifierPath","referencedDeclaration":2861,"src":"8047:8:12"},"referencedDeclaration":2861,"src":"8047:8:12","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2861","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8035:30:12"},"returnParameters":{"id":3233,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3232,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3259,"src":"8089:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3231,"name":"uint256","nodeType":"ElementaryTypeName","src":"8089:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8088:9:12"},"scope":3719,"src":"8022:237:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3390,"nodeType":"Block","src":"8444:922:12","statements":[{"assignments":[3268],"declarations":[{"constant":false,"id":3268,"mutability":"mutable","name":"result","nameLocation":"8462:6:12","nodeType":"VariableDeclaration","scope":3390,"src":"8454:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3267,"name":"uint256","nodeType":"ElementaryTypeName","src":"8454:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3270,"initialValue":{"hexValue":"30","id":3269,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8471:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8454:18:12"},{"id":3387,"nodeType":"UncheckedBlock","src":"8482:855:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3271,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3262,"src":"8510:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":3272,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8519:3:12","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8510:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3274,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8525:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8510:16:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3285,"nodeType":"IfStatement","src":"8506:99:12","trueBody":{"id":3284,"nodeType":"Block","src":"8528:77:12","statements":[{"expression":{"id":3278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3276,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3262,"src":"8546:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":3277,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8556:3:12","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8546:13:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3279,"nodeType":"ExpressionStatement","src":"8546:13:12"},{"expression":{"id":3282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3280,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3268,"src":"8577:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":3281,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8587:3:12","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8577:13:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3283,"nodeType":"ExpressionStatement","src":"8577:13:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3286,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3262,"src":"8622:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":3287,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8631:2:12","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8622:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3289,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8636:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8622:15:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3300,"nodeType":"IfStatement","src":"8618:96:12","trueBody":{"id":3299,"nodeType":"Block","src":"8639:75:12","statements":[{"expression":{"id":3293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3291,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3262,"src":"8657:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":3292,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8667:2:12","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8657:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3294,"nodeType":"ExpressionStatement","src":"8657:12:12"},{"expression":{"id":3297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3295,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3268,"src":"8687:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":3296,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8697:2:12","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8687:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3298,"nodeType":"ExpressionStatement","src":"8687:12:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3305,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3301,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3262,"src":"8731:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":3302,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8740:2:12","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8731:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3304,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8745:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8731:15:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3315,"nodeType":"IfStatement","src":"8727:96:12","trueBody":{"id":3314,"nodeType":"Block","src":"8748:75:12","statements":[{"expression":{"id":3308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3306,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3262,"src":"8766:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":3307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8776:2:12","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8766:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3309,"nodeType":"ExpressionStatement","src":"8766:12:12"},{"expression":{"id":3312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3310,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3268,"src":"8796:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":3311,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8806:2:12","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8796:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3313,"nodeType":"ExpressionStatement","src":"8796:12:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3316,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3262,"src":"8840:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":3317,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8849:2:12","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8840:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3319,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8854:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8840:15:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3330,"nodeType":"IfStatement","src":"8836:96:12","trueBody":{"id":3329,"nodeType":"Block","src":"8857:75:12","statements":[{"expression":{"id":3323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3321,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3262,"src":"8875:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":3322,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8885:2:12","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8875:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3324,"nodeType":"ExpressionStatement","src":"8875:12:12"},{"expression":{"id":3327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3325,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3268,"src":"8905:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3326,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8915:2:12","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8905:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3328,"nodeType":"ExpressionStatement","src":"8905:12:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3331,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3262,"src":"8949:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":3332,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8958:1:12","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8949:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3334,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8962:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8949:14:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3345,"nodeType":"IfStatement","src":"8945:93:12","trueBody":{"id":3344,"nodeType":"Block","src":"8965:73:12","statements":[{"expression":{"id":3338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3336,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3262,"src":"8983:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":3337,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8993:1:12","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8983:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3339,"nodeType":"ExpressionStatement","src":"8983:11:12"},{"expression":{"id":3342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3340,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3268,"src":"9012:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3341,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9022:1:12","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9012:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3343,"nodeType":"ExpressionStatement","src":"9012:11:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3346,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3262,"src":"9055:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":3347,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9064:1:12","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9055:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9068:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9055:14:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3360,"nodeType":"IfStatement","src":"9051:93:12","trueBody":{"id":3359,"nodeType":"Block","src":"9071:73:12","statements":[{"expression":{"id":3353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3351,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3262,"src":"9089:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":3352,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9099:1:12","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9089:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3354,"nodeType":"ExpressionStatement","src":"9089:11:12"},{"expression":{"id":3357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3355,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3268,"src":"9118:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3356,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9128:1:12","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9118:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3358,"nodeType":"ExpressionStatement","src":"9118:11:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3361,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3262,"src":"9161:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":3362,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9170:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9161:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3364,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9174:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9161:14:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3375,"nodeType":"IfStatement","src":"9157:93:12","trueBody":{"id":3374,"nodeType":"Block","src":"9177:73:12","statements":[{"expression":{"id":3368,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3366,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3262,"src":"9195:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":3367,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9205:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9195:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3369,"nodeType":"ExpressionStatement","src":"9195:11:12"},{"expression":{"id":3372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3370,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3268,"src":"9224:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3371,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9234:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9224:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3373,"nodeType":"ExpressionStatement","src":"9224:11:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3376,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3262,"src":"9267:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9276:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9267:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3379,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9280:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9267:14:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3386,"nodeType":"IfStatement","src":"9263:64:12","trueBody":{"id":3385,"nodeType":"Block","src":"9283:44:12","statements":[{"expression":{"id":3383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3381,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3268,"src":"9301:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3382,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9311:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9301:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3384,"nodeType":"ExpressionStatement","src":"9301:11:12"}]}}]},{"expression":{"id":3388,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3268,"src":"9353:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3266,"id":3389,"nodeType":"Return","src":"9346:13:12"}]},"documentation":{"id":3260,"nodeType":"StructuredDocumentation","src":"8265:113:12","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":3391,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8392:4:12","nodeType":"FunctionDefinition","parameters":{"id":3263,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3262,"mutability":"mutable","name":"value","nameLocation":"8405:5:12","nodeType":"VariableDeclaration","scope":3391,"src":"8397:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3261,"name":"uint256","nodeType":"ElementaryTypeName","src":"8397:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8396:15:12"},"returnParameters":{"id":3266,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3265,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3391,"src":"8435:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3264,"name":"uint256","nodeType":"ElementaryTypeName","src":"8435:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8434:9:12"},"scope":3719,"src":"8383:983:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3426,"nodeType":"Block","src":"9599:165:12","statements":[{"id":3425,"nodeType":"UncheckedBlock","src":"9609:149:12","statements":[{"assignments":[3403],"declarations":[{"constant":false,"id":3403,"mutability":"mutable","name":"result","nameLocation":"9641:6:12","nodeType":"VariableDeclaration","scope":3425,"src":"9633:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3402,"name":"uint256","nodeType":"ElementaryTypeName","src":"9633:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3407,"initialValue":{"arguments":[{"id":3405,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"9655:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3404,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[3391,3427],"referencedDeclaration":3391,"src":"9650:4:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3406,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9650:11:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9633:28:12"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3408,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3403,"src":"9682:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2861","typeString":"enum Math.Rounding"},"id":3412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3409,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3397,"src":"9692:8:12","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2861","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3410,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2861,"src":"9704:8:12","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2861_$","typeString":"type(enum Math.Rounding)"}},"id":3411,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9713:2:12","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2859,"src":"9704:11:12","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2861","typeString":"enum Math.Rounding"}},"src":"9692:23:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9719:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":3414,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3403,"src":"9724:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9719:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3416,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"9733:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9719:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9692:46:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9745:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9692:54:12","trueExpression":{"hexValue":"31","id":3419,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9741:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3422,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9691:56:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9682:65:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3401,"id":3424,"nodeType":"Return","src":"9675:72:12"}]}]},"documentation":{"id":3392,"nodeType":"StructuredDocumentation","src":"9372:142:12","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3427,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9528:4:12","nodeType":"FunctionDefinition","parameters":{"id":3398,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3394,"mutability":"mutable","name":"value","nameLocation":"9541:5:12","nodeType":"VariableDeclaration","scope":3427,"src":"9533:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3393,"name":"uint256","nodeType":"ElementaryTypeName","src":"9533:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3397,"mutability":"mutable","name":"rounding","nameLocation":"9557:8:12","nodeType":"VariableDeclaration","scope":3427,"src":"9548:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2861","typeString":"enum Math.Rounding"},"typeName":{"id":3396,"nodeType":"UserDefinedTypeName","pathNode":{"id":3395,"name":"Rounding","nameLocations":["9548:8:12"],"nodeType":"IdentifierPath","referencedDeclaration":2861,"src":"9548:8:12"},"referencedDeclaration":2861,"src":"9548:8:12","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2861","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"9532:34:12"},"returnParameters":{"id":3401,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3400,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3427,"src":"9590:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3399,"name":"uint256","nodeType":"ElementaryTypeName","src":"9590:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9589:9:12"},"scope":3719,"src":"9519:245:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3555,"nodeType":"Block","src":"9951:828:12","statements":[{"assignments":[3436],"declarations":[{"constant":false,"id":3436,"mutability":"mutable","name":"result","nameLocation":"9969:6:12","nodeType":"VariableDeclaration","scope":3555,"src":"9961:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3435,"name":"uint256","nodeType":"ElementaryTypeName","src":"9961:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3438,"initialValue":{"hexValue":"30","id":3437,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9978:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9961:18:12"},{"id":3552,"nodeType":"UncheckedBlock","src":"9989:761:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3439,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3430,"src":"10017:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":3442,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3440,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10026:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":3441,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10030:2:12","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10026:6:12","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10017:15:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3455,"nodeType":"IfStatement","src":"10013:99:12","trueBody":{"id":3454,"nodeType":"Block","src":"10034:78:12","statements":[{"expression":{"id":3448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3444,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3430,"src":"10052:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":3447,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3445,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10061:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":3446,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10065:2:12","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10061:6:12","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10052:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3449,"nodeType":"ExpressionStatement","src":"10052:15:12"},{"expression":{"id":3452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3450,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3436,"src":"10085:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":3451,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10095:2:12","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10085:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3453,"nodeType":"ExpressionStatement","src":"10085:12:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3456,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3430,"src":"10129:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":3459,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10138:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":3458,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10142:2:12","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10138:6:12","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10129:15:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3472,"nodeType":"IfStatement","src":"10125:99:12","trueBody":{"id":3471,"nodeType":"Block","src":"10146:78:12","statements":[{"expression":{"id":3465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3461,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3430,"src":"10164:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":3464,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3462,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10173:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":3463,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10177:2:12","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10173:6:12","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10164:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3466,"nodeType":"ExpressionStatement","src":"10164:15:12"},{"expression":{"id":3469,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3467,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3436,"src":"10197:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":3468,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10207:2:12","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10197:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3470,"nodeType":"ExpressionStatement","src":"10197:12:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3473,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3430,"src":"10241:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":3476,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3474,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10250:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":3475,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10254:2:12","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10250:6:12","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10241:15:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3489,"nodeType":"IfStatement","src":"10237:99:12","trueBody":{"id":3488,"nodeType":"Block","src":"10258:78:12","statements":[{"expression":{"id":3482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3478,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3430,"src":"10276:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":3481,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3479,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10285:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":3480,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10289:2:12","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10285:6:12","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10276:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3483,"nodeType":"ExpressionStatement","src":"10276:15:12"},{"expression":{"id":3486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3484,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3436,"src":"10309:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3485,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10319:2:12","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10309:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3487,"nodeType":"ExpressionStatement","src":"10309:12:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3490,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3430,"src":"10353:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":3493,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3491,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10362:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":3492,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10366:1:12","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10362:5:12","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10353:14:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3506,"nodeType":"IfStatement","src":"10349:96:12","trueBody":{"id":3505,"nodeType":"Block","src":"10369:76:12","statements":[{"expression":{"id":3499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3495,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3430,"src":"10387:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":3498,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3496,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10396:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":3497,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10400:1:12","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10396:5:12","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10387:14:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3500,"nodeType":"ExpressionStatement","src":"10387:14:12"},{"expression":{"id":3503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3501,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3436,"src":"10419:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3502,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10429:1:12","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10419:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3504,"nodeType":"ExpressionStatement","src":"10419:11:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3507,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3430,"src":"10462:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":3510,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3508,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10471:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":3509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10475:1:12","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10471:5:12","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10462:14:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3523,"nodeType":"IfStatement","src":"10458:96:12","trueBody":{"id":3522,"nodeType":"Block","src":"10478:76:12","statements":[{"expression":{"id":3516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3512,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3430,"src":"10496:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":3515,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3513,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10505:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":3514,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10509:1:12","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10505:5:12","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10496:14:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3517,"nodeType":"ExpressionStatement","src":"10496:14:12"},{"expression":{"id":3520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3518,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3436,"src":"10528:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3519,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10538:1:12","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10528:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3521,"nodeType":"ExpressionStatement","src":"10528:11:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3524,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3430,"src":"10571:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":3527,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3525,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10580:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":3526,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10584:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10580:5:12","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10571:14:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3540,"nodeType":"IfStatement","src":"10567:96:12","trueBody":{"id":3539,"nodeType":"Block","src":"10587:76:12","statements":[{"expression":{"id":3533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3529,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3430,"src":"10605:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":3532,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3530,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10614:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":3531,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10618:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10614:5:12","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10605:14:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3534,"nodeType":"ExpressionStatement","src":"10605:14:12"},{"expression":{"id":3537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3535,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3436,"src":"10637:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3536,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10647:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10637:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3538,"nodeType":"ExpressionStatement","src":"10637:11:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3541,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3430,"src":"10680:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":3544,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3542,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10689:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":3543,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10693:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10689:5:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10680:14:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3551,"nodeType":"IfStatement","src":"10676:64:12","trueBody":{"id":3550,"nodeType":"Block","src":"10696:44:12","statements":[{"expression":{"id":3548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3546,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3436,"src":"10714:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3547,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10724:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10714:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3549,"nodeType":"ExpressionStatement","src":"10714:11:12"}]}}]},{"expression":{"id":3553,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3436,"src":"10766:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3434,"id":3554,"nodeType":"Return","src":"10759:13:12"}]},"documentation":{"id":3428,"nodeType":"StructuredDocumentation","src":"9770:114:12","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":3556,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"9898:5:12","nodeType":"FunctionDefinition","parameters":{"id":3431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3430,"mutability":"mutable","name":"value","nameLocation":"9912:5:12","nodeType":"VariableDeclaration","scope":3556,"src":"9904:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3429,"name":"uint256","nodeType":"ElementaryTypeName","src":"9904:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9903:15:12"},"returnParameters":{"id":3434,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3433,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3556,"src":"9942:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3432,"name":"uint256","nodeType":"ElementaryTypeName","src":"9942:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9941:9:12"},"scope":3719,"src":"9889:890:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3591,"nodeType":"Block","src":"11014:165:12","statements":[{"id":3590,"nodeType":"UncheckedBlock","src":"11024:149:12","statements":[{"assignments":[3568],"declarations":[{"constant":false,"id":3568,"mutability":"mutable","name":"result","nameLocation":"11056:6:12","nodeType":"VariableDeclaration","scope":3590,"src":"11048:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3567,"name":"uint256","nodeType":"ElementaryTypeName","src":"11048:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3572,"initialValue":{"arguments":[{"id":3570,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3559,"src":"11071:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3569,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[3556,3592],"referencedDeclaration":3556,"src":"11065:5:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3571,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11065:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11048:29:12"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3573,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"11098:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2861","typeString":"enum Math.Rounding"},"id":3577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3574,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3562,"src":"11108:8:12","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2861","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3575,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2861,"src":"11120:8:12","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2861_$","typeString":"type(enum Math.Rounding)"}},"id":3576,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11129:2:12","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2859,"src":"11120:11:12","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2861","typeString":"enum Math.Rounding"}},"src":"11108:23:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11135:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":3579,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"11139:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11135:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3581,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3559,"src":"11148:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11135:18:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11108:45:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3585,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11160:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11108:53:12","trueExpression":{"hexValue":"31","id":3584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11156:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3587,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11107:55:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11098:64:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3566,"id":3589,"nodeType":"Return","src":"11091:71:12"}]}]},"documentation":{"id":3557,"nodeType":"StructuredDocumentation","src":"10785:143:12","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3592,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10942:5:12","nodeType":"FunctionDefinition","parameters":{"id":3563,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3559,"mutability":"mutable","name":"value","nameLocation":"10956:5:12","nodeType":"VariableDeclaration","scope":3592,"src":"10948:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3558,"name":"uint256","nodeType":"ElementaryTypeName","src":"10948:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3562,"mutability":"mutable","name":"rounding","nameLocation":"10972:8:12","nodeType":"VariableDeclaration","scope":3592,"src":"10963:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2861","typeString":"enum Math.Rounding"},"typeName":{"id":3561,"nodeType":"UserDefinedTypeName","pathNode":{"id":3560,"name":"Rounding","nameLocations":["10963:8:12"],"nodeType":"IdentifierPath","referencedDeclaration":2861,"src":"10963:8:12"},"referencedDeclaration":2861,"src":"10963:8:12","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2861","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"10947:34:12"},"returnParameters":{"id":3566,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3565,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3592,"src":"11005:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3564,"name":"uint256","nodeType":"ElementaryTypeName","src":"11005:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11004:9:12"},"scope":3719,"src":"10933:246:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3678,"nodeType":"Block","src":"11493:600:12","statements":[{"assignments":[3601],"declarations":[{"constant":false,"id":3601,"mutability":"mutable","name":"result","nameLocation":"11511:6:12","nodeType":"VariableDeclaration","scope":3678,"src":"11503:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3600,"name":"uint256","nodeType":"ElementaryTypeName","src":"11503:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3603,"initialValue":{"hexValue":"30","id":3602,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11520:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11503:18:12"},{"id":3675,"nodeType":"UncheckedBlock","src":"11531:533:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3604,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3595,"src":"11559:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":3605,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11568:3:12","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11559:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3607,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11574:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11559:16:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3618,"nodeType":"IfStatement","src":"11555:98:12","trueBody":{"id":3617,"nodeType":"Block","src":"11577:76:12","statements":[{"expression":{"id":3611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3609,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3595,"src":"11595:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":3610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11605:3:12","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11595:13:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3612,"nodeType":"ExpressionStatement","src":"11595:13:12"},{"expression":{"id":3615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3613,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3601,"src":"11626:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3614,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11636:2:12","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11626:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3616,"nodeType":"ExpressionStatement","src":"11626:12:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3619,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3595,"src":"11670:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":3620,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11679:2:12","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11670:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3622,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11684:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11670:15:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3633,"nodeType":"IfStatement","src":"11666:95:12","trueBody":{"id":3632,"nodeType":"Block","src":"11687:74:12","statements":[{"expression":{"id":3626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3624,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3595,"src":"11705:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":3625,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11715:2:12","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11705:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3627,"nodeType":"ExpressionStatement","src":"11705:12:12"},{"expression":{"id":3630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3628,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3601,"src":"11735:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3629,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11745:1:12","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11735:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3631,"nodeType":"ExpressionStatement","src":"11735:11:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3634,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3595,"src":"11778:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":3635,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11787:2:12","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11778:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3637,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11792:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11778:15:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3648,"nodeType":"IfStatement","src":"11774:95:12","trueBody":{"id":3647,"nodeType":"Block","src":"11795:74:12","statements":[{"expression":{"id":3641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3639,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3595,"src":"11813:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":3640,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11823:2:12","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11813:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3642,"nodeType":"ExpressionStatement","src":"11813:12:12"},{"expression":{"id":3645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3643,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3601,"src":"11843:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3644,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11853:1:12","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11843:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3646,"nodeType":"ExpressionStatement","src":"11843:11:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3649,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3595,"src":"11886:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":3650,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11895:2:12","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11886:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3652,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11900:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11886:15:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3663,"nodeType":"IfStatement","src":"11882:95:12","trueBody":{"id":3662,"nodeType":"Block","src":"11903:74:12","statements":[{"expression":{"id":3656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3654,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3595,"src":"11921:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":3655,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11931:2:12","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11921:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3657,"nodeType":"ExpressionStatement","src":"11921:12:12"},{"expression":{"id":3660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3658,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3601,"src":"11951:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11961:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11951:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3661,"nodeType":"ExpressionStatement","src":"11951:11:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3664,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3595,"src":"11994:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":3665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12003:1:12","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11994:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3667,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12007:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11994:14:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3674,"nodeType":"IfStatement","src":"11990:64:12","trueBody":{"id":3673,"nodeType":"Block","src":"12010:44:12","statements":[{"expression":{"id":3671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3669,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3601,"src":"12028:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3670,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12038:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12028:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3672,"nodeType":"ExpressionStatement","src":"12028:11:12"}]}}]},{"expression":{"id":3676,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3601,"src":"12080:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3599,"id":3677,"nodeType":"Return","src":"12073:13:12"}]},"documentation":{"id":3593,"nodeType":"StructuredDocumentation","src":"11185:240:12","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":3679,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11439:6:12","nodeType":"FunctionDefinition","parameters":{"id":3596,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3595,"mutability":"mutable","name":"value","nameLocation":"11454:5:12","nodeType":"VariableDeclaration","scope":3679,"src":"11446:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3594,"name":"uint256","nodeType":"ElementaryTypeName","src":"11446:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11445:15:12"},"returnParameters":{"id":3599,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3598,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3679,"src":"11484:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3597,"name":"uint256","nodeType":"ElementaryTypeName","src":"11484:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11483:9:12"},"scope":3719,"src":"11430:663:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3717,"nodeType":"Block","src":"12329:173:12","statements":[{"id":3716,"nodeType":"UncheckedBlock","src":"12339:157:12","statements":[{"assignments":[3691],"declarations":[{"constant":false,"id":3691,"mutability":"mutable","name":"result","nameLocation":"12371:6:12","nodeType":"VariableDeclaration","scope":3716,"src":"12363:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3690,"name":"uint256","nodeType":"ElementaryTypeName","src":"12363:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3695,"initialValue":{"arguments":[{"id":3693,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3682,"src":"12387:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3692,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[3679,3718],"referencedDeclaration":3679,"src":"12380:6:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3694,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12380:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12363:30:12"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3696,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3691,"src":"12414:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2861","typeString":"enum Math.Rounding"},"id":3700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3697,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3685,"src":"12424:8:12","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2861","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3698,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2861,"src":"12436:8:12","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2861_$","typeString":"type(enum Math.Rounding)"}},"id":3699,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12445:2:12","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2859,"src":"12436:11:12","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2861","typeString":"enum Math.Rounding"}},"src":"12424:23:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3701,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12451:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3702,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3691,"src":"12457:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"38","id":3703,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12466:1:12","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12457:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3705,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12456:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12451:17:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3707,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3682,"src":"12471:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12451:25:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12424:52:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3711,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12483:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12424:60:12","trueExpression":{"hexValue":"31","id":3710,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12479:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3713,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12423:62:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12414:71:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3689,"id":3715,"nodeType":"Return","src":"12407:78:12"}]}]},"documentation":{"id":3680,"nodeType":"StructuredDocumentation","src":"12099:143:12","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3718,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12256:6:12","nodeType":"FunctionDefinition","parameters":{"id":3686,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3682,"mutability":"mutable","name":"value","nameLocation":"12271:5:12","nodeType":"VariableDeclaration","scope":3718,"src":"12263:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3681,"name":"uint256","nodeType":"ElementaryTypeName","src":"12263:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3685,"mutability":"mutable","name":"rounding","nameLocation":"12287:8:12","nodeType":"VariableDeclaration","scope":3718,"src":"12278:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2861","typeString":"enum Math.Rounding"},"typeName":{"id":3684,"nodeType":"UserDefinedTypeName","pathNode":{"id":3683,"name":"Rounding","nameLocations":["12278:8:12"],"nodeType":"IdentifierPath","referencedDeclaration":2861,"src":"12278:8:12"},"referencedDeclaration":2861,"src":"12278:8:12","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2861","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"12262:34:12"},"returnParameters":{"id":3689,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3688,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3718,"src":"12320:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3687,"name":"uint256","nodeType":"ElementaryTypeName","src":"12320:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12319:9:12"},"scope":3719,"src":"12247:255:12","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3720,"src":"202:12302:12","usedErrors":[]}],"src":"103:12402:12"},"id":12},"contracts/BundlerManager.sol":{"ast":{"absolutePath":"contracts/BundlerManager.sol","exportedSymbols":{"BundlerManager":[3803]},"id":3804,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3721,"literals":["solidity","^","0.8",".7"],"nodeType":"PragmaDirective","src":"32:23:13"},{"abstract":false,"baseContracts":[],"canonicalName":"BundlerManager","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3803,"linearizedBaseContracts":[3803],"name":"BundlerManager","nameLocation":"66:14:13","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"551530d6","id":3725,"mutability":"mutable","name":"isBundler","nameLocation":"116:9:13","nodeType":"VariableDeclaration","scope":3803,"src":"84:41:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":3724,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3722,"name":"address","nodeType":"ElementaryTypeName","src":"92:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"84:24:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3723,"name":"bool","nodeType":"ElementaryTypeName","src":"103:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"constant":false,"functionSelector":"2220967e","id":3729,"mutability":"mutable","name":"lastHeartbeat","nameLocation":"163:13:13","nodeType":"VariableDeclaration","scope":3803,"src":"128:48:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":3728,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3726,"name":"address","nodeType":"ElementaryTypeName","src":"136:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"128:27:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3727,"name":"uint256","nodeType":"ElementaryTypeName","src":"147:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"functionSelector":"14c44e09","id":3731,"mutability":"mutable","name":"registrationFee","nameLocation":"194:15:13","nodeType":"VariableDeclaration","scope":3803,"src":"179:30:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3730,"name":"uint256","nodeType":"ElementaryTypeName","src":"179:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"anonymous":false,"eventSelector":"2f8f01b91096d69e5a523003459876ae74534592e7ffe3ab00a1a21e9a8f5d9c","id":3735,"name":"BundlerRegistered","nameLocation":"219:17:13","nodeType":"EventDefinition","parameters":{"id":3734,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3733,"indexed":true,"mutability":"mutable","name":"bundler","nameLocation":"253:7:13","nodeType":"VariableDeclaration","scope":3735,"src":"237:23:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3732,"name":"address","nodeType":"ElementaryTypeName","src":"237:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"236:25:13"},"src":"213:49:13"},{"anonymous":false,"eventSelector":"524ff62d10e7448ae7f4b3312273a3f8400a0662bc7991a69119576c86cecabe","id":3741,"name":"Heartbeat","nameLocation":"270:9:13","nodeType":"EventDefinition","parameters":{"id":3740,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3737,"indexed":true,"mutability":"mutable","name":"bundler","nameLocation":"296:7:13","nodeType":"VariableDeclaration","scope":3741,"src":"280:23:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3736,"name":"address","nodeType":"ElementaryTypeName","src":"280:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3739,"indexed":false,"mutability":"mutable","name":"timestamp","nameLocation":"313:9:13","nodeType":"VariableDeclaration","scope":3741,"src":"305:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3738,"name":"uint256","nodeType":"ElementaryTypeName","src":"305:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"279:44:13"},"src":"264:60:13"},{"body":{"id":3764,"nodeType":"Block","src":"410:132:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3745,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"422:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"426:5:13","memberName":"value","nodeType":"MemberAccess","src":"422:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3747,"name":"registrationFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3731,"src":"435:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"422:28:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e636f727265637420666565","id":3749,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"452:15:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d732dbfadb06a9deb2730d8b2b6bccfb913c1b64b0abfef3ec785e1f08ccaf","typeString":"literal_string \"Incorrect fee\""},"value":"Incorrect fee"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_24d732dbfadb06a9deb2730d8b2b6bccfb913c1b64b0abfef3ec785e1f08ccaf","typeString":"literal_string \"Incorrect fee\""}],"id":3744,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"414:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3750,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"414:54:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3751,"nodeType":"ExpressionStatement","src":"414:54:13"},{"expression":{"id":3757,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3752,"name":"isBundler","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3725,"src":"472:9:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3755,"indexExpression":{"expression":{"id":3753,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"482:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"486:6:13","memberName":"sender","nodeType":"MemberAccess","src":"482:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"472:21:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3756,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"496:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"472:28:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3758,"nodeType":"ExpressionStatement","src":"472:28:13"},{"eventCall":{"arguments":[{"expression":{"id":3760,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"527:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"531:6:13","memberName":"sender","nodeType":"MemberAccess","src":"527:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3759,"name":"BundlerRegistered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3735,"src":"509:17:13","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3762,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"509:29:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3763,"nodeType":"EmitStatement","src":"504:34:13"}]},"functionSelector":"827a0ea6","id":3765,"implemented":true,"kind":"function","modifiers":[],"name":"registerAsBundler","nameLocation":"375:17:13","nodeType":"FunctionDefinition","parameters":{"id":3742,"nodeType":"ParameterList","parameters":[],"src":"392:2:13"},"returnParameters":{"id":3743,"nodeType":"ParameterList","parameters":[],"src":"410:0:13"},"scope":3803,"src":"366:176:13","stateMutability":"payable","virtual":false,"visibility":"public"},{"body":{"id":3791,"nodeType":"Block","src":"618:160:13","statements":[{"expression":{"arguments":[{"baseExpression":{"id":3769,"name":"isBundler","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3725,"src":"630:9:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3772,"indexExpression":{"expression":{"id":3770,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"640:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"644:6:13","memberName":"sender","nodeType":"MemberAccess","src":"640:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"630:21:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f74206120726567697374657265642062756e646c6572","id":3773,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"653:26:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_e329dc8768cebcd7d1896e8545f31c7224416415be21ea09b3bab9d66109d3db","typeString":"literal_string \"Not a registered bundler\""},"value":"Not a registered bundler"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e329dc8768cebcd7d1896e8545f31c7224416415be21ea09b3bab9d66109d3db","typeString":"literal_string \"Not a registered bundler\""}],"id":3768,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"622:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3774,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"622:58:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3775,"nodeType":"ExpressionStatement","src":"622:58:13"},{"expression":{"id":3782,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3776,"name":"lastHeartbeat","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3729,"src":"684:13:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3779,"indexExpression":{"expression":{"id":3777,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"698:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"702:6:13","memberName":"sender","nodeType":"MemberAccess","src":"698:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"684:25:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":3780,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"712:5:13","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3781,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"718:9:13","memberName":"timestamp","nodeType":"MemberAccess","src":"712:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"684:43:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3783,"nodeType":"ExpressionStatement","src":"684:43:13"},{"eventCall":{"arguments":[{"expression":{"id":3785,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"746:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"750:6:13","memberName":"sender","nodeType":"MemberAccess","src":"746:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3787,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"758:5:13","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"764:9:13","memberName":"timestamp","nodeType":"MemberAccess","src":"758:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3784,"name":"Heartbeat","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3741,"src":"736:9:13","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":3789,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"736:38:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3790,"nodeType":"EmitStatement","src":"731:43:13"}]},"functionSelector":"3defb962","id":3792,"implemented":true,"kind":"function","modifiers":[],"name":"heartbeat","nameLocation":"599:9:13","nodeType":"FunctionDefinition","parameters":{"id":3766,"nodeType":"ParameterList","parameters":[],"src":"608:2:13"},"returnParameters":{"id":3767,"nodeType":"ParameterList","parameters":[],"src":"618:0:13"},"scope":3803,"src":"590:188:13","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3801,"nodeType":"Block","src":"872:61:13","statements":[{"expression":{"id":3799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3797,"name":"registrationFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3731,"src":"908:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3798,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3794,"src":"926:3:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"908:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3800,"nodeType":"ExpressionStatement","src":"908:21:13"}]},"functionSelector":"c320c727","id":3802,"implemented":true,"kind":"function","modifiers":[],"name":"setRegistrationFee","nameLocation":"833:18:13","nodeType":"FunctionDefinition","parameters":{"id":3795,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3794,"mutability":"mutable","name":"fee","nameLocation":"860:3:13","nodeType":"VariableDeclaration","scope":3802,"src":"852:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3793,"name":"uint256","nodeType":"ElementaryTypeName","src":"852:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"851:13:13"},"returnParameters":{"id":3796,"nodeType":"ParameterList","parameters":[],"src":"872:0:13"},"scope":3803,"src":"824:109:13","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":3804,"src":"57:917:13","usedErrors":[]}],"src":"32:943:13"},"id":13},"contracts/ExecutorManager.sol":{"ast":{"absolutePath":"contracts/ExecutorManager.sol","exportedSymbols":{"AccessControl":[315],"Context":[2141],"ERC165":[2842],"ExecutorManager":[3881],"IAccessControl":[388],"IERC165":[2854],"Math":[3719],"Strings":[2316]},"id":3882,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3805,"literals":["solidity","^","0.8",".7"],"nodeType":"PragmaDirective","src":"32:23:14"},{"absolutePath":"@openzeppelin/contracts/access/AccessControl.sol","file":"@openzeppelin/contracts/access/AccessControl.sol","id":3806,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3882,"sourceUnit":316,"src":"57:58:14","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3807,"name":"AccessControl","nameLocations":["145:13:14"],"nodeType":"IdentifierPath","referencedDeclaration":315,"src":"145:13:14"},"id":3808,"nodeType":"InheritanceSpecifier","src":"145:13:14"}],"canonicalName":"ExecutorManager","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3881,"linearizedBaseContracts":[3881,315,2842,2854,388,2141],"name":"ExecutorManager","nameLocation":"126:15:14","nodeType":"ContractDefinition","nodes":[{"constant":true,"functionSelector":"07bd0265","id":3813,"mutability":"constant","name":"EXECUTOR_ROLE","nameLocation":"186:13:14","nodeType":"VariableDeclaration","scope":3881,"src":"162:66:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3809,"name":"bytes32","nodeType":"ElementaryTypeName","src":"162:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"4558454355544f525f524f4c45","id":3811,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"212:15:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_d8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63","typeString":"literal_string \"EXECUTOR_ROLE\""},"value":"EXECUTOR_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_d8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63","typeString":"literal_string \"EXECUTOR_ROLE\""}],"id":3810,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"202:9:14","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3812,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"202:26:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"anonymous":false,"eventSelector":"12ad16bd2a8e5f789a2584f92dba7594ec459e9eb0d00b0dba8843f6c59f035b","id":3817,"name":"ExecutorRegistered","nameLocation":"238:18:14","nodeType":"EventDefinition","parameters":{"id":3816,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3815,"indexed":true,"mutability":"mutable","name":"executor","nameLocation":"273:8:14","nodeType":"VariableDeclaration","scope":3817,"src":"257:24:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3814,"name":"address","nodeType":"ElementaryTypeName","src":"257:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"256:26:14"},"src":"232:51:14"},{"anonymous":false,"eventSelector":"dd96f65ca46c65c337946f2242c6e8a2383b8733b20e36dad5b48a648ea32108","id":3821,"name":"ExecutorUnregistered","nameLocation":"291:20:14","nodeType":"EventDefinition","parameters":{"id":3820,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3819,"indexed":true,"mutability":"mutable","name":"executor","nameLocation":"328:8:14","nodeType":"VariableDeclaration","scope":3821,"src":"312:24:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3818,"name":"address","nodeType":"ElementaryTypeName","src":"312:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"311:26:14"},"src":"285:53:14"},{"body":{"id":3830,"nodeType":"Block","src":"355:50:14","statements":[{"expression":{"arguments":[{"id":3825,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"370:18:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":3826,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"390:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3827,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"394:6:14","memberName":"sender","nodeType":"MemberAccess","src":"390:10:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3824,"name":"_setupRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":223,"src":"359:10:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":3828,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"359:42:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3829,"nodeType":"ExpressionStatement","src":"359:42:14"}]},"id":3831,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3822,"nodeType":"ParameterList","parameters":[],"src":"352:2:14"},"returnParameters":{"id":3823,"nodeType":"ParameterList","parameters":[],"src":"355:0:14"},"scope":3881,"src":"341:64:14","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3848,"nodeType":"Block","src":"533:80:14","statements":[{"expression":{"arguments":[{"id":3840,"name":"EXECUTOR_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3813,"src":"548:13:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3841,"name":"executor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3833,"src":"563:8:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3839,"name":"_setupRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":223,"src":"537:10:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":3842,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"537:35:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3843,"nodeType":"ExpressionStatement","src":"537:35:14"},{"eventCall":{"arguments":[{"id":3845,"name":"executor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3833,"src":"600:8:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3844,"name":"ExecutorRegistered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3817,"src":"581:18:14","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3846,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"581:28:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3847,"nodeType":"EmitStatement","src":"576:33:14"}]},"functionSelector":"a09c59fb","id":3849,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":3836,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"513:18:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":3837,"kind":"modifierInvocation","modifierName":{"id":3835,"name":"onlyRole","nameLocations":["504:8:14"],"nodeType":"IdentifierPath","referencedDeclaration":38,"src":"504:8:14"},"nodeType":"ModifierInvocation","src":"504:28:14"}],"name":"registerExecutor","nameLocation":"457:16:14","nodeType":"FunctionDefinition","parameters":{"id":3834,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3833,"mutability":"mutable","name":"executor","nameLocation":"485:8:14","nodeType":"VariableDeclaration","scope":3849,"src":"477:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3832,"name":"address","nodeType":"ElementaryTypeName","src":"477:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"473:23:14"},"returnParameters":{"id":3838,"nodeType":"ParameterList","parameters":[],"src":"533:0:14"},"scope":3881,"src":"448:165:14","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3866,"nodeType":"Block","src":"738:83:14","statements":[{"expression":{"arguments":[{"id":3858,"name":"EXECUTOR_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3813,"src":"754:13:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3859,"name":"executor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3851,"src":"769:8:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3857,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":314,"src":"742:11:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":3860,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"742:36:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3861,"nodeType":"ExpressionStatement","src":"742:36:14"},{"eventCall":{"arguments":[{"id":3863,"name":"executor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3851,"src":"808:8:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3862,"name":"ExecutorUnregistered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3821,"src":"787:20:14","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3864,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"787:30:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3865,"nodeType":"EmitStatement","src":"782:35:14"}]},"functionSelector":"894d12c2","id":3867,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":3854,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"718:18:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":3855,"kind":"modifierInvocation","modifierName":{"id":3853,"name":"onlyRole","nameLocations":["709:8:14"],"nodeType":"IdentifierPath","referencedDeclaration":38,"src":"709:8:14"},"nodeType":"ModifierInvocation","src":"709:28:14"}],"name":"unregisterExecutor","nameLocation":"660:18:14","nodeType":"FunctionDefinition","parameters":{"id":3852,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3851,"mutability":"mutable","name":"executor","nameLocation":"690:8:14","nodeType":"VariableDeclaration","scope":3867,"src":"682:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3850,"name":"address","nodeType":"ElementaryTypeName","src":"682:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"678:23:14"},"returnParameters":{"id":3856,"nodeType":"ParameterList","parameters":[],"src":"738:0:14"},"scope":3881,"src":"651:170:14","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3879,"nodeType":"Block","src":"940:47:14","statements":[{"expression":{"arguments":[{"id":3875,"name":"EXECUTOR_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3813,"src":"959:13:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3876,"name":"executor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3869,"src":"974:8:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3874,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":79,"src":"951:7:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":3877,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"951:32:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3873,"id":3878,"nodeType":"Return","src":"944:39:14"}]},"functionSelector":"debfda30","id":3880,"implemented":true,"kind":"function","modifiers":[],"name":"isExecutor","nameLocation":"884:10:14","nodeType":"FunctionDefinition","parameters":{"id":3870,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3869,"mutability":"mutable","name":"executor","nameLocation":"903:8:14","nodeType":"VariableDeclaration","scope":3880,"src":"895:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3868,"name":"address","nodeType":"ElementaryTypeName","src":"895:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"894:18:14"},"returnParameters":{"id":3873,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3872,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3880,"src":"934:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3871,"name":"bool","nodeType":"ElementaryTypeName","src":"934:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"933:6:14"},"scope":3881,"src":"875:112:14","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":3882,"src":"117:872:14","usedErrors":[]}],"src":"32:958:14"},"id":14},"contracts/SAFTToken.sol":{"ast":{"absolutePath":"contracts/SAFTToken.sol","exportedSymbols":{"AccessControl":[315],"Address":[2119],"Context":[2141],"ERC1155":[1611],"ERC165":[2842],"IAccessControl":[388],"IERC1155":[1733],"IERC1155MetadataURI":[1789],"IERC1155Receiver":[1774],"IERC165":[2854],"IExecutorManager":[3894],"Math":[3719],"MerkleProof":[2818],"SAFTToken":[4196],"Strings":[2316]},"id":4197,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3883,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:15"},{"absolutePath":"@openzeppelin/contracts/token/ERC1155/ERC1155.sol","file":"@openzeppelin/contracts/token/ERC1155/ERC1155.sol","id":3884,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4197,"sourceUnit":1612,"src":"57:59:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","file":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","id":3885,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4197,"sourceUnit":2819,"src":"117:68:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/AccessControl.sol","file":"@openzeppelin/contracts/access/AccessControl.sol","id":3886,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4197,"sourceUnit":316,"src":"186:58:15","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IExecutorManager","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":3894,"linearizedBaseContracts":[3894],"name":"IExecutorManager","nameLocation":"256:16:15","nodeType":"ContractDefinition","nodes":[{"functionSelector":"debfda30","id":3893,"implemented":false,"kind":"function","modifiers":[],"name":"isExecutor","nameLocation":"285:10:15","nodeType":"FunctionDefinition","parameters":{"id":3889,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3888,"mutability":"mutable","name":"_address","nameLocation":"304:8:15","nodeType":"VariableDeclaration","scope":3893,"src":"296:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3887,"name":"address","nodeType":"ElementaryTypeName","src":"296:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"295:18:15"},"returnParameters":{"id":3892,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3891,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3893,"src":"337:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3890,"name":"bool","nodeType":"ElementaryTypeName","src":"337:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"336:6:15"},"scope":3894,"src":"276:67:15","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4197,"src":"246:99:15","usedErrors":[]},{"abstract":false,"baseContracts":[{"baseName":{"id":3895,"name":"ERC1155","nameLocations":["369:7:15"],"nodeType":"IdentifierPath","referencedDeclaration":1611,"src":"369:7:15"},"id":3896,"nodeType":"InheritanceSpecifier","src":"369:7:15"},{"baseName":{"id":3897,"name":"AccessControl","nameLocations":["378:13:15"],"nodeType":"IdentifierPath","referencedDeclaration":315,"src":"378:13:15"},"id":3898,"nodeType":"InheritanceSpecifier","src":"378:13:15"}],"canonicalName":"SAFTToken","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4196,"linearizedBaseContracts":[4196,315,1611,1789,1733,2842,2854,388,2141],"name":"SAFTToken","nameLocation":"356:9:15","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"2eb4a7ab","id":3900,"mutability":"mutable","name":"merkleRoot","nameLocation":"410:10:15","nodeType":"VariableDeclaration","scope":4196,"src":"395:25:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3899,"name":"bytes32","nodeType":"ElementaryTypeName","src":"395:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":false,"functionSelector":"2ecc6160","id":3904,"mutability":"mutable","name":"lockingFlags","nameLocation":"455:12:15","nodeType":"VariableDeclaration","scope":4196,"src":"423:44:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"},"typeName":{"id":3903,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3901,"name":"uint256","nodeType":"ElementaryTypeName","src":"431:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"423:24:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3902,"name":"bool","nodeType":"ElementaryTypeName","src":"442:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"constant":false,"id":3906,"mutability":"mutable","name":"tokenIdCounter","nameLocation":"518:14:15","nodeType":"VariableDeclaration","scope":4196,"src":"502:30:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3905,"name":"uint256","nodeType":"ElementaryTypeName","src":"502:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":true,"functionSelector":"07bd0265","id":3911,"mutability":"constant","name":"EXECUTOR_ROLE","nameLocation":"559:13:15","nodeType":"VariableDeclaration","scope":4196,"src":"535:66:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3907,"name":"bytes32","nodeType":"ElementaryTypeName","src":"535:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"4558454355544f525f524f4c45","id":3909,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"585:15:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_d8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63","typeString":"literal_string \"EXECUTOR_ROLE\""},"value":"EXECUTOR_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_d8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63","typeString":"literal_string \"EXECUTOR_ROLE\""}],"id":3908,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"575:9:15","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3910,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"575:26:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":false,"functionSelector":"c0883b92","id":3914,"mutability":"mutable","name":"executorManager","nameLocation":"628:15:15","nodeType":"VariableDeclaration","scope":4196,"src":"604:39:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IExecutorManager_$3894","typeString":"contract IExecutorManager"},"typeName":{"id":3913,"nodeType":"UserDefinedTypeName","pathNode":{"id":3912,"name":"IExecutorManager","nameLocations":["604:16:15"],"nodeType":"IdentifierPath","referencedDeclaration":3894,"src":"604:16:15"},"referencedDeclaration":3894,"src":"604:16:15","typeDescriptions":{"typeIdentifier":"t_contract$_IExecutorManager_$3894","typeString":"contract IExecutorManager"}},"visibility":"public"},{"anonymous":false,"eventSelector":"78202e946262627c432f6c5b92fee2a7224c9aabdb3c71f747fccbad2fb470a4","id":3924,"name":"BundleProcessed","nameLocation":"653:15:15","nodeType":"EventDefinition","parameters":{"id":3923,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3916,"indexed":true,"mutability":"mutable","name":"executor","nameLocation":"688:8:15","nodeType":"VariableDeclaration","scope":3924,"src":"672:24:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3915,"name":"address","nodeType":"ElementaryTypeName","src":"672:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3918,"indexed":true,"mutability":"mutable","name":"bundleNonce","nameLocation":"716:11:15","nodeType":"VariableDeclaration","scope":3924,"src":"700:27:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3917,"name":"uint256","nodeType":"ElementaryTypeName","src":"700:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3920,"indexed":false,"mutability":"mutable","name":"bundleHash","nameLocation":"739:10:15","nodeType":"VariableDeclaration","scope":3924,"src":"731:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3919,"name":"bytes32","nodeType":"ElementaryTypeName","src":"731:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3922,"indexed":false,"mutability":"mutable","name":"timestamp","nameLocation":"761:9:15","nodeType":"VariableDeclaration","scope":3924,"src":"753:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3921,"name":"uint256","nodeType":"ElementaryTypeName","src":"753:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"668:105:15"},"src":"647:127:15"},{"body":{"id":3975,"nodeType":"Block","src":"931:256:15","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3946,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3941,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3926,"src":"943:6:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3944,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"961:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3943,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"953:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3942,"name":"address","nodeType":"ElementaryTypeName","src":"953:7:15","typeDescriptions":{}}},"id":3945,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"953:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"943:20:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e657220616464726573732063616e6e6f7420626520656d707479","id":3947,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"965:31:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_5ce500c9dc2e59e02700829a3ac6c4c1e7fc183d658cfaf2fdd6892d9a845f30","typeString":"literal_string \"Owner address cannot be empty\""},"value":"Owner address cannot be empty"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5ce500c9dc2e59e02700829a3ac6c4c1e7fc183d658cfaf2fdd6892d9a845f30","typeString":"literal_string \"Owner address cannot be empty\""}],"id":3940,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"935:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3948,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"935:62:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3949,"nodeType":"ExpressionStatement","src":"935:62:15"},{"expression":{"arguments":[{"expression":{"id":3951,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1007:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1011:6:15","memberName":"sender","nodeType":"MemberAccess","src":"1007:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1019:16:15","subExpression":{"id":3953,"name":"tokenIdCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3906,"src":"1019:14:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3955,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3932,"src":"1037:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":3956,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1050:2:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":3950,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1045,"src":"1001:5:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,uint256,bytes memory)"}},"id":3957,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1001:52:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3958,"nodeType":"ExpressionStatement","src":"1001:52:15"},{"expression":{"arguments":[{"id":3960,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"1068:18:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":3961,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1088:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3962,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1092:6:15","memberName":"sender","nodeType":"MemberAccess","src":"1088:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3959,"name":"_setupRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":223,"src":"1057:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":3963,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1057:42:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3964,"nodeType":"ExpressionStatement","src":"1057:42:15"},{"expression":{"id":3967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3965,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3900,"src":"1103:10:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3966,"name":"_merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3928,"src":"1116:11:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1103:24:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3968,"nodeType":"ExpressionStatement","src":"1103:24:15"},{"expression":{"id":3973,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3969,"name":"executorManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3914,"src":"1131:15:15","typeDescriptions":{"typeIdentifier":"t_contract$_IExecutorManager_$3894","typeString":"contract IExecutorManager"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3971,"name":"_executorManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3934,"src":"1166:16:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3970,"name":"IExecutorManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3894,"src":"1149:16:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IExecutorManager_$3894_$","typeString":"type(contract IExecutorManager)"}},"id":3972,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1149:34:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IExecutorManager_$3894","typeString":"contract IExecutorManager"}},"src":"1131:52:15","typeDescriptions":{"typeIdentifier":"t_contract$_IExecutorManager_$3894","typeString":"contract IExecutorManager"}},"id":3974,"nodeType":"ExpressionStatement","src":"1131:52:15"}]},"id":3976,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":3937,"name":"metadataUri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3930,"src":"918:11:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"id":3938,"kind":"baseConstructorSpecifier","modifierName":{"id":3936,"name":"ERC1155","nameLocations":["910:7:15"],"nodeType":"IdentifierPath","referencedDeclaration":1611,"src":"910:7:15"},"nodeType":"ModifierInvocation","src":"910:20:15"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3935,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3926,"mutability":"mutable","name":"_owner","nameLocation":"800:6:15","nodeType":"VariableDeclaration","scope":3976,"src":"792:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3925,"name":"address","nodeType":"ElementaryTypeName","src":"792:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3928,"mutability":"mutable","name":"_merkleRoot","nameLocation":"818:11:15","nodeType":"VariableDeclaration","scope":3976,"src":"810:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3927,"name":"bytes32","nodeType":"ElementaryTypeName","src":"810:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3930,"mutability":"mutable","name":"metadataUri","nameLocation":"847:11:15","nodeType":"VariableDeclaration","scope":3976,"src":"833:25:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3929,"name":"string","nodeType":"ElementaryTypeName","src":"833:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3932,"mutability":"mutable","name":"totalSupply","nameLocation":"867:11:15","nodeType":"VariableDeclaration","scope":3976,"src":"862:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3931,"name":"uint","nodeType":"ElementaryTypeName","src":"862:4:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3934,"mutability":"mutable","name":"_executorManager","nameLocation":"890:16:15","nodeType":"VariableDeclaration","scope":3976,"src":"882:24:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3933,"name":"address","nodeType":"ElementaryTypeName","src":"882:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"788:121:15"},"returnParameters":{"id":3939,"nodeType":"ParameterList","parameters":[],"src":"931:0:15"},"scope":4196,"src":"777:410:15","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4028,"nodeType":"Block","src":"1296:478:15","statements":[{"assignments":[3987],"declarations":[{"constant":false,"id":3987,"mutability":"mutable","name":"id","nameLocation":"1308:2:15","nodeType":"VariableDeclaration","scope":4028,"src":"1300:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3986,"name":"uint256","nodeType":"ElementaryTypeName","src":"1300:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3989,"initialValue":{"id":3988,"name":"tokenIdCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3906,"src":"1313:14:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1300:27:15"},{"expression":{"arguments":[{"id":3994,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1339:17:15","subExpression":{"baseExpression":{"id":3991,"name":"lockingFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3904,"src":"1340:12:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"}},"id":3993,"indexExpression":{"id":3992,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3987,"src":"1353:2:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1340:16:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"546f6b656e2069732063757272656e746c79206c6f636b656420666f72206d696e74696e67","id":3995,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1358:39:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_c05b6e35da5e61f1d7b3ef7e615ddf60dfc35de37aba5dd75608f23dd6e104fb","typeString":"literal_string \"Token is currently locked for minting\""},"value":"Token is currently locked for minting"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c05b6e35da5e61f1d7b3ef7e615ddf60dfc35de37aba5dd75608f23dd6e104fb","typeString":"literal_string \"Token is currently locked for minting\""}],"id":3990,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1331:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3996,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1331:67:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3997,"nodeType":"ExpressionStatement","src":"1331:67:15"},{"expression":{"arguments":[{"arguments":[{"id":4000,"name":"merkleProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3983,"src":"1472:11:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}],"id":3999,"name":"isWhitelisted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4055,"src":"1458:13:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_bytes32_$dyn_calldata_ptr_$returns$_t_bool_$","typeString":"function (bytes32[] calldata) view returns (bool)"}},"id":4001,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1458:26:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"43616c6c6572206973206e6f742077686974656c6973746564","id":4002,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1486:27:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_60304f7258d86aaa1cc1138fb2f6bbc524adfb91bc7985c5cde7fccc8aa6045a","typeString":"literal_string \"Caller is not whitelisted\""},"value":"Caller is not whitelisted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_60304f7258d86aaa1cc1138fb2f6bbc524adfb91bc7985c5cde7fccc8aa6045a","typeString":"literal_string \"Caller is not whitelisted\""}],"id":3998,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1450:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4003,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1450:64:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4004,"nodeType":"ExpressionStatement","src":"1450:64:15"},{"expression":{"id":4009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4005,"name":"lockingFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3904,"src":"1519:12:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"}},"id":4007,"indexExpression":{"id":4006,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3987,"src":"1532:2:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1519:16:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":4008,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1538:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"1519:23:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4010,"nodeType":"ExpressionStatement","src":"1519:23:15"},{"expression":{"arguments":[{"expression":{"id":4012,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1657:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1661:6:15","memberName":"sender","nodeType":"MemberAccess","src":"1657:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4014,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3987,"src":"1669:2:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4015,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3978,"src":"1673:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4016,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3980,"src":"1681:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4011,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1045,"src":"1651:5:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,uint256,bytes memory)"}},"id":4017,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1651:35:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4018,"nodeType":"ExpressionStatement","src":"1651:35:15"},{"expression":{"id":4023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4019,"name":"lockingFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3904,"src":"1691:12:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"}},"id":4021,"indexExpression":{"id":4020,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3987,"src":"1704:2:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1691:16:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":4022,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1710:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"1691:24:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4024,"nodeType":"ExpressionStatement","src":"1691:24:15"},{"expression":{"id":4026,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1754:16:15","subExpression":{"id":4025,"name":"tokenIdCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3906,"src":"1754:14:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4027,"nodeType":"ExpressionStatement","src":"1754:16:15"}]},"functionSelector":"c3ae2b78","id":4029,"implemented":true,"kind":"function","modifiers":[],"name":"whitelistMint","nameLocation":"1199:13:15","nodeType":"FunctionDefinition","parameters":{"id":3984,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3978,"mutability":"mutable","name":"amount","nameLocation":"1224:6:15","nodeType":"VariableDeclaration","scope":4029,"src":"1216:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3977,"name":"uint256","nodeType":"ElementaryTypeName","src":"1216:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3980,"mutability":"mutable","name":"data","nameLocation":"1247:4:15","nodeType":"VariableDeclaration","scope":4029,"src":"1234:17:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3979,"name":"bytes","nodeType":"ElementaryTypeName","src":"1234:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3983,"mutability":"mutable","name":"merkleProof","nameLocation":"1274:11:15","nodeType":"VariableDeclaration","scope":4029,"src":"1255:30:15","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":3981,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1255:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3982,"nodeType":"ArrayTypeName","src":"1255:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"1212:76:15"},"returnParameters":{"id":3985,"nodeType":"ParameterList","parameters":[],"src":"1296:0:15"},"scope":4196,"src":"1190:584:15","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4054,"nodeType":"Block","src":"1864:122:15","statements":[{"assignments":[4038],"declarations":[{"constant":false,"id":4038,"mutability":"mutable","name":"leaf","nameLocation":"1876:4:15","nodeType":"VariableDeclaration","scope":4054,"src":"1868:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4037,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1868:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4046,"initialValue":{"arguments":[{"arguments":[{"expression":{"id":4042,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1910:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4043,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1914:6:15","memberName":"sender","nodeType":"MemberAccess","src":"1910:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4040,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1893:3:15","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4041,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1897:12:15","memberName":"encodePacked","nodeType":"MemberAccess","src":"1893:16:15","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4044,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1893:28:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4039,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1883:9:15","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4045,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1883:39:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1868:54:15"},{"expression":{"arguments":[{"id":4049,"name":"merkleProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4032,"src":"1952:11:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":4050,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3900,"src":"1965:10:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4051,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4038,"src":"1977:4:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4047,"name":"MerkleProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2818,"src":"1933:11:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MerkleProof_$2818_$","typeString":"type(library MerkleProof)"}},"id":4048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1945:6:15","memberName":"verify","nodeType":"MemberAccess","referencedDeclaration":2340,"src":"1933:18:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$","typeString":"function (bytes32[] memory,bytes32,bytes32) pure returns (bool)"}},"id":4052,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1933:49:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4036,"id":4053,"nodeType":"Return","src":"1926:56:15"}]},"functionSelector":"069824fb","id":4055,"implemented":true,"kind":"function","modifiers":[],"name":"isWhitelisted","nameLocation":"1786:13:15","nodeType":"FunctionDefinition","parameters":{"id":4033,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4032,"mutability":"mutable","name":"merkleProof","nameLocation":"1822:11:15","nodeType":"VariableDeclaration","scope":4055,"src":"1803:30:15","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":4030,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1803:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4031,"nodeType":"ArrayTypeName","src":"1803:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"1799:37:15"},"returnParameters":{"id":4036,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4035,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4055,"src":"1858:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4034,"name":"bool","nodeType":"ElementaryTypeName","src":"1858:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1857:6:15"},"scope":4196,"src":"1777:209:15","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":4067,"nodeType":"Block","src":"2074:32:15","statements":[{"expression":{"id":4065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4063,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3900,"src":"2078:10:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4064,"name":"_merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4057,"src":"2091:11:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2078:24:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4066,"nodeType":"ExpressionStatement","src":"2078:24:15"}]},"functionSelector":"7cb64759","id":4068,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4060,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"2054:18:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4061,"kind":"modifierInvocation","modifierName":{"id":4059,"name":"onlyRole","nameLocations":["2045:8:15"],"nodeType":"IdentifierPath","referencedDeclaration":38,"src":"2045:8:15"},"nodeType":"ModifierInvocation","src":"2045:28:15"}],"name":"setMerkleRoot","nameLocation":"1998:13:15","nodeType":"FunctionDefinition","parameters":{"id":4058,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4057,"mutability":"mutable","name":"_merkleRoot","nameLocation":"2023:11:15","nodeType":"VariableDeclaration","scope":4068,"src":"2015:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4056,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2015:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2011:26:15"},"returnParameters":{"id":4062,"nodeType":"ParameterList","parameters":[],"src":"2074:0:15"},"scope":4196,"src":"1989:117:15","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[60,464],"body":{"id":4088,"nodeType":"Block","src":"2229:107:15","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4080,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4070,"src":"2269:11:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":4078,"name":"ERC1155","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1611,"src":"2243:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC1155_$1611_$","typeString":"type(contract ERC1155)"}},"id":4079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2251:17:15","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":464,"src":"2243:25:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":4081,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2243:38:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":4084,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4070,"src":"2320:11:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":4082,"name":"AccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":315,"src":"2288:13:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControl_$315_$","typeString":"type(contract AccessControl)"}},"id":4083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2302:17:15","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":60,"src":"2288:31:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":4085,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2288:44:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2243:89:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4077,"id":4087,"nodeType":"Return","src":"2233:99:15"}]},"functionSelector":"01ffc9a7","id":4089,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"2118:17:15","nodeType":"FunctionDefinition","overrides":{"id":4074,"nodeType":"OverrideSpecifier","overrides":[{"id":4072,"name":"ERC1155","nameLocations":["2190:7:15"],"nodeType":"IdentifierPath","referencedDeclaration":1611,"src":"2190:7:15"},{"id":4073,"name":"AccessControl","nameLocations":["2199:13:15"],"nodeType":"IdentifierPath","referencedDeclaration":315,"src":"2199:13:15"}],"src":"2181:32:15"},"parameters":{"id":4071,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4070,"mutability":"mutable","name":"interfaceId","nameLocation":"2146:11:15","nodeType":"VariableDeclaration","scope":4089,"src":"2139:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":4069,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2139:6:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2135:25:15"},"returnParameters":{"id":4077,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4076,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4089,"src":"2223:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4075,"name":"bool","nodeType":"ElementaryTypeName","src":"2223:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2222:6:15"},"scope":4196,"src":"2109:227:15","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":4103,"nodeType":"Block","src":"2434:60:15","statements":[{"expression":{"id":4101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4097,"name":"executorManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3914,"src":"2438:15:15","typeDescriptions":{"typeIdentifier":"t_contract$_IExecutorManager_$3894","typeString":"contract IExecutorManager"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4099,"name":"_executorManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4091,"src":"2473:16:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4098,"name":"IExecutorManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3894,"src":"2456:16:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IExecutorManager_$3894_$","typeString":"type(contract IExecutorManager)"}},"id":4100,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2456:34:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IExecutorManager_$3894","typeString":"contract IExecutorManager"}},"src":"2438:52:15","typeDescriptions":{"typeIdentifier":"t_contract$_IExecutorManager_$3894","typeString":"contract IExecutorManager"}},"id":4102,"nodeType":"ExpressionStatement","src":"2438:52:15"}]},"functionSelector":"ef0d4572","id":4104,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4094,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"2414:18:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4095,"kind":"modifierInvocation","modifierName":{"id":4093,"name":"onlyRole","nameLocations":["2405:8:15"],"nodeType":"IdentifierPath","referencedDeclaration":38,"src":"2405:8:15"},"nodeType":"ModifierInvocation","src":"2405:28:15"}],"name":"setExecutorManager","nameLocation":"2348:18:15","nodeType":"FunctionDefinition","parameters":{"id":4092,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4091,"mutability":"mutable","name":"_executorManager","nameLocation":"2378:16:15","nodeType":"VariableDeclaration","scope":4104,"src":"2370:24:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4090,"name":"address","nodeType":"ElementaryTypeName","src":"2370:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2366:31:15"},"returnParameters":{"id":4096,"nodeType":"ParameterList","parameters":[],"src":"2434:0:15"},"scope":4196,"src":"2339:155:15","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4194,"nodeType":"Block","src":"2582:899:15","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":4114,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2625:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2629:6:15","memberName":"sender","nodeType":"MemberAccess","src":"2625:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4112,"name":"executorManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3914,"src":"2598:15:15","typeDescriptions":{"typeIdentifier":"t_contract$_IExecutorManager_$3894","typeString":"contract IExecutorManager"}},"id":4113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2614:10:15","memberName":"isExecutor","nodeType":"MemberAccess","referencedDeclaration":3893,"src":"2598:26:15","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view external returns (bool)"}},"id":4116,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2598:38:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"43616c6c6572206973206e6f7420616e20617574686f72697a6564206578656375746f72","id":4117,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2641:38:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_691e84db20482a4c42ba7a4aa341855d8289774d9698451740209f85cbb09b0a","typeString":"literal_string \"Caller is not an authorized executor\""},"value":"Caller is not an authorized executor"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_691e84db20482a4c42ba7a4aa341855d8289774d9698451740209f85cbb09b0a","typeString":"literal_string \"Caller is not an authorized executor\""}],"id":4111,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2586:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4118,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2586:97:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4119,"nodeType":"ExpressionStatement","src":"2586:97:15"},{"body":{"id":4177,"nodeType":"Block","src":"2793:447:15","statements":[{"assignments":[4133,4135,4137,4139],"declarations":[{"constant":false,"id":4133,"mutability":"mutable","name":"buyer","nameLocation":"2812:5:15","nodeType":"VariableDeclaration","scope":4177,"src":"2804:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4132,"name":"address","nodeType":"ElementaryTypeName","src":"2804:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4135,"mutability":"mutable","name":"seller","nameLocation":"2831:6:15","nodeType":"VariableDeclaration","scope":4177,"src":"2823:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4134,"name":"address","nodeType":"ElementaryTypeName","src":"2823:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4137,"mutability":"mutable","name":"tokenId","nameLocation":"2851:7:15","nodeType":"VariableDeclaration","scope":4177,"src":"2843:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4136,"name":"uint256","nodeType":"ElementaryTypeName","src":"2843:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4139,"mutability":"mutable","name":"amount","nameLocation":"2872:6:15","nodeType":"VariableDeclaration","scope":4177,"src":"2864:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4138,"name":"uint256","nodeType":"ElementaryTypeName","src":"2864:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4158,"initialValue":{"arguments":[{"baseExpression":{"id":4142,"name":"bundleData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4106,"src":"2903:10:15","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"endExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4144,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4121,"src":"2916:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"313034","id":4145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2920:3:15","typeDescriptions":{"typeIdentifier":"t_rational_104_by_1","typeString":"int_const 104"},"value":"104"},"src":"2916:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexRangeAccess","src":"2903:21:15","startExpression":{"id":4143,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4121,"src":"2914:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"}},{"components":[{"id":4149,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2932:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4148,"name":"address","nodeType":"ElementaryTypeName","src":"2932:7:15","typeDescriptions":{}}},{"id":4151,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2941:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4150,"name":"address","nodeType":"ElementaryTypeName","src":"2941:7:15","typeDescriptions":{}}},{"id":4153,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2950:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4152,"name":"uint256","nodeType":"ElementaryTypeName","src":"2950:7:15","typeDescriptions":{}}},{"id":4155,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2959:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4154,"name":"uint256","nodeType":"ElementaryTypeName","src":"2959:7:15","typeDescriptions":{}}}],"id":4156,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2931:36:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_address_$_$_t_type$_t_address_$_$_t_type$_t_uint256_$_$_t_type$_t_uint256_$_$","typeString":"tuple(type(address),type(address),type(uint256),type(uint256))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"},{"typeIdentifier":"t_tuple$_t_type$_t_address_$_$_t_type$_t_address_$_$_t_type$_t_uint256_$_$_t_type$_t_uint256_$_$","typeString":"tuple(type(address),type(address),type(uint256),type(uint256))"}],"expression":{"id":4140,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2886:3:15","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4141,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2890:6:15","memberName":"decode","nodeType":"MemberAccess","src":"2886:10:15","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":4157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2886:87:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_payable_$_t_address_payable_$_t_uint256_$_t_uint256_$","typeString":"tuple(address payable,address payable,uint256,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"2798:175:15"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4161,"name":"seller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4135,"src":"3049:6:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4162,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4137,"src":"3057:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4160,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":504,"src":"3039:9:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,uint256) view returns (uint256)"}},"id":4163,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3039:26:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4164,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4139,"src":"3069:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3039:36:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53656c6c657220646f6573206e6f74206861766520656e6f75676820746f6b656e73","id":4166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3081:36:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_acc775314033618014c4c79559957baf417931f6e8d18e4684d327a6a76d2e7e","typeString":"literal_string \"Seller does not have enough tokens\""},"value":"Seller does not have enough tokens"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_acc775314033618014c4c79559957baf417931f6e8d18e4684d327a6a76d2e7e","typeString":"literal_string \"Seller does not have enough tokens\""}],"id":4159,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3026:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3026:96:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4168,"nodeType":"ExpressionStatement","src":"3026:96:15"},{"expression":{"arguments":[{"id":4170,"name":"seller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4135,"src":"3200:6:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4171,"name":"buyer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4133,"src":"3208:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4172,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4137,"src":"3215:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4173,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4139,"src":"3224:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":4174,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3232:2:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":4169,"name":"_safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":798,"src":"3182:17:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,uint256,bytes memory)"}},"id":4175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3182:53:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4176,"nodeType":"ExpressionStatement","src":"3182:53:15"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4124,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4121,"src":"2760:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":4125,"name":"bundleData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4106,"src":"2764:10:15","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":4126,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2775:6:15","memberName":"length","nodeType":"MemberAccess","src":"2764:17:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2760:21:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4178,"initializationExpression":{"assignments":[4121],"declarations":[{"constant":false,"id":4121,"mutability":"mutable","name":"i","nameLocation":"2753:1:15","nodeType":"VariableDeclaration","scope":4178,"src":"2748:6:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4120,"name":"uint","nodeType":"ElementaryTypeName","src":"2748:4:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4123,"initialValue":{"hexValue":"30","id":4122,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2757:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2748:10:15"},"loopExpression":{"expression":{"id":4130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4128,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4121,"src":"2783:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313034","id":4129,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2788:3:15","typeDescriptions":{"typeIdentifier":"t_rational_104_by_1","typeString":"int_const 104"},"value":"104"},"src":"2783:8:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4131,"nodeType":"ExpressionStatement","src":"2783:8:15"},"nodeType":"ForStatement","src":"2743:497:15"},{"assignments":[4180],"declarations":[{"constant":false,"id":4180,"mutability":"mutable","name":"bundleHash","nameLocation":"3305:10:15","nodeType":"VariableDeclaration","scope":4194,"src":"3297:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4179,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3297:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4184,"initialValue":{"arguments":[{"id":4182,"name":"bundleData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4106,"src":"3328:10:15","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":4181,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3318:9:15","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4183,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3318:21:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3297:42:15"},{"eventCall":{"arguments":[{"expression":{"id":4186,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3412:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3416:6:15","memberName":"sender","nodeType":"MemberAccess","src":"3412:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4188,"name":"bundleNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4108,"src":"3427:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4189,"name":"bundleHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4180,"src":"3443:10:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":4190,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"3458:5:15","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3464:9:15","memberName":"timestamp","nodeType":"MemberAccess","src":"3458:15:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4185,"name":"BundleProcessed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3924,"src":"3392:15:15","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (address,uint256,bytes32,uint256)"}},"id":4192,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3392:85:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4193,"nodeType":"EmitStatement","src":"3387:90:15"}]},"functionSelector":"3e352e62","id":4195,"implemented":true,"kind":"function","modifiers":[],"name":"processBundle","nameLocation":"2506:13:15","nodeType":"FunctionDefinition","parameters":{"id":4109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4106,"mutability":"mutable","name":"bundleData","nameLocation":"2538:10:15","nodeType":"VariableDeclaration","scope":4195,"src":"2523:25:15","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4105,"name":"bytes","nodeType":"ElementaryTypeName","src":"2523:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4108,"mutability":"mutable","name":"bundleNonce","nameLocation":"2560:11:15","nodeType":"VariableDeclaration","scope":4195,"src":"2552:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4107,"name":"uint256","nodeType":"ElementaryTypeName","src":"2552:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2519:55:15"},"returnParameters":{"id":4110,"nodeType":"ParameterList","parameters":[],"src":"2582:0:15"},"scope":4196,"src":"2497:984:15","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":4197,"src":"347:3136:15","usedErrors":[]}],"src":"32:3452:15"},"id":15}},"contracts":{"@openzeppelin/contracts/access/AccessControl.sol":{"AccessControl":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ``` bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ``` function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it.","events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ``` bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ``` function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it.\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/AccessControl.sol\":\"AccessControl\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":24,"contract":"@openzeppelin/contracts/access/AccessControl.sol:AccessControl","label":"_roles","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_struct(RoleData)19_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(RoleData)19_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControl.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)19_storage"},"t_struct(RoleData)19_storage":{"encoding":"inplace","label":"struct AccessControl.RoleData","members":[{"astId":16,"contract":"@openzeppelin/contracts/access/AccessControl.sol:AccessControl","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":18,"contract":"@openzeppelin/contracts/access/AccessControl.sol:AccessControl","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/access/IAccessControl.sol":{"IAccessControl":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"External interface of AccessControl declared to support ERC165 detection.","events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControl declared to support ERC165 detection.\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":\"IAccessControl\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC1155/ERC1155.sol":{"ERC1155":{"abi":[{"inputs":[{"internalType":"string","name":"uri_","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the basic standard multi-token. See https://eips.ethereum.org/EIPS/eip-1155 Originally based on code by Enjin: https://github.com/enjin/erc-1155 _Available since v3.1._","events":{"ApprovalForAll(address,address,bool)":{"details":"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."},"TransferBatch(address,address,address,uint256[],uint256[])":{"details":"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."},"TransferSingle(address,address,address,uint256,uint256)":{"details":"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."},"URI(string,uint256)":{"details":"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."}},"kind":"dev","methods":{"balanceOf(address,uint256)":{"details":"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."},"balanceOfBatch(address[],uint256[])":{"details":"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."},"constructor":{"details":"See {_setURI}."},"isApprovedForAll(address,address)":{"details":"See {IERC1155-isApprovedForAll}."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"See {IERC1155-safeBatchTransferFrom}."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"See {IERC1155-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC1155-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"uri(uint256)":{"details":"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_433":{"entryPoint":null,"id":433,"parameterSlots":1,"returnSlots":0},"@_setURI_944":{"entryPoint":70,"id":944,"parameterSlots":1,"returnSlots":0},"abi_decode_tuple_t_string_memory_ptr_fromMemory":{"entryPoint":110,"id":null,"parameterSlots":2,"returnSlots":1},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":383,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":466,"id":null,"parameterSlots":2,"returnSlots":0},"extract_byte_array_length":{"entryPoint":323,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x41":{"entryPoint":88,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:3779:16","statements":[{"nodeType":"YulBlock","src":"6:3:16","statements":[]},{"body":{"nodeType":"YulBlock","src":"46:95:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"63:1:16","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"70:3:16","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"75:10:16","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"66:3:16"},"nodeType":"YulFunctionCall","src":"66:20:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56:6:16"},"nodeType":"YulFunctionCall","src":"56:31:16"},"nodeType":"YulExpressionStatement","src":"56:31:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:1:16","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"106:4:16","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"96:6:16"},"nodeType":"YulFunctionCall","src":"96:15:16"},"nodeType":"YulExpressionStatement","src":"96:15:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"127:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"130:4:16","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"120:6:16"},"nodeType":"YulFunctionCall","src":"120:15:16"},"nodeType":"YulExpressionStatement","src":"120:15:16"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"14:127:16"},{"body":{"nodeType":"YulBlock","src":"237:951:16","statements":[{"nodeType":"YulVariableDeclaration","src":"247:12:16","value":{"kind":"number","nodeType":"YulLiteral","src":"257:2:16","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"251:2:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"304:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"313:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"316:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"306:6:16"},"nodeType":"YulFunctionCall","src":"306:12:16"},"nodeType":"YulExpressionStatement","src":"306:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"279:7:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"288:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"275:3:16"},"nodeType":"YulFunctionCall","src":"275:23:16"},{"name":"_1","nodeType":"YulIdentifier","src":"300:2:16"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"271:3:16"},"nodeType":"YulFunctionCall","src":"271:32:16"},"nodeType":"YulIf","src":"268:52:16"},{"nodeType":"YulVariableDeclaration","src":"329:30:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"349:9:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"343:5:16"},"nodeType":"YulFunctionCall","src":"343:16:16"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"333:6:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"368:28:16","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"386:2:16","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"390:1:16","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"382:3:16"},"nodeType":"YulFunctionCall","src":"382:10:16"},{"kind":"number","nodeType":"YulLiteral","src":"394:1:16","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"378:3:16"},"nodeType":"YulFunctionCall","src":"378:18:16"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"372:2:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"423:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"432:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"435:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"425:6:16"},"nodeType":"YulFunctionCall","src":"425:12:16"},"nodeType":"YulExpressionStatement","src":"425:12:16"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"411:6:16"},{"name":"_2","nodeType":"YulIdentifier","src":"419:2:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"408:2:16"},"nodeType":"YulFunctionCall","src":"408:14:16"},"nodeType":"YulIf","src":"405:34:16"},{"nodeType":"YulVariableDeclaration","src":"448:32:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"462:9:16"},{"name":"offset","nodeType":"YulIdentifier","src":"473:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"458:3:16"},"nodeType":"YulFunctionCall","src":"458:22:16"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"452:2:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"528:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"537:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"540:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"530:6:16"},"nodeType":"YulFunctionCall","src":"530:12:16"},"nodeType":"YulExpressionStatement","src":"530:12:16"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"507:2:16"},{"kind":"number","nodeType":"YulLiteral","src":"511:4:16","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"503:3:16"},"nodeType":"YulFunctionCall","src":"503:13:16"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"518:7:16"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"499:3:16"},"nodeType":"YulFunctionCall","src":"499:27:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"492:6:16"},"nodeType":"YulFunctionCall","src":"492:35:16"},"nodeType":"YulIf","src":"489:55:16"},{"nodeType":"YulVariableDeclaration","src":"553:19:16","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"569:2:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"563:5:16"},"nodeType":"YulFunctionCall","src":"563:9:16"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"557:2:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"595:22:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"597:16:16"},"nodeType":"YulFunctionCall","src":"597:18:16"},"nodeType":"YulExpressionStatement","src":"597:18:16"}]},"condition":{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"587:2:16"},{"name":"_2","nodeType":"YulIdentifier","src":"591:2:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"584:2:16"},"nodeType":"YulFunctionCall","src":"584:10:16"},"nodeType":"YulIf","src":"581:36:16"},{"nodeType":"YulVariableDeclaration","src":"626:17:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"640:2:16","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"636:3:16"},"nodeType":"YulFunctionCall","src":"636:7:16"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"630:2:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"652:23:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"672:2:16","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"666:5:16"},"nodeType":"YulFunctionCall","src":"666:9:16"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"656:6:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"684:71:16","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"706:6:16"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"730:2:16"},{"kind":"number","nodeType":"YulLiteral","src":"734:4:16","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"726:3:16"},"nodeType":"YulFunctionCall","src":"726:13:16"},{"name":"_5","nodeType":"YulIdentifier","src":"741:2:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"722:3:16"},"nodeType":"YulFunctionCall","src":"722:22:16"},{"kind":"number","nodeType":"YulLiteral","src":"746:2:16","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"718:3:16"},"nodeType":"YulFunctionCall","src":"718:31:16"},{"name":"_5","nodeType":"YulIdentifier","src":"751:2:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"714:3:16"},"nodeType":"YulFunctionCall","src":"714:40:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"702:3:16"},"nodeType":"YulFunctionCall","src":"702:53:16"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"688:10:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"814:22:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"816:16:16"},"nodeType":"YulFunctionCall","src":"816:18:16"},"nodeType":"YulExpressionStatement","src":"816:18:16"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"773:10:16"},{"name":"_2","nodeType":"YulIdentifier","src":"785:2:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"770:2:16"},"nodeType":"YulFunctionCall","src":"770:18:16"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"793:10:16"},{"name":"memPtr","nodeType":"YulIdentifier","src":"805:6:16"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"790:2:16"},"nodeType":"YulFunctionCall","src":"790:22:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"767:2:16"},"nodeType":"YulFunctionCall","src":"767:46:16"},"nodeType":"YulIf","src":"764:72:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"852:2:16","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"856:10:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"845:6:16"},"nodeType":"YulFunctionCall","src":"845:22:16"},"nodeType":"YulExpressionStatement","src":"845:22:16"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"883:6:16"},{"name":"_4","nodeType":"YulIdentifier","src":"891:2:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"876:6:16"},"nodeType":"YulFunctionCall","src":"876:18:16"},"nodeType":"YulExpressionStatement","src":"876:18:16"},{"body":{"nodeType":"YulBlock","src":"940:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"949:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"952:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"942:6:16"},"nodeType":"YulFunctionCall","src":"942:12:16"},"nodeType":"YulExpressionStatement","src":"942:12:16"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"917:2:16"},{"name":"_4","nodeType":"YulIdentifier","src":"921:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"913:3:16"},"nodeType":"YulFunctionCall","src":"913:11:16"},{"name":"_1","nodeType":"YulIdentifier","src":"926:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"909:3:16"},"nodeType":"YulFunctionCall","src":"909:20:16"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"931:7:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"906:2:16"},"nodeType":"YulFunctionCall","src":"906:33:16"},"nodeType":"YulIf","src":"903:53:16"},{"nodeType":"YulVariableDeclaration","src":"965:10:16","value":{"kind":"number","nodeType":"YulLiteral","src":"974:1:16","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"969:1:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"1030:83:16","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1059:6:16"},{"name":"i","nodeType":"YulIdentifier","src":"1067:1:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1055:3:16"},"nodeType":"YulFunctionCall","src":"1055:14:16"},{"name":"_1","nodeType":"YulIdentifier","src":"1071:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1051:3:16"},"nodeType":"YulFunctionCall","src":"1051:23:16"},{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1090:2:16"},{"name":"i","nodeType":"YulIdentifier","src":"1094:1:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1086:3:16"},"nodeType":"YulFunctionCall","src":"1086:10:16"},{"name":"_1","nodeType":"YulIdentifier","src":"1098:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1082:3:16"},"nodeType":"YulFunctionCall","src":"1082:19:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1076:5:16"},"nodeType":"YulFunctionCall","src":"1076:26:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1044:6:16"},"nodeType":"YulFunctionCall","src":"1044:59:16"},"nodeType":"YulExpressionStatement","src":"1044:59:16"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"995:1:16"},{"name":"_4","nodeType":"YulIdentifier","src":"998:2:16"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"992:2:16"},"nodeType":"YulFunctionCall","src":"992:9:16"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1002:19:16","statements":[{"nodeType":"YulAssignment","src":"1004:15:16","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1013:1:16"},{"name":"_1","nodeType":"YulIdentifier","src":"1016:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1009:3:16"},"nodeType":"YulFunctionCall","src":"1009:10:16"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1004:1:16"}]}]},"pre":{"nodeType":"YulBlock","src":"988:3:16","statements":[]},"src":"984:129:16"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1137:6:16"},{"name":"_4","nodeType":"YulIdentifier","src":"1145:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1133:3:16"},"nodeType":"YulFunctionCall","src":"1133:15:16"},{"name":"_1","nodeType":"YulIdentifier","src":"1150:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1129:3:16"},"nodeType":"YulFunctionCall","src":"1129:24:16"},{"kind":"number","nodeType":"YulLiteral","src":"1155:1:16","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1122:6:16"},"nodeType":"YulFunctionCall","src":"1122:35:16"},"nodeType":"YulExpressionStatement","src":"1122:35:16"},{"nodeType":"YulAssignment","src":"1166:16:16","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"1176:6:16"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1166:6:16"}]}]},"name":"abi_decode_tuple_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"203:9:16","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"214:7:16","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"226:6:16","type":""}],"src":"146:1042:16"},{"body":{"nodeType":"YulBlock","src":"1248:325:16","statements":[{"nodeType":"YulAssignment","src":"1258:22:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1272:1:16","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"1275:4:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1268:3:16"},"nodeType":"YulFunctionCall","src":"1268:12:16"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1258:6:16"}]},{"nodeType":"YulVariableDeclaration","src":"1289:38:16","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1319:4:16"},{"kind":"number","nodeType":"YulLiteral","src":"1325:1:16","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1315:3:16"},"nodeType":"YulFunctionCall","src":"1315:12:16"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"1293:18:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"1366:31:16","statements":[{"nodeType":"YulAssignment","src":"1368:27:16","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1382:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"1390:4:16","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1378:3:16"},"nodeType":"YulFunctionCall","src":"1378:17:16"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1368:6:16"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"1346:18:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1339:6:16"},"nodeType":"YulFunctionCall","src":"1339:26:16"},"nodeType":"YulIf","src":"1336:61:16"},{"body":{"nodeType":"YulBlock","src":"1456:111:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1477:1:16","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1484:3:16","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"1489:10:16","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1480:3:16"},"nodeType":"YulFunctionCall","src":"1480:20:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1470:6:16"},"nodeType":"YulFunctionCall","src":"1470:31:16"},"nodeType":"YulExpressionStatement","src":"1470:31:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1521:1:16","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1524:4:16","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1514:6:16"},"nodeType":"YulFunctionCall","src":"1514:15:16"},"nodeType":"YulExpressionStatement","src":"1514:15:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1549:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1552:4:16","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1542:6:16"},"nodeType":"YulFunctionCall","src":"1542:15:16"},"nodeType":"YulExpressionStatement","src":"1542:15:16"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"1412:18:16"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1435:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"1443:2:16","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1432:2:16"},"nodeType":"YulFunctionCall","src":"1432:14:16"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1409:2:16"},"nodeType":"YulFunctionCall","src":"1409:38:16"},"nodeType":"YulIf","src":"1406:161:16"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"1228:4:16","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1237:6:16","type":""}],"src":"1193:380:16"},{"body":{"nodeType":"YulBlock","src":"1634:65:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1651:1:16","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"1654:3:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1644:6:16"},"nodeType":"YulFunctionCall","src":"1644:14:16"},"nodeType":"YulExpressionStatement","src":"1644:14:16"},{"nodeType":"YulAssignment","src":"1667:26:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1685:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1688:4:16","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"1675:9:16"},"nodeType":"YulFunctionCall","src":"1675:18:16"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"1667:4:16"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"1617:3:16","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"1625:4:16","type":""}],"src":"1578:121:16"},{"body":{"nodeType":"YulBlock","src":"1785:464:16","statements":[{"body":{"nodeType":"YulBlock","src":"1818:425:16","statements":[{"nodeType":"YulVariableDeclaration","src":"1832:11:16","value":{"kind":"number","nodeType":"YulLiteral","src":"1842:1:16","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1836:2:16","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"1863:2:16"},{"name":"array","nodeType":"YulIdentifier","src":"1867:5:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1856:6:16"},"nodeType":"YulFunctionCall","src":"1856:17:16"},"nodeType":"YulExpressionStatement","src":"1856:17:16"},{"nodeType":"YulVariableDeclaration","src":"1886:31:16","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"1908:2:16"},{"kind":"number","nodeType":"YulLiteral","src":"1912:4:16","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"1898:9:16"},"nodeType":"YulFunctionCall","src":"1898:19:16"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"1890:4:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1930:57:16","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1953:4:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1963:1:16","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"1970:10:16"},{"kind":"number","nodeType":"YulLiteral","src":"1982:2:16","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1966:3:16"},"nodeType":"YulFunctionCall","src":"1966:19:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1959:3:16"},"nodeType":"YulFunctionCall","src":"1959:27:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1949:3:16"},"nodeType":"YulFunctionCall","src":"1949:38:16"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"1934:11:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"2024:23:16","statements":[{"nodeType":"YulAssignment","src":"2026:19:16","value":{"name":"data","nodeType":"YulIdentifier","src":"2041:4:16"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"2026:11:16"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"2006:10:16"},{"kind":"number","nodeType":"YulLiteral","src":"2018:4:16","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2003:2:16"},"nodeType":"YulFunctionCall","src":"2003:20:16"},"nodeType":"YulIf","src":"2000:47:16"},{"nodeType":"YulVariableDeclaration","src":"2060:41:16","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2074:4:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2084:1:16","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"2091:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"2096:2:16","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2087:3:16"},"nodeType":"YulFunctionCall","src":"2087:12:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2080:3:16"},"nodeType":"YulFunctionCall","src":"2080:20:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2070:3:16"},"nodeType":"YulFunctionCall","src":"2070:31:16"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"2064:2:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2114:24:16","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"2127:11:16"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"2118:5:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"2212:21:16","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2221:5:16"},{"name":"_1","nodeType":"YulIdentifier","src":"2228:2:16"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2214:6:16"},"nodeType":"YulFunctionCall","src":"2214:17:16"},"nodeType":"YulExpressionStatement","src":"2214:17:16"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2162:5:16"},{"name":"_2","nodeType":"YulIdentifier","src":"2169:2:16"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2159:2:16"},"nodeType":"YulFunctionCall","src":"2159:13:16"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2173:26:16","statements":[{"nodeType":"YulAssignment","src":"2175:22:16","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2188:5:16"},{"kind":"number","nodeType":"YulLiteral","src":"2195:1:16","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2184:3:16"},"nodeType":"YulFunctionCall","src":"2184:13:16"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"2175:5:16"}]}]},"pre":{"nodeType":"YulBlock","src":"2155:3:16","statements":[]},"src":"2151:82:16"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"1801:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"1806:2:16","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1798:2:16"},"nodeType":"YulFunctionCall","src":"1798:11:16"},"nodeType":"YulIf","src":"1795:448:16"}]},"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"1757:5:16","type":""},{"name":"len","nodeType":"YulTypedName","src":"1764:3:16","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"1769:10:16","type":""}],"src":"1704:545:16"},{"body":{"nodeType":"YulBlock","src":"2339:81:16","statements":[{"nodeType":"YulAssignment","src":"2349:65:16","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2364:4:16"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2382:1:16","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"2385:3:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2378:3:16"},"nodeType":"YulFunctionCall","src":"2378:11:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2395:1:16","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2391:3:16"},"nodeType":"YulFunctionCall","src":"2391:6:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2374:3:16"},"nodeType":"YulFunctionCall","src":"2374:24:16"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2370:3:16"},"nodeType":"YulFunctionCall","src":"2370:29:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2360:3:16"},"nodeType":"YulFunctionCall","src":"2360:40:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2406:1:16","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"2409:3:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2402:3:16"},"nodeType":"YulFunctionCall","src":"2402:11:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2357:2:16"},"nodeType":"YulFunctionCall","src":"2357:57:16"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"2349:4:16"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"2316:4:16","type":""},{"name":"len","nodeType":"YulTypedName","src":"2322:3:16","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"2330:4:16","type":""}],"src":"2254:166:16"},{"body":{"nodeType":"YulBlock","src":"2521:1256:16","statements":[{"nodeType":"YulVariableDeclaration","src":"2531:24:16","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2551:3:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2545:5:16"},"nodeType":"YulFunctionCall","src":"2545:10:16"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"2535:6:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"2598:22:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2600:16:16"},"nodeType":"YulFunctionCall","src":"2600:18:16"},"nodeType":"YulExpressionStatement","src":"2600:18:16"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"2570:6:16"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2586:2:16","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"2590:1:16","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2582:3:16"},"nodeType":"YulFunctionCall","src":"2582:10:16"},{"kind":"number","nodeType":"YulLiteral","src":"2594:1:16","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2578:3:16"},"nodeType":"YulFunctionCall","src":"2578:18:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2567:2:16"},"nodeType":"YulFunctionCall","src":"2567:30:16"},"nodeType":"YulIf","src":"2564:56:16"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2673:4:16"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2711:4:16"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"2705:5:16"},"nodeType":"YulFunctionCall","src":"2705:11:16"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"2679:25:16"},"nodeType":"YulFunctionCall","src":"2679:38:16"},{"name":"newLen","nodeType":"YulIdentifier","src":"2719:6:16"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"2629:43:16"},"nodeType":"YulFunctionCall","src":"2629:97:16"},"nodeType":"YulExpressionStatement","src":"2629:97:16"},{"nodeType":"YulVariableDeclaration","src":"2735:18:16","value":{"kind":"number","nodeType":"YulLiteral","src":"2752:1:16","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"2739:9:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2762:23:16","value":{"kind":"number","nodeType":"YulLiteral","src":"2781:4:16","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"2766:11:16","type":""}]},{"nodeType":"YulAssignment","src":"2794:24:16","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"2807:11:16"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"2794:9:16"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"2864:656:16","statements":[{"nodeType":"YulVariableDeclaration","src":"2878:35:16","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"2897:6:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2909:2:16","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2905:3:16"},"nodeType":"YulFunctionCall","src":"2905:7:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2893:3:16"},"nodeType":"YulFunctionCall","src":"2893:20:16"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"2882:7:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2926:49:16","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2970:4:16"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"2940:29:16"},"nodeType":"YulFunctionCall","src":"2940:35:16"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"2930:6:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2988:10:16","value":{"kind":"number","nodeType":"YulLiteral","src":"2997:1:16","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"2992:1:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"3075:172:16","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3100:6:16"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3118:3:16"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"3123:9:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3114:3:16"},"nodeType":"YulFunctionCall","src":"3114:19:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3108:5:16"},"nodeType":"YulFunctionCall","src":"3108:26:16"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3093:6:16"},"nodeType":"YulFunctionCall","src":"3093:42:16"},"nodeType":"YulExpressionStatement","src":"3093:42:16"},{"nodeType":"YulAssignment","src":"3152:24:16","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3166:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"3174:1:16","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3162:3:16"},"nodeType":"YulFunctionCall","src":"3162:14:16"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3152:6:16"}]},{"nodeType":"YulAssignment","src":"3193:40:16","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3210:9:16"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3221:11:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3206:3:16"},"nodeType":"YulFunctionCall","src":"3206:27:16"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3193:9:16"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3022:1:16"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"3025:7:16"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3019:2:16"},"nodeType":"YulFunctionCall","src":"3019:14:16"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3034:28:16","statements":[{"nodeType":"YulAssignment","src":"3036:24:16","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3045:1:16"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3048:11:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3041:3:16"},"nodeType":"YulFunctionCall","src":"3041:19:16"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"3036:1:16"}]}]},"pre":{"nodeType":"YulBlock","src":"3015:3:16","statements":[]},"src":"3011:236:16"},{"body":{"nodeType":"YulBlock","src":"3295:166:16","statements":[{"nodeType":"YulVariableDeclaration","src":"3313:43:16","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3340:3:16"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"3345:9:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3336:3:16"},"nodeType":"YulFunctionCall","src":"3336:19:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3330:5:16"},"nodeType":"YulFunctionCall","src":"3330:26:16"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"3317:9:16","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3380:6:16"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"3392:9:16"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3419:1:16","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"3422:6:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3415:3:16"},"nodeType":"YulFunctionCall","src":"3415:14:16"},{"kind":"number","nodeType":"YulLiteral","src":"3431:3:16","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3411:3:16"},"nodeType":"YulFunctionCall","src":"3411:24:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3441:1:16","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3437:3:16"},"nodeType":"YulFunctionCall","src":"3437:6:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3407:3:16"},"nodeType":"YulFunctionCall","src":"3407:37:16"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3403:3:16"},"nodeType":"YulFunctionCall","src":"3403:42:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3388:3:16"},"nodeType":"YulFunctionCall","src":"3388:58:16"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3373:6:16"},"nodeType":"YulFunctionCall","src":"3373:74:16"},"nodeType":"YulExpressionStatement","src":"3373:74:16"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"3266:7:16"},{"name":"newLen","nodeType":"YulIdentifier","src":"3275:6:16"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3263:2:16"},"nodeType":"YulFunctionCall","src":"3263:19:16"},"nodeType":"YulIf","src":"3260:201:16"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3481:4:16"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3495:1:16","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"3498:6:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3491:3:16"},"nodeType":"YulFunctionCall","src":"3491:14:16"},{"kind":"number","nodeType":"YulLiteral","src":"3507:1:16","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3487:3:16"},"nodeType":"YulFunctionCall","src":"3487:22:16"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3474:6:16"},"nodeType":"YulFunctionCall","src":"3474:36:16"},"nodeType":"YulExpressionStatement","src":"3474:36:16"}]},"nodeType":"YulCase","src":"2857:663:16","value":{"kind":"number","nodeType":"YulLiteral","src":"2862:1:16","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"3537:234:16","statements":[{"nodeType":"YulVariableDeclaration","src":"3551:14:16","value":{"kind":"number","nodeType":"YulLiteral","src":"3564:1:16","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3555:5:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"3600:67:16","statements":[{"nodeType":"YulAssignment","src":"3618:35:16","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3637:3:16"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"3642:9:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3633:3:16"},"nodeType":"YulFunctionCall","src":"3633:19:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3627:5:16"},"nodeType":"YulFunctionCall","src":"3627:26:16"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3618:5:16"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"3581:6:16"},"nodeType":"YulIf","src":"3578:89:16"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3687:4:16"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3746:5:16"},{"name":"newLen","nodeType":"YulIdentifier","src":"3753:6:16"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"3693:52:16"},"nodeType":"YulFunctionCall","src":"3693:67:16"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3680:6:16"},"nodeType":"YulFunctionCall","src":"3680:81:16"},"nodeType":"YulExpressionStatement","src":"3680:81:16"}]},"nodeType":"YulCase","src":"3529:242:16","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"2837:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"2845:2:16","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2834:2:16"},"nodeType":"YulFunctionCall","src":"2834:14:16"},"nodeType":"YulSwitch","src":"2827:944:16"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"2506:4:16","type":""},{"name":"src","nodeType":"YulTypedName","src":"2512:3:16","type":""}],"src":"2425:1352:16"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        let _1 := 32\n        if slt(sub(dataEnd, headStart), _1) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(offset, _2) { revert(0, 0) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(0, 0) }\n        let _4 := mload(_3)\n        if gt(_4, _2) { panic_error_0x41() }\n        let _5 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_4, 0x1f), _5), 63), _5))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _4)\n        if gt(add(add(_3, _4), _1), dataEnd) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _4) { i := add(i, _1) }\n        {\n            mstore(add(add(memPtr, i), _1), mload(add(add(_3, i), _1)))\n        }\n        mstore(add(add(memPtr, _4), _1), 0)\n        value0 := memPtr\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n}","id":16,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b506040516200162b3803806200162b83398101604081905262000034916200006e565b6200003f8162000046565b506200029e565b6002620000548282620001d2565b5050565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156200008257600080fd5b82516001600160401b03808211156200009a57600080fd5b818501915085601f830112620000af57600080fd5b815181811115620000c457620000c462000058565b604051601f8201601f19908116603f01168101908382118183101715620000ef57620000ef62000058565b8160405282815288868487010111156200010857600080fd5b600093505b828410156200012c57848401860151818501870152928501926200010d565b600086848301015280965050505050505092915050565b600181811c908216806200015857607f821691505b6020821081036200017957634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001cd57600081815260208120601f850160051c81016020861015620001a85750805b601f850160051c820191505b81811015620001c957828155600101620001b4565b5050505b505050565b81516001600160401b03811115620001ee57620001ee62000058565b6200020681620001ff845462000143565b846200017f565b602080601f8311600181146200023e5760008415620002255750858301515b600019600386901b1c1916600185901b178555620001c9565b600085815260208120601f198616915b828110156200026f578886015182559484019460019091019084016200024e565b50858210156200028e5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61137d80620002ae6000396000f3fe608060405234801561001057600080fd5b50600436106100875760003560e01c80634e1273f41161005b5780634e1273f41461010a578063a22cb4651461012a578063e985e9c51461013d578063f242432a1461017957600080fd5b8062fdd58e1461008c57806301ffc9a7146100b25780630e89341c146100d55780632eb2c2d6146100f5575b600080fd5b61009f61009a366004610b40565b61018c565b6040519081526020015b60405180910390f35b6100c56100c0366004610b83565b610225565b60405190151581526020016100a9565b6100e86100e3366004610ba7565b610275565b6040516100a99190610c06565b610108610103366004610d65565b610309565b005b61011d610118366004610e0f565b610355565b6040516100a99190610f15565b610108610138366004610f28565b61047f565b6100c561014b366004610f64565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b610108610187366004610f97565b61048e565b60006001600160a01b0383166101fc5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b148061025657506001600160e01b031982166303a24d0760e21b145b8061021f57506301ffc9a760e01b6001600160e01b031983161461021f565b60606002805461028490610ffc565b80601f01602080910402602001604051908101604052809291908181526020018280546102b090610ffc565b80156102fd5780601f106102d2576101008083540402835291602001916102fd565b820191906000526020600020905b8154815290600101906020018083116102e057829003601f168201915b50505050509050919050565b6001600160a01b0385163314806103255750610325853361014b565b6103415760405162461bcd60e51b81526004016101f390611036565b61034e85858585856104d3565b5050505050565b606081518351146103ba5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016101f3565b6000835167ffffffffffffffff8111156103d6576103d6610c19565b6040519080825280602002602001820160405280156103ff578160200160208202803683370190505b50905060005b84518110156104775761044a85828151811061042357610423611084565b602002602001015185838151811061043d5761043d611084565b602002602001015161018c565b82828151811061045c5761045c611084565b6020908102919091010152610470816110b0565b9050610405565b509392505050565b61048a3383836106b0565b5050565b6001600160a01b0385163314806104aa57506104aa853361014b565b6104c65760405162461bcd60e51b81526004016101f390611036565b61034e8585858585610790565b81518351146105355760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016101f3565b6001600160a01b03841661055b5760405162461bcd60e51b81526004016101f3906110c9565b3360005b845181101561064257600085828151811061057c5761057c611084565b60200260200101519050600085838151811061059a5761059a611084565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156105ea5760405162461bcd60e51b81526004016101f39061110e565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290610627908490611158565b925050819055505050508061063b906110b0565b905061055f565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161069292919061116b565b60405180910390a46106a88187878787876108ba565b505050505050565b816001600160a01b0316836001600160a01b0316036107235760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016101f3565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166107b65760405162461bcd60e51b81526004016101f3906110c9565b3360006107c285610a1e565b905060006107cf85610a1e565b90506000868152602081815260408083206001600160a01b038c168452909152902054858110156108125760405162461bcd60e51b81526004016101f39061110e565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a1682528120805488929061084f908490611158565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46108af848a8a8a8a8a610a69565b505050505050505050565b6001600160a01b0384163b156106a85760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906108fe9089908990889088908890600401611199565b6020604051808303816000875af1925050508015610939575060408051601f3d908101601f19168201909252610936918101906111f7565b60015b6109e557610945611214565b806308c379a00361097e5750610959611230565b806109645750610980565b8060405162461bcd60e51b81526004016101f39190610c06565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016101f3565b6001600160e01b0319811663bc197c8160e01b14610a155760405162461bcd60e51b81526004016101f3906112ba565b50505050505050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110610a5857610a58611084565b602090810291909101015292915050565b6001600160a01b0384163b156106a85760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190610aad9089908990889088908890600401611302565b6020604051808303816000875af1925050508015610ae8575060408051601f3d908101601f19168201909252610ae5918101906111f7565b60015b610af457610945611214565b6001600160e01b0319811663f23a6e6160e01b14610a155760405162461bcd60e51b81526004016101f3906112ba565b80356001600160a01b0381168114610b3b57600080fd5b919050565b60008060408385031215610b5357600080fd5b610b5c83610b24565b946020939093013593505050565b6001600160e01b031981168114610b8057600080fd5b50565b600060208284031215610b9557600080fd5b8135610ba081610b6a565b9392505050565b600060208284031215610bb957600080fd5b5035919050565b6000815180845260005b81811015610be657602081850181015186830182015201610bca565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610ba06020830184610bc0565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715610c5557610c55610c19565b6040525050565b600067ffffffffffffffff821115610c7657610c76610c19565b5060051b60200190565b600082601f830112610c9157600080fd5b81356020610c9e82610c5c565b604051610cab8282610c2f565b83815260059390931b8501820192828101915086841115610ccb57600080fd5b8286015b84811015610ce65780358352918301918301610ccf565b509695505050505050565b600082601f830112610d0257600080fd5b813567ffffffffffffffff811115610d1c57610d1c610c19565b604051610d33601f8301601f191660200182610c2f565b818152846020838601011115610d4857600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215610d7d57600080fd5b610d8686610b24565b9450610d9460208701610b24565b9350604086013567ffffffffffffffff80821115610db157600080fd5b610dbd89838a01610c80565b94506060880135915080821115610dd357600080fd5b610ddf89838a01610c80565b93506080880135915080821115610df557600080fd5b50610e0288828901610cf1565b9150509295509295909350565b60008060408385031215610e2257600080fd5b823567ffffffffffffffff80821115610e3a57600080fd5b818501915085601f830112610e4e57600080fd5b81356020610e5b82610c5c565b604051610e688282610c2f565b83815260059390931b8501820192828101915089841115610e8857600080fd5b948201945b83861015610ead57610e9e86610b24565b82529482019490820190610e8d565b96505086013592505080821115610ec357600080fd5b50610ed085828601610c80565b9150509250929050565b600081518084526020808501945080840160005b83811015610f0a57815187529582019590820190600101610eee565b509495945050505050565b602081526000610ba06020830184610eda565b60008060408385031215610f3b57600080fd5b610f4483610b24565b915060208301358015158114610f5957600080fd5b809150509250929050565b60008060408385031215610f7757600080fd5b610f8083610b24565b9150610f8e60208401610b24565b90509250929050565b600080600080600060a08688031215610faf57600080fd5b610fb886610b24565b9450610fc660208701610b24565b93506040860135925060608601359150608086013567ffffffffffffffff811115610ff057600080fd5b610e0288828901610cf1565b600181811c9082168061101057607f821691505b60208210810361103057634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016110c2576110c261109a565b5060010190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b8082018082111561021f5761021f61109a565b60408152600061117e6040830185610eda565b82810360208401526111908185610eda565b95945050505050565b6001600160a01b0386811682528516602082015260a0604082018190526000906111c590830186610eda565b82810360608401526111d78186610eda565b905082810360808401526111eb8185610bc0565b98975050505050505050565b60006020828403121561120957600080fd5b8151610ba081610b6a565b600060033d111561122d5760046000803e5060005160e01c5b90565b600060443d101561123e5790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561126e57505050505090565b82850191508151818111156112865750505050505090565b843d87010160208285010111156112a05750505050505090565b6112af60208286010187610c2f565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061133c90830184610bc0565b97965050505050505056fea26469706673582212201f8129b224788397df0c5f09917775ce6ce61a7043347f0af6c7e17d72af4bc964736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x162B CODESIZE SUB DUP1 PUSH3 0x162B DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x6E JUMP JUMPDEST PUSH3 0x3F DUP2 PUSH3 0x46 JUMP JUMPDEST POP PUSH3 0x29E JUMP JUMPDEST PUSH1 0x2 PUSH3 0x54 DUP3 DUP3 PUSH3 0x1D2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH3 0xAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH3 0xC4 JUMPI PUSH3 0xC4 PUSH3 0x58 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0xEF JUMPI PUSH3 0xEF PUSH3 0x58 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 DUP7 DUP5 DUP8 ADD ADD GT ISZERO PUSH3 0x108 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP4 POP JUMPDEST DUP3 DUP5 LT ISZERO PUSH3 0x12C JUMPI DUP5 DUP5 ADD DUP7 ADD MLOAD DUP2 DUP6 ADD DUP8 ADD MSTORE SWAP3 DUP6 ADD SWAP3 PUSH3 0x10D JUMP JUMPDEST PUSH1 0x0 DUP7 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP7 POP POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x158 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x179 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x1CD JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x1A8 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x1C9 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x1B4 JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x1EE JUMPI PUSH3 0x1EE PUSH3 0x58 JUMP JUMPDEST PUSH3 0x206 DUP2 PUSH3 0x1FF DUP5 SLOAD PUSH3 0x143 JUMP JUMPDEST DUP5 PUSH3 0x17F JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x23E JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x225 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x1C9 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x26F JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x24E JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x28E JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x137D DUP1 PUSH3 0x2AE PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x87 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4E1273F4 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x4E1273F4 EQ PUSH2 0x10A JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x12A JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x13D JUMPI DUP1 PUSH4 0xF242432A EQ PUSH2 0x179 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0xFDD58E EQ PUSH2 0x8C JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xB2 JUMPI DUP1 PUSH4 0xE89341C EQ PUSH2 0xD5 JUMPI DUP1 PUSH4 0x2EB2C2D6 EQ PUSH2 0xF5 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9F PUSH2 0x9A CALLDATASIZE PUSH1 0x4 PUSH2 0xB40 JUMP JUMPDEST PUSH2 0x18C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC5 PUSH2 0xC0 CALLDATASIZE PUSH1 0x4 PUSH2 0xB83 JUMP JUMPDEST PUSH2 0x225 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xA9 JUMP JUMPDEST PUSH2 0xE8 PUSH2 0xE3 CALLDATASIZE PUSH1 0x4 PUSH2 0xBA7 JUMP JUMPDEST PUSH2 0x275 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA9 SWAP2 SWAP1 PUSH2 0xC06 JUMP JUMPDEST PUSH2 0x108 PUSH2 0x103 CALLDATASIZE PUSH1 0x4 PUSH2 0xD65 JUMP JUMPDEST PUSH2 0x309 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x11D PUSH2 0x118 CALLDATASIZE PUSH1 0x4 PUSH2 0xE0F JUMP JUMPDEST PUSH2 0x355 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA9 SWAP2 SWAP1 PUSH2 0xF15 JUMP JUMPDEST PUSH2 0x108 PUSH2 0x138 CALLDATASIZE PUSH1 0x4 PUSH2 0xF28 JUMP JUMPDEST PUSH2 0x47F JUMP JUMPDEST PUSH2 0xC5 PUSH2 0x14B CALLDATASIZE PUSH1 0x4 PUSH2 0xF64 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x108 PUSH2 0x187 CALLDATASIZE PUSH1 0x4 PUSH2 0xF97 JUMP JUMPDEST PUSH2 0x48E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1FC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2061646472657373207A65726F206973206E6F7420612076 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x30B634B21037BBB732B9 PUSH1 0xB1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x6CDB3D13 PUSH1 0xE1 SHL EQ DUP1 PUSH2 0x256 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x3A24D07 PUSH1 0xE2 SHL EQ JUMPDEST DUP1 PUSH2 0x21F JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x21F JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x284 SWAP1 PUSH2 0xFFC JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2B0 SWAP1 PUSH2 0xFFC JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2FD JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2D2 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2FD JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2E0 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER EQ DUP1 PUSH2 0x325 JUMPI POP PUSH2 0x325 DUP6 CALLER PUSH2 0x14B JUMP JUMPDEST PUSH2 0x341 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x1036 JUMP JUMPDEST PUSH2 0x34E DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x4D3 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x3BA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A206163636F756E747320616E6420696473206C656E677468 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x40DAD2E6DAC2E8C6D PUSH1 0xBB SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3D6 JUMPI PUSH2 0x3D6 PUSH2 0xC19 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3FF JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x477 JUMPI PUSH2 0x44A DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x423 JUMPI PUSH2 0x423 PUSH2 0x1084 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x43D JUMPI PUSH2 0x43D PUSH2 0x1084 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x18C JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x45C JUMPI PUSH2 0x45C PUSH2 0x1084 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH2 0x470 DUP2 PUSH2 0x10B0 JUMP JUMPDEST SWAP1 POP PUSH2 0x405 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x48A CALLER DUP4 DUP4 PUSH2 0x6B0 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER EQ DUP1 PUSH2 0x4AA JUMPI POP PUSH2 0x4AA DUP6 CALLER PUSH2 0x14B JUMP JUMPDEST PUSH2 0x4C6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x1036 JUMP JUMPDEST PUSH2 0x34E DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x790 JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x535 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2069647320616E6420616D6F756E7473206C656E67746820 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0xDAD2E6DAC2E8C6D PUSH1 0xC3 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x55B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x10C9 JUMP JUMPDEST CALLER PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x642 JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x57C JUMPI PUSH2 0x57C PUSH2 0x1084 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x59A JUMPI PUSH2 0x59A PUSH2 0x1084 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x0 DUP5 DUP2 MSTORE DUP1 DUP4 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 AND DUP4 MSTORE SWAP1 SWAP4 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP2 DUP2 LT ISZERO PUSH2 0x5EA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x110E JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP1 DUP12 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x627 SWAP1 DUP5 SWAP1 PUSH2 0x1158 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP POP POP DUP1 PUSH2 0x63B SWAP1 PUSH2 0x10B0 JUMP JUMPDEST SWAP1 POP PUSH2 0x55F JUMP JUMPDEST POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x692 SWAP3 SWAP2 SWAP1 PUSH2 0x116B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x6A8 DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x8BA JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x723 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2073657474696E6720617070726F76616C20737461747573 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x103337B91039B2B633 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x7B6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x10C9 JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0x7C2 DUP6 PUSH2 0xA1E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7CF DUP6 PUSH2 0xA1E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP6 DUP2 LT ISZERO PUSH2 0x812 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x110E JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP10 DUP6 SUB SWAP1 SSTORE SWAP1 DUP11 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP9 SWAP3 SWAP1 PUSH2 0x84F SWAP1 DUP5 SWAP1 PUSH2 0x1158 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP9 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP12 AND SWAP3 DUP13 DUP3 AND SWAP3 SWAP2 DUP9 AND SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x8AF DUP5 DUP11 DUP11 DUP11 DUP11 DUP11 PUSH2 0xA69 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x6A8 JUMPI PUSH1 0x40 MLOAD PUSH4 0xBC197C81 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xBC197C81 SWAP1 PUSH2 0x8FE SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1199 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x939 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x936 SWAP2 DUP2 ADD SWAP1 PUSH2 0x11F7 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x9E5 JUMPI PUSH2 0x945 PUSH2 0x1214 JUMP JUMPDEST DUP1 PUSH4 0x8C379A0 SUB PUSH2 0x97E JUMPI POP PUSH2 0x959 PUSH2 0x1230 JUMP JUMPDEST DUP1 PUSH2 0x964 JUMPI POP PUSH2 0x980 JUMP JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP2 SWAP1 PUSH2 0xC06 JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x34 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F206E6F6E2D45524331313535 PUSH1 0x44 DUP3 ADD MSTORE PUSH20 0x2932B1B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x61 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xBC197C81 PUSH1 0xE0 SHL EQ PUSH2 0xA15 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x12BA JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP3 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xA58 JUMPI PUSH2 0xA58 PUSH2 0x1084 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x6A8 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF23A6E61 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xF23A6E61 SWAP1 PUSH2 0xAAD SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1302 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xAE8 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xAE5 SWAP2 DUP2 ADD SWAP1 PUSH2 0x11F7 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xAF4 JUMPI PUSH2 0x945 PUSH2 0x1214 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xF23A6E61 PUSH1 0xE0 SHL EQ PUSH2 0xA15 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x12BA JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xB3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB53 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB5C DUP4 PUSH2 0xB24 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xB80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB95 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xBA0 DUP2 PUSH2 0xB6A JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xBE6 JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0xBCA JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xBA0 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xBC0 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xC55 JUMPI PUSH2 0xC55 PUSH2 0xC19 JUMP JUMPDEST PUSH1 0x40 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xC76 JUMPI PUSH2 0xC76 PUSH2 0xC19 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xC91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0xC9E DUP3 PUSH2 0xC5C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCAB DUP3 DUP3 PUSH2 0xC2F JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x5 SWAP4 SWAP1 SWAP4 SHL DUP6 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP2 POP DUP7 DUP5 GT ISZERO PUSH2 0xCCB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xCE6 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0xCCF JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xD02 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xD1C JUMPI PUSH2 0xD1C PUSH2 0xC19 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD33 PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 PUSH2 0xC2F JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0xD48 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xD7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD86 DUP7 PUSH2 0xB24 JUMP JUMPDEST SWAP5 POP PUSH2 0xD94 PUSH1 0x20 DUP8 ADD PUSH2 0xB24 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xDB1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDBD DUP10 DUP4 DUP11 ADD PUSH2 0xC80 JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xDD3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDDF DUP10 DUP4 DUP11 ADD PUSH2 0xC80 JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xDF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE02 DUP9 DUP3 DUP10 ADD PUSH2 0xCF1 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xE3A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xE4E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0xE5B DUP3 PUSH2 0xC5C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE68 DUP3 DUP3 PUSH2 0xC2F JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x5 SWAP4 SWAP1 SWAP4 SHL DUP6 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP2 POP DUP10 DUP5 GT ISZERO PUSH2 0xE88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 DUP3 ADD SWAP5 JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0xEAD JUMPI PUSH2 0xE9E DUP7 PUSH2 0xB24 JUMP JUMPDEST DUP3 MSTORE SWAP5 DUP3 ADD SWAP5 SWAP1 DUP3 ADD SWAP1 PUSH2 0xE8D JUMP JUMPDEST SWAP7 POP POP DUP7 ADD CALLDATALOAD SWAP3 POP POP DUP1 DUP3 GT ISZERO PUSH2 0xEC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xED0 DUP6 DUP3 DUP7 ADD PUSH2 0xC80 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xF0A JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xEEE JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xBA0 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xEDA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF44 DUP4 PUSH2 0xB24 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xF59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF77 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF80 DUP4 PUSH2 0xB24 JUMP JUMPDEST SWAP2 POP PUSH2 0xF8E PUSH1 0x20 DUP5 ADD PUSH2 0xB24 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xFAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xFB8 DUP7 PUSH2 0xB24 JUMP JUMPDEST SWAP5 POP PUSH2 0xFC6 PUSH1 0x20 DUP8 ADD PUSH2 0xB24 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xFF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE02 DUP9 DUP3 DUP10 ADD PUSH2 0xCF1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1010 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1030 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A2063616C6C6572206973206E6F7420746F6B656E206F776E PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x195C881BDC88185C1C1C9BDD9959 PUSH1 0x92 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x10C2 JUMPI PUSH2 0x10C2 PUSH2 0x109A JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F20746865207A65726F206164 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2A SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A20696E73756666696369656E742062616C616E636520666F PUSH1 0x40 DUP3 ADD MSTORE PUSH10 0x39103A3930B739B332B9 PUSH1 0xB1 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x21F JUMPI PUSH2 0x21F PUSH2 0x109A JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x117E PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0xEDA JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1190 DUP2 DUP6 PUSH2 0xEDA JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x11C5 SWAP1 DUP4 ADD DUP7 PUSH2 0xEDA JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x11D7 DUP2 DUP7 PUSH2 0xEDA JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x11EB DUP2 DUP6 PUSH2 0xBC0 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1209 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xBA0 DUP2 PUSH2 0xB6A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 RETURNDATASIZE GT ISZERO PUSH2 0x122D JUMPI PUSH1 0x4 PUSH1 0x0 DUP1 RETURNDATACOPY POP PUSH1 0x0 MLOAD PUSH1 0xE0 SHR JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x44 RETURNDATASIZE LT ISZERO PUSH2 0x123E JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x3 NOT RETURNDATASIZE DUP2 ADD PUSH1 0x4 DUP4 RETURNDATACOPY DUP2 MLOAD RETURNDATASIZE PUSH8 0xFFFFFFFFFFFFFFFF DUP2 PUSH1 0x24 DUP5 ADD GT DUP2 DUP5 GT OR ISZERO PUSH2 0x126E JUMPI POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP3 DUP6 ADD SWAP2 POP DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x1286 JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP5 RETURNDATASIZE DUP8 ADD ADD PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x12A0 JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x12AF PUSH1 0x20 DUP3 DUP7 ADD ADD DUP8 PUSH2 0xC2F JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x28 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A204552433131353552656365697665722072656A65637465 PUSH1 0x40 DUP3 ADD MSTORE PUSH8 0x6420746F6B656E73 PUSH1 0xC0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x133C SWAP1 DUP4 ADD DUP5 PUSH2 0xBC0 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x1F DUP2 0x29 0xB2 0x24 PUSH25 0x8397DF0C5F09917775CE6CE61A7043347F0AF6C7E17D72AF4B 0xC9 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"570:16689:2:-:0;;;1107:62;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1149:13;1157:4;1149:7;:13::i;:::-;1107:62;570:16689;;8171:86;8237:4;:13;8244:6;8237:4;:13;:::i;:::-;;8171:86;:::o;14:127:16:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:1042;226:6;257:2;300;288:9;279:7;275:23;271:32;268:52;;;316:1;313;306:12;268:52;343:16;;-1:-1:-1;;;;;408:14:16;;;405:34;;;435:1;432;425:12;405:34;473:6;462:9;458:22;448:32;;518:7;511:4;507:2;503:13;499:27;489:55;;540:1;537;530:12;489:55;569:2;563:9;591:2;587;584:10;581:36;;;597:18;;:::i;:::-;672:2;666:9;640:2;726:13;;-1:-1:-1;;722:22:16;;;746:2;718:31;714:40;702:53;;;770:18;;;790:22;;;767:46;764:72;;;816:18;;:::i;:::-;856:10;852:2;845:22;891:2;883:6;876:18;931:7;926:2;921;917;913:11;909:20;906:33;903:53;;;952:1;949;942:12;903:53;974:1;965:10;;984:129;998:2;995:1;992:9;984:129;;;1086:10;;;1082:19;;1076:26;1055:14;;;1051:23;;1044:59;1009:10;;;;984:129;;;1155:1;1150:2;1145;1137:6;1133:15;1129:24;1122:35;1176:6;1166:16;;;;;;;;146:1042;;;;:::o;1193:380::-;1272:1;1268:12;;;;1315;;;1336:61;;1390:4;1382:6;1378:17;1368:27;;1336:61;1443:2;1435:6;1432:14;1412:18;1409:38;1406:161;;1489:10;1484:3;1480:20;1477:1;1470:31;1524:4;1521:1;1514:15;1552:4;1549:1;1542:15;1406:161;;1193:380;;;:::o;1704:545::-;1806:2;1801:3;1798:11;1795:448;;;1842:1;1867:5;1863:2;1856:17;1912:4;1908:2;1898:19;1982:2;1970:10;1966:19;1963:1;1959:27;1953:4;1949:38;2018:4;2006:10;2003:20;2000:47;;;-1:-1:-1;2041:4:16;2000:47;2096:2;2091:3;2087:12;2084:1;2080:20;2074:4;2070:31;2060:41;;2151:82;2169:2;2162:5;2159:13;2151:82;;;2214:17;;;2195:1;2184:13;2151:82;;;2155:3;;;1795:448;1704:545;;;:::o;2425:1352::-;2545:10;;-1:-1:-1;;;;;2567:30:16;;2564:56;;;2600:18;;:::i;:::-;2629:97;2719:6;2679:38;2711:4;2705:11;2679:38;:::i;:::-;2673:4;2629:97;:::i;:::-;2781:4;;2845:2;2834:14;;2862:1;2857:663;;;;3564:1;3581:6;3578:89;;;-1:-1:-1;3633:19:16;;;3627:26;3578:89;-1:-1:-1;;2382:1:16;2378:11;;;2374:24;2370:29;2360:40;2406:1;2402:11;;;2357:57;3680:81;;2827:944;;2857:663;1651:1;1644:14;;;1688:4;1675:18;;-1:-1:-1;;2893:20:16;;;3011:236;3025:7;3022:1;3019:14;3011:236;;;3114:19;;;3108:26;3093:42;;3206:27;;;;3174:1;3162:14;;;;3041:19;;3011:236;;;3015:3;3275:6;3266:7;3263:19;3260:201;;;3336:19;;;3330:26;-1:-1:-1;;3419:1:16;3415:14;;;3431:3;3411:24;3407:37;3403:42;3388:58;3373:74;;3260:201;-1:-1:-1;;;;;3507:1:16;3491:14;;;3487:22;3474:36;;-1:-1:-1;2425:1352:16:o;:::-;570:16689:2;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_1454":{"entryPoint":null,"id":1454,"parameterSlots":6,"returnSlots":0},"@_asSingletonArray_1610":{"entryPoint":2590,"id":1610,"parameterSlots":1,"returnSlots":1},"@_beforeTokenTransfer_1435":{"entryPoint":null,"id":1435,"parameterSlots":6,"returnSlots":0},"@_doSafeBatchTransferAcceptanceCheck_1582":{"entryPoint":2234,"id":1582,"parameterSlots":6,"returnSlots":0},"@_doSafeTransferAcceptanceCheck_1517":{"entryPoint":2665,"id":1517,"parameterSlots":6,"returnSlots":0},"@_msgSender_2131":{"entryPoint":null,"id":2131,"parameterSlots":0,"returnSlots":1},"@_safeBatchTransferFrom_933":{"entryPoint":1235,"id":933,"parameterSlots":5,"returnSlots":0},"@_safeTransferFrom_798":{"entryPoint":1936,"id":798,"parameterSlots":5,"returnSlots":0},"@_setApprovalForAll_1416":{"entryPoint":1712,"id":1416,"parameterSlots":3,"returnSlots":0},"@balanceOfBatch_568":{"entryPoint":853,"id":568,"parameterSlots":2,"returnSlots":1},"@balanceOf_504":{"entryPoint":396,"id":504,"parameterSlots":2,"returnSlots":1},"@isApprovedForAll_603":{"entryPoint":null,"id":603,"parameterSlots":2,"returnSlots":1},"@isContract_1807":{"entryPoint":null,"id":1807,"parameterSlots":1,"returnSlots":1},"@safeBatchTransferFrom_681":{"entryPoint":777,"id":681,"parameterSlots":5,"returnSlots":0},"@safeTransferFrom_641":{"entryPoint":1166,"id":641,"parameterSlots":5,"returnSlots":0},"@setApprovalForAll_585":{"entryPoint":1151,"id":585,"parameterSlots":2,"returnSlots":0},"@supportsInterface_2841":{"entryPoint":null,"id":2841,"parameterSlots":1,"returnSlots":1},"@supportsInterface_464":{"entryPoint":549,"id":464,"parameterSlots":1,"returnSlots":1},"@uri_476":{"entryPoint":629,"id":476,"parameterSlots":1,"returnSlots":1},"abi_decode_address":{"entryPoint":2852,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_uint256_dyn":{"entryPoint":3200,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes":{"entryPoint":3313,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":3940,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr":{"entryPoint":3429,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr":{"entryPoint":3991,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_bool":{"entryPoint":3880,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":2880,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":3599,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":2947,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":4599,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":2983,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_array_uint256_dyn":{"entryPoint":3802,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string":{"entryPoint":3008,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":4505,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":4866,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":3861,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":4459,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3078,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4794,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4150,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4297,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4366,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"array_allocation_size_array_uint256_dyn":{"entryPoint":3164,"id":null,"parameterSlots":1,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":4440,"id":null,"parameterSlots":2,"returnSlots":1},"extract_byte_array_length":{"entryPoint":4092,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":3119,"id":null,"parameterSlots":2,"returnSlots":0},"increment_t_uint256":{"entryPoint":4272,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":4250,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":4228,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":3097,"id":null,"parameterSlots":0,"returnSlots":0},"return_data_selector":{"entryPoint":4628,"id":null,"parameterSlots":0,"returnSlots":1},"try_decode_error_message":{"entryPoint":4656,"id":null,"parameterSlots":0,"returnSlots":1},"validator_revert_bytes4":{"entryPoint":2922,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:15860:16","statements":[{"nodeType":"YulBlock","src":"6:3:16","statements":[]},{"body":{"nodeType":"YulBlock","src":"63:124:16","statements":[{"nodeType":"YulAssignment","src":"73:29:16","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"95:6:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"82:12:16"},"nodeType":"YulFunctionCall","src":"82:20:16"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"73:5:16"}]},{"body":{"nodeType":"YulBlock","src":"165:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"174:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"177:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"167:6:16"},"nodeType":"YulFunctionCall","src":"167:12:16"},"nodeType":"YulExpressionStatement","src":"167:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"124:5:16"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"135:5:16"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"150:3:16","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"155:1:16","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"146:3:16"},"nodeType":"YulFunctionCall","src":"146:11:16"},{"kind":"number","nodeType":"YulLiteral","src":"159:1:16","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"142:3:16"},"nodeType":"YulFunctionCall","src":"142:19:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"131:3:16"},"nodeType":"YulFunctionCall","src":"131:31:16"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"121:2:16"},"nodeType":"YulFunctionCall","src":"121:42:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"114:6:16"},"nodeType":"YulFunctionCall","src":"114:50:16"},"nodeType":"YulIf","src":"111:70:16"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"42:6:16","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"53:5:16","type":""}],"src":"14:173:16"},{"body":{"nodeType":"YulBlock","src":"279:167:16","statements":[{"body":{"nodeType":"YulBlock","src":"325:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"334:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"337:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"327:6:16"},"nodeType":"YulFunctionCall","src":"327:12:16"},"nodeType":"YulExpressionStatement","src":"327:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"300:7:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"309:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"296:3:16"},"nodeType":"YulFunctionCall","src":"296:23:16"},{"kind":"number","nodeType":"YulLiteral","src":"321:2:16","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"292:3:16"},"nodeType":"YulFunctionCall","src":"292:32:16"},"nodeType":"YulIf","src":"289:52:16"},{"nodeType":"YulAssignment","src":"350:39:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"379:9:16"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"360:18:16"},"nodeType":"YulFunctionCall","src":"360:29:16"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"350:6:16"}]},{"nodeType":"YulAssignment","src":"398:42:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"425:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"436:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"421:3:16"},"nodeType":"YulFunctionCall","src":"421:18:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"408:12:16"},"nodeType":"YulFunctionCall","src":"408:32:16"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"398:6:16"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"237:9:16","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"248:7:16","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"260:6:16","type":""},{"name":"value1","nodeType":"YulTypedName","src":"268:6:16","type":""}],"src":"192:254:16"},{"body":{"nodeType":"YulBlock","src":"552:76:16","statements":[{"nodeType":"YulAssignment","src":"562:26:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"574:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"585:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"570:3:16"},"nodeType":"YulFunctionCall","src":"570:18:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"562:4:16"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"604:9:16"},{"name":"value0","nodeType":"YulIdentifier","src":"615:6:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"597:6:16"},"nodeType":"YulFunctionCall","src":"597:25:16"},"nodeType":"YulExpressionStatement","src":"597:25:16"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"521:9:16","type":""},{"name":"value0","nodeType":"YulTypedName","src":"532:6:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"543:4:16","type":""}],"src":"451:177:16"},{"body":{"nodeType":"YulBlock","src":"677:87:16","statements":[{"body":{"nodeType":"YulBlock","src":"742:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"751:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"754:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"744:6:16"},"nodeType":"YulFunctionCall","src":"744:12:16"},"nodeType":"YulExpressionStatement","src":"744:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"700:5:16"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"711:5:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"722:3:16","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"727:10:16","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"718:3:16"},"nodeType":"YulFunctionCall","src":"718:20:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"707:3:16"},"nodeType":"YulFunctionCall","src":"707:32:16"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"697:2:16"},"nodeType":"YulFunctionCall","src":"697:43:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"690:6:16"},"nodeType":"YulFunctionCall","src":"690:51:16"},"nodeType":"YulIf","src":"687:71:16"}]},"name":"validator_revert_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"666:5:16","type":""}],"src":"633:131:16"},{"body":{"nodeType":"YulBlock","src":"838:176:16","statements":[{"body":{"nodeType":"YulBlock","src":"884:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"893:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"896:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"886:6:16"},"nodeType":"YulFunctionCall","src":"886:12:16"},"nodeType":"YulExpressionStatement","src":"886:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"859:7:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"868:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"855:3:16"},"nodeType":"YulFunctionCall","src":"855:23:16"},{"kind":"number","nodeType":"YulLiteral","src":"880:2:16","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"851:3:16"},"nodeType":"YulFunctionCall","src":"851:32:16"},"nodeType":"YulIf","src":"848:52:16"},{"nodeType":"YulVariableDeclaration","src":"909:36:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"935:9:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"922:12:16"},"nodeType":"YulFunctionCall","src":"922:23:16"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"913:5:16","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"978:5:16"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"954:23:16"},"nodeType":"YulFunctionCall","src":"954:30:16"},"nodeType":"YulExpressionStatement","src":"954:30:16"},{"nodeType":"YulAssignment","src":"993:15:16","value":{"name":"value","nodeType":"YulIdentifier","src":"1003:5:16"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"993:6:16"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"804:9:16","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"815:7:16","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"827:6:16","type":""}],"src":"769:245:16"},{"body":{"nodeType":"YulBlock","src":"1114:92:16","statements":[{"nodeType":"YulAssignment","src":"1124:26:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1136:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"1147:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1132:3:16"},"nodeType":"YulFunctionCall","src":"1132:18:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1124:4:16"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1166:9:16"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1191:6:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1184:6:16"},"nodeType":"YulFunctionCall","src":"1184:14:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1177:6:16"},"nodeType":"YulFunctionCall","src":"1177:22:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1159:6:16"},"nodeType":"YulFunctionCall","src":"1159:41:16"},"nodeType":"YulExpressionStatement","src":"1159:41:16"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1083:9:16","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1094:6:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1105:4:16","type":""}],"src":"1019:187:16"},{"body":{"nodeType":"YulBlock","src":"1281:110:16","statements":[{"body":{"nodeType":"YulBlock","src":"1327:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1336:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1339:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1329:6:16"},"nodeType":"YulFunctionCall","src":"1329:12:16"},"nodeType":"YulExpressionStatement","src":"1329:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1302:7:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"1311:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1298:3:16"},"nodeType":"YulFunctionCall","src":"1298:23:16"},{"kind":"number","nodeType":"YulLiteral","src":"1323:2:16","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1294:3:16"},"nodeType":"YulFunctionCall","src":"1294:32:16"},"nodeType":"YulIf","src":"1291:52:16"},{"nodeType":"YulAssignment","src":"1352:33:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1375:9:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1362:12:16"},"nodeType":"YulFunctionCall","src":"1362:23:16"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1352:6:16"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1247:9:16","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1258:7:16","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1270:6:16","type":""}],"src":"1211:180:16"},{"body":{"nodeType":"YulBlock","src":"1446:373:16","statements":[{"nodeType":"YulVariableDeclaration","src":"1456:26:16","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1476:5:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1470:5:16"},"nodeType":"YulFunctionCall","src":"1470:12:16"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1460:6:16","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1498:3:16"},{"name":"length","nodeType":"YulIdentifier","src":"1503:6:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1491:6:16"},"nodeType":"YulFunctionCall","src":"1491:19:16"},"nodeType":"YulExpressionStatement","src":"1491:19:16"},{"nodeType":"YulVariableDeclaration","src":"1519:10:16","value":{"kind":"number","nodeType":"YulLiteral","src":"1528:1:16","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1523:1:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"1590:110:16","statements":[{"nodeType":"YulVariableDeclaration","src":"1604:14:16","value":{"kind":"number","nodeType":"YulLiteral","src":"1614:4:16","type":"","value":"0x20"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1608:2:16","type":""}]},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1646:3:16"},{"name":"i","nodeType":"YulIdentifier","src":"1651:1:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1642:3:16"},"nodeType":"YulFunctionCall","src":"1642:11:16"},{"name":"_1","nodeType":"YulIdentifier","src":"1655:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1638:3:16"},"nodeType":"YulFunctionCall","src":"1638:20:16"},{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1674:5:16"},{"name":"i","nodeType":"YulIdentifier","src":"1681:1:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1670:3:16"},"nodeType":"YulFunctionCall","src":"1670:13:16"},{"name":"_1","nodeType":"YulIdentifier","src":"1685:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1666:3:16"},"nodeType":"YulFunctionCall","src":"1666:22:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1660:5:16"},"nodeType":"YulFunctionCall","src":"1660:29:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1631:6:16"},"nodeType":"YulFunctionCall","src":"1631:59:16"},"nodeType":"YulExpressionStatement","src":"1631:59:16"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1549:1:16"},{"name":"length","nodeType":"YulIdentifier","src":"1552:6:16"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1546:2:16"},"nodeType":"YulFunctionCall","src":"1546:13:16"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1560:21:16","statements":[{"nodeType":"YulAssignment","src":"1562:17:16","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1571:1:16"},{"kind":"number","nodeType":"YulLiteral","src":"1574:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1567:3:16"},"nodeType":"YulFunctionCall","src":"1567:12:16"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1562:1:16"}]}]},"pre":{"nodeType":"YulBlock","src":"1542:3:16","statements":[]},"src":"1538:162:16"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1724:3:16"},{"name":"length","nodeType":"YulIdentifier","src":"1729:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1720:3:16"},"nodeType":"YulFunctionCall","src":"1720:16:16"},{"kind":"number","nodeType":"YulLiteral","src":"1738:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1716:3:16"},"nodeType":"YulFunctionCall","src":"1716:27:16"},{"kind":"number","nodeType":"YulLiteral","src":"1745:1:16","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1709:6:16"},"nodeType":"YulFunctionCall","src":"1709:38:16"},"nodeType":"YulExpressionStatement","src":"1709:38:16"},{"nodeType":"YulAssignment","src":"1756:57:16","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1771:3:16"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1784:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"1792:2:16","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1780:3:16"},"nodeType":"YulFunctionCall","src":"1780:15:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1801:2:16","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1797:3:16"},"nodeType":"YulFunctionCall","src":"1797:7:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1776:3:16"},"nodeType":"YulFunctionCall","src":"1776:29:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1767:3:16"},"nodeType":"YulFunctionCall","src":"1767:39:16"},{"kind":"number","nodeType":"YulLiteral","src":"1808:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1763:3:16"},"nodeType":"YulFunctionCall","src":"1763:50:16"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1756:3:16"}]}]},"name":"abi_encode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1423:5:16","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1430:3:16","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"1438:3:16","type":""}],"src":"1396:423:16"},{"body":{"nodeType":"YulBlock","src":"1945:99:16","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1962:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"1973:2:16","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1955:6:16"},"nodeType":"YulFunctionCall","src":"1955:21:16"},"nodeType":"YulExpressionStatement","src":"1955:21:16"},{"nodeType":"YulAssignment","src":"1985:53:16","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2011:6:16"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2023:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"2034:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2019:3:16"},"nodeType":"YulFunctionCall","src":"2019:18:16"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"1993:17:16"},"nodeType":"YulFunctionCall","src":"1993:45:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1985:4:16"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1914:9:16","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1925:6:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1936:4:16","type":""}],"src":"1824:220:16"},{"body":{"nodeType":"YulBlock","src":"2081:95:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2098:1:16","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2105:3:16","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2110:10:16","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2101:3:16"},"nodeType":"YulFunctionCall","src":"2101:20:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2091:6:16"},"nodeType":"YulFunctionCall","src":"2091:31:16"},"nodeType":"YulExpressionStatement","src":"2091:31:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2138:1:16","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2141:4:16","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2131:6:16"},"nodeType":"YulFunctionCall","src":"2131:15:16"},"nodeType":"YulExpressionStatement","src":"2131:15:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2162:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2165:4:16","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2155:6:16"},"nodeType":"YulFunctionCall","src":"2155:15:16"},"nodeType":"YulExpressionStatement","src":"2155:15:16"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"2049:127:16"},{"body":{"nodeType":"YulBlock","src":"2228:202:16","statements":[{"nodeType":"YulVariableDeclaration","src":"2238:58:16","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2260:6:16"},{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"2276:4:16"},{"kind":"number","nodeType":"YulLiteral","src":"2282:2:16","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2272:3:16"},"nodeType":"YulFunctionCall","src":"2272:13:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2291:2:16","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2287:3:16"},"nodeType":"YulFunctionCall","src":"2287:7:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2268:3:16"},"nodeType":"YulFunctionCall","src":"2268:27:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2256:3:16"},"nodeType":"YulFunctionCall","src":"2256:40:16"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"2242:10:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"2371:22:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2373:16:16"},"nodeType":"YulFunctionCall","src":"2373:18:16"},"nodeType":"YulExpressionStatement","src":"2373:18:16"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2314:10:16"},{"kind":"number","nodeType":"YulLiteral","src":"2326:18:16","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2311:2:16"},"nodeType":"YulFunctionCall","src":"2311:34:16"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2350:10:16"},{"name":"memPtr","nodeType":"YulIdentifier","src":"2362:6:16"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2347:2:16"},"nodeType":"YulFunctionCall","src":"2347:22:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2308:2:16"},"nodeType":"YulFunctionCall","src":"2308:62:16"},"nodeType":"YulIf","src":"2305:88:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2409:2:16","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2413:10:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2402:6:16"},"nodeType":"YulFunctionCall","src":"2402:22:16"},"nodeType":"YulExpressionStatement","src":"2402:22:16"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"2210:6:16","type":""},{"name":"size","nodeType":"YulTypedName","src":"2218:4:16","type":""}],"src":"2181:249:16"},{"body":{"nodeType":"YulBlock","src":"2504:114:16","statements":[{"body":{"nodeType":"YulBlock","src":"2548:22:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2550:16:16"},"nodeType":"YulFunctionCall","src":"2550:18:16"},"nodeType":"YulExpressionStatement","src":"2550:18:16"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2520:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"2528:18:16","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2517:2:16"},"nodeType":"YulFunctionCall","src":"2517:30:16"},"nodeType":"YulIf","src":"2514:56:16"},{"nodeType":"YulAssignment","src":"2579:33:16","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2595:1:16","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"2598:6:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2591:3:16"},"nodeType":"YulFunctionCall","src":"2591:14:16"},{"kind":"number","nodeType":"YulLiteral","src":"2607:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2587:3:16"},"nodeType":"YulFunctionCall","src":"2587:25:16"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"2579:4:16"}]}]},"name":"array_allocation_size_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"2484:6:16","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"2495:4:16","type":""}],"src":"2435:183:16"},{"body":{"nodeType":"YulBlock","src":"2687:660:16","statements":[{"body":{"nodeType":"YulBlock","src":"2736:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2745:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2748:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2738:6:16"},"nodeType":"YulFunctionCall","src":"2738:12:16"},"nodeType":"YulExpressionStatement","src":"2738:12:16"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2715:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"2723:4:16","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2711:3:16"},"nodeType":"YulFunctionCall","src":"2711:17:16"},{"name":"end","nodeType":"YulIdentifier","src":"2730:3:16"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2707:3:16"},"nodeType":"YulFunctionCall","src":"2707:27:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2700:6:16"},"nodeType":"YulFunctionCall","src":"2700:35:16"},"nodeType":"YulIf","src":"2697:55:16"},{"nodeType":"YulVariableDeclaration","src":"2761:30:16","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2784:6:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2771:12:16"},"nodeType":"YulFunctionCall","src":"2771:20:16"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2765:2:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2800:14:16","value":{"kind":"number","nodeType":"YulLiteral","src":"2810:4:16","type":"","value":"0x20"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"2804:2:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2823:53:16","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2873:2:16"}],"functionName":{"name":"array_allocation_size_array_uint256_dyn","nodeType":"YulIdentifier","src":"2833:39:16"},"nodeType":"YulFunctionCall","src":"2833:43:16"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"2827:2:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2885:23:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2905:2:16","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2899:5:16"},"nodeType":"YulFunctionCall","src":"2899:9:16"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"2889:6:16","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2937:6:16"},{"name":"_3","nodeType":"YulIdentifier","src":"2945:2:16"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"2917:19:16"},"nodeType":"YulFunctionCall","src":"2917:31:16"},"nodeType":"YulExpressionStatement","src":"2917:31:16"},{"nodeType":"YulVariableDeclaration","src":"2957:17:16","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"2968:6:16"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"2961:3:16","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2990:6:16"},{"name":"_1","nodeType":"YulIdentifier","src":"2998:2:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2983:6:16"},"nodeType":"YulFunctionCall","src":"2983:18:16"},"nodeType":"YulExpressionStatement","src":"2983:18:16"},{"nodeType":"YulAssignment","src":"3010:22:16","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3021:6:16"},{"name":"_2","nodeType":"YulIdentifier","src":"3029:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3017:3:16"},"nodeType":"YulFunctionCall","src":"3017:15:16"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3010:3:16"}]},{"nodeType":"YulVariableDeclaration","src":"3041:46:16","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3063:6:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3075:1:16","type":"","value":"5"},{"name":"_1","nodeType":"YulIdentifier","src":"3078:2:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3071:3:16"},"nodeType":"YulFunctionCall","src":"3071:10:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3059:3:16"},"nodeType":"YulFunctionCall","src":"3059:23:16"},{"name":"_2","nodeType":"YulIdentifier","src":"3084:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3055:3:16"},"nodeType":"YulFunctionCall","src":"3055:32:16"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"3045:6:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"3115:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3124:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3127:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3117:6:16"},"nodeType":"YulFunctionCall","src":"3117:12:16"},"nodeType":"YulExpressionStatement","src":"3117:12:16"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"3102:6:16"},{"name":"end","nodeType":"YulIdentifier","src":"3110:3:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3099:2:16"},"nodeType":"YulFunctionCall","src":"3099:15:16"},"nodeType":"YulIf","src":"3096:35:16"},{"nodeType":"YulVariableDeclaration","src":"3140:26:16","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3155:6:16"},{"name":"_2","nodeType":"YulIdentifier","src":"3163:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3151:3:16"},"nodeType":"YulFunctionCall","src":"3151:15:16"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"3144:3:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"3231:86:16","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3252:3:16"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3270:3:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3257:12:16"},"nodeType":"YulFunctionCall","src":"3257:17:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3245:6:16"},"nodeType":"YulFunctionCall","src":"3245:30:16"},"nodeType":"YulExpressionStatement","src":"3245:30:16"},{"nodeType":"YulAssignment","src":"3288:19:16","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3299:3:16"},{"name":"_2","nodeType":"YulIdentifier","src":"3304:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3295:3:16"},"nodeType":"YulFunctionCall","src":"3295:12:16"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3288:3:16"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3186:3:16"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"3191:6:16"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3183:2:16"},"nodeType":"YulFunctionCall","src":"3183:15:16"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3199:23:16","statements":[{"nodeType":"YulAssignment","src":"3201:19:16","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3212:3:16"},{"name":"_2","nodeType":"YulIdentifier","src":"3217:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3208:3:16"},"nodeType":"YulFunctionCall","src":"3208:12:16"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"3201:3:16"}]}]},"pre":{"nodeType":"YulBlock","src":"3179:3:16","statements":[]},"src":"3175:142:16"},{"nodeType":"YulAssignment","src":"3326:15:16","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"3335:6:16"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3326:5:16"}]}]},"name":"abi_decode_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2661:6:16","type":""},{"name":"end","nodeType":"YulTypedName","src":"2669:3:16","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2677:5:16","type":""}],"src":"2623:724:16"},{"body":{"nodeType":"YulBlock","src":"3404:503:16","statements":[{"body":{"nodeType":"YulBlock","src":"3453:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3462:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3465:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3455:6:16"},"nodeType":"YulFunctionCall","src":"3455:12:16"},"nodeType":"YulExpressionStatement","src":"3455:12:16"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3432:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"3440:4:16","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3428:3:16"},"nodeType":"YulFunctionCall","src":"3428:17:16"},{"name":"end","nodeType":"YulIdentifier","src":"3447:3:16"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3424:3:16"},"nodeType":"YulFunctionCall","src":"3424:27:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3417:6:16"},"nodeType":"YulFunctionCall","src":"3417:35:16"},"nodeType":"YulIf","src":"3414:55:16"},{"nodeType":"YulVariableDeclaration","src":"3478:30:16","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3501:6:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3488:12:16"},"nodeType":"YulFunctionCall","src":"3488:20:16"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3482:2:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"3547:22:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3549:16:16"},"nodeType":"YulFunctionCall","src":"3549:18:16"},"nodeType":"YulExpressionStatement","src":"3549:18:16"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"3523:2:16"},{"kind":"number","nodeType":"YulLiteral","src":"3527:18:16","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3520:2:16"},"nodeType":"YulFunctionCall","src":"3520:26:16"},"nodeType":"YulIf","src":"3517:52:16"},{"nodeType":"YulVariableDeclaration","src":"3578:23:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3598:2:16","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3592:5:16"},"nodeType":"YulFunctionCall","src":"3592:9:16"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"3582:6:16","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3630:6:16"},{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"3650:2:16"},{"kind":"number","nodeType":"YulLiteral","src":"3654:4:16","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3646:3:16"},"nodeType":"YulFunctionCall","src":"3646:13:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3665:2:16","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3661:3:16"},"nodeType":"YulFunctionCall","src":"3661:7:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3642:3:16"},"nodeType":"YulFunctionCall","src":"3642:27:16"},{"kind":"number","nodeType":"YulLiteral","src":"3671:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3638:3:16"},"nodeType":"YulFunctionCall","src":"3638:38:16"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"3610:19:16"},"nodeType":"YulFunctionCall","src":"3610:67:16"},"nodeType":"YulExpressionStatement","src":"3610:67:16"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3693:6:16"},{"name":"_1","nodeType":"YulIdentifier","src":"3701:2:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3686:6:16"},"nodeType":"YulFunctionCall","src":"3686:18:16"},"nodeType":"YulExpressionStatement","src":"3686:18:16"},{"body":{"nodeType":"YulBlock","src":"3752:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3761:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3764:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3754:6:16"},"nodeType":"YulFunctionCall","src":"3754:12:16"},"nodeType":"YulExpressionStatement","src":"3754:12:16"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3727:6:16"},{"name":"_1","nodeType":"YulIdentifier","src":"3735:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3723:3:16"},"nodeType":"YulFunctionCall","src":"3723:15:16"},{"kind":"number","nodeType":"YulLiteral","src":"3740:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3719:3:16"},"nodeType":"YulFunctionCall","src":"3719:26:16"},{"name":"end","nodeType":"YulIdentifier","src":"3747:3:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3716:2:16"},"nodeType":"YulFunctionCall","src":"3716:35:16"},"nodeType":"YulIf","src":"3713:55:16"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3794:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"3802:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3790:3:16"},"nodeType":"YulFunctionCall","src":"3790:17:16"},{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3813:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"3821:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3809:3:16"},"nodeType":"YulFunctionCall","src":"3809:17:16"},{"name":"_1","nodeType":"YulIdentifier","src":"3828:2:16"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"3777:12:16"},"nodeType":"YulFunctionCall","src":"3777:54:16"},"nodeType":"YulExpressionStatement","src":"3777:54:16"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3855:6:16"},{"name":"_1","nodeType":"YulIdentifier","src":"3863:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3851:3:16"},"nodeType":"YulFunctionCall","src":"3851:15:16"},{"kind":"number","nodeType":"YulLiteral","src":"3868:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3847:3:16"},"nodeType":"YulFunctionCall","src":"3847:26:16"},{"kind":"number","nodeType":"YulLiteral","src":"3875:1:16","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3840:6:16"},"nodeType":"YulFunctionCall","src":"3840:37:16"},"nodeType":"YulExpressionStatement","src":"3840:37:16"},{"nodeType":"YulAssignment","src":"3886:15:16","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"3895:6:16"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3886:5:16"}]}]},"name":"abi_decode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3378:6:16","type":""},{"name":"end","nodeType":"YulTypedName","src":"3386:3:16","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3394:5:16","type":""}],"src":"3352:555:16"},{"body":{"nodeType":"YulBlock","src":"4109:746:16","statements":[{"body":{"nodeType":"YulBlock","src":"4156:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4165:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4168:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4158:6:16"},"nodeType":"YulFunctionCall","src":"4158:12:16"},"nodeType":"YulExpressionStatement","src":"4158:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4130:7:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"4139:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4126:3:16"},"nodeType":"YulFunctionCall","src":"4126:23:16"},{"kind":"number","nodeType":"YulLiteral","src":"4151:3:16","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4122:3:16"},"nodeType":"YulFunctionCall","src":"4122:33:16"},"nodeType":"YulIf","src":"4119:53:16"},{"nodeType":"YulAssignment","src":"4181:39:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4210:9:16"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4191:18:16"},"nodeType":"YulFunctionCall","src":"4191:29:16"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4181:6:16"}]},{"nodeType":"YulAssignment","src":"4229:48:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4262:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"4273:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4258:3:16"},"nodeType":"YulFunctionCall","src":"4258:18:16"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4239:18:16"},"nodeType":"YulFunctionCall","src":"4239:38:16"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4229:6:16"}]},{"nodeType":"YulVariableDeclaration","src":"4286:46:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4317:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"4328:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4313:3:16"},"nodeType":"YulFunctionCall","src":"4313:18:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4300:12:16"},"nodeType":"YulFunctionCall","src":"4300:32:16"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4290:6:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4341:28:16","value":{"kind":"number","nodeType":"YulLiteral","src":"4351:18:16","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4345:2:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"4396:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4405:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4408:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4398:6:16"},"nodeType":"YulFunctionCall","src":"4398:12:16"},"nodeType":"YulExpressionStatement","src":"4398:12:16"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4384:6:16"},{"name":"_1","nodeType":"YulIdentifier","src":"4392:2:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4381:2:16"},"nodeType":"YulFunctionCall","src":"4381:14:16"},"nodeType":"YulIf","src":"4378:34:16"},{"nodeType":"YulAssignment","src":"4421:71:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4464:9:16"},{"name":"offset","nodeType":"YulIdentifier","src":"4475:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4460:3:16"},"nodeType":"YulFunctionCall","src":"4460:22:16"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4484:7:16"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"4431:28:16"},"nodeType":"YulFunctionCall","src":"4431:61:16"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4421:6:16"}]},{"nodeType":"YulVariableDeclaration","src":"4501:48:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4534:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"4545:2:16","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4530:3:16"},"nodeType":"YulFunctionCall","src":"4530:18:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4517:12:16"},"nodeType":"YulFunctionCall","src":"4517:32:16"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"4505:8:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"4578:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4587:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4590:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4580:6:16"},"nodeType":"YulFunctionCall","src":"4580:12:16"},"nodeType":"YulExpressionStatement","src":"4580:12:16"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"4564:8:16"},{"name":"_1","nodeType":"YulIdentifier","src":"4574:2:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4561:2:16"},"nodeType":"YulFunctionCall","src":"4561:16:16"},"nodeType":"YulIf","src":"4558:36:16"},{"nodeType":"YulAssignment","src":"4603:73:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4646:9:16"},{"name":"offset_1","nodeType":"YulIdentifier","src":"4657:8:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4642:3:16"},"nodeType":"YulFunctionCall","src":"4642:24:16"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4668:7:16"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"4613:28:16"},"nodeType":"YulFunctionCall","src":"4613:63:16"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"4603:6:16"}]},{"nodeType":"YulVariableDeclaration","src":"4685:49:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4718:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"4729:3:16","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4714:3:16"},"nodeType":"YulFunctionCall","src":"4714:19:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4701:12:16"},"nodeType":"YulFunctionCall","src":"4701:33:16"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"4689:8:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"4763:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4772:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4775:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4765:6:16"},"nodeType":"YulFunctionCall","src":"4765:12:16"},"nodeType":"YulExpressionStatement","src":"4765:12:16"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"4749:8:16"},{"name":"_1","nodeType":"YulIdentifier","src":"4759:2:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4746:2:16"},"nodeType":"YulFunctionCall","src":"4746:16:16"},"nodeType":"YulIf","src":"4743:36:16"},{"nodeType":"YulAssignment","src":"4788:61:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4819:9:16"},{"name":"offset_2","nodeType":"YulIdentifier","src":"4830:8:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4815:3:16"},"nodeType":"YulFunctionCall","src":"4815:24:16"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4841:7:16"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"4798:16:16"},"nodeType":"YulFunctionCall","src":"4798:51:16"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"4788:6:16"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4043:9:16","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4054:7:16","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4066:6:16","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4074:6:16","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4082:6:16","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4090:6:16","type":""},{"name":"value4","nodeType":"YulTypedName","src":"4098:6:16","type":""}],"src":"3912:943:16"},{"body":{"nodeType":"YulBlock","src":"4997:1071:16","statements":[{"body":{"nodeType":"YulBlock","src":"5043:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5052:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5055:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5045:6:16"},"nodeType":"YulFunctionCall","src":"5045:12:16"},"nodeType":"YulExpressionStatement","src":"5045:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5018:7:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"5027:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5014:3:16"},"nodeType":"YulFunctionCall","src":"5014:23:16"},{"kind":"number","nodeType":"YulLiteral","src":"5039:2:16","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5010:3:16"},"nodeType":"YulFunctionCall","src":"5010:32:16"},"nodeType":"YulIf","src":"5007:52:16"},{"nodeType":"YulVariableDeclaration","src":"5068:37:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5095:9:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5082:12:16"},"nodeType":"YulFunctionCall","src":"5082:23:16"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5072:6:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5114:28:16","value":{"kind":"number","nodeType":"YulLiteral","src":"5124:18:16","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5118:2:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"5169:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5178:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5181:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5171:6:16"},"nodeType":"YulFunctionCall","src":"5171:12:16"},"nodeType":"YulExpressionStatement","src":"5171:12:16"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5157:6:16"},{"name":"_1","nodeType":"YulIdentifier","src":"5165:2:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5154:2:16"},"nodeType":"YulFunctionCall","src":"5154:14:16"},"nodeType":"YulIf","src":"5151:34:16"},{"nodeType":"YulVariableDeclaration","src":"5194:32:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5208:9:16"},{"name":"offset","nodeType":"YulIdentifier","src":"5219:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5204:3:16"},"nodeType":"YulFunctionCall","src":"5204:22:16"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"5198:2:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"5274:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5283:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5286:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5276:6:16"},"nodeType":"YulFunctionCall","src":"5276:12:16"},"nodeType":"YulExpressionStatement","src":"5276:12:16"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"5253:2:16"},{"kind":"number","nodeType":"YulLiteral","src":"5257:4:16","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5249:3:16"},"nodeType":"YulFunctionCall","src":"5249:13:16"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5264:7:16"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5245:3:16"},"nodeType":"YulFunctionCall","src":"5245:27:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5238:6:16"},"nodeType":"YulFunctionCall","src":"5238:35:16"},"nodeType":"YulIf","src":"5235:55:16"},{"nodeType":"YulVariableDeclaration","src":"5299:26:16","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"5322:2:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5309:12:16"},"nodeType":"YulFunctionCall","src":"5309:16:16"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"5303:2:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5334:14:16","value":{"kind":"number","nodeType":"YulLiteral","src":"5344:4:16","type":"","value":"0x20"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"5338:2:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5357:53:16","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"5407:2:16"}],"functionName":{"name":"array_allocation_size_array_uint256_dyn","nodeType":"YulIdentifier","src":"5367:39:16"},"nodeType":"YulFunctionCall","src":"5367:43:16"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"5361:2:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5419:23:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5439:2:16","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5433:5:16"},"nodeType":"YulFunctionCall","src":"5433:9:16"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"5423:6:16","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5471:6:16"},{"name":"_5","nodeType":"YulIdentifier","src":"5479:2:16"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"5451:19:16"},"nodeType":"YulFunctionCall","src":"5451:31:16"},"nodeType":"YulExpressionStatement","src":"5451:31:16"},{"nodeType":"YulVariableDeclaration","src":"5491:17:16","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"5502:6:16"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"5495:3:16","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5524:6:16"},{"name":"_3","nodeType":"YulIdentifier","src":"5532:2:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5517:6:16"},"nodeType":"YulFunctionCall","src":"5517:18:16"},"nodeType":"YulExpressionStatement","src":"5517:18:16"},{"nodeType":"YulAssignment","src":"5544:22:16","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5555:6:16"},{"name":"_4","nodeType":"YulIdentifier","src":"5563:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5551:3:16"},"nodeType":"YulFunctionCall","src":"5551:15:16"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"5544:3:16"}]},{"nodeType":"YulVariableDeclaration","src":"5575:42:16","value":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"5597:2:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5605:1:16","type":"","value":"5"},{"name":"_3","nodeType":"YulIdentifier","src":"5608:2:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5601:3:16"},"nodeType":"YulFunctionCall","src":"5601:10:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5593:3:16"},"nodeType":"YulFunctionCall","src":"5593:19:16"},{"name":"_4","nodeType":"YulIdentifier","src":"5614:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5589:3:16"},"nodeType":"YulFunctionCall","src":"5589:28:16"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"5579:6:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"5649:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5658:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5661:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5651:6:16"},"nodeType":"YulFunctionCall","src":"5651:12:16"},"nodeType":"YulExpressionStatement","src":"5651:12:16"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"5632:6:16"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5640:7:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5629:2:16"},"nodeType":"YulFunctionCall","src":"5629:19:16"},"nodeType":"YulIf","src":"5626:39:16"},{"nodeType":"YulVariableDeclaration","src":"5674:22:16","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"5689:2:16"},{"name":"_4","nodeType":"YulIdentifier","src":"5693:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5685:3:16"},"nodeType":"YulFunctionCall","src":"5685:11:16"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"5678:3:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"5761:92:16","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"5782:3:16"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5806:3:16"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"5787:18:16"},"nodeType":"YulFunctionCall","src":"5787:23:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5775:6:16"},"nodeType":"YulFunctionCall","src":"5775:36:16"},"nodeType":"YulExpressionStatement","src":"5775:36:16"},{"nodeType":"YulAssignment","src":"5824:19:16","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"5835:3:16"},{"name":"_4","nodeType":"YulIdentifier","src":"5840:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5831:3:16"},"nodeType":"YulFunctionCall","src":"5831:12:16"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"5824:3:16"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5716:3:16"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"5721:6:16"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5713:2:16"},"nodeType":"YulFunctionCall","src":"5713:15:16"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"5729:23:16","statements":[{"nodeType":"YulAssignment","src":"5731:19:16","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5742:3:16"},{"name":"_4","nodeType":"YulIdentifier","src":"5747:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5738:3:16"},"nodeType":"YulFunctionCall","src":"5738:12:16"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"5731:3:16"}]}]},"pre":{"nodeType":"YulBlock","src":"5709:3:16","statements":[]},"src":"5705:148:16"},{"nodeType":"YulAssignment","src":"5862:16:16","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"5872:6:16"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5862:6:16"}]},{"nodeType":"YulVariableDeclaration","src":"5887:48:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5920:9:16"},{"name":"_4","nodeType":"YulIdentifier","src":"5931:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5916:3:16"},"nodeType":"YulFunctionCall","src":"5916:18:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5903:12:16"},"nodeType":"YulFunctionCall","src":"5903:32:16"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"5891:8:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"5964:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5973:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5976:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5966:6:16"},"nodeType":"YulFunctionCall","src":"5966:12:16"},"nodeType":"YulExpressionStatement","src":"5966:12:16"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"5950:8:16"},{"name":"_1","nodeType":"YulIdentifier","src":"5960:2:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5947:2:16"},"nodeType":"YulFunctionCall","src":"5947:16:16"},"nodeType":"YulIf","src":"5944:36:16"},{"nodeType":"YulAssignment","src":"5989:73:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6032:9:16"},{"name":"offset_1","nodeType":"YulIdentifier","src":"6043:8:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6028:3:16"},"nodeType":"YulFunctionCall","src":"6028:24:16"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6054:7:16"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"5999:28:16"},"nodeType":"YulFunctionCall","src":"5999:63:16"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5989:6:16"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4955:9:16","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4966:7:16","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4978:6:16","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4986:6:16","type":""}],"src":"4860:1208:16"},{"body":{"nodeType":"YulBlock","src":"6134:374:16","statements":[{"nodeType":"YulVariableDeclaration","src":"6144:26:16","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6164:5:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6158:5:16"},"nodeType":"YulFunctionCall","src":"6158:12:16"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"6148:6:16","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6186:3:16"},{"name":"length","nodeType":"YulIdentifier","src":"6191:6:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6179:6:16"},"nodeType":"YulFunctionCall","src":"6179:19:16"},"nodeType":"YulExpressionStatement","src":"6179:19:16"},{"nodeType":"YulVariableDeclaration","src":"6207:14:16","value":{"kind":"number","nodeType":"YulLiteral","src":"6217:4:16","type":"","value":"0x20"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"6211:2:16","type":""}]},{"nodeType":"YulAssignment","src":"6230:19:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6241:3:16"},{"name":"_1","nodeType":"YulIdentifier","src":"6246:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6237:3:16"},"nodeType":"YulFunctionCall","src":"6237:12:16"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6230:3:16"}]},{"nodeType":"YulVariableDeclaration","src":"6258:28:16","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6276:5:16"},{"name":"_1","nodeType":"YulIdentifier","src":"6283:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6272:3:16"},"nodeType":"YulFunctionCall","src":"6272:14:16"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"6262:6:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6295:10:16","value":{"kind":"number","nodeType":"YulLiteral","src":"6304:1:16","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"6299:1:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"6363:120:16","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6384:3:16"},{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"6395:6:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6389:5:16"},"nodeType":"YulFunctionCall","src":"6389:13:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6377:6:16"},"nodeType":"YulFunctionCall","src":"6377:26:16"},"nodeType":"YulExpressionStatement","src":"6377:26:16"},{"nodeType":"YulAssignment","src":"6416:19:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6427:3:16"},{"name":"_1","nodeType":"YulIdentifier","src":"6432:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6423:3:16"},"nodeType":"YulFunctionCall","src":"6423:12:16"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6416:3:16"}]},{"nodeType":"YulAssignment","src":"6448:25:16","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"6462:6:16"},{"name":"_1","nodeType":"YulIdentifier","src":"6470:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6458:3:16"},"nodeType":"YulFunctionCall","src":"6458:15:16"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"6448:6:16"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6325:1:16"},{"name":"length","nodeType":"YulIdentifier","src":"6328:6:16"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6322:2:16"},"nodeType":"YulFunctionCall","src":"6322:13:16"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"6336:18:16","statements":[{"nodeType":"YulAssignment","src":"6338:14:16","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6347:1:16"},{"kind":"number","nodeType":"YulLiteral","src":"6350:1:16","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6343:3:16"},"nodeType":"YulFunctionCall","src":"6343:9:16"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"6338:1:16"}]}]},"pre":{"nodeType":"YulBlock","src":"6318:3:16","statements":[]},"src":"6314:169:16"},{"nodeType":"YulAssignment","src":"6492:10:16","value":{"name":"pos","nodeType":"YulIdentifier","src":"6499:3:16"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"6492:3:16"}]}]},"name":"abi_encode_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6111:5:16","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6118:3:16","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6126:3:16","type":""}],"src":"6073:435:16"},{"body":{"nodeType":"YulBlock","src":"6664:110:16","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6681:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"6692:2:16","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6674:6:16"},"nodeType":"YulFunctionCall","src":"6674:21:16"},"nodeType":"YulExpressionStatement","src":"6674:21:16"},{"nodeType":"YulAssignment","src":"6704:64:16","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6741:6:16"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6753:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"6764:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6749:3:16"},"nodeType":"YulFunctionCall","src":"6749:18:16"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"6712:28:16"},"nodeType":"YulFunctionCall","src":"6712:56:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6704:4:16"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6633:9:16","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6644:6:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6655:4:16","type":""}],"src":"6513:261:16"},{"body":{"nodeType":"YulBlock","src":"6863:263:16","statements":[{"body":{"nodeType":"YulBlock","src":"6909:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6918:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6921:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6911:6:16"},"nodeType":"YulFunctionCall","src":"6911:12:16"},"nodeType":"YulExpressionStatement","src":"6911:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6884:7:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"6893:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6880:3:16"},"nodeType":"YulFunctionCall","src":"6880:23:16"},{"kind":"number","nodeType":"YulLiteral","src":"6905:2:16","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6876:3:16"},"nodeType":"YulFunctionCall","src":"6876:32:16"},"nodeType":"YulIf","src":"6873:52:16"},{"nodeType":"YulAssignment","src":"6934:39:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6963:9:16"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"6944:18:16"},"nodeType":"YulFunctionCall","src":"6944:29:16"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6934:6:16"}]},{"nodeType":"YulVariableDeclaration","src":"6982:45:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7012:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"7023:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7008:3:16"},"nodeType":"YulFunctionCall","src":"7008:18:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6995:12:16"},"nodeType":"YulFunctionCall","src":"6995:32:16"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"6986:5:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"7080:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7089:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7092:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7082:6:16"},"nodeType":"YulFunctionCall","src":"7082:12:16"},"nodeType":"YulExpressionStatement","src":"7082:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7049:5:16"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7070:5:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7063:6:16"},"nodeType":"YulFunctionCall","src":"7063:13:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7056:6:16"},"nodeType":"YulFunctionCall","src":"7056:21:16"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"7046:2:16"},"nodeType":"YulFunctionCall","src":"7046:32:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7039:6:16"},"nodeType":"YulFunctionCall","src":"7039:40:16"},"nodeType":"YulIf","src":"7036:60:16"},{"nodeType":"YulAssignment","src":"7105:15:16","value":{"name":"value","nodeType":"YulIdentifier","src":"7115:5:16"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7105:6:16"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6821:9:16","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6832:7:16","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6844:6:16","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6852:6:16","type":""}],"src":"6779:347:16"},{"body":{"nodeType":"YulBlock","src":"7218:173:16","statements":[{"body":{"nodeType":"YulBlock","src":"7264:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7273:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7276:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7266:6:16"},"nodeType":"YulFunctionCall","src":"7266:12:16"},"nodeType":"YulExpressionStatement","src":"7266:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7239:7:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"7248:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7235:3:16"},"nodeType":"YulFunctionCall","src":"7235:23:16"},{"kind":"number","nodeType":"YulLiteral","src":"7260:2:16","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7231:3:16"},"nodeType":"YulFunctionCall","src":"7231:32:16"},"nodeType":"YulIf","src":"7228:52:16"},{"nodeType":"YulAssignment","src":"7289:39:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7318:9:16"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"7299:18:16"},"nodeType":"YulFunctionCall","src":"7299:29:16"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7289:6:16"}]},{"nodeType":"YulAssignment","src":"7337:48:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7370:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"7381:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7366:3:16"},"nodeType":"YulFunctionCall","src":"7366:18:16"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"7347:18:16"},"nodeType":"YulFunctionCall","src":"7347:38:16"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7337:6:16"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7176:9:16","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7187:7:16","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7199:6:16","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7207:6:16","type":""}],"src":"7131:260:16"},{"body":{"nodeType":"YulBlock","src":"7543:459:16","statements":[{"body":{"nodeType":"YulBlock","src":"7590:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7599:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7602:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7592:6:16"},"nodeType":"YulFunctionCall","src":"7592:12:16"},"nodeType":"YulExpressionStatement","src":"7592:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7564:7:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"7573:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7560:3:16"},"nodeType":"YulFunctionCall","src":"7560:23:16"},{"kind":"number","nodeType":"YulLiteral","src":"7585:3:16","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7556:3:16"},"nodeType":"YulFunctionCall","src":"7556:33:16"},"nodeType":"YulIf","src":"7553:53:16"},{"nodeType":"YulAssignment","src":"7615:39:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7644:9:16"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"7625:18:16"},"nodeType":"YulFunctionCall","src":"7625:29:16"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7615:6:16"}]},{"nodeType":"YulAssignment","src":"7663:48:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7696:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"7707:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7692:3:16"},"nodeType":"YulFunctionCall","src":"7692:18:16"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"7673:18:16"},"nodeType":"YulFunctionCall","src":"7673:38:16"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7663:6:16"}]},{"nodeType":"YulAssignment","src":"7720:42:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7747:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"7758:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7743:3:16"},"nodeType":"YulFunctionCall","src":"7743:18:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7730:12:16"},"nodeType":"YulFunctionCall","src":"7730:32:16"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"7720:6:16"}]},{"nodeType":"YulAssignment","src":"7771:42:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7798:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"7809:2:16","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7794:3:16"},"nodeType":"YulFunctionCall","src":"7794:18:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7781:12:16"},"nodeType":"YulFunctionCall","src":"7781:32:16"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"7771:6:16"}]},{"nodeType":"YulVariableDeclaration","src":"7822:47:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7853:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"7864:3:16","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7849:3:16"},"nodeType":"YulFunctionCall","src":"7849:19:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7836:12:16"},"nodeType":"YulFunctionCall","src":"7836:33:16"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7826:6:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"7912:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7921:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7924:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7914:6:16"},"nodeType":"YulFunctionCall","src":"7914:12:16"},"nodeType":"YulExpressionStatement","src":"7914:12:16"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7884:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"7892:18:16","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7881:2:16"},"nodeType":"YulFunctionCall","src":"7881:30:16"},"nodeType":"YulIf","src":"7878:50:16"},{"nodeType":"YulAssignment","src":"7937:59:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7968:9:16"},{"name":"offset","nodeType":"YulIdentifier","src":"7979:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7964:3:16"},"nodeType":"YulFunctionCall","src":"7964:22:16"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7988:7:16"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"7947:16:16"},"nodeType":"YulFunctionCall","src":"7947:49:16"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"7937:6:16"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7477:9:16","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7488:7:16","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7500:6:16","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7508:6:16","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7516:6:16","type":""},{"name":"value3","nodeType":"YulTypedName","src":"7524:6:16","type":""},{"name":"value4","nodeType":"YulTypedName","src":"7532:6:16","type":""}],"src":"7396:606:16"},{"body":{"nodeType":"YulBlock","src":"8181:232:16","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8198:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"8209:2:16","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8191:6:16"},"nodeType":"YulFunctionCall","src":"8191:21:16"},"nodeType":"YulExpressionStatement","src":"8191:21:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8232:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"8243:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8228:3:16"},"nodeType":"YulFunctionCall","src":"8228:18:16"},{"kind":"number","nodeType":"YulLiteral","src":"8248:2:16","type":"","value":"42"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8221:6:16"},"nodeType":"YulFunctionCall","src":"8221:30:16"},"nodeType":"YulExpressionStatement","src":"8221:30:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8271:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"8282:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8267:3:16"},"nodeType":"YulFunctionCall","src":"8267:18:16"},{"hexValue":"455243313135353a2061646472657373207a65726f206973206e6f7420612076","kind":"string","nodeType":"YulLiteral","src":"8287:34:16","type":"","value":"ERC1155: address zero is not a v"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8260:6:16"},"nodeType":"YulFunctionCall","src":"8260:62:16"},"nodeType":"YulExpressionStatement","src":"8260:62:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8342:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"8353:2:16","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8338:3:16"},"nodeType":"YulFunctionCall","src":"8338:18:16"},{"hexValue":"616c6964206f776e6572","kind":"string","nodeType":"YulLiteral","src":"8358:12:16","type":"","value":"alid owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8331:6:16"},"nodeType":"YulFunctionCall","src":"8331:40:16"},"nodeType":"YulExpressionStatement","src":"8331:40:16"},{"nodeType":"YulAssignment","src":"8380:27:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8392:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"8403:3:16","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8388:3:16"},"nodeType":"YulFunctionCall","src":"8388:19:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8380:4:16"}]}]},"name":"abi_encode_tuple_t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8158:9:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8172:4:16","type":""}],"src":"8007:406:16"},{"body":{"nodeType":"YulBlock","src":"8473:325:16","statements":[{"nodeType":"YulAssignment","src":"8483:22:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8497:1:16","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"8500:4:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"8493:3:16"},"nodeType":"YulFunctionCall","src":"8493:12:16"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"8483:6:16"}]},{"nodeType":"YulVariableDeclaration","src":"8514:38:16","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"8544:4:16"},{"kind":"number","nodeType":"YulLiteral","src":"8550:1:16","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8540:3:16"},"nodeType":"YulFunctionCall","src":"8540:12:16"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"8518:18:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"8591:31:16","statements":[{"nodeType":"YulAssignment","src":"8593:27:16","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8607:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"8615:4:16","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8603:3:16"},"nodeType":"YulFunctionCall","src":"8603:17:16"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"8593:6:16"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"8571:18:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8564:6:16"},"nodeType":"YulFunctionCall","src":"8564:26:16"},"nodeType":"YulIf","src":"8561:61:16"},{"body":{"nodeType":"YulBlock","src":"8681:111:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8702:1:16","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8709:3:16","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"8714:10:16","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8705:3:16"},"nodeType":"YulFunctionCall","src":"8705:20:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8695:6:16"},"nodeType":"YulFunctionCall","src":"8695:31:16"},"nodeType":"YulExpressionStatement","src":"8695:31:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8746:1:16","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"8749:4:16","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8739:6:16"},"nodeType":"YulFunctionCall","src":"8739:15:16"},"nodeType":"YulExpressionStatement","src":"8739:15:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8774:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8777:4:16","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8767:6:16"},"nodeType":"YulFunctionCall","src":"8767:15:16"},"nodeType":"YulExpressionStatement","src":"8767:15:16"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"8637:18:16"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8660:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"8668:2:16","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8657:2:16"},"nodeType":"YulFunctionCall","src":"8657:14:16"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"8634:2:16"},"nodeType":"YulFunctionCall","src":"8634:38:16"},"nodeType":"YulIf","src":"8631:161:16"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"8453:4:16","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"8462:6:16","type":""}],"src":"8418:380:16"},{"body":{"nodeType":"YulBlock","src":"8977:236:16","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8994:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"9005:2:16","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8987:6:16"},"nodeType":"YulFunctionCall","src":"8987:21:16"},"nodeType":"YulExpressionStatement","src":"8987:21:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9028:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"9039:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9024:3:16"},"nodeType":"YulFunctionCall","src":"9024:18:16"},{"kind":"number","nodeType":"YulLiteral","src":"9044:2:16","type":"","value":"46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9017:6:16"},"nodeType":"YulFunctionCall","src":"9017:30:16"},"nodeType":"YulExpressionStatement","src":"9017:30:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9067:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"9078:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9063:3:16"},"nodeType":"YulFunctionCall","src":"9063:18:16"},{"hexValue":"455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e","kind":"string","nodeType":"YulLiteral","src":"9083:34:16","type":"","value":"ERC1155: caller is not token own"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9056:6:16"},"nodeType":"YulFunctionCall","src":"9056:62:16"},"nodeType":"YulExpressionStatement","src":"9056:62:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9138:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"9149:2:16","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9134:3:16"},"nodeType":"YulFunctionCall","src":"9134:18:16"},{"hexValue":"6572206f7220617070726f766564","kind":"string","nodeType":"YulLiteral","src":"9154:16:16","type":"","value":"er or approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9127:6:16"},"nodeType":"YulFunctionCall","src":"9127:44:16"},"nodeType":"YulExpressionStatement","src":"9127:44:16"},{"nodeType":"YulAssignment","src":"9180:27:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9192:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"9203:3:16","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9188:3:16"},"nodeType":"YulFunctionCall","src":"9188:19:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9180:4:16"}]}]},"name":"abi_encode_tuple_t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8954:9:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8968:4:16","type":""}],"src":"8803:410:16"},{"body":{"nodeType":"YulBlock","src":"9392:231:16","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9409:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"9420:2:16","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9402:6:16"},"nodeType":"YulFunctionCall","src":"9402:21:16"},"nodeType":"YulExpressionStatement","src":"9402:21:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9443:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"9454:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9439:3:16"},"nodeType":"YulFunctionCall","src":"9439:18:16"},{"kind":"number","nodeType":"YulLiteral","src":"9459:2:16","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9432:6:16"},"nodeType":"YulFunctionCall","src":"9432:30:16"},"nodeType":"YulExpressionStatement","src":"9432:30:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9482:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"9493:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9478:3:16"},"nodeType":"YulFunctionCall","src":"9478:18:16"},{"hexValue":"455243313135353a206163636f756e747320616e6420696473206c656e677468","kind":"string","nodeType":"YulLiteral","src":"9498:34:16","type":"","value":"ERC1155: accounts and ids length"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9471:6:16"},"nodeType":"YulFunctionCall","src":"9471:62:16"},"nodeType":"YulExpressionStatement","src":"9471:62:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9553:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"9564:2:16","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9549:3:16"},"nodeType":"YulFunctionCall","src":"9549:18:16"},{"hexValue":"206d69736d61746368","kind":"string","nodeType":"YulLiteral","src":"9569:11:16","type":"","value":" mismatch"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9542:6:16"},"nodeType":"YulFunctionCall","src":"9542:39:16"},"nodeType":"YulExpressionStatement","src":"9542:39:16"},{"nodeType":"YulAssignment","src":"9590:27:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9602:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"9613:3:16","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9598:3:16"},"nodeType":"YulFunctionCall","src":"9598:19:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9590:4:16"}]}]},"name":"abi_encode_tuple_t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9369:9:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9383:4:16","type":""}],"src":"9218:405:16"},{"body":{"nodeType":"YulBlock","src":"9660:95:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9677:1:16","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9684:3:16","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"9689:10:16","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9680:3:16"},"nodeType":"YulFunctionCall","src":"9680:20:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9670:6:16"},"nodeType":"YulFunctionCall","src":"9670:31:16"},"nodeType":"YulExpressionStatement","src":"9670:31:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9717:1:16","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9720:4:16","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9710:6:16"},"nodeType":"YulFunctionCall","src":"9710:15:16"},"nodeType":"YulExpressionStatement","src":"9710:15:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9741:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9744:4:16","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9734:6:16"},"nodeType":"YulFunctionCall","src":"9734:15:16"},"nodeType":"YulExpressionStatement","src":"9734:15:16"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"9628:127:16"},{"body":{"nodeType":"YulBlock","src":"9792:95:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9809:1:16","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9816:3:16","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"9821:10:16","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9812:3:16"},"nodeType":"YulFunctionCall","src":"9812:20:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9802:6:16"},"nodeType":"YulFunctionCall","src":"9802:31:16"},"nodeType":"YulExpressionStatement","src":"9802:31:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9849:1:16","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9852:4:16","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9842:6:16"},"nodeType":"YulFunctionCall","src":"9842:15:16"},"nodeType":"YulExpressionStatement","src":"9842:15:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9873:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9876:4:16","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9866:6:16"},"nodeType":"YulFunctionCall","src":"9866:15:16"},"nodeType":"YulExpressionStatement","src":"9866:15:16"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"9760:127:16"},{"body":{"nodeType":"YulBlock","src":"9939:88:16","statements":[{"body":{"nodeType":"YulBlock","src":"9970:22:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"9972:16:16"},"nodeType":"YulFunctionCall","src":"9972:18:16"},"nodeType":"YulExpressionStatement","src":"9972:18:16"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9955:5:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9966:1:16","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"9962:3:16"},"nodeType":"YulFunctionCall","src":"9962:6:16"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"9952:2:16"},"nodeType":"YulFunctionCall","src":"9952:17:16"},"nodeType":"YulIf","src":"9949:43:16"},{"nodeType":"YulAssignment","src":"10001:20:16","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10012:5:16"},{"kind":"number","nodeType":"YulLiteral","src":"10019:1:16","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10008:3:16"},"nodeType":"YulFunctionCall","src":"10008:13:16"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"10001:3:16"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9921:5:16","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"9931:3:16","type":""}],"src":"9892:135:16"},{"body":{"nodeType":"YulBlock","src":"10206:230:16","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10223:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"10234:2:16","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10216:6:16"},"nodeType":"YulFunctionCall","src":"10216:21:16"},"nodeType":"YulExpressionStatement","src":"10216:21:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10257:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"10268:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10253:3:16"},"nodeType":"YulFunctionCall","src":"10253:18:16"},{"kind":"number","nodeType":"YulLiteral","src":"10273:2:16","type":"","value":"40"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10246:6:16"},"nodeType":"YulFunctionCall","src":"10246:30:16"},"nodeType":"YulExpressionStatement","src":"10246:30:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10296:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"10307:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10292:3:16"},"nodeType":"YulFunctionCall","src":"10292:18:16"},{"hexValue":"455243313135353a2069647320616e6420616d6f756e7473206c656e67746820","kind":"string","nodeType":"YulLiteral","src":"10312:34:16","type":"","value":"ERC1155: ids and amounts length "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10285:6:16"},"nodeType":"YulFunctionCall","src":"10285:62:16"},"nodeType":"YulExpressionStatement","src":"10285:62:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10367:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"10378:2:16","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10363:3:16"},"nodeType":"YulFunctionCall","src":"10363:18:16"},{"hexValue":"6d69736d61746368","kind":"string","nodeType":"YulLiteral","src":"10383:10:16","type":"","value":"mismatch"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10356:6:16"},"nodeType":"YulFunctionCall","src":"10356:38:16"},"nodeType":"YulExpressionStatement","src":"10356:38:16"},{"nodeType":"YulAssignment","src":"10403:27:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10415:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"10426:3:16","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10411:3:16"},"nodeType":"YulFunctionCall","src":"10411:19:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10403:4:16"}]}]},"name":"abi_encode_tuple_t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10183:9:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10197:4:16","type":""}],"src":"10032:404:16"},{"body":{"nodeType":"YulBlock","src":"10615:227:16","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10632:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"10643:2:16","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10625:6:16"},"nodeType":"YulFunctionCall","src":"10625:21:16"},"nodeType":"YulExpressionStatement","src":"10625:21:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10666:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"10677:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10662:3:16"},"nodeType":"YulFunctionCall","src":"10662:18:16"},{"kind":"number","nodeType":"YulLiteral","src":"10682:2:16","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10655:6:16"},"nodeType":"YulFunctionCall","src":"10655:30:16"},"nodeType":"YulExpressionStatement","src":"10655:30:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10705:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"10716:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10701:3:16"},"nodeType":"YulFunctionCall","src":"10701:18:16"},{"hexValue":"455243313135353a207472616e7366657220746f20746865207a65726f206164","kind":"string","nodeType":"YulLiteral","src":"10721:34:16","type":"","value":"ERC1155: transfer to the zero ad"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10694:6:16"},"nodeType":"YulFunctionCall","src":"10694:62:16"},"nodeType":"YulExpressionStatement","src":"10694:62:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10776:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"10787:2:16","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10772:3:16"},"nodeType":"YulFunctionCall","src":"10772:18:16"},{"hexValue":"6472657373","kind":"string","nodeType":"YulLiteral","src":"10792:7:16","type":"","value":"dress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10765:6:16"},"nodeType":"YulFunctionCall","src":"10765:35:16"},"nodeType":"YulExpressionStatement","src":"10765:35:16"},{"nodeType":"YulAssignment","src":"10809:27:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10821:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"10832:3:16","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10817:3:16"},"nodeType":"YulFunctionCall","src":"10817:19:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10809:4:16"}]}]},"name":"abi_encode_tuple_t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10592:9:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10606:4:16","type":""}],"src":"10441:401:16"},{"body":{"nodeType":"YulBlock","src":"11021:232:16","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11038:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"11049:2:16","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11031:6:16"},"nodeType":"YulFunctionCall","src":"11031:21:16"},"nodeType":"YulExpressionStatement","src":"11031:21:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11072:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"11083:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11068:3:16"},"nodeType":"YulFunctionCall","src":"11068:18:16"},{"kind":"number","nodeType":"YulLiteral","src":"11088:2:16","type":"","value":"42"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11061:6:16"},"nodeType":"YulFunctionCall","src":"11061:30:16"},"nodeType":"YulExpressionStatement","src":"11061:30:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11111:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"11122:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11107:3:16"},"nodeType":"YulFunctionCall","src":"11107:18:16"},{"hexValue":"455243313135353a20696e73756666696369656e742062616c616e636520666f","kind":"string","nodeType":"YulLiteral","src":"11127:34:16","type":"","value":"ERC1155: insufficient balance fo"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11100:6:16"},"nodeType":"YulFunctionCall","src":"11100:62:16"},"nodeType":"YulExpressionStatement","src":"11100:62:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11182:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"11193:2:16","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11178:3:16"},"nodeType":"YulFunctionCall","src":"11178:18:16"},{"hexValue":"72207472616e73666572","kind":"string","nodeType":"YulLiteral","src":"11198:12:16","type":"","value":"r transfer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11171:6:16"},"nodeType":"YulFunctionCall","src":"11171:40:16"},"nodeType":"YulExpressionStatement","src":"11171:40:16"},{"nodeType":"YulAssignment","src":"11220:27:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11232:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"11243:3:16","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11228:3:16"},"nodeType":"YulFunctionCall","src":"11228:19:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11220:4:16"}]}]},"name":"abi_encode_tuple_t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10998:9:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11012:4:16","type":""}],"src":"10847:406:16"},{"body":{"nodeType":"YulBlock","src":"11306:77:16","statements":[{"nodeType":"YulAssignment","src":"11316:16:16","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11327:1:16"},{"name":"y","nodeType":"YulIdentifier","src":"11330:1:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11323:3:16"},"nodeType":"YulFunctionCall","src":"11323:9:16"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"11316:3:16"}]},{"body":{"nodeType":"YulBlock","src":"11355:22:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"11357:16:16"},"nodeType":"YulFunctionCall","src":"11357:18:16"},"nodeType":"YulExpressionStatement","src":"11357:18:16"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11347:1:16"},{"name":"sum","nodeType":"YulIdentifier","src":"11350:3:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11344:2:16"},"nodeType":"YulFunctionCall","src":"11344:10:16"},"nodeType":"YulIf","src":"11341:36:16"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"11289:1:16","type":""},{"name":"y","nodeType":"YulTypedName","src":"11292:1:16","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"11298:3:16","type":""}],"src":"11258:125:16"},{"body":{"nodeType":"YulBlock","src":"11617:236:16","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11634:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"11645:2:16","type":"","value":"64"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11627:6:16"},"nodeType":"YulFunctionCall","src":"11627:21:16"},"nodeType":"YulExpressionStatement","src":"11627:21:16"},{"nodeType":"YulVariableDeclaration","src":"11657:70:16","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11700:6:16"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11712:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"11723:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11708:3:16"},"nodeType":"YulFunctionCall","src":"11708:18:16"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"11671:28:16"},"nodeType":"YulFunctionCall","src":"11671:56:16"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"11661:6:16","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11747:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"11758:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11743:3:16"},"nodeType":"YulFunctionCall","src":"11743:18:16"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"11767:6:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"11775:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11763:3:16"},"nodeType":"YulFunctionCall","src":"11763:22:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11736:6:16"},"nodeType":"YulFunctionCall","src":"11736:50:16"},"nodeType":"YulExpressionStatement","src":"11736:50:16"},{"nodeType":"YulAssignment","src":"11795:52:16","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"11832:6:16"},{"name":"tail_1","nodeType":"YulIdentifier","src":"11840:6:16"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"11803:28:16"},"nodeType":"YulFunctionCall","src":"11803:44:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11795:4:16"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11578:9:16","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11589:6:16","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11597:6:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11608:4:16","type":""}],"src":"11388:465:16"},{"body":{"nodeType":"YulBlock","src":"12032:231:16","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12049:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"12060:2:16","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12042:6:16"},"nodeType":"YulFunctionCall","src":"12042:21:16"},"nodeType":"YulExpressionStatement","src":"12042:21:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12083:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"12094:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12079:3:16"},"nodeType":"YulFunctionCall","src":"12079:18:16"},{"kind":"number","nodeType":"YulLiteral","src":"12099:2:16","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12072:6:16"},"nodeType":"YulFunctionCall","src":"12072:30:16"},"nodeType":"YulExpressionStatement","src":"12072:30:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12122:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"12133:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12118:3:16"},"nodeType":"YulFunctionCall","src":"12118:18:16"},{"hexValue":"455243313135353a2073657474696e6720617070726f76616c20737461747573","kind":"string","nodeType":"YulLiteral","src":"12138:34:16","type":"","value":"ERC1155: setting approval status"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12111:6:16"},"nodeType":"YulFunctionCall","src":"12111:62:16"},"nodeType":"YulExpressionStatement","src":"12111:62:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12193:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"12204:2:16","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12189:3:16"},"nodeType":"YulFunctionCall","src":"12189:18:16"},{"hexValue":"20666f722073656c66","kind":"string","nodeType":"YulLiteral","src":"12209:11:16","type":"","value":" for self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12182:6:16"},"nodeType":"YulFunctionCall","src":"12182:39:16"},"nodeType":"YulExpressionStatement","src":"12182:39:16"},{"nodeType":"YulAssignment","src":"12230:27:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12242:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"12253:3:16","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12238:3:16"},"nodeType":"YulFunctionCall","src":"12238:19:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12230:4:16"}]}]},"name":"abi_encode_tuple_t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12009:9:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12023:4:16","type":""}],"src":"11858:405:16"},{"body":{"nodeType":"YulBlock","src":"12397:119:16","statements":[{"nodeType":"YulAssignment","src":"12407:26:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12419:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"12430:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12415:3:16"},"nodeType":"YulFunctionCall","src":"12415:18:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12407:4:16"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12449:9:16"},{"name":"value0","nodeType":"YulIdentifier","src":"12460:6:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12442:6:16"},"nodeType":"YulFunctionCall","src":"12442:25:16"},"nodeType":"YulExpressionStatement","src":"12442:25:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12487:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"12498:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12483:3:16"},"nodeType":"YulFunctionCall","src":"12483:18:16"},{"name":"value1","nodeType":"YulIdentifier","src":"12503:6:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12476:6:16"},"nodeType":"YulFunctionCall","src":"12476:34:16"},"nodeType":"YulExpressionStatement","src":"12476:34:16"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12358:9:16","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12369:6:16","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12377:6:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12388:4:16","type":""}],"src":"12268:248:16"},{"body":{"nodeType":"YulBlock","src":"12852:496:16","statements":[{"nodeType":"YulVariableDeclaration","src":"12862:29:16","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12880:3:16","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"12885:1:16","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12876:3:16"},"nodeType":"YulFunctionCall","src":"12876:11:16"},{"kind":"number","nodeType":"YulLiteral","src":"12889:1:16","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12872:3:16"},"nodeType":"YulFunctionCall","src":"12872:19:16"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"12866:2:16","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12907:9:16"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12922:6:16"},{"name":"_1","nodeType":"YulIdentifier","src":"12930:2:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12918:3:16"},"nodeType":"YulFunctionCall","src":"12918:15:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12900:6:16"},"nodeType":"YulFunctionCall","src":"12900:34:16"},"nodeType":"YulExpressionStatement","src":"12900:34:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12954:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"12965:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12950:3:16"},"nodeType":"YulFunctionCall","src":"12950:18:16"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"12974:6:16"},{"name":"_1","nodeType":"YulIdentifier","src":"12982:2:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12970:3:16"},"nodeType":"YulFunctionCall","src":"12970:15:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12943:6:16"},"nodeType":"YulFunctionCall","src":"12943:43:16"},"nodeType":"YulExpressionStatement","src":"12943:43:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13006:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"13017:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13002:3:16"},"nodeType":"YulFunctionCall","src":"13002:18:16"},{"kind":"number","nodeType":"YulLiteral","src":"13022:3:16","type":"","value":"160"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12995:6:16"},"nodeType":"YulFunctionCall","src":"12995:31:16"},"nodeType":"YulExpressionStatement","src":"12995:31:16"},{"nodeType":"YulVariableDeclaration","src":"13035:71:16","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"13078:6:16"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13090:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"13101:3:16","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13086:3:16"},"nodeType":"YulFunctionCall","src":"13086:19:16"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"13049:28:16"},"nodeType":"YulFunctionCall","src":"13049:57:16"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"13039:6:16","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13126:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"13137:2:16","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13122:3:16"},"nodeType":"YulFunctionCall","src":"13122:18:16"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"13146:6:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"13154:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13142:3:16"},"nodeType":"YulFunctionCall","src":"13142:22:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13115:6:16"},"nodeType":"YulFunctionCall","src":"13115:50:16"},"nodeType":"YulExpressionStatement","src":"13115:50:16"},{"nodeType":"YulVariableDeclaration","src":"13174:58:16","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"13217:6:16"},{"name":"tail_1","nodeType":"YulIdentifier","src":"13225:6:16"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"13188:28:16"},"nodeType":"YulFunctionCall","src":"13188:44:16"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"13178:6:16","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13252:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"13263:3:16","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13248:3:16"},"nodeType":"YulFunctionCall","src":"13248:19:16"},{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"13273:6:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"13281:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13269:3:16"},"nodeType":"YulFunctionCall","src":"13269:22:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13241:6:16"},"nodeType":"YulFunctionCall","src":"13241:51:16"},"nodeType":"YulExpressionStatement","src":"13241:51:16"},{"nodeType":"YulAssignment","src":"13301:41:16","value":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"13327:6:16"},{"name":"tail_2","nodeType":"YulIdentifier","src":"13335:6:16"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"13309:17:16"},"nodeType":"YulFunctionCall","src":"13309:33:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13301:4:16"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12789:9:16","type":""},{"name":"value4","nodeType":"YulTypedName","src":"12800:6:16","type":""},{"name":"value3","nodeType":"YulTypedName","src":"12808:6:16","type":""},{"name":"value2","nodeType":"YulTypedName","src":"12816:6:16","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12824:6:16","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12832:6:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12843:4:16","type":""}],"src":"12521:827:16"},{"body":{"nodeType":"YulBlock","src":"13433:169:16","statements":[{"body":{"nodeType":"YulBlock","src":"13479:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13488:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13491:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13481:6:16"},"nodeType":"YulFunctionCall","src":"13481:12:16"},"nodeType":"YulExpressionStatement","src":"13481:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"13454:7:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"13463:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13450:3:16"},"nodeType":"YulFunctionCall","src":"13450:23:16"},{"kind":"number","nodeType":"YulLiteral","src":"13475:2:16","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"13446:3:16"},"nodeType":"YulFunctionCall","src":"13446:32:16"},"nodeType":"YulIf","src":"13443:52:16"},{"nodeType":"YulVariableDeclaration","src":"13504:29:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13523:9:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13517:5:16"},"nodeType":"YulFunctionCall","src":"13517:16:16"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"13508:5:16","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13566:5:16"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"13542:23:16"},"nodeType":"YulFunctionCall","src":"13542:30:16"},"nodeType":"YulExpressionStatement","src":"13542:30:16"},{"nodeType":"YulAssignment","src":"13581:15:16","value":{"name":"value","nodeType":"YulIdentifier","src":"13591:5:16"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"13581:6:16"}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13399:9:16","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"13410:7:16","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"13422:6:16","type":""}],"src":"13353:249:16"},{"body":{"nodeType":"YulBlock","src":"13650:136:16","statements":[{"body":{"nodeType":"YulBlock","src":"13695:85:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13724:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13727:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13730:1:16","type":"","value":"4"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"13709:14:16"},"nodeType":"YulFunctionCall","src":"13709:23:16"},"nodeType":"YulExpressionStatement","src":"13709:23:16"},{"nodeType":"YulAssignment","src":"13745:25:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13756:3:16","type":"","value":"224"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13767:1:16","type":"","value":"0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13761:5:16"},"nodeType":"YulFunctionCall","src":"13761:8:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"13752:3:16"},"nodeType":"YulFunctionCall","src":"13752:18:16"},"variableNames":[{"name":"sig","nodeType":"YulIdentifier","src":"13745:3:16"}]}]},"condition":{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"13666:14:16"},"nodeType":"YulFunctionCall","src":"13666:16:16"},{"kind":"number","nodeType":"YulLiteral","src":"13684:1:16","type":"","value":"3"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"13663:2:16"},"nodeType":"YulFunctionCall","src":"13663:23:16"},"nodeType":"YulIf","src":"13660:120:16"}]},"name":"return_data_selector","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"sig","nodeType":"YulTypedName","src":"13642:3:16","type":""}],"src":"13607:179:16"},{"body":{"nodeType":"YulBlock","src":"13838:624:16","statements":[{"body":{"nodeType":"YulBlock","src":"13878:9:16","statements":[{"nodeType":"YulLeave","src":"13880:5:16"}]},"condition":{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"13854:14:16"},"nodeType":"YulFunctionCall","src":"13854:16:16"},{"kind":"number","nodeType":"YulLiteral","src":"13872:4:16","type":"","value":"0x44"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"13851:2:16"},"nodeType":"YulFunctionCall","src":"13851:26:16"},"nodeType":"YulIf","src":"13848:39:16"},{"nodeType":"YulVariableDeclaration","src":"13896:21:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13914:2:16","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13908:5:16"},"nodeType":"YulFunctionCall","src":"13908:9:16"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"13900:4:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"13926:16:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13940:1:16","type":"","value":"3"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"13936:3:16"},"nodeType":"YulFunctionCall","src":"13936:6:16"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"13930:2:16","type":""}]},{"expression":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"13966:4:16"},{"kind":"number","nodeType":"YulLiteral","src":"13972:1:16","type":"","value":"4"},{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"13979:14:16"},"nodeType":"YulFunctionCall","src":"13979:16:16"},{"name":"_1","nodeType":"YulIdentifier","src":"13997:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13975:3:16"},"nodeType":"YulFunctionCall","src":"13975:25:16"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"13951:14:16"},"nodeType":"YulFunctionCall","src":"13951:50:16"},"nodeType":"YulExpressionStatement","src":"13951:50:16"},{"nodeType":"YulVariableDeclaration","src":"14010:25:16","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"14030:4:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14024:5:16"},"nodeType":"YulFunctionCall","src":"14024:11:16"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"14014:6:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"14044:26:16","value":{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"14054:14:16"},"nodeType":"YulFunctionCall","src":"14054:16:16"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"14048:2:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"14079:28:16","value":{"kind":"number","nodeType":"YulLiteral","src":"14089:18:16","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"14083:2:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"14165:9:16","statements":[{"nodeType":"YulLeave","src":"14167:5:16"}]},"condition":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14125:6:16"},{"name":"_3","nodeType":"YulIdentifier","src":"14133:2:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14122:2:16"},"nodeType":"YulFunctionCall","src":"14122:14:16"},{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14145:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"14153:4:16","type":"","value":"0x24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14141:3:16"},"nodeType":"YulFunctionCall","src":"14141:17:16"},{"name":"_2","nodeType":"YulIdentifier","src":"14160:2:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14138:2:16"},"nodeType":"YulFunctionCall","src":"14138:25:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"14119:2:16"},"nodeType":"YulFunctionCall","src":"14119:45:16"},"nodeType":"YulIf","src":"14116:58:16"},{"nodeType":"YulVariableDeclaration","src":"14183:28:16","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"14198:4:16"},{"name":"offset","nodeType":"YulIdentifier","src":"14204:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14194:3:16"},"nodeType":"YulFunctionCall","src":"14194:17:16"},"variables":[{"name":"msg","nodeType":"YulTypedName","src":"14187:3:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"14220:24:16","value":{"arguments":[{"name":"msg","nodeType":"YulIdentifier","src":"14240:3:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14234:5:16"},"nodeType":"YulFunctionCall","src":"14234:10:16"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"14224:6:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"14271:9:16","statements":[{"nodeType":"YulLeave","src":"14273:5:16"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"14259:6:16"},{"name":"_3","nodeType":"YulIdentifier","src":"14267:2:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14256:2:16"},"nodeType":"YulFunctionCall","src":"14256:14:16"},"nodeType":"YulIf","src":"14253:27:16"},{"body":{"nodeType":"YulBlock","src":"14362:9:16","statements":[{"nodeType":"YulLeave","src":"14364:5:16"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"msg","nodeType":"YulIdentifier","src":"14303:3:16"},{"name":"length","nodeType":"YulIdentifier","src":"14308:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14299:3:16"},"nodeType":"YulFunctionCall","src":"14299:16:16"},{"kind":"number","nodeType":"YulLiteral","src":"14317:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14295:3:16"},"nodeType":"YulFunctionCall","src":"14295:27:16"},{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"14332:4:16"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"14338:14:16"},"nodeType":"YulFunctionCall","src":"14338:16:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14328:3:16"},"nodeType":"YulFunctionCall","src":"14328:27:16"},{"name":"_1","nodeType":"YulIdentifier","src":"14357:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14324:3:16"},"nodeType":"YulFunctionCall","src":"14324:36:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14292:2:16"},"nodeType":"YulFunctionCall","src":"14292:69:16"},"nodeType":"YulIf","src":"14289:82:16"},{"expression":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"14400:4:16"},{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14414:6:16"},{"name":"length","nodeType":"YulIdentifier","src":"14422:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14410:3:16"},"nodeType":"YulFunctionCall","src":"14410:19:16"},{"kind":"number","nodeType":"YulLiteral","src":"14431:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14406:3:16"},"nodeType":"YulFunctionCall","src":"14406:30:16"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"14380:19:16"},"nodeType":"YulFunctionCall","src":"14380:57:16"},"nodeType":"YulExpressionStatement","src":"14380:57:16"},{"nodeType":"YulAssignment","src":"14446:10:16","value":{"name":"msg","nodeType":"YulIdentifier","src":"14453:3:16"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"14446:3:16"}]}]},"name":"try_decode_error_message","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"13830:3:16","type":""}],"src":"13791:671:16"},{"body":{"nodeType":"YulBlock","src":"14641:242:16","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14658:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"14669:2:16","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14651:6:16"},"nodeType":"YulFunctionCall","src":"14651:21:16"},"nodeType":"YulExpressionStatement","src":"14651:21:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14692:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"14703:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14688:3:16"},"nodeType":"YulFunctionCall","src":"14688:18:16"},{"kind":"number","nodeType":"YulLiteral","src":"14708:2:16","type":"","value":"52"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14681:6:16"},"nodeType":"YulFunctionCall","src":"14681:30:16"},"nodeType":"YulExpressionStatement","src":"14681:30:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14731:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"14742:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14727:3:16"},"nodeType":"YulFunctionCall","src":"14727:18:16"},{"hexValue":"455243313135353a207472616e7366657220746f206e6f6e2d45524331313535","kind":"string","nodeType":"YulLiteral","src":"14747:34:16","type":"","value":"ERC1155: transfer to non-ERC1155"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14720:6:16"},"nodeType":"YulFunctionCall","src":"14720:62:16"},"nodeType":"YulExpressionStatement","src":"14720:62:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14802:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"14813:2:16","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14798:3:16"},"nodeType":"YulFunctionCall","src":"14798:18:16"},{"hexValue":"526563656976657220696d706c656d656e746572","kind":"string","nodeType":"YulLiteral","src":"14818:22:16","type":"","value":"Receiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14791:6:16"},"nodeType":"YulFunctionCall","src":"14791:50:16"},"nodeType":"YulExpressionStatement","src":"14791:50:16"},{"nodeType":"YulAssignment","src":"14850:27:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14862:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"14873:3:16","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14858:3:16"},"nodeType":"YulFunctionCall","src":"14858:19:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14850:4:16"}]}]},"name":"abi_encode_tuple_t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14618:9:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14632:4:16","type":""}],"src":"14467:416:16"},{"body":{"nodeType":"YulBlock","src":"15062:230:16","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15079:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"15090:2:16","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15072:6:16"},"nodeType":"YulFunctionCall","src":"15072:21:16"},"nodeType":"YulExpressionStatement","src":"15072:21:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15113:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"15124:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15109:3:16"},"nodeType":"YulFunctionCall","src":"15109:18:16"},{"kind":"number","nodeType":"YulLiteral","src":"15129:2:16","type":"","value":"40"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15102:6:16"},"nodeType":"YulFunctionCall","src":"15102:30:16"},"nodeType":"YulExpressionStatement","src":"15102:30:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15152:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"15163:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15148:3:16"},"nodeType":"YulFunctionCall","src":"15148:18:16"},{"hexValue":"455243313135353a204552433131353552656365697665722072656a65637465","kind":"string","nodeType":"YulLiteral","src":"15168:34:16","type":"","value":"ERC1155: ERC1155Receiver rejecte"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15141:6:16"},"nodeType":"YulFunctionCall","src":"15141:62:16"},"nodeType":"YulExpressionStatement","src":"15141:62:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15223:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"15234:2:16","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15219:3:16"},"nodeType":"YulFunctionCall","src":"15219:18:16"},{"hexValue":"6420746f6b656e73","kind":"string","nodeType":"YulLiteral","src":"15239:10:16","type":"","value":"d tokens"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15212:6:16"},"nodeType":"YulFunctionCall","src":"15212:38:16"},"nodeType":"YulExpressionStatement","src":"15212:38:16"},{"nodeType":"YulAssignment","src":"15259:27:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15271:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"15282:3:16","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15267:3:16"},"nodeType":"YulFunctionCall","src":"15267:19:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15259:4:16"}]}]},"name":"abi_encode_tuple_t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15039:9:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15053:4:16","type":""}],"src":"14888:404:16"},{"body":{"nodeType":"YulBlock","src":"15528:330:16","statements":[{"nodeType":"YulVariableDeclaration","src":"15538:29:16","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15556:3:16","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"15561:1:16","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"15552:3:16"},"nodeType":"YulFunctionCall","src":"15552:11:16"},{"kind":"number","nodeType":"YulLiteral","src":"15565:1:16","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15548:3:16"},"nodeType":"YulFunctionCall","src":"15548:19:16"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"15542:2:16","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15583:9:16"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"15598:6:16"},{"name":"_1","nodeType":"YulIdentifier","src":"15606:2:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15594:3:16"},"nodeType":"YulFunctionCall","src":"15594:15:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15576:6:16"},"nodeType":"YulFunctionCall","src":"15576:34:16"},"nodeType":"YulExpressionStatement","src":"15576:34:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15630:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"15641:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15626:3:16"},"nodeType":"YulFunctionCall","src":"15626:18:16"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"15650:6:16"},{"name":"_1","nodeType":"YulIdentifier","src":"15658:2:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15646:3:16"},"nodeType":"YulFunctionCall","src":"15646:15:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15619:6:16"},"nodeType":"YulFunctionCall","src":"15619:43:16"},"nodeType":"YulExpressionStatement","src":"15619:43:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15682:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"15693:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15678:3:16"},"nodeType":"YulFunctionCall","src":"15678:18:16"},{"name":"value2","nodeType":"YulIdentifier","src":"15698:6:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15671:6:16"},"nodeType":"YulFunctionCall","src":"15671:34:16"},"nodeType":"YulExpressionStatement","src":"15671:34:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15725:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"15736:2:16","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15721:3:16"},"nodeType":"YulFunctionCall","src":"15721:18:16"},{"name":"value3","nodeType":"YulIdentifier","src":"15741:6:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15714:6:16"},"nodeType":"YulFunctionCall","src":"15714:34:16"},"nodeType":"YulExpressionStatement","src":"15714:34:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15768:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"15779:3:16","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15764:3:16"},"nodeType":"YulFunctionCall","src":"15764:19:16"},{"kind":"number","nodeType":"YulLiteral","src":"15785:3:16","type":"","value":"160"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15757:6:16"},"nodeType":"YulFunctionCall","src":"15757:32:16"},"nodeType":"YulExpressionStatement","src":"15757:32:16"},{"nodeType":"YulAssignment","src":"15798:54:16","value":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"15824:6:16"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15836:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"15847:3:16","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15832:3:16"},"nodeType":"YulFunctionCall","src":"15832:19:16"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"15806:17:16"},"nodeType":"YulFunctionCall","src":"15806:46:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15798:4:16"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15465:9:16","type":""},{"name":"value4","nodeType":"YulTypedName","src":"15476:6:16","type":""},{"name":"value3","nodeType":"YulTypedName","src":"15484:6:16","type":""},{"name":"value2","nodeType":"YulTypedName","src":"15492:6:16","type":""},{"name":"value1","nodeType":"YulTypedName","src":"15500:6:16","type":""},{"name":"value0","nodeType":"YulTypedName","src":"15508:6:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15519:4:16","type":""}],"src":"15297:561:16"}]},"contents":"{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 0x20) }\n        {\n            let _1 := 0x20\n            mstore(add(add(pos, i), _1), mload(add(add(value, i), _1)))\n        }\n        mstore(add(add(pos, length), 0x20), 0)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function finalize_allocation(memPtr, size)\n    {\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_array_uint256_dyn(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(shl(5, length), 0x20)\n    }\n    function abi_decode_array_uint256_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let _3 := array_allocation_size_array_uint256_dyn(_1)\n        let memPtr := mload(64)\n        finalize_allocation(memPtr, _3)\n        let dst := memPtr\n        mstore(memPtr, _1)\n        dst := add(memPtr, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _2)\n        }\n        array := memPtr\n    }\n    function abi_decode_bytes(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        if gt(_1, 0xffffffffffffffff) { panic_error_0x41() }\n        let memPtr := mload(64)\n        finalize_allocation(memPtr, add(and(add(_1, 0x1f), not(31)), 0x20))\n        mstore(memPtr, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(memPtr, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(memPtr, _1), 0x20), 0)\n        array := memPtr\n    }\n    function abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value2 := abi_decode_array_uint256_dyn(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 96))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value3 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n        let offset_2 := calldataload(add(headStart, 128))\n        if gt(offset_2, _1) { revert(0, 0) }\n        value4 := abi_decode_bytes(add(headStart, offset_2), dataEnd)\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        let _4 := 0x20\n        let _5 := array_allocation_size_array_uint256_dyn(_3)\n        let memPtr := mload(64)\n        finalize_allocation(memPtr, _5)\n        let dst := memPtr\n        mstore(memPtr, _3)\n        dst := add(memPtr, _4)\n        let srcEnd := add(add(_2, shl(5, _3)), _4)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_2, _4)\n        for { } lt(src, srcEnd) { src := add(src, _4) }\n        {\n            mstore(dst, abi_decode_address(src))\n            dst := add(dst, _4)\n        }\n        value0 := memPtr\n        let offset_1 := calldataload(add(headStart, _4))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n    }\n    function abi_encode_array_uint256_dyn(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let _1 := 0x20\n        pos := add(pos, _1)\n        let srcPtr := add(value, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        end := pos\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_array_uint256_dyn(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value1 := value\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let offset := calldataload(add(headStart, 128))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value4 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"ERC1155: address zero is not a v\")\n        mstore(add(headStart, 96), \"alid owner\")\n        tail := add(headStart, 128)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"ERC1155: caller is not token own\")\n        mstore(add(headStart, 96), \"er or approved\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC1155: accounts and ids length\")\n        mstore(add(headStart, 96), \" mismatch\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 40)\n        mstore(add(headStart, 64), \"ERC1155: ids and amounts length \")\n        mstore(add(headStart, 96), \"mismatch\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC1155: transfer to the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"ERC1155: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r transfer\")\n        tail := add(headStart, 128)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        let tail_1 := abi_encode_array_uint256_dyn(value0, add(headStart, 64))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        tail := abi_encode_array_uint256_dyn(value1, tail_1)\n    }\n    function abi_encode_tuple_t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC1155: setting approval status\")\n        mstore(add(headStart, 96), \" for self\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), 160)\n        let tail_1 := abi_encode_array_uint256_dyn(value2, add(headStart, 160))\n        mstore(add(headStart, 96), sub(tail_1, headStart))\n        let tail_2 := abi_encode_array_uint256_dyn(value3, tail_1)\n        mstore(add(headStart, 128), sub(tail_2, headStart))\n        tail := abi_encode_string(value4, tail_2)\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function return_data_selector() -> sig\n    {\n        if gt(returndatasize(), 3)\n        {\n            returndatacopy(0, 0, 4)\n            sig := shr(224, mload(0))\n        }\n    }\n    function try_decode_error_message() -> ret\n    {\n        if lt(returndatasize(), 0x44) { leave }\n        let data := mload(64)\n        let _1 := not(3)\n        returndatacopy(data, 4, add(returndatasize(), _1))\n        let offset := mload(data)\n        let _2 := returndatasize()\n        let _3 := 0xffffffffffffffff\n        if or(gt(offset, _3), gt(add(offset, 0x24), _2)) { leave }\n        let msg := add(data, offset)\n        let length := mload(msg)\n        if gt(length, _3) { leave }\n        if gt(add(add(msg, length), 0x20), add(add(data, returndatasize()), _1)) { leave }\n        finalize_allocation(data, add(add(offset, length), 0x20))\n        ret := msg\n    }\n    function abi_encode_tuple_t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 52)\n        mstore(add(headStart, 64), \"ERC1155: transfer to non-ERC1155\")\n        mstore(add(headStart, 96), \"Receiver implementer\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 40)\n        mstore(add(headStart, 64), \"ERC1155: ERC1155Receiver rejecte\")\n        mstore(add(headStart, 96), \"d tokens\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), 160)\n        tail := abi_encode_string(value4, add(headStart, 160))\n    }\n}","id":16,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100875760003560e01c80634e1273f41161005b5780634e1273f41461010a578063a22cb4651461012a578063e985e9c51461013d578063f242432a1461017957600080fd5b8062fdd58e1461008c57806301ffc9a7146100b25780630e89341c146100d55780632eb2c2d6146100f5575b600080fd5b61009f61009a366004610b40565b61018c565b6040519081526020015b60405180910390f35b6100c56100c0366004610b83565b610225565b60405190151581526020016100a9565b6100e86100e3366004610ba7565b610275565b6040516100a99190610c06565b610108610103366004610d65565b610309565b005b61011d610118366004610e0f565b610355565b6040516100a99190610f15565b610108610138366004610f28565b61047f565b6100c561014b366004610f64565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b610108610187366004610f97565b61048e565b60006001600160a01b0383166101fc5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b148061025657506001600160e01b031982166303a24d0760e21b145b8061021f57506301ffc9a760e01b6001600160e01b031983161461021f565b60606002805461028490610ffc565b80601f01602080910402602001604051908101604052809291908181526020018280546102b090610ffc565b80156102fd5780601f106102d2576101008083540402835291602001916102fd565b820191906000526020600020905b8154815290600101906020018083116102e057829003601f168201915b50505050509050919050565b6001600160a01b0385163314806103255750610325853361014b565b6103415760405162461bcd60e51b81526004016101f390611036565b61034e85858585856104d3565b5050505050565b606081518351146103ba5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016101f3565b6000835167ffffffffffffffff8111156103d6576103d6610c19565b6040519080825280602002602001820160405280156103ff578160200160208202803683370190505b50905060005b84518110156104775761044a85828151811061042357610423611084565b602002602001015185838151811061043d5761043d611084565b602002602001015161018c565b82828151811061045c5761045c611084565b6020908102919091010152610470816110b0565b9050610405565b509392505050565b61048a3383836106b0565b5050565b6001600160a01b0385163314806104aa57506104aa853361014b565b6104c65760405162461bcd60e51b81526004016101f390611036565b61034e8585858585610790565b81518351146105355760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016101f3565b6001600160a01b03841661055b5760405162461bcd60e51b81526004016101f3906110c9565b3360005b845181101561064257600085828151811061057c5761057c611084565b60200260200101519050600085838151811061059a5761059a611084565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156105ea5760405162461bcd60e51b81526004016101f39061110e565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290610627908490611158565b925050819055505050508061063b906110b0565b905061055f565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161069292919061116b565b60405180910390a46106a88187878787876108ba565b505050505050565b816001600160a01b0316836001600160a01b0316036107235760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016101f3565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166107b65760405162461bcd60e51b81526004016101f3906110c9565b3360006107c285610a1e565b905060006107cf85610a1e565b90506000868152602081815260408083206001600160a01b038c168452909152902054858110156108125760405162461bcd60e51b81526004016101f39061110e565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a1682528120805488929061084f908490611158565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46108af848a8a8a8a8a610a69565b505050505050505050565b6001600160a01b0384163b156106a85760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906108fe9089908990889088908890600401611199565b6020604051808303816000875af1925050508015610939575060408051601f3d908101601f19168201909252610936918101906111f7565b60015b6109e557610945611214565b806308c379a00361097e5750610959611230565b806109645750610980565b8060405162461bcd60e51b81526004016101f39190610c06565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016101f3565b6001600160e01b0319811663bc197c8160e01b14610a155760405162461bcd60e51b81526004016101f3906112ba565b50505050505050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110610a5857610a58611084565b602090810291909101015292915050565b6001600160a01b0384163b156106a85760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190610aad9089908990889088908890600401611302565b6020604051808303816000875af1925050508015610ae8575060408051601f3d908101601f19168201909252610ae5918101906111f7565b60015b610af457610945611214565b6001600160e01b0319811663f23a6e6160e01b14610a155760405162461bcd60e51b81526004016101f3906112ba565b80356001600160a01b0381168114610b3b57600080fd5b919050565b60008060408385031215610b5357600080fd5b610b5c83610b24565b946020939093013593505050565b6001600160e01b031981168114610b8057600080fd5b50565b600060208284031215610b9557600080fd5b8135610ba081610b6a565b9392505050565b600060208284031215610bb957600080fd5b5035919050565b6000815180845260005b81811015610be657602081850181015186830182015201610bca565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610ba06020830184610bc0565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715610c5557610c55610c19565b6040525050565b600067ffffffffffffffff821115610c7657610c76610c19565b5060051b60200190565b600082601f830112610c9157600080fd5b81356020610c9e82610c5c565b604051610cab8282610c2f565b83815260059390931b8501820192828101915086841115610ccb57600080fd5b8286015b84811015610ce65780358352918301918301610ccf565b509695505050505050565b600082601f830112610d0257600080fd5b813567ffffffffffffffff811115610d1c57610d1c610c19565b604051610d33601f8301601f191660200182610c2f565b818152846020838601011115610d4857600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215610d7d57600080fd5b610d8686610b24565b9450610d9460208701610b24565b9350604086013567ffffffffffffffff80821115610db157600080fd5b610dbd89838a01610c80565b94506060880135915080821115610dd357600080fd5b610ddf89838a01610c80565b93506080880135915080821115610df557600080fd5b50610e0288828901610cf1565b9150509295509295909350565b60008060408385031215610e2257600080fd5b823567ffffffffffffffff80821115610e3a57600080fd5b818501915085601f830112610e4e57600080fd5b81356020610e5b82610c5c565b604051610e688282610c2f565b83815260059390931b8501820192828101915089841115610e8857600080fd5b948201945b83861015610ead57610e9e86610b24565b82529482019490820190610e8d565b96505086013592505080821115610ec357600080fd5b50610ed085828601610c80565b9150509250929050565b600081518084526020808501945080840160005b83811015610f0a57815187529582019590820190600101610eee565b509495945050505050565b602081526000610ba06020830184610eda565b60008060408385031215610f3b57600080fd5b610f4483610b24565b915060208301358015158114610f5957600080fd5b809150509250929050565b60008060408385031215610f7757600080fd5b610f8083610b24565b9150610f8e60208401610b24565b90509250929050565b600080600080600060a08688031215610faf57600080fd5b610fb886610b24565b9450610fc660208701610b24565b93506040860135925060608601359150608086013567ffffffffffffffff811115610ff057600080fd5b610e0288828901610cf1565b600181811c9082168061101057607f821691505b60208210810361103057634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016110c2576110c261109a565b5060010190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b8082018082111561021f5761021f61109a565b60408152600061117e6040830185610eda565b82810360208401526111908185610eda565b95945050505050565b6001600160a01b0386811682528516602082015260a0604082018190526000906111c590830186610eda565b82810360608401526111d78186610eda565b905082810360808401526111eb8185610bc0565b98975050505050505050565b60006020828403121561120957600080fd5b8151610ba081610b6a565b600060033d111561122d5760046000803e5060005160e01c5b90565b600060443d101561123e5790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561126e57505050505090565b82850191508151818111156112865750505050505090565b843d87010160208285010111156112a05750505050505090565b6112af60208286010187610c2f565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061133c90830184610bc0565b97965050505050505056fea26469706673582212201f8129b224788397df0c5f09917775ce6ce61a7043347f0af6c7e17d72af4bc964736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x87 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4E1273F4 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x4E1273F4 EQ PUSH2 0x10A JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x12A JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x13D JUMPI DUP1 PUSH4 0xF242432A EQ PUSH2 0x179 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0xFDD58E EQ PUSH2 0x8C JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xB2 JUMPI DUP1 PUSH4 0xE89341C EQ PUSH2 0xD5 JUMPI DUP1 PUSH4 0x2EB2C2D6 EQ PUSH2 0xF5 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9F PUSH2 0x9A CALLDATASIZE PUSH1 0x4 PUSH2 0xB40 JUMP JUMPDEST PUSH2 0x18C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC5 PUSH2 0xC0 CALLDATASIZE PUSH1 0x4 PUSH2 0xB83 JUMP JUMPDEST PUSH2 0x225 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xA9 JUMP JUMPDEST PUSH2 0xE8 PUSH2 0xE3 CALLDATASIZE PUSH1 0x4 PUSH2 0xBA7 JUMP JUMPDEST PUSH2 0x275 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA9 SWAP2 SWAP1 PUSH2 0xC06 JUMP JUMPDEST PUSH2 0x108 PUSH2 0x103 CALLDATASIZE PUSH1 0x4 PUSH2 0xD65 JUMP JUMPDEST PUSH2 0x309 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x11D PUSH2 0x118 CALLDATASIZE PUSH1 0x4 PUSH2 0xE0F JUMP JUMPDEST PUSH2 0x355 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA9 SWAP2 SWAP1 PUSH2 0xF15 JUMP JUMPDEST PUSH2 0x108 PUSH2 0x138 CALLDATASIZE PUSH1 0x4 PUSH2 0xF28 JUMP JUMPDEST PUSH2 0x47F JUMP JUMPDEST PUSH2 0xC5 PUSH2 0x14B CALLDATASIZE PUSH1 0x4 PUSH2 0xF64 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x108 PUSH2 0x187 CALLDATASIZE PUSH1 0x4 PUSH2 0xF97 JUMP JUMPDEST PUSH2 0x48E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1FC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2061646472657373207A65726F206973206E6F7420612076 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x30B634B21037BBB732B9 PUSH1 0xB1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x6CDB3D13 PUSH1 0xE1 SHL EQ DUP1 PUSH2 0x256 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x3A24D07 PUSH1 0xE2 SHL EQ JUMPDEST DUP1 PUSH2 0x21F JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x21F JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x284 SWAP1 PUSH2 0xFFC JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2B0 SWAP1 PUSH2 0xFFC JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2FD JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2D2 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2FD JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2E0 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER EQ DUP1 PUSH2 0x325 JUMPI POP PUSH2 0x325 DUP6 CALLER PUSH2 0x14B JUMP JUMPDEST PUSH2 0x341 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x1036 JUMP JUMPDEST PUSH2 0x34E DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x4D3 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x3BA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A206163636F756E747320616E6420696473206C656E677468 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x40DAD2E6DAC2E8C6D PUSH1 0xBB SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3D6 JUMPI PUSH2 0x3D6 PUSH2 0xC19 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3FF JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x477 JUMPI PUSH2 0x44A DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x423 JUMPI PUSH2 0x423 PUSH2 0x1084 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x43D JUMPI PUSH2 0x43D PUSH2 0x1084 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x18C JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x45C JUMPI PUSH2 0x45C PUSH2 0x1084 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH2 0x470 DUP2 PUSH2 0x10B0 JUMP JUMPDEST SWAP1 POP PUSH2 0x405 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x48A CALLER DUP4 DUP4 PUSH2 0x6B0 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER EQ DUP1 PUSH2 0x4AA JUMPI POP PUSH2 0x4AA DUP6 CALLER PUSH2 0x14B JUMP JUMPDEST PUSH2 0x4C6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x1036 JUMP JUMPDEST PUSH2 0x34E DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x790 JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x535 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2069647320616E6420616D6F756E7473206C656E67746820 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0xDAD2E6DAC2E8C6D PUSH1 0xC3 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x55B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x10C9 JUMP JUMPDEST CALLER PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x642 JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x57C JUMPI PUSH2 0x57C PUSH2 0x1084 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x59A JUMPI PUSH2 0x59A PUSH2 0x1084 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x0 DUP5 DUP2 MSTORE DUP1 DUP4 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 AND DUP4 MSTORE SWAP1 SWAP4 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP2 DUP2 LT ISZERO PUSH2 0x5EA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x110E JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP1 DUP12 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x627 SWAP1 DUP5 SWAP1 PUSH2 0x1158 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP POP POP DUP1 PUSH2 0x63B SWAP1 PUSH2 0x10B0 JUMP JUMPDEST SWAP1 POP PUSH2 0x55F JUMP JUMPDEST POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x692 SWAP3 SWAP2 SWAP1 PUSH2 0x116B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x6A8 DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x8BA JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x723 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2073657474696E6720617070726F76616C20737461747573 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x103337B91039B2B633 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x7B6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x10C9 JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0x7C2 DUP6 PUSH2 0xA1E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7CF DUP6 PUSH2 0xA1E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP6 DUP2 LT ISZERO PUSH2 0x812 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x110E JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP10 DUP6 SUB SWAP1 SSTORE SWAP1 DUP11 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP9 SWAP3 SWAP1 PUSH2 0x84F SWAP1 DUP5 SWAP1 PUSH2 0x1158 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP9 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP12 AND SWAP3 DUP13 DUP3 AND SWAP3 SWAP2 DUP9 AND SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x8AF DUP5 DUP11 DUP11 DUP11 DUP11 DUP11 PUSH2 0xA69 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x6A8 JUMPI PUSH1 0x40 MLOAD PUSH4 0xBC197C81 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xBC197C81 SWAP1 PUSH2 0x8FE SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1199 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x939 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x936 SWAP2 DUP2 ADD SWAP1 PUSH2 0x11F7 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x9E5 JUMPI PUSH2 0x945 PUSH2 0x1214 JUMP JUMPDEST DUP1 PUSH4 0x8C379A0 SUB PUSH2 0x97E JUMPI POP PUSH2 0x959 PUSH2 0x1230 JUMP JUMPDEST DUP1 PUSH2 0x964 JUMPI POP PUSH2 0x980 JUMP JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP2 SWAP1 PUSH2 0xC06 JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x34 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F206E6F6E2D45524331313535 PUSH1 0x44 DUP3 ADD MSTORE PUSH20 0x2932B1B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x61 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xBC197C81 PUSH1 0xE0 SHL EQ PUSH2 0xA15 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x12BA JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP3 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xA58 JUMPI PUSH2 0xA58 PUSH2 0x1084 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x6A8 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF23A6E61 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xF23A6E61 SWAP1 PUSH2 0xAAD SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1302 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xAE8 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xAE5 SWAP2 DUP2 ADD SWAP1 PUSH2 0x11F7 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xAF4 JUMPI PUSH2 0x945 PUSH2 0x1214 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xF23A6E61 PUSH1 0xE0 SHL EQ PUSH2 0xA15 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x12BA JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xB3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB53 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB5C DUP4 PUSH2 0xB24 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xB80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB95 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xBA0 DUP2 PUSH2 0xB6A JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xBE6 JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0xBCA JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xBA0 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xBC0 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xC55 JUMPI PUSH2 0xC55 PUSH2 0xC19 JUMP JUMPDEST PUSH1 0x40 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xC76 JUMPI PUSH2 0xC76 PUSH2 0xC19 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xC91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0xC9E DUP3 PUSH2 0xC5C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCAB DUP3 DUP3 PUSH2 0xC2F JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x5 SWAP4 SWAP1 SWAP4 SHL DUP6 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP2 POP DUP7 DUP5 GT ISZERO PUSH2 0xCCB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xCE6 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0xCCF JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xD02 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xD1C JUMPI PUSH2 0xD1C PUSH2 0xC19 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD33 PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 PUSH2 0xC2F JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0xD48 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xD7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD86 DUP7 PUSH2 0xB24 JUMP JUMPDEST SWAP5 POP PUSH2 0xD94 PUSH1 0x20 DUP8 ADD PUSH2 0xB24 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xDB1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDBD DUP10 DUP4 DUP11 ADD PUSH2 0xC80 JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xDD3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDDF DUP10 DUP4 DUP11 ADD PUSH2 0xC80 JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xDF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE02 DUP9 DUP3 DUP10 ADD PUSH2 0xCF1 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xE3A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xE4E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0xE5B DUP3 PUSH2 0xC5C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE68 DUP3 DUP3 PUSH2 0xC2F JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x5 SWAP4 SWAP1 SWAP4 SHL DUP6 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP2 POP DUP10 DUP5 GT ISZERO PUSH2 0xE88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 DUP3 ADD SWAP5 JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0xEAD JUMPI PUSH2 0xE9E DUP7 PUSH2 0xB24 JUMP JUMPDEST DUP3 MSTORE SWAP5 DUP3 ADD SWAP5 SWAP1 DUP3 ADD SWAP1 PUSH2 0xE8D JUMP JUMPDEST SWAP7 POP POP DUP7 ADD CALLDATALOAD SWAP3 POP POP DUP1 DUP3 GT ISZERO PUSH2 0xEC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xED0 DUP6 DUP3 DUP7 ADD PUSH2 0xC80 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xF0A JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xEEE JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xBA0 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xEDA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF44 DUP4 PUSH2 0xB24 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xF59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF77 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF80 DUP4 PUSH2 0xB24 JUMP JUMPDEST SWAP2 POP PUSH2 0xF8E PUSH1 0x20 DUP5 ADD PUSH2 0xB24 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xFAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xFB8 DUP7 PUSH2 0xB24 JUMP JUMPDEST SWAP5 POP PUSH2 0xFC6 PUSH1 0x20 DUP8 ADD PUSH2 0xB24 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xFF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE02 DUP9 DUP3 DUP10 ADD PUSH2 0xCF1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1010 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1030 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A2063616C6C6572206973206E6F7420746F6B656E206F776E PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x195C881BDC88185C1C1C9BDD9959 PUSH1 0x92 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x10C2 JUMPI PUSH2 0x10C2 PUSH2 0x109A JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F20746865207A65726F206164 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2A SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A20696E73756666696369656E742062616C616E636520666F PUSH1 0x40 DUP3 ADD MSTORE PUSH10 0x39103A3930B739B332B9 PUSH1 0xB1 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x21F JUMPI PUSH2 0x21F PUSH2 0x109A JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x117E PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0xEDA JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1190 DUP2 DUP6 PUSH2 0xEDA JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x11C5 SWAP1 DUP4 ADD DUP7 PUSH2 0xEDA JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x11D7 DUP2 DUP7 PUSH2 0xEDA JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x11EB DUP2 DUP6 PUSH2 0xBC0 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1209 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xBA0 DUP2 PUSH2 0xB6A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 RETURNDATASIZE GT ISZERO PUSH2 0x122D JUMPI PUSH1 0x4 PUSH1 0x0 DUP1 RETURNDATACOPY POP PUSH1 0x0 MLOAD PUSH1 0xE0 SHR JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x44 RETURNDATASIZE LT ISZERO PUSH2 0x123E JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x3 NOT RETURNDATASIZE DUP2 ADD PUSH1 0x4 DUP4 RETURNDATACOPY DUP2 MLOAD RETURNDATASIZE PUSH8 0xFFFFFFFFFFFFFFFF DUP2 PUSH1 0x24 DUP5 ADD GT DUP2 DUP5 GT OR ISZERO PUSH2 0x126E JUMPI POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP3 DUP6 ADD SWAP2 POP DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x1286 JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP5 RETURNDATASIZE DUP8 ADD ADD PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x12A0 JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x12AF PUSH1 0x20 DUP3 DUP7 ADD ADD DUP8 PUSH2 0xC2F JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x28 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A204552433131353552656365697665722072656A65637465 PUSH1 0x40 DUP3 ADD MSTORE PUSH8 0x6420746F6B656E73 PUSH1 0xC0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x133C SWAP1 DUP4 ADD DUP5 PUSH2 0xBC0 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x1F DUP2 0x29 0xB2 0x24 PUSH25 0x8397DF0C5F09917775CE6CE61A7043347F0AF6C7E17D72AF4B 0xC9 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"570:16689:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2185:227;;;;;;:::i;:::-;;:::i;:::-;;;597:25:16;;;585:2;570:18;2185:227:2;;;;;;;;1236:305;;;;;;:::i;:::-;;:::i;:::-;;;1184:14:16;;1177:22;1159:41;;1147:2;1132:18;1236:305:2;1019:187:16;1940:103:2;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;4064:426::-;;;;;;:::i;:::-;;:::i;:::-;;2569:508;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3145:153::-;;;;;;:::i;:::-;;:::i;3365:166::-;;;;;;:::i;:::-;-1:-1:-1;;;;;3487:27:2;;;3464:4;3487:27;;;:18;:27;;;;;;;;:37;;;;;;;;;;;;;;;3365:166;3598:394;;;;;;:::i;:::-;;:::i;2185:227::-;2271:7;-1:-1:-1;;;;;2298:21:2;;2290:76;;;;-1:-1:-1;;;2290:76:2;;8209:2:16;2290:76:2;;;8191:21:16;8248:2;8228:18;;;8221:30;8287:34;8267:18;;;8260:62;-1:-1:-1;;;8338:18:16;;;8331:40;8388:19;;2290:76:2;;;;;;;;;-1:-1:-1;2383:9:2;:13;;;;;;;;;;;-1:-1:-1;;;;;2383:22:2;;;;;;;;;;2185:227;;;;;:::o;1236:305::-;1338:4;-1:-1:-1;;;;;;1373:41:2;;-1:-1:-1;;;1373:41:2;;:109;;-1:-1:-1;;;;;;;1430:52:2;;-1:-1:-1;;;1430:52:2;1373:109;:161;;;-1:-1:-1;;;;;;;;;;937:40:10;;;1498:36:2;829:155:10;1940:103:2;2000:13;2032:4;2025:11;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1940:103;;;:::o;4064:426::-;-1:-1:-1;;;;;4289:20:2;;719:10:7;4289:20:2;;:60;;-1:-1:-1;4313:36:2;4330:4;719:10:7;3365:166:2;:::i;4313:36::-;4268:153;;;;-1:-1:-1;;;4268:153:2;;;;;;;:::i;:::-;4431:52;4454:4;4460:2;4464:3;4469:7;4478:4;4431:22;:52::i;:::-;4064:426;;;;;:::o;2569:508::-;2720:16;2779:3;:10;2760:8;:15;:29;2752:83;;;;-1:-1:-1;;;2752:83:2;;9420:2:16;2752:83:2;;;9402:21:16;9459:2;9439:18;;;9432:30;9498:34;9478:18;;;9471:62;-1:-1:-1;;;9549:18:16;;;9542:39;9598:19;;2752:83:2;9218:405:16;2752:83:2;2846:30;2893:8;:15;2879:30;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2879:30:2;;2846:63;;2925:9;2920:120;2944:8;:15;2940:1;:19;2920:120;;;2999:30;3009:8;3018:1;3009:11;;;;;;;;:::i;:::-;;;;;;;3022:3;3026:1;3022:6;;;;;;;;:::i;:::-;;;;;;;2999:9;:30::i;:::-;2980:13;2994:1;2980:16;;;;;;;;:::i;:::-;;;;;;;;;;:49;2961:3;;;:::i;:::-;;;2920:120;;;-1:-1:-1;3057:13:2;2569:508;-1:-1:-1;;;2569:508:2:o;3145:153::-;3239:52;719:10:7;3272:8:2;3282;3239:18;:52::i;:::-;3145:153;;:::o;3598:394::-;-1:-1:-1;;;;;3798:20:2;;719:10:7;3798:20:2;;:60;;-1:-1:-1;3822:36:2;3839:4;719:10:7;3365:166:2;:::i;3822:36::-;3777:153;;;;-1:-1:-1;;;3777:153:2;;;;;;;:::i;:::-;3940:45;3958:4;3964:2;3968;3972:6;3980:4;3940:17;:45::i;6233:1115::-;6453:7;:14;6439:3;:10;:28;6431:81;;;;-1:-1:-1;;;6431:81:2;;10234:2:16;6431:81:2;;;10216:21:16;10273:2;10253:18;;;10246:30;10312:34;10292:18;;;10285:62;-1:-1:-1;;;10363:18:16;;;10356:38;10411:19;;6431:81:2;10032:404:16;6431:81:2;-1:-1:-1;;;;;6530:16:2;;6522:66;;;;-1:-1:-1;;;6522:66:2;;;;;;;:::i;:::-;719:10:7;6599:16:2;6712:411;6736:3;:10;6732:1;:14;6712:411;;;6767:10;6780:3;6784:1;6780:6;;;;;;;;:::i;:::-;;;;;;;6767:19;;6800:14;6817:7;6825:1;6817:10;;;;;;;;:::i;:::-;;;;;;;;;;;;6842:19;6864:13;;;;;;;;;;-1:-1:-1;;;;;6864:19:2;;;;;;;;;;;;6817:10;;-1:-1:-1;6905:21:2;;;;6897:76;;;;-1:-1:-1;;;6897:76:2;;;;;;;:::i;:::-;7015:9;:13;;;;;;;;;;;-1:-1:-1;;;;;7015:19:2;;;;;;;;;;7037:20;;;7015:42;;7085:17;;;;;;;:27;;7037:20;;7015:9;7085:27;;7037:20;;7085:27;:::i;:::-;;;;;;;;6753:370;;;6748:3;;;;:::i;:::-;;;6712:411;;;;7168:2;-1:-1:-1;;;;;7138:47:2;7162:4;-1:-1:-1;;;;;7138:47:2;7152:8;-1:-1:-1;;;;;7138:47:2;;7172:3;7177:7;7138:47;;;;;;;:::i;:::-;;;;;;;;7266:75;7302:8;7312:4;7318:2;7322:3;7327:7;7336:4;7266:35;:75::i;:::-;6421:927;6233:1115;;;;;:::o;12910:323::-;13060:8;-1:-1:-1;;;;;13051:17:2;:5;-1:-1:-1;;;;;13051:17:2;;13043:71;;;;-1:-1:-1;;;13043:71:2;;12060:2:16;13043:71:2;;;12042:21:16;12099:2;12079:18;;;12072:30;12138:34;12118:18;;;12111:62;-1:-1:-1;;;12189:18:16;;;12182:39;12238:19;;13043:71:2;11858:405:16;13043:71:2;-1:-1:-1;;;;;13124:25:2;;;;;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;:46;;-1:-1:-1;;13124:46:2;;;;;;;;;;13185:41;;1159::16;;;13185::2;;1132:18:16;13185:41:2;;;;;;;12910:323;;;:::o;4940:947::-;-1:-1:-1;;;;;5121:16:2;;5113:66;;;;-1:-1:-1;;;5113:66:2;;;;;;;:::i;:::-;719:10:7;5190:16:2;5254:21;5272:2;5254:17;:21::i;:::-;5231:44;;5285:24;5312:25;5330:6;5312:17;:25::i;:::-;5285:52;;5419:19;5441:13;;;;;;;;;;;-1:-1:-1;;;;;5441:19:2;;;;;;;;;;5478:21;;;;5470:76;;;;-1:-1:-1;;;5470:76:2;;;;;;;:::i;:::-;5580:9;:13;;;;;;;;;;;-1:-1:-1;;;;;5580:19:2;;;;;;;;;;5602:20;;;5580:42;;5642:17;;;;;;;:27;;5602:20;;5580:9;5642:27;;5602:20;;5642:27;:::i;:::-;;;;-1:-1:-1;;5685:46:2;;;12442:25:16;;;12498:2;12483:18;;12476:34;;;-1:-1:-1;;;;;5685:46:2;;;;;;;;;;;;;;12415:18:16;5685:46:2;;;;;;;5812:68;5843:8;5853:4;5859:2;5863;5867:6;5875:4;5812:30;:68::i;:::-;5103:784;;;;4940:947;;;;;:::o;16266:792::-;-1:-1:-1;;;;;16498:13:2;;1465:19:6;:23;16494:558:2;;16533:79;;-1:-1:-1;;;16533:79:2;;-1:-1:-1;;;;;16533:43:2;;;;;:79;;16577:8;;16587:4;;16593:3;;16598:7;;16607:4;;16533:79;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;16533:79:2;;;;;;;;-1:-1:-1;;16533:79:2;;;;;;;;;;;;:::i;:::-;;;16529:513;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;16918:6;16911:14;;-1:-1:-1;;;16911:14:2;;;;;;;;:::i;16529:513::-;;;16965:62;;-1:-1:-1;;;16965:62:2;;14669:2:16;16965:62:2;;;14651:21:16;14708:2;14688:18;;;14681:30;14747:34;14727:18;;;14720:62;-1:-1:-1;;;14798:18:16;;;14791:50;14858:19;;16965:62:2;14467:416:16;16529:513:2;-1:-1:-1;;;;;;16691:60:2;;-1:-1:-1;;;16691:60:2;16687:157;;16775:50;;-1:-1:-1;;;16775:50:2;;;;;;;:::i;16687:157::-;16613:245;16266:792;;;;;;:::o;17064:193::-;17183:16;;;17197:1;17183:16;;;;;;;;;17130;;17158:22;;17183:16;;;;;;;;;;;;-1:-1:-1;17183:16:2;17158:41;;17220:7;17209:5;17215:1;17209:8;;;;;;;;:::i;:::-;;;;;;;;;;:18;17245:5;17064:193;-1:-1:-1;;17064:193:2:o;15535:725::-;-1:-1:-1;;;;;15742:13:2;;1465:19:6;:23;15738:516:2;;15777:72;;-1:-1:-1;;;15777:72:2;;-1:-1:-1;;;;;15777:38:2;;;;;:72;;15816:8;;15826:4;;15832:2;;15836:6;;15844:4;;15777:72;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;15777:72:2;;;;;;;;-1:-1:-1;;15777:72:2;;;;;;;;;;;;:::i;:::-;;;15773:471;;;;:::i;:::-;-1:-1:-1;;;;;;15898:55:2;;-1:-1:-1;;;15898:55:2;15894:152;;15977:50;;-1:-1:-1;;;15977:50:2;;;;;;;:::i;14:173:16:-;82:20;;-1:-1:-1;;;;;131:31:16;;121:42;;111:70;;177:1;174;167:12;111:70;14:173;;;:::o;192:254::-;260:6;268;321:2;309:9;300:7;296:23;292:32;289:52;;;337:1;334;327:12;289:52;360:29;379:9;360:29;:::i;:::-;350:39;436:2;421:18;;;;408:32;;-1:-1:-1;;;192:254:16:o;633:131::-;-1:-1:-1;;;;;;707:32:16;;697:43;;687:71;;754:1;751;744:12;687:71;633:131;:::o;769:245::-;827:6;880:2;868:9;859:7;855:23;851:32;848:52;;;896:1;893;886:12;848:52;935:9;922:23;954:30;978:5;954:30;:::i;:::-;1003:5;769:245;-1:-1:-1;;;769:245:16:o;1211:180::-;1270:6;1323:2;1311:9;1302:7;1298:23;1294:32;1291:52;;;1339:1;1336;1329:12;1291:52;-1:-1:-1;1362:23:16;;1211:180;-1:-1:-1;1211:180:16:o;1396:423::-;1438:3;1476:5;1470:12;1503:6;1498:3;1491:19;1528:1;1538:162;1552:6;1549:1;1546:13;1538:162;;;1614:4;1670:13;;;1666:22;;1660:29;1642:11;;;1638:20;;1631:59;1567:12;1538:162;;;1542:3;1745:1;1738:4;1729:6;1724:3;1720:16;1716:27;1709:38;1808:4;1801:2;1797:7;1792:2;1784:6;1780:15;1776:29;1771:3;1767:39;1763:50;1756:57;;;1396:423;;;;:::o;1824:220::-;1973:2;1962:9;1955:21;1936:4;1993:45;2034:2;2023:9;2019:18;2011:6;1993:45;:::i;2049:127::-;2110:10;2105:3;2101:20;2098:1;2091:31;2141:4;2138:1;2131:15;2165:4;2162:1;2155:15;2181:249;2291:2;2272:13;;-1:-1:-1;;2268:27:16;2256:40;;2326:18;2311:34;;2347:22;;;2308:62;2305:88;;;2373:18;;:::i;:::-;2409:2;2402:22;-1:-1:-1;;2181:249:16:o;2435:183::-;2495:4;2528:18;2520:6;2517:30;2514:56;;;2550:18;;:::i;:::-;-1:-1:-1;2595:1:16;2591:14;2607:4;2587:25;;2435:183::o;2623:724::-;2677:5;2730:3;2723:4;2715:6;2711:17;2707:27;2697:55;;2748:1;2745;2738:12;2697:55;2784:6;2771:20;2810:4;2833:43;2873:2;2833:43;:::i;:::-;2905:2;2899:9;2917:31;2945:2;2937:6;2917:31;:::i;:::-;2983:18;;;3075:1;3071:10;;;;3059:23;;3055:32;;;3017:15;;;;-1:-1:-1;3099:15:16;;;3096:35;;;3127:1;3124;3117:12;3096:35;3163:2;3155:6;3151:15;3175:142;3191:6;3186:3;3183:15;3175:142;;;3257:17;;3245:30;;3295:12;;;;3208;;3175:142;;;-1:-1:-1;3335:6:16;2623:724;-1:-1:-1;;;;;;2623:724:16:o;3352:555::-;3394:5;3447:3;3440:4;3432:6;3428:17;3424:27;3414:55;;3465:1;3462;3455:12;3414:55;3501:6;3488:20;3527:18;3523:2;3520:26;3517:52;;;3549:18;;:::i;:::-;3598:2;3592:9;3610:67;3665:2;3646:13;;-1:-1:-1;;3642:27:16;3671:4;3638:38;3592:9;3610:67;:::i;:::-;3701:2;3693:6;3686:18;3747:3;3740:4;3735:2;3727:6;3723:15;3719:26;3716:35;3713:55;;;3764:1;3761;3754:12;3713:55;3828:2;3821:4;3813:6;3809:17;3802:4;3794:6;3790:17;3777:54;3875:1;3851:15;;;3868:4;3847:26;3840:37;;;;3855:6;3352:555;-1:-1:-1;;;3352:555:16:o;3912:943::-;4066:6;4074;4082;4090;4098;4151:3;4139:9;4130:7;4126:23;4122:33;4119:53;;;4168:1;4165;4158:12;4119:53;4191:29;4210:9;4191:29;:::i;:::-;4181:39;;4239:38;4273:2;4262:9;4258:18;4239:38;:::i;:::-;4229:48;;4328:2;4317:9;4313:18;4300:32;4351:18;4392:2;4384:6;4381:14;4378:34;;;4408:1;4405;4398:12;4378:34;4431:61;4484:7;4475:6;4464:9;4460:22;4431:61;:::i;:::-;4421:71;;4545:2;4534:9;4530:18;4517:32;4501:48;;4574:2;4564:8;4561:16;4558:36;;;4590:1;4587;4580:12;4558:36;4613:63;4668:7;4657:8;4646:9;4642:24;4613:63;:::i;:::-;4603:73;;4729:3;4718:9;4714:19;4701:33;4685:49;;4759:2;4749:8;4746:16;4743:36;;;4775:1;4772;4765:12;4743:36;;4798:51;4841:7;4830:8;4819:9;4815:24;4798:51;:::i;:::-;4788:61;;;3912:943;;;;;;;;:::o;4860:1208::-;4978:6;4986;5039:2;5027:9;5018:7;5014:23;5010:32;5007:52;;;5055:1;5052;5045:12;5007:52;5095:9;5082:23;5124:18;5165:2;5157:6;5154:14;5151:34;;;5181:1;5178;5171:12;5151:34;5219:6;5208:9;5204:22;5194:32;;5264:7;5257:4;5253:2;5249:13;5245:27;5235:55;;5286:1;5283;5276:12;5235:55;5322:2;5309:16;5344:4;5367:43;5407:2;5367:43;:::i;:::-;5439:2;5433:9;5451:31;5479:2;5471:6;5451:31;:::i;:::-;5517:18;;;5605:1;5601:10;;;;5593:19;;5589:28;;;5551:15;;;;-1:-1:-1;5629:19:16;;;5626:39;;;5661:1;5658;5651:12;5626:39;5685:11;;;;5705:148;5721:6;5716:3;5713:15;5705:148;;;5787:23;5806:3;5787:23;:::i;:::-;5775:36;;5738:12;;;;5831;;;;5705:148;;;5872:6;-1:-1:-1;;5916:18:16;;5903:32;;-1:-1:-1;;5947:16:16;;;5944:36;;;5976:1;5973;5966:12;5944:36;;5999:63;6054:7;6043:8;6032:9;6028:24;5999:63;:::i;:::-;5989:73;;;4860:1208;;;;;:::o;6073:435::-;6126:3;6164:5;6158:12;6191:6;6186:3;6179:19;6217:4;6246:2;6241:3;6237:12;6230:19;;6283:2;6276:5;6272:14;6304:1;6314:169;6328:6;6325:1;6322:13;6314:169;;;6389:13;;6377:26;;6423:12;;;;6458:15;;;;6350:1;6343:9;6314:169;;;-1:-1:-1;6499:3:16;;6073:435;-1:-1:-1;;;;;6073:435:16:o;6513:261::-;6692:2;6681:9;6674:21;6655:4;6712:56;6764:2;6753:9;6749:18;6741:6;6712:56;:::i;6779:347::-;6844:6;6852;6905:2;6893:9;6884:7;6880:23;6876:32;6873:52;;;6921:1;6918;6911:12;6873:52;6944:29;6963:9;6944:29;:::i;:::-;6934:39;;7023:2;7012:9;7008:18;6995:32;7070:5;7063:13;7056:21;7049:5;7046:32;7036:60;;7092:1;7089;7082:12;7036:60;7115:5;7105:15;;;6779:347;;;;;:::o;7131:260::-;7199:6;7207;7260:2;7248:9;7239:7;7235:23;7231:32;7228:52;;;7276:1;7273;7266:12;7228:52;7299:29;7318:9;7299:29;:::i;:::-;7289:39;;7347:38;7381:2;7370:9;7366:18;7347:38;:::i;:::-;7337:48;;7131:260;;;;;:::o;7396:606::-;7500:6;7508;7516;7524;7532;7585:3;7573:9;7564:7;7560:23;7556:33;7553:53;;;7602:1;7599;7592:12;7553:53;7625:29;7644:9;7625:29;:::i;:::-;7615:39;;7673:38;7707:2;7696:9;7692:18;7673:38;:::i;:::-;7663:48;;7758:2;7747:9;7743:18;7730:32;7720:42;;7809:2;7798:9;7794:18;7781:32;7771:42;;7864:3;7853:9;7849:19;7836:33;7892:18;7884:6;7881:30;7878:50;;;7924:1;7921;7914:12;7878:50;7947:49;7988:7;7979:6;7968:9;7964:22;7947:49;:::i;8418:380::-;8497:1;8493:12;;;;8540;;;8561:61;;8615:4;8607:6;8603:17;8593:27;;8561:61;8668:2;8660:6;8657:14;8637:18;8634:38;8631:161;;8714:10;8709:3;8705:20;8702:1;8695:31;8749:4;8746:1;8739:15;8777:4;8774:1;8767:15;8631:161;;8418:380;;;:::o;8803:410::-;9005:2;8987:21;;;9044:2;9024:18;;;9017:30;9083:34;9078:2;9063:18;;9056:62;-1:-1:-1;;;9149:2:16;9134:18;;9127:44;9203:3;9188:19;;8803:410::o;9628:127::-;9689:10;9684:3;9680:20;9677:1;9670:31;9720:4;9717:1;9710:15;9744:4;9741:1;9734:15;9760:127;9821:10;9816:3;9812:20;9809:1;9802:31;9852:4;9849:1;9842:15;9876:4;9873:1;9866:15;9892:135;9931:3;9952:17;;;9949:43;;9972:18;;:::i;:::-;-1:-1:-1;10019:1:16;10008:13;;9892:135::o;10441:401::-;10643:2;10625:21;;;10682:2;10662:18;;;10655:30;10721:34;10716:2;10701:18;;10694:62;-1:-1:-1;;;10787:2:16;10772:18;;10765:35;10832:3;10817:19;;10441:401::o;10847:406::-;11049:2;11031:21;;;11088:2;11068:18;;;11061:30;11127:34;11122:2;11107:18;;11100:62;-1:-1:-1;;;11193:2:16;11178:18;;11171:40;11243:3;11228:19;;10847:406::o;11258:125::-;11323:9;;;11344:10;;;11341:36;;;11357:18;;:::i;11388:465::-;11645:2;11634:9;11627:21;11608:4;11671:56;11723:2;11712:9;11708:18;11700:6;11671:56;:::i;:::-;11775:9;11767:6;11763:22;11758:2;11747:9;11743:18;11736:50;11803:44;11840:6;11832;11803:44;:::i;:::-;11795:52;11388:465;-1:-1:-1;;;;;11388:465:16:o;12521:827::-;-1:-1:-1;;;;;12918:15:16;;;12900:34;;12970:15;;12965:2;12950:18;;12943:43;12880:3;13017:2;13002:18;;12995:31;;;12843:4;;13049:57;;13086:19;;13078:6;13049:57;:::i;:::-;13154:9;13146:6;13142:22;13137:2;13126:9;13122:18;13115:50;13188:44;13225:6;13217;13188:44;:::i;:::-;13174:58;;13281:9;13273:6;13269:22;13263:3;13252:9;13248:19;13241:51;13309:33;13335:6;13327;13309:33;:::i;:::-;13301:41;12521:827;-1:-1:-1;;;;;;;;12521:827:16:o;13353:249::-;13422:6;13475:2;13463:9;13454:7;13450:23;13446:32;13443:52;;;13491:1;13488;13481:12;13443:52;13523:9;13517:16;13542:30;13566:5;13542:30;:::i;13607:179::-;13642:3;13684:1;13666:16;13663:23;13660:120;;;13730:1;13727;13724;13709:23;-1:-1:-1;13767:1:16;13761:8;13756:3;13752:18;13660:120;13607:179;:::o;13791:671::-;13830:3;13872:4;13854:16;13851:26;13848:39;;;13791:671;:::o;13848:39::-;13914:2;13908:9;-1:-1:-1;;13979:16:16;13975:25;;13972:1;13908:9;13951:50;14030:4;14024:11;14054:16;14089:18;14160:2;14153:4;14145:6;14141:17;14138:25;14133:2;14125:6;14122:14;14119:45;14116:58;;;14167:5;;;;;13791:671;:::o;14116:58::-;14204:6;14198:4;14194:17;14183:28;;14240:3;14234:10;14267:2;14259:6;14256:14;14253:27;;;14273:5;;;;;;13791:671;:::o;14253:27::-;14357:2;14338:16;14332:4;14328:27;14324:36;14317:4;14308:6;14303:3;14299:16;14295:27;14292:69;14289:82;;;14364:5;;;;;;13791:671;:::o;14289:82::-;14380:57;14431:4;14422:6;14414;14410:19;14406:30;14400:4;14380:57;:::i;:::-;-1:-1:-1;14453:3:16;;13791:671;-1:-1:-1;;;;;13791:671:16:o;14888:404::-;15090:2;15072:21;;;15129:2;15109:18;;;15102:30;15168:34;15163:2;15148:18;;15141:62;-1:-1:-1;;;15234:2:16;15219:18;;15212:38;15282:3;15267:19;;14888:404::o;15297:561::-;-1:-1:-1;;;;;15594:15:16;;;15576:34;;15646:15;;15641:2;15626:18;;15619:43;15693:2;15678:18;;15671:34;;;15736:2;15721:18;;15714:34;;;15556:3;15779;15764:19;;15757:32;;;15519:4;;15806:46;;15832:19;;15824:6;15806:46;:::i;:::-;15798:54;15297:561;-1:-1:-1;;;;;;;15297:561:16:o"},"gasEstimates":{"creation":{"codeDepositCost":"997800","executionCost":"infinite","totalCost":"infinite"},"external":{"balanceOf(address,uint256)":"2677","balanceOfBatch(address[],uint256[])":"infinite","isApprovedForAll(address,address)":"infinite","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"infinite","safeTransferFrom(address,address,uint256,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"26705","supportsInterface(bytes4)":"555","uri(uint256)":"infinite"},"internal":{"_afterTokenTransfer(address,address,address,uint256[] memory,uint256[] memory,bytes memory)":"infinite","_asSingletonArray(uint256)":"infinite","_beforeTokenTransfer(address,address,address,uint256[] memory,uint256[] memory,bytes memory)":"infinite","_burn(address,uint256,uint256)":"infinite","_burnBatch(address,uint256[] memory,uint256[] memory)":"infinite","_doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[] memory,uint256[] memory,bytes memory)":"infinite","_doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes memory)":"infinite","_mint(address,uint256,uint256,bytes memory)":"infinite","_mintBatch(address,uint256[] memory,uint256[] memory,bytes memory)":"infinite","_safeBatchTransferFrom(address,address,uint256[] memory,uint256[] memory,bytes memory)":"infinite","_safeTransferFrom(address,address,uint256,uint256,bytes memory)":"infinite","_setApprovalForAll(address,address,bool)":"infinite","_setURI(string memory)":"infinite"}},"methodIdentifiers":{"balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","isApprovedForAll(address,address)":"e985e9c5","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","uri(uint256)":"0e89341c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the basic standard multi-token. See https://eips.ethereum.org/EIPS/eip-1155 Originally based on code by Enjin: https://github.com/enjin/erc-1155 _Available since v3.1._\",\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"constructor\":{\"details\":\"See {_setURI}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":\"ERC1155\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xd917747dc87f189c6779b894f367a028f9dca4be930283cccec8f312966af820\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":414,"contract":"@openzeppelin/contracts/token/ERC1155/ERC1155.sol:ERC1155","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_uint256,t_mapping(t_address,t_uint256))"},{"astId":420,"contract":"@openzeppelin/contracts/token/ERC1155/ERC1155.sol:ERC1155","label":"_operatorApprovals","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":422,"contract":"@openzeppelin/contracts/token/ERC1155/ERC1155.sol:ERC1155","label":"_uri","offset":0,"slot":"2","type":"t_string_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC1155/IERC1155.sol":{"IERC1155":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Required interface of an ERC1155 compliant contract, as defined in the https://eips.ethereum.org/EIPS/eip-1155[EIP]. _Available since v3.1._","events":{"ApprovalForAll(address,address,bool)":{"details":"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."},"TransferBatch(address,address,address,uint256[],uint256[])":{"details":"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."},"TransferSingle(address,address,address,uint256,uint256)":{"details":"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."},"URI(string,uint256)":{"details":"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."}},"kind":"dev","methods":{"balanceOf(address,uint256)":{"details":"Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address."},"balanceOfBatch(address[],uint256[])":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length."},"isApprovedForAll(address,address)":{"details":"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value."},"setApprovalForAll(address,bool)":{"details":"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","isApprovedForAll(address,address)":"e985e9c5","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC1155 compliant contract, as defined in the https://eips.ethereum.org/EIPS/eip-1155[EIP]. _Available since v3.1._\",\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":\"IERC1155\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol":{"IERC1155Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"_Available since v3.1._","kind":"dev","methods":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"details":"Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81, or its own function selector).","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","ids":"An array containing ids of each token being transferred (order and length must match values array)","operator":"The address which initiated the batch transfer (i.e. msg.sender)","values":"An array containing amounts of each token being transferred (order and length must match ids array)"},"returns":{"_0":"`bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed"}},"onERC1155Received(address,address,uint256,uint256,bytes)":{"details":"Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61, or its own function selector).","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","id":"The ID of the token being transferred","operator":"The address which initiated the transfer (i.e. msg.sender)","value":"The amount of tokens being transferred"},"returns":{"_0":"`bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed"}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"_Available since v3.1._\",\"kind\":\"dev\",\"methods\":{\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (i.e. 0xbc197c81, or its own function selector).\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"ids\":\"An array containing ids of each token being transferred (order and length must match values array)\",\"operator\":\"The address which initiated the batch transfer (i.e. msg.sender)\",\"values\":\"An array containing amounts of each token being transferred (order and length must match ids array)\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (i.e. 0xf23a6e61, or its own function selector).\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"id\":\"The ID of the token being transferred\",\"operator\":\"The address which initiated the transfer (i.e. msg.sender)\",\"value\":\"The amount of tokens being transferred\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":\"IERC1155Receiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol":{"IERC1155MetadataURI":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the optional ERC1155MetadataExtension interface, as defined in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP]. _Available since v3.1._","events":{"ApprovalForAll(address,address,bool)":{"details":"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."},"TransferBatch(address,address,address,uint256[],uint256[])":{"details":"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."},"TransferSingle(address,address,address,uint256,uint256)":{"details":"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."},"URI(string,uint256)":{"details":"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."}},"kind":"dev","methods":{"balanceOf(address,uint256)":{"details":"Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address."},"balanceOfBatch(address[],uint256[])":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length."},"isApprovedForAll(address,address)":{"details":"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value."},"setApprovalForAll(address,bool)":{"details":"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"uri(uint256)":{"details":"Returns the URI for token type `id`. If the `\\{id\\}` substring is present in the URI, it must be replaced by clients with the actual token type ID."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","isApprovedForAll(address,address)":"e985e9c5","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","uri(uint256)":"0e89341c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the optional ERC1155MetadataExtension interface, as defined in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP]. _Available since v3.1._\",\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"uri(uint256)\":{\"details\":\"Returns the URI for token type `id`. If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by clients with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":\"IERC1155MetadataURI\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122066c572869a48761237465ad34a99604a7b6f0059557b56b6c13f179eea88495b64736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH7 0xC572869A487612 CALLDATACOPY CHAINID GAS 0xD3 0x4A SWAP10 PUSH1 0x4A PUSH28 0x6F0059557B56B6C13F179EEA88495B64736F6C634300081300330000 ","sourceMap":"194:8964:6:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:8964:6;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122066c572869a48761237465ad34a99604a7b6f0059557b56b6c13f179eea88495b64736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH7 0xC572869A487612 CALLDATACOPY CHAINID GAS 0xD3 0x4A SWAP10 PUSH1 0x4A PUSH28 0x6F0059557B56B6C13F179EEA88495B64736F6C634300081300330000 ","sourceMap":"194:8964:6:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122098854b8036cafad742b8434434f068f44d17ee658cb0f5c57e3ac3bfc057c09b64736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP9 DUP6 0x4B DUP1 CALLDATASIZE 0xCA STATICCALL 0xD7 TIMESTAMP 0xB8 NUMBER PREVRANDAO CALLVALUE CREATE PUSH9 0xF44D17EE658CB0F5C5 PUSH31 0x3AC3BFC057C09B64736F6C6343000813003300000000000000000000000000 ","sourceMap":"188:2065:8:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;188:2065:8;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122098854b8036cafad742b8434434f068f44d17ee658cb0f5c57e3ac3bfc057c09b64736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP9 DUP6 0x4B DUP1 CALLDATASIZE 0xCA STATICCALL 0xD7 TIMESTAMP 0xB8 NUMBER PREVRANDAO CALLVALUE CREATE PUSH9 0xF44D17EE658CB0F5C5 PUSH31 0x3AC3BFC057C09B64736F6C6343000813003300000000000000000000000000 ","sourceMap":"188:2065:8:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"MerkleProof":{"abi":[],"devdoc":{"details":"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates merkle trees that are safe against this attack out of the box.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220584a687f9f78a9b1ddc7547ef38b5990536846abe389c98d12d2875de46df34c64736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PC 0x4A PUSH9 0x7F9F78A9B1DDC7547E RETURN DUP12 MSIZE SWAP1 MSTORE8 PUSH9 0x46ABE389C98D12D287 0x5D 0xE4 PUSH14 0xF34C64736F6C6343000813003300 ","sourceMap":"802:8493:9:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;802:8493:9;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220584a687f9f78a9b1ddc7547ef38b5990536846abe389c98d12d2875de46df34c64736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PC 0x4A PUSH9 0x7F9F78A9B1DDC7547E RETURN DUP12 MSIZE SWAP1 MSTORE8 PUSH9 0x46ABE389C98D12D287 0x5D 0xE4 PUSH14 0xF34C64736F6C6343000813003300 ","sourceMap":"802:8493:9:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_efficientHash(bytes32,bytes32)":"infinite","_hashPair(bytes32,bytes32)":"infinite","multiProofVerify(bytes32[] memory,bool[] memory,bytes32,bytes32[] memory)":"infinite","multiProofVerifyCalldata(bytes32[] calldata,bool[] calldata,bytes32,bytes32[] memory)":"infinite","processMultiProof(bytes32[] memory,bool[] memory,bytes32[] memory)":"infinite","processMultiProofCalldata(bytes32[] calldata,bool[] calldata,bytes32[] memory)":"infinite","processProof(bytes32[] memory,bytes32)":"infinite","processProofCalldata(bytes32[] calldata,bytes32)":"infinite","verify(bytes32[] memory,bytes32,bytes32)":"infinite","verifyCalldata(bytes32[] calldata,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates merkle trees that are safe against this attack out of the box.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":\"MerkleProof\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220470ff085b5fe60e759401cc80a654e1bfa9401fff83aa476109e12a1a30d046e64736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFBALANCE 0xF CREATE DUP6 0xB5 INVALID PUSH1 0xE7 MSIZE BLOCKHASH SHR 0xC8 EXP PUSH6 0x4E1BFA9401FF 0xF8 GASPRICE LOG4 PUSH23 0x109E12A1A30D046E64736F6C6343000813003300000000 ","sourceMap":"202:12302:12:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:12302:12;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220470ff085b5fe60e759401cc80a654e1bfa9401fff83aa476109e12a1a30d046e64736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFBALANCE 0xF CREATE DUP6 0xB5 INVALID PUSH1 0xE7 MSIZE BLOCKHASH SHR 0xC8 EXP PUSH6 0x4E1BFA9401FF 0xF8 GASPRICE LOG4 PUSH23 0x109E12A1A30D046E64736F6C6343000813003300000000 ","sourceMap":"202:12302:12:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/BundlerManager.sol":{"BundlerManager":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"bundler","type":"address"}],"name":"BundlerRegistered","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"bundler","type":"address"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"Heartbeat","type":"event"},{"inputs":[],"name":"heartbeat","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"isBundler","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"lastHeartbeat","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"registerAsBundler","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"registrationFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"fee","type":"uint256"}],"name":"setRegistrationFee","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b506102df806100206000396000f3fe6080604052600436106100555760003560e01c806314c44e091461005a5780632220967e146100835780633defb962146100b0578063551530d6146100c7578063827a0ea614610107578063c320c7271461010f575b600080fd5b34801561006657600080fd5b5061007060025481565b6040519081526020015b60405180910390f35b34801561008f57600080fd5b5061007061009e366004610260565b60016020526000908152604090205481565b3480156100bc57600080fd5b506100c561012f565b005b3480156100d357600080fd5b506100f76100e2366004610260565b60006020819052908152604090205460ff1681565b604051901515815260200161007a565b6100c56101dd565b34801561011b57600080fd5b506100c561012a366004610290565b600255565b3360009081526020819052604090205460ff166101935760405162461bcd60e51b815260206004820152601860248201527f4e6f74206120726567697374657265642062756e646c6572000000000000000060448201526064015b60405180910390fd5b33600081815260016020908152604091829020429081905591519182527f524ff62d10e7448ae7f4b3312273a3f8400a0662bc7991a69119576c86cecabe910160405180910390a2565b600254341461021e5760405162461bcd60e51b815260206004820152600d60248201526c496e636f72726563742066656560981b604482015260640161018a565b33600081815260208190526040808220805460ff19166001179055517f2f8f01b91096d69e5a523003459876ae74534592e7ffe3ab00a1a21e9a8f5d9c9190a2565b60006020828403121561027257600080fd5b81356001600160a01b038116811461028957600080fd5b9392505050565b6000602082840312156102a257600080fd5b503591905056fea26469706673582212206f597bfb89231640d309447cf9ba42fbaef92f5f79a52560f703b5e703717a4764736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DF DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x55 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x14C44E09 EQ PUSH2 0x5A JUMPI DUP1 PUSH4 0x2220967E EQ PUSH2 0x83 JUMPI DUP1 PUSH4 0x3DEFB962 EQ PUSH2 0xB0 JUMPI DUP1 PUSH4 0x551530D6 EQ PUSH2 0xC7 JUMPI DUP1 PUSH4 0x827A0EA6 EQ PUSH2 0x107 JUMPI DUP1 PUSH4 0xC320C727 EQ PUSH2 0x10F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x70 PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x70 PUSH2 0x9E CALLDATASIZE PUSH1 0x4 PUSH2 0x260 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC5 PUSH2 0x12F JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF7 PUSH2 0xE2 CALLDATASIZE PUSH1 0x4 PUSH2 0x260 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7A JUMP JUMPDEST PUSH2 0xC5 PUSH2 0x1DD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x11B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC5 PUSH2 0x12A CALLDATASIZE PUSH1 0x4 PUSH2 0x290 JUMP JUMPDEST PUSH1 0x2 SSTORE JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x193 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F74206120726567697374657265642062756E646C65720000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 TIMESTAMP SWAP1 DUP2 SWAP1 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x524FF62D10E7448AE7F4B3312273A3F8400A0662BC7991A69119576C86CECABE SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x2 SLOAD CALLVALUE EQ PUSH2 0x21E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x496E636F727265637420666565 PUSH1 0x98 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x18A JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD PUSH32 0x2F8F01B91096D69E5A523003459876AE74534592E7FFE3AB00A1A21E9A8F5D9C SWAP2 SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x272 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x289 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH16 0x597BFB89231640D309447CF9BA42FBAE 0xF9 0x2F 0x5F PUSH26 0xA52560F703B5E703717A4764736F6C6343000813003300000000 ","sourceMap":"57:917:13:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@heartbeat_3792":{"entryPoint":303,"id":3792,"parameterSlots":0,"returnSlots":0},"@isBundler_3725":{"entryPoint":null,"id":3725,"parameterSlots":0,"returnSlots":0},"@lastHeartbeat_3729":{"entryPoint":null,"id":3729,"parameterSlots":0,"returnSlots":0},"@registerAsBundler_3765":{"entryPoint":477,"id":3765,"parameterSlots":0,"returnSlots":0},"@registrationFee_3731":{"entryPoint":null,"id":3731,"parameterSlots":0,"returnSlots":0},"@setRegistrationFee_3802":{"entryPoint":null,"id":3802,"parameterSlots":1,"returnSlots":0},"abi_decode_tuple_t_address":{"entryPoint":608,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":656,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_24d732dbfadb06a9deb2730d8b2b6bccfb913c1b64b0abfef3ec785e1f08ccaf__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e329dc8768cebcd7d1896e8545f31c7224416415be21ea09b3bab9d66109d3db__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1556:16","statements":[{"nodeType":"YulBlock","src":"6:3:16","statements":[]},{"body":{"nodeType":"YulBlock","src":"115:76:16","statements":[{"nodeType":"YulAssignment","src":"125:26:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"137:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"148:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"133:3:16"},"nodeType":"YulFunctionCall","src":"133:18:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"125:4:16"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"167:9:16"},{"name":"value0","nodeType":"YulIdentifier","src":"178:6:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"160:6:16"},"nodeType":"YulFunctionCall","src":"160:25:16"},"nodeType":"YulExpressionStatement","src":"160:25:16"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"84:9:16","type":""},{"name":"value0","nodeType":"YulTypedName","src":"95:6:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"106:4:16","type":""}],"src":"14:177:16"},{"body":{"nodeType":"YulBlock","src":"266:216:16","statements":[{"body":{"nodeType":"YulBlock","src":"312:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"321:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"324:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"314:6:16"},"nodeType":"YulFunctionCall","src":"314:12:16"},"nodeType":"YulExpressionStatement","src":"314:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"287:7:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"296:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"283:3:16"},"nodeType":"YulFunctionCall","src":"283:23:16"},{"kind":"number","nodeType":"YulLiteral","src":"308:2:16","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"279:3:16"},"nodeType":"YulFunctionCall","src":"279:32:16"},"nodeType":"YulIf","src":"276:52:16"},{"nodeType":"YulVariableDeclaration","src":"337:36:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"363:9:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"350:12:16"},"nodeType":"YulFunctionCall","src":"350:23:16"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"341:5:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"436:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"445:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"448:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"438:6:16"},"nodeType":"YulFunctionCall","src":"438:12:16"},"nodeType":"YulExpressionStatement","src":"438:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"395:5:16"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"406:5:16"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"421:3:16","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"426:1:16","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"417:3:16"},"nodeType":"YulFunctionCall","src":"417:11:16"},{"kind":"number","nodeType":"YulLiteral","src":"430:1:16","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"413:3:16"},"nodeType":"YulFunctionCall","src":"413:19:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"402:3:16"},"nodeType":"YulFunctionCall","src":"402:31:16"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"392:2:16"},"nodeType":"YulFunctionCall","src":"392:42:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"385:6:16"},"nodeType":"YulFunctionCall","src":"385:50:16"},"nodeType":"YulIf","src":"382:70:16"},{"nodeType":"YulAssignment","src":"461:15:16","value":{"name":"value","nodeType":"YulIdentifier","src":"471:5:16"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"461:6:16"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"232:9:16","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"243:7:16","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"255:6:16","type":""}],"src":"196:286:16"},{"body":{"nodeType":"YulBlock","src":"582:92:16","statements":[{"nodeType":"YulAssignment","src":"592:26:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"604:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"615:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"600:3:16"},"nodeType":"YulFunctionCall","src":"600:18:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"592:4:16"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"634:9:16"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"659:6:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"652:6:16"},"nodeType":"YulFunctionCall","src":"652:14:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"645:6:16"},"nodeType":"YulFunctionCall","src":"645:22:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"627:6:16"},"nodeType":"YulFunctionCall","src":"627:41:16"},"nodeType":"YulExpressionStatement","src":"627:41:16"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"551:9:16","type":""},{"name":"value0","nodeType":"YulTypedName","src":"562:6:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"573:4:16","type":""}],"src":"487:187:16"},{"body":{"nodeType":"YulBlock","src":"749:110:16","statements":[{"body":{"nodeType":"YulBlock","src":"795:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"804:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"807:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"797:6:16"},"nodeType":"YulFunctionCall","src":"797:12:16"},"nodeType":"YulExpressionStatement","src":"797:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"770:7:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"779:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"766:3:16"},"nodeType":"YulFunctionCall","src":"766:23:16"},{"kind":"number","nodeType":"YulLiteral","src":"791:2:16","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"762:3:16"},"nodeType":"YulFunctionCall","src":"762:32:16"},"nodeType":"YulIf","src":"759:52:16"},{"nodeType":"YulAssignment","src":"820:33:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"843:9:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"830:12:16"},"nodeType":"YulFunctionCall","src":"830:23:16"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"820:6:16"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"715:9:16","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"726:7:16","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"738:6:16","type":""}],"src":"679:180:16"},{"body":{"nodeType":"YulBlock","src":"1038:174:16","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1055:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"1066:2:16","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1048:6:16"},"nodeType":"YulFunctionCall","src":"1048:21:16"},"nodeType":"YulExpressionStatement","src":"1048:21:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1089:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"1100:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1085:3:16"},"nodeType":"YulFunctionCall","src":"1085:18:16"},{"kind":"number","nodeType":"YulLiteral","src":"1105:2:16","type":"","value":"24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1078:6:16"},"nodeType":"YulFunctionCall","src":"1078:30:16"},"nodeType":"YulExpressionStatement","src":"1078:30:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1128:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"1139:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1124:3:16"},"nodeType":"YulFunctionCall","src":"1124:18:16"},{"hexValue":"4e6f74206120726567697374657265642062756e646c6572","kind":"string","nodeType":"YulLiteral","src":"1144:26:16","type":"","value":"Not a registered bundler"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1117:6:16"},"nodeType":"YulFunctionCall","src":"1117:54:16"},"nodeType":"YulExpressionStatement","src":"1117:54:16"},{"nodeType":"YulAssignment","src":"1180:26:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1192:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"1203:2:16","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1188:3:16"},"nodeType":"YulFunctionCall","src":"1188:18:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1180:4:16"}]}]},"name":"abi_encode_tuple_t_stringliteral_e329dc8768cebcd7d1896e8545f31c7224416415be21ea09b3bab9d66109d3db__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1015:9:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1029:4:16","type":""}],"src":"864:348:16"},{"body":{"nodeType":"YulBlock","src":"1391:163:16","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1408:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"1419:2:16","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1401:6:16"},"nodeType":"YulFunctionCall","src":"1401:21:16"},"nodeType":"YulExpressionStatement","src":"1401:21:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1442:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"1453:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1438:3:16"},"nodeType":"YulFunctionCall","src":"1438:18:16"},{"kind":"number","nodeType":"YulLiteral","src":"1458:2:16","type":"","value":"13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1431:6:16"},"nodeType":"YulFunctionCall","src":"1431:30:16"},"nodeType":"YulExpressionStatement","src":"1431:30:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1481:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"1492:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1477:3:16"},"nodeType":"YulFunctionCall","src":"1477:18:16"},{"hexValue":"496e636f727265637420666565","kind":"string","nodeType":"YulLiteral","src":"1497:15:16","type":"","value":"Incorrect fee"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1470:6:16"},"nodeType":"YulFunctionCall","src":"1470:43:16"},"nodeType":"YulExpressionStatement","src":"1470:43:16"},{"nodeType":"YulAssignment","src":"1522:26:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1534:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"1545:2:16","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1530:3:16"},"nodeType":"YulFunctionCall","src":"1530:18:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1522:4:16"}]}]},"name":"abi_encode_tuple_t_stringliteral_24d732dbfadb06a9deb2730d8b2b6bccfb913c1b64b0abfef3ec785e1f08ccaf__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1368:9:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1382:4:16","type":""}],"src":"1217:337:16"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_e329dc8768cebcd7d1896e8545f31c7224416415be21ea09b3bab9d66109d3db__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"Not a registered bundler\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_24d732dbfadb06a9deb2730d8b2b6bccfb913c1b64b0abfef3ec785e1f08ccaf__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 13)\n        mstore(add(headStart, 64), \"Incorrect fee\")\n        tail := add(headStart, 96)\n    }\n}","id":16,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"6080604052600436106100555760003560e01c806314c44e091461005a5780632220967e146100835780633defb962146100b0578063551530d6146100c7578063827a0ea614610107578063c320c7271461010f575b600080fd5b34801561006657600080fd5b5061007060025481565b6040519081526020015b60405180910390f35b34801561008f57600080fd5b5061007061009e366004610260565b60016020526000908152604090205481565b3480156100bc57600080fd5b506100c561012f565b005b3480156100d357600080fd5b506100f76100e2366004610260565b60006020819052908152604090205460ff1681565b604051901515815260200161007a565b6100c56101dd565b34801561011b57600080fd5b506100c561012a366004610290565b600255565b3360009081526020819052604090205460ff166101935760405162461bcd60e51b815260206004820152601860248201527f4e6f74206120726567697374657265642062756e646c6572000000000000000060448201526064015b60405180910390fd5b33600081815260016020908152604091829020429081905591519182527f524ff62d10e7448ae7f4b3312273a3f8400a0662bc7991a69119576c86cecabe910160405180910390a2565b600254341461021e5760405162461bcd60e51b815260206004820152600d60248201526c496e636f72726563742066656560981b604482015260640161018a565b33600081815260208190526040808220805460ff19166001179055517f2f8f01b91096d69e5a523003459876ae74534592e7ffe3ab00a1a21e9a8f5d9c9190a2565b60006020828403121561027257600080fd5b81356001600160a01b038116811461028957600080fd5b9392505050565b6000602082840312156102a257600080fd5b503591905056fea26469706673582212206f597bfb89231640d309447cf9ba42fbaef92f5f79a52560f703b5e703717a4764736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x55 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x14C44E09 EQ PUSH2 0x5A JUMPI DUP1 PUSH4 0x2220967E EQ PUSH2 0x83 JUMPI DUP1 PUSH4 0x3DEFB962 EQ PUSH2 0xB0 JUMPI DUP1 PUSH4 0x551530D6 EQ PUSH2 0xC7 JUMPI DUP1 PUSH4 0x827A0EA6 EQ PUSH2 0x107 JUMPI DUP1 PUSH4 0xC320C727 EQ PUSH2 0x10F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x70 PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x70 PUSH2 0x9E CALLDATASIZE PUSH1 0x4 PUSH2 0x260 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC5 PUSH2 0x12F JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF7 PUSH2 0xE2 CALLDATASIZE PUSH1 0x4 PUSH2 0x260 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7A JUMP JUMPDEST PUSH2 0xC5 PUSH2 0x1DD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x11B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC5 PUSH2 0x12A CALLDATASIZE PUSH1 0x4 PUSH2 0x290 JUMP JUMPDEST PUSH1 0x2 SSTORE JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x193 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F74206120726567697374657265642062756E646C65720000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 TIMESTAMP SWAP1 DUP2 SWAP1 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x524FF62D10E7448AE7F4B3312273A3F8400A0662BC7991A69119576C86CECABE SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x2 SLOAD CALLVALUE EQ PUSH2 0x21E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x496E636F727265637420666565 PUSH1 0x98 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x18A JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD PUSH32 0x2F8F01B91096D69E5A523003459876AE74534592E7FFE3AB00A1A21E9A8F5D9C SWAP2 SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x272 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x289 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH16 0x597BFB89231640D309447CF9BA42FBAE 0xF9 0x2F 0x5F PUSH26 0xA52560F703B5E703717A4764736F6C6343000813003300000000 ","sourceMap":"57:917:13:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;179:30;;;;;;;;;;;;;;;;;;;160:25:16;;;148:2;133:18;179:30:13;;;;;;;;128:48;;;;;;;;;;-1:-1:-1;128:48:13;;;;;:::i;:::-;;;;;;;;;;;;;;590:188;;;;;;;;;;;;;:::i;:::-;;84:41;;;;;;;;;;-1:-1:-1;84:41:13;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;652:14:16;;645:22;627:41;;615:2;600:18;84:41:13;487:187:16;366:176:13;;;:::i;824:109::-;;;;;;;;;;-1:-1:-1;824:109:13;;;;;:::i;:::-;908:15;:21;824:109;590:188;640:10;630:9;:21;;;;;;;;;;;;;622:58;;;;-1:-1:-1;;;622:58:13;;1066:2:16;622:58:13;;;1048:21:16;1105:2;1085:18;;;1078:30;1144:26;1124:18;;;1117:54;1188:18;;622:58:13;;;;;;;;;698:10;684:25;;;;:13;:25;;;;;;;;;712:15;684:43;;;;736:38;;160:25:16;;;736:38:13;;133:18:16;736:38:13;;;;;;;590:188::o;366:176::-;435:15;;422:9;:28;414:54;;;;-1:-1:-1;;;414:54:13;;1419:2:16;414:54:13;;;1401:21:16;1458:2;1438:18;;;1431:30;-1:-1:-1;;;1477:18:16;;;1470:43;1530:18;;414:54:13;1217:337:16;414:54:13;482:10;472:9;:21;;;;;;;;;;;:28;;-1:-1:-1;;472:28:13;496:4;472:28;;;509:29;;;472:9;509:29;366:176::o;196:286:16:-;255:6;308:2;296:9;287:7;283:23;279:32;276:52;;;324:1;321;314:12;276:52;350:23;;-1:-1:-1;;;;;402:31:16;;392:42;;382:70;;448:1;445;438:12;382:70;471:5;196:286;-1:-1:-1;;;196:286:16:o;679:180::-;738:6;791:2;779:9;770:7;766:23;762:32;759:52;;;807:1;804;797:12;759:52;-1:-1:-1;830:23:16;;679:180;-1:-1:-1;679:180:16:o"},"gasEstimates":{"creation":{"codeDepositCost":"147000","executionCost":"190","totalCost":"147190"},"external":{"heartbeat()":"25983","isBundler(address)":"2543","lastHeartbeat(address)":"2473","registerAsBundler()":"27743","registrationFee()":"2262","setRegistrationFee(uint256)":"22400"}},"methodIdentifiers":{"heartbeat()":"3defb962","isBundler(address)":"551530d6","lastHeartbeat(address)":"2220967e","registerAsBundler()":"827a0ea6","registrationFee()":"14c44e09","setRegistrationFee(uint256)":"c320c727"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bundler\",\"type\":\"address\"}],\"name\":\"BundlerRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bundler\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Heartbeat\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"heartbeat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBundler\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastHeartbeat\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerAsBundler\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registrationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setRegistrationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BundlerManager.sol\":\"BundlerManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/BundlerManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ncontract BundlerManager {\\n\\tmapping(address => bool) public isBundler;\\n\\tmapping(address => uint256) public lastHeartbeat;\\n\\tuint256 public registrationFee;\\n\\n\\tevent BundlerRegistered(address indexed bundler);\\n\\tevent Heartbeat(address indexed bundler, uint256 timestamp);\\n\\n\\t// Registration function for Bundlers\\n\\tfunction registerAsBundler() public payable {\\n\\t\\trequire(msg.value == registrationFee, \\\"Incorrect fee\\\");\\n\\t\\tisBundler[msg.sender] = true;\\n\\t\\temit BundlerRegistered(msg.sender);\\n\\t}\\n\\n\\t// Function for Bundlers to signal activity\\n\\tfunction heartbeat() public {\\n\\t\\trequire(isBundler[msg.sender], \\\"Not a registered bundler\\\");\\n\\t\\tlastHeartbeat[msg.sender] = block.timestamp;\\n\\t\\temit Heartbeat(msg.sender, block.timestamp);\\n\\t}\\n\\n\\t// Admin function to set registration fee\\n\\tfunction setRegistrationFee(uint256 fee) public {\\n\\t\\t// Only admin can set the fee\\n\\t\\tregistrationFee = fee;\\n\\t}\\n\\n\\t// Additional functions as needed...\\n}\\n\",\"keccak256\":\"0x96acbc5a745d9fb1af695f8f57b48c4f1bc7a70f4fd5a3b030de4ebfe8b5e2c5\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3725,"contract":"contracts/BundlerManager.sol:BundlerManager","label":"isBundler","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":3729,"contract":"contracts/BundlerManager.sol:BundlerManager","label":"lastHeartbeat","offset":0,"slot":"1","type":"t_mapping(t_address,t_uint256)"},{"astId":3731,"contract":"contracts/BundlerManager.sol:BundlerManager","label":"registrationFee","offset":0,"slot":"2","type":"t_uint256"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/ExecutorManager.sol":{"ExecutorManager":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"executor","type":"address"}],"name":"ExecutorRegistered","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"executor","type":"address"}],"name":"ExecutorUnregistered","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"EXECUTOR_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"executor","type":"address"}],"name":"isExecutor","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"executor","type":"address"}],"name":"registerExecutor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"executor","type":"address"}],"name":"unregisterExecutor","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_3831":{"entryPoint":null,"id":3831,"parameterSlots":0,"returnSlots":0},"@_grantRole_283":{"entryPoint":47,"id":283,"parameterSlots":2,"returnSlots":0},"@_msgSender_2131":{"entryPoint":null,"id":2131,"parameterSlots":0,"returnSlots":1},"@_setupRole_223":{"entryPoint":33,"id":223,"parameterSlots":2,"returnSlots":0},"@hasRole_79":{"entryPoint":null,"id":79,"parameterSlots":2,"returnSlots":1}},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b5061001c600033610021565b6100cd565b61002b828261002f565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1661002b576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556100893390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610906806100dc6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063894d12c211610071578063894d12c21461014457806391d1485414610157578063a09c59fb1461016a578063a217fddf1461017d578063d547741f14610185578063debfda301461019857600080fd5b806301ffc9a7146100ae57806307bd0265146100d6578063248a9ca3146100f95780632f2ff15d1461011c57806336568abe14610131575b600080fd5b6100c16100bc3660046106bb565b6101ab565b60405190151581526020015b60405180910390f35b6100eb6000805160206108b183398151915281565b6040519081526020016100cd565b6100eb6101073660046106e5565b60009081526020819052604090206001015490565b61012f61012a36600461071a565b6101e2565b005b61012f61013f36600461071a565b61020c565b61012f610152366004610746565b61028f565b6100c161016536600461071a565b6102ea565b61012f610178366004610746565b610313565b6100eb600081565b61012f61019336600461071a565b61036e565b6100c16101a6366004610746565b610393565b60006001600160e01b03198216637965db0b60e01b14806101dc57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000828152602081905260409020600101546101fd816103ad565b61020783836103ba565b505050565b6001600160a01b03811633146102815760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b61028b828261043e565b5050565b600061029a816103ad565b6102b26000805160206108b18339815191528361043e565b6040516001600160a01b038316907fdd96f65ca46c65c337946f2242c6e8a2383b8733b20e36dad5b48a648ea3210890600090a25050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600061031e816103ad565b6103366000805160206108b1833981519152836104a3565b6040516001600160a01b038316907f12ad16bd2a8e5f789a2584f92dba7594ec459e9eb0d00b0dba8843f6c59f035b90600090a25050565b600082815260208190526040902060010154610389816103ad565b610207838361043e565b60006101dc6000805160206108b1833981519152836102ea565b6103b781336104ad565b50565b6103c482826102ea565b61028b576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556103fa3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61044882826102ea565b1561028b576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b61028b82826103ba565b6104b782826102ea565b61028b576104c481610506565b6104cf836020610518565b6040516020016104e0929190610785565b60408051601f198184030181529082905262461bcd60e51b8252610278916004016107fa565b60606101dc6001600160a01b03831660145b60606000610527836002610843565b61053290600261085a565b67ffffffffffffffff81111561054a5761054a61086d565b6040519080825280601f01601f191660200182016040528015610574576020820181803683370190505b509050600360fc1b8160008151811061058f5761058f610883565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106105be576105be610883565b60200101906001600160f81b031916908160001a90535060006105e2846002610843565b6105ed90600161085a565b90505b6001811115610665576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061062157610621610883565b1a60f81b82828151811061063757610637610883565b60200101906001600160f81b031916908160001a90535060049490941c9361065e81610899565b90506105f0565b5083156106b45760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610278565b9392505050565b6000602082840312156106cd57600080fd5b81356001600160e01b0319811681146106b457600080fd5b6000602082840312156106f757600080fd5b5035919050565b80356001600160a01b038116811461071557600080fd5b919050565b6000806040838503121561072d57600080fd5b8235915061073d602084016106fe565b90509250929050565b60006020828403121561075857600080fd5b6106b4826106fe565b60005b8381101561077c578181015183820152602001610764565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516107bd816017850160208801610761565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516107ee816028840160208801610761565b01602801949350505050565b6020815260008251806020840152610819816040850160208701610761565b601f01601f19169190910160400192915050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176101dc576101dc61082d565b808201808211156101dc576101dc61082d565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000816108a8576108a861082d565b50600019019056fed8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63a26469706673582212207a6934922d690497ff91f54a3cf13c8e12ba1e47b4a80d3956e051824f35cec064736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1C PUSH1 0x0 CALLER PUSH2 0x21 JUMP JUMPDEST PUSH2 0xCD JUMP JUMPDEST PUSH2 0x2B DUP3 DUP3 PUSH2 0x2F JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x2B JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x89 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0x906 DUP1 PUSH2 0xDC PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x894D12C2 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x894D12C2 EQ PUSH2 0x144 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x157 JUMPI DUP1 PUSH4 0xA09C59FB EQ PUSH2 0x16A JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x17D JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x185 JUMPI DUP1 PUSH4 0xDEBFDA30 EQ PUSH2 0x198 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x7BD0265 EQ PUSH2 0xD6 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0xF9 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x11C JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x131 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC1 PUSH2 0xBC CALLDATASIZE PUSH1 0x4 PUSH2 0x6BB JUMP JUMPDEST PUSH2 0x1AB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xEB PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x8B1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xCD JUMP JUMPDEST PUSH2 0xEB PUSH2 0x107 CALLDATASIZE PUSH1 0x4 PUSH2 0x6E5 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x12F PUSH2 0x12A CALLDATASIZE PUSH1 0x4 PUSH2 0x71A JUMP JUMPDEST PUSH2 0x1E2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x12F PUSH2 0x13F CALLDATASIZE PUSH1 0x4 PUSH2 0x71A JUMP JUMPDEST PUSH2 0x20C JUMP JUMPDEST PUSH2 0x12F PUSH2 0x152 CALLDATASIZE PUSH1 0x4 PUSH2 0x746 JUMP JUMPDEST PUSH2 0x28F JUMP JUMPDEST PUSH2 0xC1 PUSH2 0x165 CALLDATASIZE PUSH1 0x4 PUSH2 0x71A JUMP JUMPDEST PUSH2 0x2EA JUMP JUMPDEST PUSH2 0x12F PUSH2 0x178 CALLDATASIZE PUSH1 0x4 PUSH2 0x746 JUMP JUMPDEST PUSH2 0x313 JUMP JUMPDEST PUSH2 0xEB PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH2 0x12F PUSH2 0x193 CALLDATASIZE PUSH1 0x4 PUSH2 0x71A JUMP JUMPDEST PUSH2 0x36E JUMP JUMPDEST PUSH2 0xC1 PUSH2 0x1A6 CALLDATASIZE PUSH1 0x4 PUSH2 0x746 JUMP JUMPDEST PUSH2 0x393 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x1DC JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x1FD DUP2 PUSH2 0x3AD JUMP JUMPDEST PUSH2 0x207 DUP4 DUP4 PUSH2 0x3BA JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x281 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x103937B632B9903337B91039B2B633 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x28B DUP3 DUP3 PUSH2 0x43E JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29A DUP2 PUSH2 0x3AD JUMP JUMPDEST PUSH2 0x2B2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x8B1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH2 0x43E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH32 0xDD96F65CA46C65C337946F2242C6E8A2383B8733B20E36DAD5B48A648EA32108 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x31E DUP2 PUSH2 0x3AD JUMP JUMPDEST PUSH2 0x336 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x8B1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH2 0x4A3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH32 0x12AD16BD2A8E5F789A2584F92DBA7594EC459E9EB0D00B0DBA8843F6C59F035B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x389 DUP2 PUSH2 0x3AD JUMP JUMPDEST PUSH2 0x207 DUP4 DUP4 PUSH2 0x43E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DC PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x8B1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH2 0x2EA JUMP JUMPDEST PUSH2 0x3B7 DUP2 CALLER PUSH2 0x4AD JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x3C4 DUP3 DUP3 PUSH2 0x2EA JUMP JUMPDEST PUSH2 0x28B JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x3FA CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0x448 DUP3 DUP3 PUSH2 0x2EA JUMP JUMPDEST ISZERO PUSH2 0x28B JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0x28B DUP3 DUP3 PUSH2 0x3BA JUMP JUMPDEST PUSH2 0x4B7 DUP3 DUP3 PUSH2 0x2EA JUMP JUMPDEST PUSH2 0x28B JUMPI PUSH2 0x4C4 DUP2 PUSH2 0x506 JUMP JUMPDEST PUSH2 0x4CF DUP4 PUSH1 0x20 PUSH2 0x518 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4E0 SWAP3 SWAP2 SWAP1 PUSH2 0x785 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH2 0x278 SWAP2 PUSH1 0x4 ADD PUSH2 0x7FA JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1DC PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x14 JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x527 DUP4 PUSH1 0x2 PUSH2 0x843 JUMP JUMPDEST PUSH2 0x532 SWAP1 PUSH1 0x2 PUSH2 0x85A JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x54A JUMPI PUSH2 0x54A PUSH2 0x86D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x574 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x3 PUSH1 0xFC SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x58F JUMPI PUSH2 0x58F PUSH2 0x883 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xF PUSH1 0xFB SHL DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x5BE JUMPI PUSH2 0x5BE PUSH2 0x883 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH2 0x5E2 DUP5 PUSH1 0x2 PUSH2 0x843 JUMP JUMPDEST PUSH2 0x5ED SWAP1 PUSH1 0x1 PUSH2 0x85A JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x665 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH2 0x621 JUMPI PUSH2 0x621 PUSH2 0x883 JUMP JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x637 JUMPI PUSH2 0x637 PUSH2 0x883 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH2 0x65E DUP2 PUSH2 0x899 JUMP JUMPDEST SWAP1 POP PUSH2 0x5F0 JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0x6B4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x278 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x6B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x715 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x72D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x73D PUSH1 0x20 DUP5 ADD PUSH2 0x6FE JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x758 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6B4 DUP3 PUSH2 0x6FE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x77C JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x764 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH2 0x7BD DUP2 PUSH1 0x17 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x761 JUMP JUMPDEST PUSH17 0x1034B99036B4B9B9B4B733903937B6329 PUSH1 0x7D SHL PUSH1 0x17 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x7EE DUP2 PUSH1 0x28 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x761 JUMP JUMPDEST ADD PUSH1 0x28 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x819 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x761 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x1DC JUMPI PUSH2 0x1DC PUSH2 0x82D JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x1DC JUMPI PUSH2 0x1DC PUSH2 0x82D JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x8A8 JUMPI PUSH2 0x8A8 PUSH2 0x82D JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP INVALID 0xD8 0xAA 0xF BALANCE SWAP5 SWAP8 BYTE 0x2A GT PUSH7 0x79F7C2090F6939 0xC8 0xD4 0xE0 BYTE 0x2A DUP14 PUSH31 0x41D55E5351469E63A26469706673582212207A6934922D690497FF91F54A3C CALL EXTCODECOPY DUP15 SLT 0xBA 0x1E SELFBALANCE 0xB4 0xA8 0xD CODECOPY JUMP 0xE0 MLOAD DUP3 0x4F CALLDATALOAD 0xCE 0xC0 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"117:872:14:-:0;;;341:64;;;;;;;;;-1:-1:-1;359:42:14;2072:4:0;390:10:14;359;:42::i;:::-;117:872;;6811:110:0;6889:25;6900:4;6906:7;6889:10;:25::i;:::-;6811:110;;:::o;7461:233::-;2981:4;3004:12;;;;;;;;;;;-1:-1:-1;;;;;3004:29:0;;;;;;;;;;;;7539:149;;7582:6;:12;;;;;;;;;;;-1:-1:-1;;;;;7582:29:0;;;;;;;;;:36;;-1:-1:-1;;7582:36:0;7614:4;7582:36;;;7664:12;719:10:7;;640:96;7664:12:0;-1:-1:-1;;;;;7637:40:0;7655:7;-1:-1:-1;;;;;7637:40:0;7649:4;7637:40;;;;;;;;;;7461:233;;:::o;117:872:14:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@DEFAULT_ADMIN_ROLE_27":{"entryPoint":null,"id":27,"parameterSlots":0,"returnSlots":0},"@EXECUTOR_ROLE_3813":{"entryPoint":null,"id":3813,"parameterSlots":0,"returnSlots":0},"@_checkRole_131":{"entryPoint":1197,"id":131,"parameterSlots":2,"returnSlots":0},"@_checkRole_92":{"entryPoint":941,"id":92,"parameterSlots":1,"returnSlots":0},"@_grantRole_283":{"entryPoint":954,"id":283,"parameterSlots":2,"returnSlots":0},"@_msgSender_2131":{"entryPoint":null,"id":2131,"parameterSlots":0,"returnSlots":1},"@_revokeRole_314":{"entryPoint":1086,"id":314,"parameterSlots":2,"returnSlots":0},"@_setupRole_223":{"entryPoint":1187,"id":223,"parameterSlots":2,"returnSlots":0},"@getRoleAdmin_146":{"entryPoint":null,"id":146,"parameterSlots":1,"returnSlots":1},"@grantRole_166":{"entryPoint":482,"id":166,"parameterSlots":2,"returnSlots":0},"@hasRole_79":{"entryPoint":746,"id":79,"parameterSlots":2,"returnSlots":1},"@isExecutor_3880":{"entryPoint":915,"id":3880,"parameterSlots":1,"returnSlots":1},"@registerExecutor_3849":{"entryPoint":787,"id":3849,"parameterSlots":1,"returnSlots":0},"@renounceRole_209":{"entryPoint":524,"id":209,"parameterSlots":2,"returnSlots":0},"@revokeRole_186":{"entryPoint":878,"id":186,"parameterSlots":2,"returnSlots":0},"@supportsInterface_2841":{"entryPoint":null,"id":2841,"parameterSlots":1,"returnSlots":1},"@supportsInterface_60":{"entryPoint":427,"id":60,"parameterSlots":1,"returnSlots":1},"@toHexString_2295":{"entryPoint":1304,"id":2295,"parameterSlots":2,"returnSlots":1},"@toHexString_2315":{"entryPoint":1286,"id":2315,"parameterSlots":1,"returnSlots":1},"@unregisterExecutor_3867":{"entryPoint":655,"id":3867,"parameterSlots":1,"returnSlots":0},"abi_decode_address":{"entryPoint":1790,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":1862,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":1765,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":1818,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":1723,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":1925,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":2042,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":2138,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":2115,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":1889,"id":null,"parameterSlots":3,"returnSlots":0},"decrement_t_uint256":{"entryPoint":2201,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":2093,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":2179,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":2157,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:4579:16","statements":[{"nodeType":"YulBlock","src":"6:3:16","statements":[]},{"body":{"nodeType":"YulBlock","src":"83:217:16","statements":[{"body":{"nodeType":"YulBlock","src":"129:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"138:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"141:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"131:6:16"},"nodeType":"YulFunctionCall","src":"131:12:16"},"nodeType":"YulExpressionStatement","src":"131:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"104:7:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"113:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"100:3:16"},"nodeType":"YulFunctionCall","src":"100:23:16"},{"kind":"number","nodeType":"YulLiteral","src":"125:2:16","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"96:3:16"},"nodeType":"YulFunctionCall","src":"96:32:16"},"nodeType":"YulIf","src":"93:52:16"},{"nodeType":"YulVariableDeclaration","src":"154:36:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"180:9:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"167:12:16"},"nodeType":"YulFunctionCall","src":"167:23:16"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"158:5:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"254:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"263:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"266:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"256:6:16"},"nodeType":"YulFunctionCall","src":"256:12:16"},"nodeType":"YulExpressionStatement","src":"256:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"212:5:16"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"223:5:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"234:3:16","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"239:10:16","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"230:3:16"},"nodeType":"YulFunctionCall","src":"230:20:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"219:3:16"},"nodeType":"YulFunctionCall","src":"219:32:16"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"209:2:16"},"nodeType":"YulFunctionCall","src":"209:43:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"202:6:16"},"nodeType":"YulFunctionCall","src":"202:51:16"},"nodeType":"YulIf","src":"199:71:16"},{"nodeType":"YulAssignment","src":"279:15:16","value":{"name":"value","nodeType":"YulIdentifier","src":"289:5:16"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"279:6:16"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"49:9:16","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"60:7:16","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"72:6:16","type":""}],"src":"14:286:16"},{"body":{"nodeType":"YulBlock","src":"400:92:16","statements":[{"nodeType":"YulAssignment","src":"410:26:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"422:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"433:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"418:3:16"},"nodeType":"YulFunctionCall","src":"418:18:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"410:4:16"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"452:9:16"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"477:6:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"470:6:16"},"nodeType":"YulFunctionCall","src":"470:14:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"463:6:16"},"nodeType":"YulFunctionCall","src":"463:22:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"445:6:16"},"nodeType":"YulFunctionCall","src":"445:41:16"},"nodeType":"YulExpressionStatement","src":"445:41:16"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"369:9:16","type":""},{"name":"value0","nodeType":"YulTypedName","src":"380:6:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"391:4:16","type":""}],"src":"305:187:16"},{"body":{"nodeType":"YulBlock","src":"598:76:16","statements":[{"nodeType":"YulAssignment","src":"608:26:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"620:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"631:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"616:3:16"},"nodeType":"YulFunctionCall","src":"616:18:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"608:4:16"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"650:9:16"},{"name":"value0","nodeType":"YulIdentifier","src":"661:6:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"643:6:16"},"nodeType":"YulFunctionCall","src":"643:25:16"},"nodeType":"YulExpressionStatement","src":"643:25:16"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"567:9:16","type":""},{"name":"value0","nodeType":"YulTypedName","src":"578:6:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"589:4:16","type":""}],"src":"497:177:16"},{"body":{"nodeType":"YulBlock","src":"749:110:16","statements":[{"body":{"nodeType":"YulBlock","src":"795:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"804:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"807:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"797:6:16"},"nodeType":"YulFunctionCall","src":"797:12:16"},"nodeType":"YulExpressionStatement","src":"797:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"770:7:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"779:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"766:3:16"},"nodeType":"YulFunctionCall","src":"766:23:16"},{"kind":"number","nodeType":"YulLiteral","src":"791:2:16","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"762:3:16"},"nodeType":"YulFunctionCall","src":"762:32:16"},"nodeType":"YulIf","src":"759:52:16"},{"nodeType":"YulAssignment","src":"820:33:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"843:9:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"830:12:16"},"nodeType":"YulFunctionCall","src":"830:23:16"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"820:6:16"}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"715:9:16","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"726:7:16","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"738:6:16","type":""}],"src":"679:180:16"},{"body":{"nodeType":"YulBlock","src":"913:124:16","statements":[{"nodeType":"YulAssignment","src":"923:29:16","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"945:6:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"932:12:16"},"nodeType":"YulFunctionCall","src":"932:20:16"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"923:5:16"}]},{"body":{"nodeType":"YulBlock","src":"1015:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1024:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1027:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1017:6:16"},"nodeType":"YulFunctionCall","src":"1017:12:16"},"nodeType":"YulExpressionStatement","src":"1017:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"974:5:16"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"985:5:16"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1000:3:16","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1005:1:16","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"996:3:16"},"nodeType":"YulFunctionCall","src":"996:11:16"},{"kind":"number","nodeType":"YulLiteral","src":"1009:1:16","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"992:3:16"},"nodeType":"YulFunctionCall","src":"992:19:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"981:3:16"},"nodeType":"YulFunctionCall","src":"981:31:16"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"971:2:16"},"nodeType":"YulFunctionCall","src":"971:42:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"964:6:16"},"nodeType":"YulFunctionCall","src":"964:50:16"},"nodeType":"YulIf","src":"961:70:16"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"892:6:16","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"903:5:16","type":""}],"src":"864:173:16"},{"body":{"nodeType":"YulBlock","src":"1129:167:16","statements":[{"body":{"nodeType":"YulBlock","src":"1175:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1184:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1187:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1177:6:16"},"nodeType":"YulFunctionCall","src":"1177:12:16"},"nodeType":"YulExpressionStatement","src":"1177:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1150:7:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"1159:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1146:3:16"},"nodeType":"YulFunctionCall","src":"1146:23:16"},{"kind":"number","nodeType":"YulLiteral","src":"1171:2:16","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1142:3:16"},"nodeType":"YulFunctionCall","src":"1142:32:16"},"nodeType":"YulIf","src":"1139:52:16"},{"nodeType":"YulAssignment","src":"1200:33:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1223:9:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1210:12:16"},"nodeType":"YulFunctionCall","src":"1210:23:16"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1200:6:16"}]},{"nodeType":"YulAssignment","src":"1242:48:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1275:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"1286:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1271:3:16"},"nodeType":"YulFunctionCall","src":"1271:18:16"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1252:18:16"},"nodeType":"YulFunctionCall","src":"1252:38:16"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1242:6:16"}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1087:9:16","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1098:7:16","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1110:6:16","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1118:6:16","type":""}],"src":"1042:254:16"},{"body":{"nodeType":"YulBlock","src":"1371:116:16","statements":[{"body":{"nodeType":"YulBlock","src":"1417:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1426:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1429:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1419:6:16"},"nodeType":"YulFunctionCall","src":"1419:12:16"},"nodeType":"YulExpressionStatement","src":"1419:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1392:7:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"1401:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1388:3:16"},"nodeType":"YulFunctionCall","src":"1388:23:16"},{"kind":"number","nodeType":"YulLiteral","src":"1413:2:16","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1384:3:16"},"nodeType":"YulFunctionCall","src":"1384:32:16"},"nodeType":"YulIf","src":"1381:52:16"},{"nodeType":"YulAssignment","src":"1442:39:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1471:9:16"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1452:18:16"},"nodeType":"YulFunctionCall","src":"1452:29:16"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1442:6:16"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1337:9:16","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1348:7:16","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1360:6:16","type":""}],"src":"1301:186:16"},{"body":{"nodeType":"YulBlock","src":"1666:237:16","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1683:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"1694:2:16","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1676:6:16"},"nodeType":"YulFunctionCall","src":"1676:21:16"},"nodeType":"YulExpressionStatement","src":"1676:21:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1717:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"1728:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1713:3:16"},"nodeType":"YulFunctionCall","src":"1713:18:16"},{"kind":"number","nodeType":"YulLiteral","src":"1733:2:16","type":"","value":"47"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1706:6:16"},"nodeType":"YulFunctionCall","src":"1706:30:16"},"nodeType":"YulExpressionStatement","src":"1706:30:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1756:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"1767:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1752:3:16"},"nodeType":"YulFunctionCall","src":"1752:18:16"},{"hexValue":"416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e6365","kind":"string","nodeType":"YulLiteral","src":"1772:34:16","type":"","value":"AccessControl: can only renounce"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1745:6:16"},"nodeType":"YulFunctionCall","src":"1745:62:16"},"nodeType":"YulExpressionStatement","src":"1745:62:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1827:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"1838:2:16","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1823:3:16"},"nodeType":"YulFunctionCall","src":"1823:18:16"},{"hexValue":"20726f6c657320666f722073656c66","kind":"string","nodeType":"YulLiteral","src":"1843:17:16","type":"","value":" roles for self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1816:6:16"},"nodeType":"YulFunctionCall","src":"1816:45:16"},"nodeType":"YulExpressionStatement","src":"1816:45:16"},{"nodeType":"YulAssignment","src":"1870:27:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1882:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"1893:3:16","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1878:3:16"},"nodeType":"YulFunctionCall","src":"1878:19:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1870:4:16"}]}]},"name":"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1643:9:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1657:4:16","type":""}],"src":"1492:411:16"},{"body":{"nodeType":"YulBlock","src":"1974:184:16","statements":[{"nodeType":"YulVariableDeclaration","src":"1984:10:16","value":{"kind":"number","nodeType":"YulLiteral","src":"1993:1:16","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1988:1:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"2053:63:16","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2078:3:16"},{"name":"i","nodeType":"YulIdentifier","src":"2083:1:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2074:3:16"},"nodeType":"YulFunctionCall","src":"2074:11:16"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2097:3:16"},{"name":"i","nodeType":"YulIdentifier","src":"2102:1:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2093:3:16"},"nodeType":"YulFunctionCall","src":"2093:11:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2087:5:16"},"nodeType":"YulFunctionCall","src":"2087:18:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2067:6:16"},"nodeType":"YulFunctionCall","src":"2067:39:16"},"nodeType":"YulExpressionStatement","src":"2067:39:16"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2014:1:16"},{"name":"length","nodeType":"YulIdentifier","src":"2017:6:16"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2011:2:16"},"nodeType":"YulFunctionCall","src":"2011:13:16"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2025:19:16","statements":[{"nodeType":"YulAssignment","src":"2027:15:16","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2036:1:16"},{"kind":"number","nodeType":"YulLiteral","src":"2039:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2032:3:16"},"nodeType":"YulFunctionCall","src":"2032:10:16"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"2027:1:16"}]}]},"pre":{"nodeType":"YulBlock","src":"2007:3:16","statements":[]},"src":"2003:113:16"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2136:3:16"},{"name":"length","nodeType":"YulIdentifier","src":"2141:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2132:3:16"},"nodeType":"YulFunctionCall","src":"2132:16:16"},{"kind":"number","nodeType":"YulLiteral","src":"2150:1:16","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2125:6:16"},"nodeType":"YulFunctionCall","src":"2125:27:16"},"nodeType":"YulExpressionStatement","src":"2125:27:16"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1952:3:16","type":""},{"name":"dst","nodeType":"YulTypedName","src":"1957:3:16","type":""},{"name":"length","nodeType":"YulTypedName","src":"1962:6:16","type":""}],"src":"1908:250:16"},{"body":{"nodeType":"YulBlock","src":"2552:423:16","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2569:3:16"},{"hexValue":"416363657373436f6e74726f6c3a206163636f756e7420","kind":"string","nodeType":"YulLiteral","src":"2574:25:16","type":"","value":"AccessControl: account "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2562:6:16"},"nodeType":"YulFunctionCall","src":"2562:38:16"},"nodeType":"YulExpressionStatement","src":"2562:38:16"},{"nodeType":"YulVariableDeclaration","src":"2609:27:16","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2629:6:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2623:5:16"},"nodeType":"YulFunctionCall","src":"2623:13:16"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2613:6:16","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2684:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"2692:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2680:3:16"},"nodeType":"YulFunctionCall","src":"2680:17:16"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2703:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"2708:2:16","type":"","value":"23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2699:3:16"},"nodeType":"YulFunctionCall","src":"2699:12:16"},{"name":"length","nodeType":"YulIdentifier","src":"2713:6:16"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"2645:34:16"},"nodeType":"YulFunctionCall","src":"2645:75:16"},"nodeType":"YulExpressionStatement","src":"2645:75:16"},{"nodeType":"YulVariableDeclaration","src":"2729:26:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2743:3:16"},{"name":"length","nodeType":"YulIdentifier","src":"2748:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2739:3:16"},"nodeType":"YulFunctionCall","src":"2739:16:16"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2733:2:16","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2775:2:16"},{"kind":"number","nodeType":"YulLiteral","src":"2779:2:16","type":"","value":"23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2771:3:16"},"nodeType":"YulFunctionCall","src":"2771:11:16"},{"hexValue":"206973206d697373696e6720726f6c6520","kind":"string","nodeType":"YulLiteral","src":"2784:19:16","type":"","value":" is missing role "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2764:6:16"},"nodeType":"YulFunctionCall","src":"2764:40:16"},"nodeType":"YulExpressionStatement","src":"2764:40:16"},{"nodeType":"YulVariableDeclaration","src":"2813:29:16","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"2835:6:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2829:5:16"},"nodeType":"YulFunctionCall","src":"2829:13:16"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"2817:8:16","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"2890:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"2898:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2886:3:16"},"nodeType":"YulFunctionCall","src":"2886:17:16"},{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2909:2:16"},{"kind":"number","nodeType":"YulLiteral","src":"2913:2:16","type":"","value":"40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2905:3:16"},"nodeType":"YulFunctionCall","src":"2905:11:16"},{"name":"length_1","nodeType":"YulIdentifier","src":"2918:8:16"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"2851:34:16"},"nodeType":"YulFunctionCall","src":"2851:76:16"},"nodeType":"YulExpressionStatement","src":"2851:76:16"},{"nodeType":"YulAssignment","src":"2936:33:16","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2951:2:16"},{"name":"length_1","nodeType":"YulIdentifier","src":"2955:8:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2947:3:16"},"nodeType":"YulFunctionCall","src":"2947:17:16"},{"kind":"number","nodeType":"YulLiteral","src":"2966:2:16","type":"","value":"40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2943:3:16"},"nodeType":"YulFunctionCall","src":"2943:26:16"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2936:3:16"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"2520:3:16","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2525:6:16","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2533:6:16","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"2544:3:16","type":""}],"src":"2163:812:16"},{"body":{"nodeType":"YulBlock","src":"3101:275:16","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3118:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"3129:2:16","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3111:6:16"},"nodeType":"YulFunctionCall","src":"3111:21:16"},"nodeType":"YulExpressionStatement","src":"3111:21:16"},{"nodeType":"YulVariableDeclaration","src":"3141:27:16","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3161:6:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3155:5:16"},"nodeType":"YulFunctionCall","src":"3155:13:16"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"3145:6:16","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3188:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"3199:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3184:3:16"},"nodeType":"YulFunctionCall","src":"3184:18:16"},{"name":"length","nodeType":"YulIdentifier","src":"3204:6:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3177:6:16"},"nodeType":"YulFunctionCall","src":"3177:34:16"},"nodeType":"YulExpressionStatement","src":"3177:34:16"},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3259:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"3267:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3255:3:16"},"nodeType":"YulFunctionCall","src":"3255:15:16"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3276:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"3287:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3272:3:16"},"nodeType":"YulFunctionCall","src":"3272:18:16"},{"name":"length","nodeType":"YulIdentifier","src":"3292:6:16"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"3220:34:16"},"nodeType":"YulFunctionCall","src":"3220:79:16"},"nodeType":"YulExpressionStatement","src":"3220:79:16"},{"nodeType":"YulAssignment","src":"3308:62:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3324:9:16"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3343:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"3351:2:16","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3339:3:16"},"nodeType":"YulFunctionCall","src":"3339:15:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3360:2:16","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3356:3:16"},"nodeType":"YulFunctionCall","src":"3356:7:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3335:3:16"},"nodeType":"YulFunctionCall","src":"3335:29:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3320:3:16"},"nodeType":"YulFunctionCall","src":"3320:45:16"},{"kind":"number","nodeType":"YulLiteral","src":"3367:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3316:3:16"},"nodeType":"YulFunctionCall","src":"3316:54:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3308:4:16"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3070:9:16","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3081:6:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3092:4:16","type":""}],"src":"2980:396:16"},{"body":{"nodeType":"YulBlock","src":"3413:95:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3430:1:16","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3437:3:16","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3442:10:16","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3433:3:16"},"nodeType":"YulFunctionCall","src":"3433:20:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3423:6:16"},"nodeType":"YulFunctionCall","src":"3423:31:16"},"nodeType":"YulExpressionStatement","src":"3423:31:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3470:1:16","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3473:4:16","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3463:6:16"},"nodeType":"YulFunctionCall","src":"3463:15:16"},"nodeType":"YulExpressionStatement","src":"3463:15:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3494:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3497:4:16","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3487:6:16"},"nodeType":"YulFunctionCall","src":"3487:15:16"},"nodeType":"YulExpressionStatement","src":"3487:15:16"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"3381:127:16"},{"body":{"nodeType":"YulBlock","src":"3565:116:16","statements":[{"nodeType":"YulAssignment","src":"3575:20:16","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3590:1:16"},{"name":"y","nodeType":"YulIdentifier","src":"3593:1:16"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"3586:3:16"},"nodeType":"YulFunctionCall","src":"3586:9:16"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"3575:7:16"}]},{"body":{"nodeType":"YulBlock","src":"3653:22:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"3655:16:16"},"nodeType":"YulFunctionCall","src":"3655:18:16"},"nodeType":"YulExpressionStatement","src":"3655:18:16"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3624:1:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3617:6:16"},"nodeType":"YulFunctionCall","src":"3617:9:16"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"3631:1:16"},{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"3638:7:16"},{"name":"x","nodeType":"YulIdentifier","src":"3647:1:16"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3634:3:16"},"nodeType":"YulFunctionCall","src":"3634:15:16"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3628:2:16"},"nodeType":"YulFunctionCall","src":"3628:22:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"3614:2:16"},"nodeType":"YulFunctionCall","src":"3614:37:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3607:6:16"},"nodeType":"YulFunctionCall","src":"3607:45:16"},"nodeType":"YulIf","src":"3604:71:16"}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"3544:1:16","type":""},{"name":"y","nodeType":"YulTypedName","src":"3547:1:16","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"3553:7:16","type":""}],"src":"3513:168:16"},{"body":{"nodeType":"YulBlock","src":"3734:77:16","statements":[{"nodeType":"YulAssignment","src":"3744:16:16","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3755:1:16"},{"name":"y","nodeType":"YulIdentifier","src":"3758:1:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3751:3:16"},"nodeType":"YulFunctionCall","src":"3751:9:16"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"3744:3:16"}]},{"body":{"nodeType":"YulBlock","src":"3783:22:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"3785:16:16"},"nodeType":"YulFunctionCall","src":"3785:18:16"},"nodeType":"YulExpressionStatement","src":"3785:18:16"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3775:1:16"},{"name":"sum","nodeType":"YulIdentifier","src":"3778:3:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3772:2:16"},"nodeType":"YulFunctionCall","src":"3772:10:16"},"nodeType":"YulIf","src":"3769:36:16"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"3717:1:16","type":""},{"name":"y","nodeType":"YulTypedName","src":"3720:1:16","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"3726:3:16","type":""}],"src":"3686:125:16"},{"body":{"nodeType":"YulBlock","src":"3848:95:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3865:1:16","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3872:3:16","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3877:10:16","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3868:3:16"},"nodeType":"YulFunctionCall","src":"3868:20:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3858:6:16"},"nodeType":"YulFunctionCall","src":"3858:31:16"},"nodeType":"YulExpressionStatement","src":"3858:31:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3905:1:16","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3908:4:16","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3898:6:16"},"nodeType":"YulFunctionCall","src":"3898:15:16"},"nodeType":"YulExpressionStatement","src":"3898:15:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3929:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3932:4:16","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3922:6:16"},"nodeType":"YulFunctionCall","src":"3922:15:16"},"nodeType":"YulExpressionStatement","src":"3922:15:16"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"3816:127:16"},{"body":{"nodeType":"YulBlock","src":"3980:95:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3997:1:16","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4004:3:16","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"4009:10:16","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4000:3:16"},"nodeType":"YulFunctionCall","src":"4000:20:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3990:6:16"},"nodeType":"YulFunctionCall","src":"3990:31:16"},"nodeType":"YulExpressionStatement","src":"3990:31:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4037:1:16","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"4040:4:16","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4030:6:16"},"nodeType":"YulFunctionCall","src":"4030:15:16"},"nodeType":"YulExpressionStatement","src":"4030:15:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4061:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4064:4:16","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4054:6:16"},"nodeType":"YulFunctionCall","src":"4054:15:16"},"nodeType":"YulExpressionStatement","src":"4054:15:16"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"3948:127:16"},{"body":{"nodeType":"YulBlock","src":"4127:89:16","statements":[{"body":{"nodeType":"YulBlock","src":"4154:22:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"4156:16:16"},"nodeType":"YulFunctionCall","src":"4156:18:16"},"nodeType":"YulExpressionStatement","src":"4156:18:16"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4147:5:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4140:6:16"},"nodeType":"YulFunctionCall","src":"4140:13:16"},"nodeType":"YulIf","src":"4137:39:16"},{"nodeType":"YulAssignment","src":"4185:25:16","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4196:5:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4207:1:16","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4203:3:16"},"nodeType":"YulFunctionCall","src":"4203:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4192:3:16"},"nodeType":"YulFunctionCall","src":"4192:18:16"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"4185:3:16"}]}]},"name":"decrement_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4109:5:16","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"4119:3:16","type":""}],"src":"4080:136:16"},{"body":{"nodeType":"YulBlock","src":"4395:182:16","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4412:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"4423:2:16","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4405:6:16"},"nodeType":"YulFunctionCall","src":"4405:21:16"},"nodeType":"YulExpressionStatement","src":"4405:21:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4446:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"4457:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4442:3:16"},"nodeType":"YulFunctionCall","src":"4442:18:16"},{"kind":"number","nodeType":"YulLiteral","src":"4462:2:16","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4435:6:16"},"nodeType":"YulFunctionCall","src":"4435:30:16"},"nodeType":"YulExpressionStatement","src":"4435:30:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4485:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"4496:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4481:3:16"},"nodeType":"YulFunctionCall","src":"4481:18:16"},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","kind":"string","nodeType":"YulLiteral","src":"4501:34:16","type":"","value":"Strings: hex length insufficient"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4474:6:16"},"nodeType":"YulFunctionCall","src":"4474:62:16"},"nodeType":"YulExpressionStatement","src":"4474:62:16"},{"nodeType":"YulAssignment","src":"4545:26:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4557:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"4568:2:16","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4553:3:16"},"nodeType":"YulFunctionCall","src":"4553:18:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4545:4:16"}]}]},"name":"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4372:9:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4386:4:16","type":""}],"src":"4221:356:16"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 47)\n        mstore(add(headStart, 64), \"AccessControl: can only renounce\")\n        mstore(add(headStart, 96), \" roles for self\")\n        tail := add(headStart, 128)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, \"AccessControl: account \")\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), add(pos, 23), length)\n        let _1 := add(pos, length)\n        mstore(add(_1, 23), \" is missing role \")\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), add(_1, 40), length_1)\n        end := add(add(_1, length_1), 40)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function decrement_t_uint256(value) -> ret\n    {\n        if iszero(value) { panic_error_0x11() }\n        ret := add(value, not(0))\n    }\n    function abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Strings: hex length insufficient\")\n        tail := add(headStart, 96)\n    }\n}","id":16,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100a95760003560e01c8063894d12c211610071578063894d12c21461014457806391d1485414610157578063a09c59fb1461016a578063a217fddf1461017d578063d547741f14610185578063debfda301461019857600080fd5b806301ffc9a7146100ae57806307bd0265146100d6578063248a9ca3146100f95780632f2ff15d1461011c57806336568abe14610131575b600080fd5b6100c16100bc3660046106bb565b6101ab565b60405190151581526020015b60405180910390f35b6100eb6000805160206108b183398151915281565b6040519081526020016100cd565b6100eb6101073660046106e5565b60009081526020819052604090206001015490565b61012f61012a36600461071a565b6101e2565b005b61012f61013f36600461071a565b61020c565b61012f610152366004610746565b61028f565b6100c161016536600461071a565b6102ea565b61012f610178366004610746565b610313565b6100eb600081565b61012f61019336600461071a565b61036e565b6100c16101a6366004610746565b610393565b60006001600160e01b03198216637965db0b60e01b14806101dc57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000828152602081905260409020600101546101fd816103ad565b61020783836103ba565b505050565b6001600160a01b03811633146102815760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b61028b828261043e565b5050565b600061029a816103ad565b6102b26000805160206108b18339815191528361043e565b6040516001600160a01b038316907fdd96f65ca46c65c337946f2242c6e8a2383b8733b20e36dad5b48a648ea3210890600090a25050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600061031e816103ad565b6103366000805160206108b1833981519152836104a3565b6040516001600160a01b038316907f12ad16bd2a8e5f789a2584f92dba7594ec459e9eb0d00b0dba8843f6c59f035b90600090a25050565b600082815260208190526040902060010154610389816103ad565b610207838361043e565b60006101dc6000805160206108b1833981519152836102ea565b6103b781336104ad565b50565b6103c482826102ea565b61028b576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556103fa3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61044882826102ea565b1561028b576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b61028b82826103ba565b6104b782826102ea565b61028b576104c481610506565b6104cf836020610518565b6040516020016104e0929190610785565b60408051601f198184030181529082905262461bcd60e51b8252610278916004016107fa565b60606101dc6001600160a01b03831660145b60606000610527836002610843565b61053290600261085a565b67ffffffffffffffff81111561054a5761054a61086d565b6040519080825280601f01601f191660200182016040528015610574576020820181803683370190505b509050600360fc1b8160008151811061058f5761058f610883565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106105be576105be610883565b60200101906001600160f81b031916908160001a90535060006105e2846002610843565b6105ed90600161085a565b90505b6001811115610665576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061062157610621610883565b1a60f81b82828151811061063757610637610883565b60200101906001600160f81b031916908160001a90535060049490941c9361065e81610899565b90506105f0565b5083156106b45760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610278565b9392505050565b6000602082840312156106cd57600080fd5b81356001600160e01b0319811681146106b457600080fd5b6000602082840312156106f757600080fd5b5035919050565b80356001600160a01b038116811461071557600080fd5b919050565b6000806040838503121561072d57600080fd5b8235915061073d602084016106fe565b90509250929050565b60006020828403121561075857600080fd5b6106b4826106fe565b60005b8381101561077c578181015183820152602001610764565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516107bd816017850160208801610761565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516107ee816028840160208801610761565b01602801949350505050565b6020815260008251806020840152610819816040850160208701610761565b601f01601f19169190910160400192915050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176101dc576101dc61082d565b808201808211156101dc576101dc61082d565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000816108a8576108a861082d565b50600019019056fed8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63a26469706673582212207a6934922d690497ff91f54a3cf13c8e12ba1e47b4a80d3956e051824f35cec064736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x894D12C2 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x894D12C2 EQ PUSH2 0x144 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x157 JUMPI DUP1 PUSH4 0xA09C59FB EQ PUSH2 0x16A JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x17D JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x185 JUMPI DUP1 PUSH4 0xDEBFDA30 EQ PUSH2 0x198 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x7BD0265 EQ PUSH2 0xD6 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0xF9 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x11C JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x131 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC1 PUSH2 0xBC CALLDATASIZE PUSH1 0x4 PUSH2 0x6BB JUMP JUMPDEST PUSH2 0x1AB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xEB PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x8B1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xCD JUMP JUMPDEST PUSH2 0xEB PUSH2 0x107 CALLDATASIZE PUSH1 0x4 PUSH2 0x6E5 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x12F PUSH2 0x12A CALLDATASIZE PUSH1 0x4 PUSH2 0x71A JUMP JUMPDEST PUSH2 0x1E2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x12F PUSH2 0x13F CALLDATASIZE PUSH1 0x4 PUSH2 0x71A JUMP JUMPDEST PUSH2 0x20C JUMP JUMPDEST PUSH2 0x12F PUSH2 0x152 CALLDATASIZE PUSH1 0x4 PUSH2 0x746 JUMP JUMPDEST PUSH2 0x28F JUMP JUMPDEST PUSH2 0xC1 PUSH2 0x165 CALLDATASIZE PUSH1 0x4 PUSH2 0x71A JUMP JUMPDEST PUSH2 0x2EA JUMP JUMPDEST PUSH2 0x12F PUSH2 0x178 CALLDATASIZE PUSH1 0x4 PUSH2 0x746 JUMP JUMPDEST PUSH2 0x313 JUMP JUMPDEST PUSH2 0xEB PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH2 0x12F PUSH2 0x193 CALLDATASIZE PUSH1 0x4 PUSH2 0x71A JUMP JUMPDEST PUSH2 0x36E JUMP JUMPDEST PUSH2 0xC1 PUSH2 0x1A6 CALLDATASIZE PUSH1 0x4 PUSH2 0x746 JUMP JUMPDEST PUSH2 0x393 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x1DC JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x1FD DUP2 PUSH2 0x3AD JUMP JUMPDEST PUSH2 0x207 DUP4 DUP4 PUSH2 0x3BA JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x281 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x103937B632B9903337B91039B2B633 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x28B DUP3 DUP3 PUSH2 0x43E JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29A DUP2 PUSH2 0x3AD JUMP JUMPDEST PUSH2 0x2B2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x8B1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH2 0x43E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH32 0xDD96F65CA46C65C337946F2242C6E8A2383B8733B20E36DAD5B48A648EA32108 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x31E DUP2 PUSH2 0x3AD JUMP JUMPDEST PUSH2 0x336 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x8B1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH2 0x4A3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH32 0x12AD16BD2A8E5F789A2584F92DBA7594EC459E9EB0D00B0DBA8843F6C59F035B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x389 DUP2 PUSH2 0x3AD JUMP JUMPDEST PUSH2 0x207 DUP4 DUP4 PUSH2 0x43E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DC PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x8B1 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH2 0x2EA JUMP JUMPDEST PUSH2 0x3B7 DUP2 CALLER PUSH2 0x4AD JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x3C4 DUP3 DUP3 PUSH2 0x2EA JUMP JUMPDEST PUSH2 0x28B JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x3FA CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0x448 DUP3 DUP3 PUSH2 0x2EA JUMP JUMPDEST ISZERO PUSH2 0x28B JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0x28B DUP3 DUP3 PUSH2 0x3BA JUMP JUMPDEST PUSH2 0x4B7 DUP3 DUP3 PUSH2 0x2EA JUMP JUMPDEST PUSH2 0x28B JUMPI PUSH2 0x4C4 DUP2 PUSH2 0x506 JUMP JUMPDEST PUSH2 0x4CF DUP4 PUSH1 0x20 PUSH2 0x518 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4E0 SWAP3 SWAP2 SWAP1 PUSH2 0x785 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH2 0x278 SWAP2 PUSH1 0x4 ADD PUSH2 0x7FA JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1DC PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x14 JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x527 DUP4 PUSH1 0x2 PUSH2 0x843 JUMP JUMPDEST PUSH2 0x532 SWAP1 PUSH1 0x2 PUSH2 0x85A JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x54A JUMPI PUSH2 0x54A PUSH2 0x86D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x574 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x3 PUSH1 0xFC SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x58F JUMPI PUSH2 0x58F PUSH2 0x883 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xF PUSH1 0xFB SHL DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x5BE JUMPI PUSH2 0x5BE PUSH2 0x883 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH2 0x5E2 DUP5 PUSH1 0x2 PUSH2 0x843 JUMP JUMPDEST PUSH2 0x5ED SWAP1 PUSH1 0x1 PUSH2 0x85A JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x665 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH2 0x621 JUMPI PUSH2 0x621 PUSH2 0x883 JUMP JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x637 JUMPI PUSH2 0x637 PUSH2 0x883 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH2 0x65E DUP2 PUSH2 0x899 JUMP JUMPDEST SWAP1 POP PUSH2 0x5F0 JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0x6B4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x278 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x6B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x715 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x72D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x73D PUSH1 0x20 DUP5 ADD PUSH2 0x6FE JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x758 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6B4 DUP3 PUSH2 0x6FE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x77C JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x764 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH2 0x7BD DUP2 PUSH1 0x17 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x761 JUMP JUMPDEST PUSH17 0x1034B99036B4B9B9B4B733903937B6329 PUSH1 0x7D SHL PUSH1 0x17 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x7EE DUP2 PUSH1 0x28 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x761 JUMP JUMPDEST ADD PUSH1 0x28 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x819 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x761 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x1DC JUMPI PUSH2 0x1DC PUSH2 0x82D JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x1DC JUMPI PUSH2 0x1DC PUSH2 0x82D JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x8A8 JUMPI PUSH2 0x8A8 PUSH2 0x82D JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP INVALID 0xD8 0xAA 0xF BALANCE SWAP5 SWAP8 BYTE 0x2A GT PUSH7 0x79F7C2090F6939 0xC8 0xD4 0xE0 BYTE 0x2A DUP14 PUSH31 0x41D55E5351469E63A26469706673582212207A6934922D690497FF91F54A3C CALL EXTCODECOPY DUP15 SLT 0xBA 0x1E SELFBALANCE 0xB4 0xA8 0xD CODECOPY JUMP 0xE0 MLOAD DUP3 0x4F CALLDATALOAD 0xCE 0xC0 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"117:872:14:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2606:202:0;;;;;;:::i;:::-;;:::i;:::-;;;470:14:16;;463:22;445:41;;433:2;418:18;2606:202:0;;;;;;;;162:66:14;;-1:-1:-1;;;;;;;;;;;162:66:14;;;;;643:25:16;;;631:2;616:18;162:66:14;497:177:16;4378:129:0;;;;;;:::i;:::-;4452:7;4478:12;;;;;;;;;;:22;;;;4378:129;4803:145;;;;;;:::i;:::-;;:::i;:::-;;5912:214;;;;;;:::i;:::-;;:::i;651:170:14:-;;;;;;:::i;:::-;;:::i;2895:145:0:-;;;;;;:::i;:::-;;:::i;448:165:14:-;;;;;;:::i;:::-;;:::i;2027:49:0:-;;2072:4;2027:49;;5228:147;;;;;;:::i;:::-;;:::i;875:112:14:-;;;;;;:::i;:::-;;:::i;2606:202:0:-;2691:4;-1:-1:-1;;;;;;2714:47:0;;-1:-1:-1;;;2714:47:0;;:87;;-1:-1:-1;;;;;;;;;;937:40:10;;;2765:36:0;2707:94;2606:202;-1:-1:-1;;2606:202:0:o;4803:145::-;4452:7;4478:12;;;;;;;;;;:22;;;2505:16;2516:4;2505:10;:16::i;:::-;4916:25:::1;4927:4;4933:7;4916:10;:25::i;:::-;4803:145:::0;;;:::o;5912:214::-;-1:-1:-1;;;;;6007:23:0;;719:10:7;6007:23:0;5999:83;;;;-1:-1:-1;;;5999:83:0;;1694:2:16;5999:83:0;;;1676:21:16;1733:2;1713:18;;;1706:30;1772:34;1752:18;;;1745:62;-1:-1:-1;;;1823:18:16;;;1816:45;1878:19;;5999:83:0;;;;;;;;;6093:26;6105:4;6111:7;6093:11;:26::i;:::-;5912:214;;:::o;651:170:14:-;2072:4:0;2505:16;2072:4;2505:10;:16::i;:::-;742:36:14::1;-1:-1:-1::0;;;;;;;;;;;769:8:14::1;742:11;:36::i;:::-;787:30;::::0;-1:-1:-1;;;;;787:30:14;::::1;::::0;::::1;::::0;;;::::1;651:170:::0;;:::o;2895:145:0:-;2981:4;3004:12;;;;;;;;;;;-1:-1:-1;;;;;3004:29:0;;;;;;;;;;;;;;;2895:145::o;448:165:14:-;2072:4:0;2505:16;2072:4;2505:10;:16::i;:::-;537:35:14::1;-1:-1:-1::0;;;;;;;;;;;563:8:14::1;537:10;:35::i;:::-;581:28;::::0;-1:-1:-1;;;;;581:28:14;::::1;::::0;::::1;::::0;;;::::1;448:165:::0;;:::o;5228:147:0:-;4452:7;4478:12;;;;;;;;;;:22;;;2505:16;2516:4;2505:10;:16::i;:::-;5342:26:::1;5354:4;5360:7;5342:11;:26::i;875:112:14:-:0;934:4;951:32;-1:-1:-1;;;;;;;;;;;974:8:14;951:7;:32::i;3334:103:0:-;3400:30;3411:4;719:10:7;3400::0;:30::i;:::-;3334:103;:::o;7461:233::-;7544:22;7552:4;7558:7;7544;:22::i;:::-;7539:149;;7582:6;:12;;;;;;;;;;;-1:-1:-1;;;;;7582:29:0;;;;;;;;;:36;;-1:-1:-1;;7582:36:0;7614:4;7582:36;;;7664:12;719:10:7;;640:96;7664:12:0;-1:-1:-1;;;;;7637:40:0;7655:7;-1:-1:-1;;;;;7637:40:0;7649:4;7637:40;;;;;;;;;;7461:233;;:::o;7865:234::-;7948:22;7956:4;7962:7;7948;:22::i;:::-;7944:149;;;8018:5;7986:12;;;;;;;;;;;-1:-1:-1;;;;;7986:29:0;;;;;;;;;;:37;;-1:-1:-1;;7986:37:0;;;8042:40;719:10:7;;7986:12:0;;8042:40;;8018:5;8042:40;7865:234;;:::o;6811:110::-;6889:25;6900:4;6906:7;6889:10;:25::i;3718:479::-;3806:22;3814:4;3820:7;3806;:22::i;:::-;3801:390;;3989:28;4009:7;3989:19;:28::i;:::-;4088:38;4116:4;4123:2;4088:19;:38::i;:::-;3896:252;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3896:252:0;;;;;;;;;;-1:-1:-1;;;3844:336:0;;;;;;;:::i;2102:149:8:-;2160:13;2192:52;-1:-1:-1;;;;;2204:22:8;;311:2;1513:437;1588:13;1613:19;1645:10;1649:6;1645:1;:10;:::i;:::-;:14;;1658:1;1645:14;:::i;:::-;1635:25;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1635:25:8;;1613:47;;-1:-1:-1;;;1670:6:8;1677:1;1670:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;1670:15:8;;;;;;;;;-1:-1:-1;;;1695:6:8;1702:1;1695:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;1695:15:8;;;;;;;;-1:-1:-1;1725:9:8;1737:10;1741:6;1737:1;:10;:::i;:::-;:14;;1750:1;1737:14;:::i;:::-;1725:26;;1720:128;1757:1;1753;:5;1720:128;;;-1:-1:-1;;;1800:5:8;1808:3;1800:11;1791:21;;;;;;;:::i;:::-;;;;1779:6;1786:1;1779:9;;;;;;;;:::i;:::-;;;;:33;-1:-1:-1;;;;;1779:33:8;;;;;;;;-1:-1:-1;1836:1:8;1826:11;;;;;1760:3;;;:::i;:::-;;;1720:128;;;-1:-1:-1;1865:10:8;;1857:55;;;;-1:-1:-1;;;1857:55:8;;4423:2:16;1857:55:8;;;4405:21:16;;;4442:18;;;4435:30;4501:34;4481:18;;;4474:62;4553:18;;1857:55:8;4221:356:16;1857:55:8;1936:6;1513:437;-1:-1:-1;;;1513:437:8:o;14:286:16:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;167:23;;-1:-1:-1;;;;;;219:32:16;;209:43;;199:71;;266:1;263;256:12;679:180;738:6;791:2;779:9;770:7;766:23;762:32;759:52;;;807:1;804;797:12;759:52;-1:-1:-1;830:23:16;;679:180;-1:-1:-1;679:180:16:o;864:173::-;932:20;;-1:-1:-1;;;;;981:31:16;;971:42;;961:70;;1027:1;1024;1017:12;961:70;864:173;;;:::o;1042:254::-;1110:6;1118;1171:2;1159:9;1150:7;1146:23;1142:32;1139:52;;;1187:1;1184;1177:12;1139:52;1223:9;1210:23;1200:33;;1252:38;1286:2;1275:9;1271:18;1252:38;:::i;:::-;1242:48;;1042:254;;;;;:::o;1301:186::-;1360:6;1413:2;1401:9;1392:7;1388:23;1384:32;1381:52;;;1429:1;1426;1419:12;1381:52;1452:29;1471:9;1452:29;:::i;1908:250::-;1993:1;2003:113;2017:6;2014:1;2011:13;2003:113;;;2093:11;;;2087:18;2074:11;;;2067:39;2039:2;2032:10;2003:113;;;-1:-1:-1;;2150:1:16;2132:16;;2125:27;1908:250::o;2163:812::-;2574:25;2569:3;2562:38;2544:3;2629:6;2623:13;2645:75;2713:6;2708:2;2703:3;2699:12;2692:4;2684:6;2680:17;2645:75;:::i;:::-;-1:-1:-1;;;2779:2:16;2739:16;;;2771:11;;;2764:40;2829:13;;2851:76;2829:13;2913:2;2905:11;;2898:4;2886:17;;2851:76;:::i;:::-;2947:17;2966:2;2943:26;;2163:812;-1:-1:-1;;;;2163:812:16:o;2980:396::-;3129:2;3118:9;3111:21;3092:4;3161:6;3155:13;3204:6;3199:2;3188:9;3184:18;3177:34;3220:79;3292:6;3287:2;3276:9;3272:18;3267:2;3259:6;3255:15;3220:79;:::i;:::-;3360:2;3339:15;-1:-1:-1;;3335:29:16;3320:45;;;;3367:2;3316:54;;2980:396;-1:-1:-1;;2980:396:16:o;3381:127::-;3442:10;3437:3;3433:20;3430:1;3423:31;3473:4;3470:1;3463:15;3497:4;3494:1;3487:15;3513:168;3586:9;;;3617;;3634:15;;;3628:22;;3614:37;3604:71;;3655:18;;:::i;3686:125::-;3751:9;;;3772:10;;;3769:36;;;3785:18;;:::i;3816:127::-;3877:10;3872:3;3868:20;3865:1;3858:31;3908:4;3905:1;3898:15;3932:4;3929:1;3922:15;3948:127;4009:10;4004:3;4000:20;3997:1;3990:31;4040:4;4037:1;4030:15;4064:4;4061:1;4054:15;4080:136;4119:3;4147:5;4137:39;;4156:18;;:::i;:::-;-1:-1:-1;;;4192:18:16;;4080:136::o"},"gasEstimates":{"creation":{"codeDepositCost":"462000","executionCost":"29191","totalCost":"491191"},"external":{"DEFAULT_ADMIN_ROLE()":"261","EXECUTOR_ROLE()":"infinite","getRoleAdmin(bytes32)":"2492","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"2673","isExecutor(address)":"infinite","registerExecutor(address)":"infinite","renounceRole(bytes32,address)":"29084","revokeRole(bytes32,address)":"infinite","supportsInterface(bytes4)":"427","unregisterExecutor(address)":"infinite"}},"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","EXECUTOR_ROLE()":"07bd0265","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","isExecutor(address)":"debfda30","registerExecutor(address)":"a09c59fb","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7","unregisterExecutor(address)":"894d12c2"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"ExecutorRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"ExecutorUnregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXECUTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"isExecutor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"registerExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"unregisterExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ExecutorManager.sol\":\"ExecutorManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/ExecutorManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract ExecutorManager is AccessControl {\\n\\tbytes32 public constant EXECUTOR_ROLE = keccak256(\\\"EXECUTOR_ROLE\\\");\\n\\n\\tevent ExecutorRegistered(address indexed executor);\\n\\tevent ExecutorUnregistered(address indexed executor);\\n\\n\\tconstructor() {\\n\\t\\t_setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\t}\\n\\n\\t// Function to register as an Executor\\n\\tfunction registerExecutor(\\n\\t\\taddress executor\\n\\t) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\t_setupRole(EXECUTOR_ROLE, executor);\\n\\t\\temit ExecutorRegistered(executor);\\n\\t}\\n\\n\\t// Function to remove an Executor\\n\\tfunction unregisterExecutor(\\n\\t\\taddress executor\\n\\t) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\t_revokeRole(EXECUTOR_ROLE, executor);\\n\\t\\temit ExecutorUnregistered(executor);\\n\\t}\\n\\n\\t// Function to check if an address is an Executor\\n\\tfunction isExecutor(address executor) public view returns (bool) {\\n\\t\\treturn hasRole(EXECUTOR_ROLE, executor);\\n\\t}\\n}\\n\",\"keccak256\":\"0x5e9d00788d97403a8d6397ee8e4130b2df8a53eb80df20355d8790ad6ccc8006\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":24,"contract":"contracts/ExecutorManager.sol:ExecutorManager","label":"_roles","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_struct(RoleData)19_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(RoleData)19_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControl.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)19_storage"},"t_struct(RoleData)19_storage":{"encoding":"inplace","label":"struct AccessControl.RoleData","members":[{"astId":16,"contract":"contracts/ExecutorManager.sol:ExecutorManager","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":18,"contract":"contracts/ExecutorManager.sol:ExecutorManager","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/SAFTToken.sol":{"IExecutorManager":{"abi":[{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"isExecutor","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isExecutor(address)":"debfda30"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isExecutor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SAFTToken.sol\":\"IExecutorManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xd917747dc87f189c6779b894f367a028f9dca4be930283cccec8f312966af820\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/SAFTToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ninterface IExecutorManager {\\n\\tfunction isExecutor(address _address) external view returns (bool);\\n}\\n\\ncontract SAFTToken is ERC1155, AccessControl {\\n\\tbytes32 public merkleRoot;\\n\\tmapping(uint256 => bool) public lockingFlags; // Reentrancy guard for minting\\n\\tuint256 private tokenIdCounter;\\n\\tbytes32 public constant EXECUTOR_ROLE = keccak256(\\\"EXECUTOR_ROLE\\\");\\n\\tIExecutorManager public executorManager;\\n\\n\\tevent BundleProcessed(\\n\\t\\taddress indexed executor,\\n\\t\\tuint256 indexed bundleNonce,\\n\\t\\tbytes32 bundleHash,\\n\\t\\tuint256 timestamp\\n\\t);\\n\\n\\tconstructor(\\n\\t\\taddress _owner,\\n\\t\\tbytes32 _merkleRoot,\\n\\t\\tstring memory metadataUri,\\n\\t\\tuint totalSupply,\\n\\t\\taddress _executorManager\\n\\t) ERC1155(metadataUri) {\\n\\t\\trequire(_owner != address(0), \\\"Owner address cannot be empty\\\");\\n\\t\\t_mint(msg.sender, tokenIdCounter++, totalSupply, \\\"\\\");\\n\\t\\t_setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\t\\tmerkleRoot = _merkleRoot;\\n\\t\\texecutorManager = IExecutorManager(_executorManager);\\n\\t}\\n\\n\\tfunction whitelistMint(\\n\\t\\tuint256 amount,\\n\\t\\tbytes memory data,\\n\\t\\tbytes32[] calldata merkleProof\\n\\t) public {\\n\\t\\tuint256 id = tokenIdCounter;\\n\\t\\trequire(!lockingFlags[id], \\\"Token is currently locked for minting\\\");\\n\\n\\t\\t// Validate merkle proof using a single call\\n\\t\\trequire(isWhitelisted(merkleProof), \\\"Caller is not whitelisted\\\");\\n\\n\\t\\tlockingFlags[id] = true; // Set locking flag to prevent duplicate mints\\n\\n\\t\\t// Minimize external function calls for gas efficiency\\n\\t\\t_mint(msg.sender, id, amount, data);\\n\\n\\t\\tlockingFlags[id] = false; // Unlock after successful minting\\n\\t\\ttokenIdCounter++;\\n\\t}\\n\\n\\tfunction isWhitelisted(\\n\\t\\tbytes32[] calldata merkleProof\\n\\t) public view returns (bool) {\\n\\t\\tbytes32 leaf = keccak256(abi.encodePacked(msg.sender));\\n\\t\\treturn MerkleProof.verify(merkleProof, merkleRoot, leaf);\\n\\t}\\n\\n\\tfunction setMerkleRoot(\\n\\t\\tbytes32 _merkleRoot\\n\\t) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\tmerkleRoot = _merkleRoot;\\n\\t}\\n\\n\\tfunction supportsInterface(\\n\\t\\tbytes4 interfaceId\\n\\t) public view virtual override(ERC1155, AccessControl) returns (bool) {\\n\\t\\treturn\\n\\t\\t\\tERC1155.supportsInterface(interfaceId) ||\\n\\t\\t\\tAccessControl.supportsInterface(interfaceId);\\n\\t}\\n\\n\\tfunction setExecutorManager(\\n\\t\\taddress _executorManager\\n\\t) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\texecutorManager = IExecutorManager(_executorManager);\\n\\t}\\n\\n\\tfunction processBundle(\\n\\t\\tbytes calldata bundleData,\\n\\t\\tuint256 bundleNonce\\n\\t) public {\\n\\t\\trequire(\\n\\t\\t\\texecutorManager.isExecutor(msg.sender),\\n\\t\\t\\t\\\"Caller is not an authorized executor\\\"\\n\\t\\t);\\n\\n\\t\\t// Decode and process each transaction in the bundle\\n\\t\\tfor (uint i = 0; i < bundleData.length; i += 104) {\\n\\t\\t\\t(\\n\\t\\t\\t\\taddress buyer,\\n\\t\\t\\t\\taddress seller,\\n\\t\\t\\t\\tuint256 tokenId,\\n\\t\\t\\t\\tuint256 amount\\n\\t\\t\\t) = abi.decode(\\n\\t\\t\\t\\t\\tbundleData[i:i + 104],\\n\\t\\t\\t\\t\\t(address, address, uint256, uint256)\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t// Ensure that the seller has enough tokens\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tbalanceOf(seller, tokenId) >= amount,\\n\\t\\t\\t\\t\\\"Seller does not have enough tokens\\\"\\n\\t\\t\\t);\\n\\n\\t\\t\\t// Perform the token transfer from seller to buyer\\n\\t\\t\\t_safeTransferFrom(seller, buyer, tokenId, amount, \\\"\\\");\\n\\t\\t}\\n\\n\\t\\t// Compute the hash of the bundle data for logging\\n\\t\\tbytes32 bundleHash = keccak256(bundleData);\\n\\n\\t\\t// Emit the event with necessary details\\n\\t\\temit BundleProcessed(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tbundleNonce,\\n\\t\\t\\tbundleHash,\\n\\t\\t\\tblock.timestamp\\n\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0x0f0da0b2e90ff1010e33b0a67db4d7fdea5e3dd1f5d33cf722ddc50d37df303d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"SAFTToken":{"abi":[{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"bytes32","name":"_merkleRoot","type":"bytes32"},{"internalType":"string","name":"metadataUri","type":"string"},{"internalType":"uint256","name":"totalSupply","type":"uint256"},{"internalType":"address","name":"_executorManager","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"executor","type":"address"},{"indexed":true,"internalType":"uint256","name":"bundleNonce","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"bundleHash","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"BundleProcessed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"EXECUTOR_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"executorManager","outputs":[{"internalType":"contract IExecutorManager","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"merkleProof","type":"bytes32[]"}],"name":"isWhitelisted","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"lockingFlags","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"merkleRoot","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"bundleData","type":"bytes"},{"internalType":"uint256","name":"bundleNonce","type":"uint256"}],"name":"processBundle","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_executorManager","type":"address"}],"name":"setExecutorManager","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_merkleRoot","type":"bytes32"}],"name":"setMerkleRoot","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes32[]","name":"merkleProof","type":"bytes32[]"}],"name":"whitelistMint","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"ApprovalForAll(address,address,bool)":{"details":"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."},"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"},"TransferBatch(address,address,address,uint256[],uint256[])":{"details":"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."},"TransferSingle(address,address,address,uint256,uint256)":{"details":"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."},"URI(string,uint256)":{"details":"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."}},"kind":"dev","methods":{"balanceOf(address,uint256)":{"details":"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."},"balanceOfBatch(address[],uint256[])":{"details":"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."},"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"isApprovedForAll(address,address)":{"details":"See {IERC1155-isApprovedForAll}."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"See {IERC1155-safeBatchTransferFrom}."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"See {IERC1155-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC1155-setApprovalForAll}."},"uri(uint256)":{"details":"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_3976":{"entryPoint":null,"id":3976,"parameterSlots":5,"returnSlots":0},"@_433":{"entryPoint":null,"id":433,"parameterSlots":1,"returnSlots":0},"@_afterTokenTransfer_1454":{"entryPoint":null,"id":1454,"parameterSlots":6,"returnSlots":0},"@_asSingletonArray_1610":{"entryPoint":584,"id":1610,"parameterSlots":1,"returnSlots":1},"@_beforeTokenTransfer_1435":{"entryPoint":662,"id":1435,"parameterSlots":6,"returnSlots":0},"@_doSafeTransferAcceptanceCheck_1517":{"entryPoint":670,"id":1517,"parameterSlots":6,"returnSlots":0},"@_grantRole_283":{"entryPoint":1110,"id":283,"parameterSlots":2,"returnSlots":0},"@_mint_1045":{"entryPoint":286,"id":1045,"parameterSlots":4,"returnSlots":0},"@_msgSender_2131":{"entryPoint":null,"id":2131,"parameterSlots":0,"returnSlots":1},"@_setURI_944":{"entryPoint":268,"id":944,"parameterSlots":1,"returnSlots":0},"@_setupRole_223":{"entryPoint":572,"id":223,"parameterSlots":2,"returnSlots":0},"@hasRole_79":{"entryPoint":1248,"id":79,"parameterSlots":2,"returnSlots":1},"@isContract_1807":{"entryPoint":null,"id":1807,"parameterSlots":1,"returnSlots":1},"abi_decode_address_fromMemory":{"entryPoint":1293,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_addresst_bytes32t_string_memory_ptrt_uint256t_address_fromMemory":{"entryPoint":1429,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":2205,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_bytes":{"entryPoint":2088,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":2134,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":2428,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_5ce500c9dc2e59e02700829a3ac6c4c1e7fc183d658cfaf2fdd6892d9a845f30__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":2044,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":1761,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":1840,"id":null,"parameterSlots":2,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":1391,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":1701,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"finalize_allocation":{"entryPoint":1344,"id":null,"parameterSlots":2,"returnSlots":0},"increment_t_uint256":{"entryPoint":1673,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":1651,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":2066,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":1322,"id":null,"parameterSlots":0,"returnSlots":0},"return_data_selector":{"entryPoint":2256,"id":null,"parameterSlots":0,"returnSlots":1},"try_decode_error_message":{"entryPoint":2285,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:9071:16","statements":[{"nodeType":"YulBlock","src":"6:3:16","statements":[]},{"body":{"nodeType":"YulBlock","src":"74:117:16","statements":[{"nodeType":"YulAssignment","src":"84:22:16","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"99:6:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"93:5:16"},"nodeType":"YulFunctionCall","src":"93:13:16"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"84:5:16"}]},{"body":{"nodeType":"YulBlock","src":"169:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"178:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"181:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"171:6:16"},"nodeType":"YulFunctionCall","src":"171:12:16"},"nodeType":"YulExpressionStatement","src":"171:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"128:5:16"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"139:5:16"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"154:3:16","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"159:1:16","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"150:3:16"},"nodeType":"YulFunctionCall","src":"150:11:16"},{"kind":"number","nodeType":"YulLiteral","src":"163:1:16","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"146:3:16"},"nodeType":"YulFunctionCall","src":"146:19:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"135:3:16"},"nodeType":"YulFunctionCall","src":"135:31:16"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"125:2:16"},"nodeType":"YulFunctionCall","src":"125:42:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"118:6:16"},"nodeType":"YulFunctionCall","src":"118:50:16"},"nodeType":"YulIf","src":"115:70:16"}]},"name":"abi_decode_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"53:6:16","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"64:5:16","type":""}],"src":"14:177:16"},{"body":{"nodeType":"YulBlock","src":"228:95:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"245:1:16","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"252:3:16","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"257:10:16","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"248:3:16"},"nodeType":"YulFunctionCall","src":"248:20:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"238:6:16"},"nodeType":"YulFunctionCall","src":"238:31:16"},"nodeType":"YulExpressionStatement","src":"238:31:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"285:1:16","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"288:4:16","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"278:6:16"},"nodeType":"YulFunctionCall","src":"278:15:16"},"nodeType":"YulExpressionStatement","src":"278:15:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"309:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"312:4:16","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"302:6:16"},"nodeType":"YulFunctionCall","src":"302:15:16"},"nodeType":"YulExpressionStatement","src":"302:15:16"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"196:127:16"},{"body":{"nodeType":"YulBlock","src":"375:202:16","statements":[{"nodeType":"YulVariableDeclaration","src":"385:58:16","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"407:6:16"},{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"423:4:16"},{"kind":"number","nodeType":"YulLiteral","src":"429:2:16","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"419:3:16"},"nodeType":"YulFunctionCall","src":"419:13:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"438:2:16","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"434:3:16"},"nodeType":"YulFunctionCall","src":"434:7:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"415:3:16"},"nodeType":"YulFunctionCall","src":"415:27:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"403:3:16"},"nodeType":"YulFunctionCall","src":"403:40:16"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"389:10:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"518:22:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"520:16:16"},"nodeType":"YulFunctionCall","src":"520:18:16"},"nodeType":"YulExpressionStatement","src":"520:18:16"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"461:10:16"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"481:2:16","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"485:1:16","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"477:3:16"},"nodeType":"YulFunctionCall","src":"477:10:16"},{"kind":"number","nodeType":"YulLiteral","src":"489:1:16","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"473:3:16"},"nodeType":"YulFunctionCall","src":"473:18:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"458:2:16"},"nodeType":"YulFunctionCall","src":"458:34:16"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"497:10:16"},{"name":"memPtr","nodeType":"YulIdentifier","src":"509:6:16"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"494:2:16"},"nodeType":"YulFunctionCall","src":"494:22:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"455:2:16"},"nodeType":"YulFunctionCall","src":"455:62:16"},"nodeType":"YulIf","src":"452:88:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"556:2:16","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"560:10:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"549:6:16"},"nodeType":"YulFunctionCall","src":"549:22:16"},"nodeType":"YulExpressionStatement","src":"549:22:16"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"357:6:16","type":""},{"name":"size","nodeType":"YulTypedName","src":"365:4:16","type":""}],"src":"328:249:16"},{"body":{"nodeType":"YulBlock","src":"648:184:16","statements":[{"nodeType":"YulVariableDeclaration","src":"658:10:16","value":{"kind":"number","nodeType":"YulLiteral","src":"667:1:16","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"662:1:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"727:63:16","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"752:3:16"},{"name":"i","nodeType":"YulIdentifier","src":"757:1:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"748:3:16"},"nodeType":"YulFunctionCall","src":"748:11:16"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"771:3:16"},{"name":"i","nodeType":"YulIdentifier","src":"776:1:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"767:3:16"},"nodeType":"YulFunctionCall","src":"767:11:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"761:5:16"},"nodeType":"YulFunctionCall","src":"761:18:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"741:6:16"},"nodeType":"YulFunctionCall","src":"741:39:16"},"nodeType":"YulExpressionStatement","src":"741:39:16"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"688:1:16"},{"name":"length","nodeType":"YulIdentifier","src":"691:6:16"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"685:2:16"},"nodeType":"YulFunctionCall","src":"685:13:16"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"699:19:16","statements":[{"nodeType":"YulAssignment","src":"701:15:16","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"710:1:16"},{"kind":"number","nodeType":"YulLiteral","src":"713:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"706:3:16"},"nodeType":"YulFunctionCall","src":"706:10:16"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"701:1:16"}]}]},"pre":{"nodeType":"YulBlock","src":"681:3:16","statements":[]},"src":"677:113:16"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"810:3:16"},{"name":"length","nodeType":"YulIdentifier","src":"815:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"806:3:16"},"nodeType":"YulFunctionCall","src":"806:16:16"},{"kind":"number","nodeType":"YulLiteral","src":"824:1:16","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"799:6:16"},"nodeType":"YulFunctionCall","src":"799:27:16"},"nodeType":"YulExpressionStatement","src":"799:27:16"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"626:3:16","type":""},{"name":"dst","nodeType":"YulTypedName","src":"631:3:16","type":""},{"name":"length","nodeType":"YulTypedName","src":"636:6:16","type":""}],"src":"582:250:16"},{"body":{"nodeType":"YulBlock","src":"996:888:16","statements":[{"body":{"nodeType":"YulBlock","src":"1043:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1052:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1055:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1045:6:16"},"nodeType":"YulFunctionCall","src":"1045:12:16"},"nodeType":"YulExpressionStatement","src":"1045:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1017:7:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"1026:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1013:3:16"},"nodeType":"YulFunctionCall","src":"1013:23:16"},{"kind":"number","nodeType":"YulLiteral","src":"1038:3:16","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1009:3:16"},"nodeType":"YulFunctionCall","src":"1009:33:16"},"nodeType":"YulIf","src":"1006:53:16"},{"nodeType":"YulAssignment","src":"1068:50:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1108:9:16"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"1078:29:16"},"nodeType":"YulFunctionCall","src":"1078:40:16"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1068:6:16"}]},{"nodeType":"YulAssignment","src":"1127:35:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1147:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"1158:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1143:3:16"},"nodeType":"YulFunctionCall","src":"1143:18:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1137:5:16"},"nodeType":"YulFunctionCall","src":"1137:25:16"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1127:6:16"}]},{"nodeType":"YulVariableDeclaration","src":"1171:39:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1195:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"1206:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1191:3:16"},"nodeType":"YulFunctionCall","src":"1191:18:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1185:5:16"},"nodeType":"YulFunctionCall","src":"1185:25:16"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1175:6:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1219:28:16","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1237:2:16","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"1241:1:16","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1233:3:16"},"nodeType":"YulFunctionCall","src":"1233:10:16"},{"kind":"number","nodeType":"YulLiteral","src":"1245:1:16","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1229:3:16"},"nodeType":"YulFunctionCall","src":"1229:18:16"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1223:2:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"1274:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1283:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1286:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1276:6:16"},"nodeType":"YulFunctionCall","src":"1276:12:16"},"nodeType":"YulExpressionStatement","src":"1276:12:16"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1262:6:16"},{"name":"_1","nodeType":"YulIdentifier","src":"1270:2:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1259:2:16"},"nodeType":"YulFunctionCall","src":"1259:14:16"},"nodeType":"YulIf","src":"1256:34:16"},{"nodeType":"YulVariableDeclaration","src":"1299:32:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1313:9:16"},{"name":"offset","nodeType":"YulIdentifier","src":"1324:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1309:3:16"},"nodeType":"YulFunctionCall","src":"1309:22:16"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"1303:2:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"1379:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1388:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1391:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1381:6:16"},"nodeType":"YulFunctionCall","src":"1381:12:16"},"nodeType":"YulExpressionStatement","src":"1381:12:16"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"1358:2:16"},{"kind":"number","nodeType":"YulLiteral","src":"1362:4:16","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1354:3:16"},"nodeType":"YulFunctionCall","src":"1354:13:16"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1369:7:16"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1350:3:16"},"nodeType":"YulFunctionCall","src":"1350:27:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1343:6:16"},"nodeType":"YulFunctionCall","src":"1343:35:16"},"nodeType":"YulIf","src":"1340:55:16"},{"nodeType":"YulVariableDeclaration","src":"1404:19:16","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"1420:2:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1414:5:16"},"nodeType":"YulFunctionCall","src":"1414:9:16"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"1408:2:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"1446:22:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1448:16:16"},"nodeType":"YulFunctionCall","src":"1448:18:16"},"nodeType":"YulExpressionStatement","src":"1448:18:16"}]},"condition":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1438:2:16"},{"name":"_1","nodeType":"YulIdentifier","src":"1442:2:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1435:2:16"},"nodeType":"YulFunctionCall","src":"1435:10:16"},"nodeType":"YulIf","src":"1432:36:16"},{"nodeType":"YulVariableDeclaration","src":"1477:23:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1497:2:16","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1491:5:16"},"nodeType":"YulFunctionCall","src":"1491:9:16"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1481:6:16","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1529:6:16"},{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1549:2:16"},{"kind":"number","nodeType":"YulLiteral","src":"1553:4:16","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1545:3:16"},"nodeType":"YulFunctionCall","src":"1545:13:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1564:2:16","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1560:3:16"},"nodeType":"YulFunctionCall","src":"1560:7:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1541:3:16"},"nodeType":"YulFunctionCall","src":"1541:27:16"},{"kind":"number","nodeType":"YulLiteral","src":"1570:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1537:3:16"},"nodeType":"YulFunctionCall","src":"1537:36:16"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"1509:19:16"},"nodeType":"YulFunctionCall","src":"1509:65:16"},"nodeType":"YulExpressionStatement","src":"1509:65:16"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1590:6:16"},{"name":"_3","nodeType":"YulIdentifier","src":"1598:2:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1583:6:16"},"nodeType":"YulFunctionCall","src":"1583:18:16"},"nodeType":"YulExpressionStatement","src":"1583:18:16"},{"body":{"nodeType":"YulBlock","src":"1647:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1656:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1659:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1649:6:16"},"nodeType":"YulFunctionCall","src":"1649:12:16"},"nodeType":"YulExpressionStatement","src":"1649:12:16"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"1624:2:16"},{"name":"_3","nodeType":"YulIdentifier","src":"1628:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1620:3:16"},"nodeType":"YulFunctionCall","src":"1620:11:16"},{"kind":"number","nodeType":"YulLiteral","src":"1633:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1616:3:16"},"nodeType":"YulFunctionCall","src":"1616:20:16"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1638:7:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1613:2:16"},"nodeType":"YulFunctionCall","src":"1613:33:16"},"nodeType":"YulIf","src":"1610:53:16"},{"expression":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"1711:2:16"},{"kind":"number","nodeType":"YulLiteral","src":"1715:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1707:3:16"},"nodeType":"YulFunctionCall","src":"1707:11:16"},{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1724:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"1732:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1720:3:16"},"nodeType":"YulFunctionCall","src":"1720:15:16"},{"name":"_3","nodeType":"YulIdentifier","src":"1737:2:16"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"1672:34:16"},"nodeType":"YulFunctionCall","src":"1672:68:16"},"nodeType":"YulExpressionStatement","src":"1672:68:16"},{"nodeType":"YulAssignment","src":"1749:16:16","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"1759:6:16"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1749:6:16"}]},{"nodeType":"YulAssignment","src":"1774:35:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1794:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"1805:2:16","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1790:3:16"},"nodeType":"YulFunctionCall","src":"1790:18:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1784:5:16"},"nodeType":"YulFunctionCall","src":"1784:25:16"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"1774:6:16"}]},{"nodeType":"YulAssignment","src":"1818:60:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1862:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"1873:3:16","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1858:3:16"},"nodeType":"YulFunctionCall","src":"1858:19:16"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"1828:29:16"},"nodeType":"YulFunctionCall","src":"1828:50:16"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"1818:6:16"}]}]},"name":"abi_decode_tuple_t_addresst_bytes32t_string_memory_ptrt_uint256t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"930:9:16","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"941:7:16","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"953:6:16","type":""},{"name":"value1","nodeType":"YulTypedName","src":"961:6:16","type":""},{"name":"value2","nodeType":"YulTypedName","src":"969:6:16","type":""},{"name":"value3","nodeType":"YulTypedName","src":"977:6:16","type":""},{"name":"value4","nodeType":"YulTypedName","src":"985:6:16","type":""}],"src":"837:1047:16"},{"body":{"nodeType":"YulBlock","src":"2063:179:16","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2080:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"2091:2:16","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2073:6:16"},"nodeType":"YulFunctionCall","src":"2073:21:16"},"nodeType":"YulExpressionStatement","src":"2073:21:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2114:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"2125:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2110:3:16"},"nodeType":"YulFunctionCall","src":"2110:18:16"},{"kind":"number","nodeType":"YulLiteral","src":"2130:2:16","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2103:6:16"},"nodeType":"YulFunctionCall","src":"2103:30:16"},"nodeType":"YulExpressionStatement","src":"2103:30:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2153:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"2164:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2149:3:16"},"nodeType":"YulFunctionCall","src":"2149:18:16"},{"hexValue":"4f776e657220616464726573732063616e6e6f7420626520656d707479","kind":"string","nodeType":"YulLiteral","src":"2169:31:16","type":"","value":"Owner address cannot be empty"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2142:6:16"},"nodeType":"YulFunctionCall","src":"2142:59:16"},"nodeType":"YulExpressionStatement","src":"2142:59:16"},{"nodeType":"YulAssignment","src":"2210:26:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2222:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"2233:2:16","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2218:3:16"},"nodeType":"YulFunctionCall","src":"2218:18:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2210:4:16"}]}]},"name":"abi_encode_tuple_t_stringliteral_5ce500c9dc2e59e02700829a3ac6c4c1e7fc183d658cfaf2fdd6892d9a845f30__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2040:9:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2054:4:16","type":""}],"src":"1889:353:16"},{"body":{"nodeType":"YulBlock","src":"2279:95:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2296:1:16","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2303:3:16","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2308:10:16","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2299:3:16"},"nodeType":"YulFunctionCall","src":"2299:20:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2289:6:16"},"nodeType":"YulFunctionCall","src":"2289:31:16"},"nodeType":"YulExpressionStatement","src":"2289:31:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2336:1:16","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2339:4:16","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2329:6:16"},"nodeType":"YulFunctionCall","src":"2329:15:16"},"nodeType":"YulExpressionStatement","src":"2329:15:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2360:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2363:4:16","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2353:6:16"},"nodeType":"YulFunctionCall","src":"2353:15:16"},"nodeType":"YulExpressionStatement","src":"2353:15:16"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"2247:127:16"},{"body":{"nodeType":"YulBlock","src":"2426:88:16","statements":[{"body":{"nodeType":"YulBlock","src":"2457:22:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"2459:16:16"},"nodeType":"YulFunctionCall","src":"2459:18:16"},"nodeType":"YulExpressionStatement","src":"2459:18:16"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2442:5:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2453:1:16","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2449:3:16"},"nodeType":"YulFunctionCall","src":"2449:6:16"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2439:2:16"},"nodeType":"YulFunctionCall","src":"2439:17:16"},"nodeType":"YulIf","src":"2436:43:16"},{"nodeType":"YulAssignment","src":"2488:20:16","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2499:5:16"},{"kind":"number","nodeType":"YulLiteral","src":"2506:1:16","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2495:3:16"},"nodeType":"YulFunctionCall","src":"2495:13:16"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"2488:3:16"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2408:5:16","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"2418:3:16","type":""}],"src":"2379:135:16"},{"body":{"nodeType":"YulBlock","src":"2574:325:16","statements":[{"nodeType":"YulAssignment","src":"2584:22:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2598:1:16","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"2601:4:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2594:3:16"},"nodeType":"YulFunctionCall","src":"2594:12:16"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2584:6:16"}]},{"nodeType":"YulVariableDeclaration","src":"2615:38:16","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2645:4:16"},{"kind":"number","nodeType":"YulLiteral","src":"2651:1:16","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2641:3:16"},"nodeType":"YulFunctionCall","src":"2641:12:16"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"2619:18:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"2692:31:16","statements":[{"nodeType":"YulAssignment","src":"2694:27:16","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2708:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"2716:4:16","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2704:3:16"},"nodeType":"YulFunctionCall","src":"2704:17:16"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2694:6:16"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"2672:18:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2665:6:16"},"nodeType":"YulFunctionCall","src":"2665:26:16"},"nodeType":"YulIf","src":"2662:61:16"},{"body":{"nodeType":"YulBlock","src":"2782:111:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2803:1:16","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2810:3:16","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2815:10:16","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2806:3:16"},"nodeType":"YulFunctionCall","src":"2806:20:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2796:6:16"},"nodeType":"YulFunctionCall","src":"2796:31:16"},"nodeType":"YulExpressionStatement","src":"2796:31:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2847:1:16","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2850:4:16","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2840:6:16"},"nodeType":"YulFunctionCall","src":"2840:15:16"},"nodeType":"YulExpressionStatement","src":"2840:15:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2875:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2878:4:16","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2868:6:16"},"nodeType":"YulFunctionCall","src":"2868:15:16"},"nodeType":"YulExpressionStatement","src":"2868:15:16"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"2738:18:16"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2761:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"2769:2:16","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2758:2:16"},"nodeType":"YulFunctionCall","src":"2758:14:16"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2735:2:16"},"nodeType":"YulFunctionCall","src":"2735:38:16"},"nodeType":"YulIf","src":"2732:161:16"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"2554:4:16","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"2563:6:16","type":""}],"src":"2519:380:16"},{"body":{"nodeType":"YulBlock","src":"2960:65:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2977:1:16","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"2980:3:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2970:6:16"},"nodeType":"YulFunctionCall","src":"2970:14:16"},"nodeType":"YulExpressionStatement","src":"2970:14:16"},{"nodeType":"YulAssignment","src":"2993:26:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3011:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3014:4:16","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"3001:9:16"},"nodeType":"YulFunctionCall","src":"3001:18:16"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"2993:4:16"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"2943:3:16","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"2951:4:16","type":""}],"src":"2904:121:16"},{"body":{"nodeType":"YulBlock","src":"3111:464:16","statements":[{"body":{"nodeType":"YulBlock","src":"3144:425:16","statements":[{"nodeType":"YulVariableDeclaration","src":"3158:11:16","value":{"kind":"number","nodeType":"YulLiteral","src":"3168:1:16","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3162:2:16","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"3189:2:16"},{"name":"array","nodeType":"YulIdentifier","src":"3193:5:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3182:6:16"},"nodeType":"YulFunctionCall","src":"3182:17:16"},"nodeType":"YulExpressionStatement","src":"3182:17:16"},{"nodeType":"YulVariableDeclaration","src":"3212:31:16","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"3234:2:16"},{"kind":"number","nodeType":"YulLiteral","src":"3238:4:16","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"3224:9:16"},"nodeType":"YulFunctionCall","src":"3224:19:16"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"3216:4:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3256:57:16","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3279:4:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3289:1:16","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"3296:10:16"},{"kind":"number","nodeType":"YulLiteral","src":"3308:2:16","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3292:3:16"},"nodeType":"YulFunctionCall","src":"3292:19:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3285:3:16"},"nodeType":"YulFunctionCall","src":"3285:27:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3275:3:16"},"nodeType":"YulFunctionCall","src":"3275:38:16"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"3260:11:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"3350:23:16","statements":[{"nodeType":"YulAssignment","src":"3352:19:16","value":{"name":"data","nodeType":"YulIdentifier","src":"3367:4:16"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"3352:11:16"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"3332:10:16"},{"kind":"number","nodeType":"YulLiteral","src":"3344:4:16","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3329:2:16"},"nodeType":"YulFunctionCall","src":"3329:20:16"},"nodeType":"YulIf","src":"3326:47:16"},{"nodeType":"YulVariableDeclaration","src":"3386:41:16","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3400:4:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3410:1:16","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"3417:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"3422:2:16","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3413:3:16"},"nodeType":"YulFunctionCall","src":"3413:12:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3406:3:16"},"nodeType":"YulFunctionCall","src":"3406:20:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3396:3:16"},"nodeType":"YulFunctionCall","src":"3396:31:16"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"3390:2:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3440:24:16","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"3453:11:16"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"3444:5:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"3538:21:16","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"3547:5:16"},{"name":"_1","nodeType":"YulIdentifier","src":"3554:2:16"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3540:6:16"},"nodeType":"YulFunctionCall","src":"3540:17:16"},"nodeType":"YulExpressionStatement","src":"3540:17:16"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"3488:5:16"},{"name":"_2","nodeType":"YulIdentifier","src":"3495:2:16"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3485:2:16"},"nodeType":"YulFunctionCall","src":"3485:13:16"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3499:26:16","statements":[{"nodeType":"YulAssignment","src":"3501:22:16","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"3514:5:16"},{"kind":"number","nodeType":"YulLiteral","src":"3521:1:16","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3510:3:16"},"nodeType":"YulFunctionCall","src":"3510:13:16"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"3501:5:16"}]}]},"pre":{"nodeType":"YulBlock","src":"3481:3:16","statements":[]},"src":"3477:82:16"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"3127:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"3132:2:16","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3124:2:16"},"nodeType":"YulFunctionCall","src":"3124:11:16"},"nodeType":"YulIf","src":"3121:448:16"}]},"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"3083:5:16","type":""},{"name":"len","nodeType":"YulTypedName","src":"3090:3:16","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"3095:10:16","type":""}],"src":"3030:545:16"},{"body":{"nodeType":"YulBlock","src":"3665:81:16","statements":[{"nodeType":"YulAssignment","src":"3675:65:16","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3690:4:16"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3708:1:16","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"3711:3:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3704:3:16"},"nodeType":"YulFunctionCall","src":"3704:11:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3721:1:16","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3717:3:16"},"nodeType":"YulFunctionCall","src":"3717:6:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3700:3:16"},"nodeType":"YulFunctionCall","src":"3700:24:16"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3696:3:16"},"nodeType":"YulFunctionCall","src":"3696:29:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3686:3:16"},"nodeType":"YulFunctionCall","src":"3686:40:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3732:1:16","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"3735:3:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3728:3:16"},"nodeType":"YulFunctionCall","src":"3728:11:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"3683:2:16"},"nodeType":"YulFunctionCall","src":"3683:57:16"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"3675:4:16"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"3642:4:16","type":""},{"name":"len","nodeType":"YulTypedName","src":"3648:3:16","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"3656:4:16","type":""}],"src":"3580:166:16"},{"body":{"nodeType":"YulBlock","src":"3847:1256:16","statements":[{"nodeType":"YulVariableDeclaration","src":"3857:24:16","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3877:3:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3871:5:16"},"nodeType":"YulFunctionCall","src":"3871:10:16"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"3861:6:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"3924:22:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3926:16:16"},"nodeType":"YulFunctionCall","src":"3926:18:16"},"nodeType":"YulExpressionStatement","src":"3926:18:16"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"3896:6:16"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3912:2:16","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"3916:1:16","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3908:3:16"},"nodeType":"YulFunctionCall","src":"3908:10:16"},{"kind":"number","nodeType":"YulLiteral","src":"3920:1:16","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3904:3:16"},"nodeType":"YulFunctionCall","src":"3904:18:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3893:2:16"},"nodeType":"YulFunctionCall","src":"3893:30:16"},"nodeType":"YulIf","src":"3890:56:16"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3999:4:16"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4037:4:16"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"4031:5:16"},"nodeType":"YulFunctionCall","src":"4031:11:16"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"4005:25:16"},"nodeType":"YulFunctionCall","src":"4005:38:16"},{"name":"newLen","nodeType":"YulIdentifier","src":"4045:6:16"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"3955:43:16"},"nodeType":"YulFunctionCall","src":"3955:97:16"},"nodeType":"YulExpressionStatement","src":"3955:97:16"},{"nodeType":"YulVariableDeclaration","src":"4061:18:16","value":{"kind":"number","nodeType":"YulLiteral","src":"4078:1:16","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"4065:9:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4088:23:16","value":{"kind":"number","nodeType":"YulLiteral","src":"4107:4:16","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"4092:11:16","type":""}]},{"nodeType":"YulAssignment","src":"4120:24:16","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"4133:11:16"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"4120:9:16"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"4190:656:16","statements":[{"nodeType":"YulVariableDeclaration","src":"4204:35:16","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"4223:6:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4235:2:16","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4231:3:16"},"nodeType":"YulFunctionCall","src":"4231:7:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4219:3:16"},"nodeType":"YulFunctionCall","src":"4219:20:16"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"4208:7:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4252:49:16","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4296:4:16"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"4266:29:16"},"nodeType":"YulFunctionCall","src":"4266:35:16"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"4256:6:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4314:10:16","value":{"kind":"number","nodeType":"YulLiteral","src":"4323:1:16","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"4318:1:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"4401:172:16","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"4426:6:16"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4444:3:16"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"4449:9:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4440:3:16"},"nodeType":"YulFunctionCall","src":"4440:19:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4434:5:16"},"nodeType":"YulFunctionCall","src":"4434:26:16"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4419:6:16"},"nodeType":"YulFunctionCall","src":"4419:42:16"},"nodeType":"YulExpressionStatement","src":"4419:42:16"},{"nodeType":"YulAssignment","src":"4478:24:16","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"4492:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"4500:1:16","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4488:3:16"},"nodeType":"YulFunctionCall","src":"4488:14:16"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"4478:6:16"}]},{"nodeType":"YulAssignment","src":"4519:40:16","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"4536:9:16"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"4547:11:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4532:3:16"},"nodeType":"YulFunctionCall","src":"4532:27:16"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"4519:9:16"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4348:1:16"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"4351:7:16"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4345:2:16"},"nodeType":"YulFunctionCall","src":"4345:14:16"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"4360:28:16","statements":[{"nodeType":"YulAssignment","src":"4362:24:16","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4371:1:16"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"4374:11:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4367:3:16"},"nodeType":"YulFunctionCall","src":"4367:19:16"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"4362:1:16"}]}]},"pre":{"nodeType":"YulBlock","src":"4341:3:16","statements":[]},"src":"4337:236:16"},{"body":{"nodeType":"YulBlock","src":"4621:166:16","statements":[{"nodeType":"YulVariableDeclaration","src":"4639:43:16","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4666:3:16"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"4671:9:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4662:3:16"},"nodeType":"YulFunctionCall","src":"4662:19:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4656:5:16"},"nodeType":"YulFunctionCall","src":"4656:26:16"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"4643:9:16","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"4706:6:16"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"4718:9:16"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4745:1:16","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"4748:6:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4741:3:16"},"nodeType":"YulFunctionCall","src":"4741:14:16"},{"kind":"number","nodeType":"YulLiteral","src":"4757:3:16","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4737:3:16"},"nodeType":"YulFunctionCall","src":"4737:24:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4767:1:16","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4763:3:16"},"nodeType":"YulFunctionCall","src":"4763:6:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"4733:3:16"},"nodeType":"YulFunctionCall","src":"4733:37:16"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4729:3:16"},"nodeType":"YulFunctionCall","src":"4729:42:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4714:3:16"},"nodeType":"YulFunctionCall","src":"4714:58:16"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4699:6:16"},"nodeType":"YulFunctionCall","src":"4699:74:16"},"nodeType":"YulExpressionStatement","src":"4699:74:16"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"4592:7:16"},{"name":"newLen","nodeType":"YulIdentifier","src":"4601:6:16"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4589:2:16"},"nodeType":"YulFunctionCall","src":"4589:19:16"},"nodeType":"YulIf","src":"4586:201:16"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4807:4:16"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4821:1:16","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"4824:6:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4817:3:16"},"nodeType":"YulFunctionCall","src":"4817:14:16"},{"kind":"number","nodeType":"YulLiteral","src":"4833:1:16","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4813:3:16"},"nodeType":"YulFunctionCall","src":"4813:22:16"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4800:6:16"},"nodeType":"YulFunctionCall","src":"4800:36:16"},"nodeType":"YulExpressionStatement","src":"4800:36:16"}]},"nodeType":"YulCase","src":"4183:663:16","value":{"kind":"number","nodeType":"YulLiteral","src":"4188:1:16","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"4863:234:16","statements":[{"nodeType":"YulVariableDeclaration","src":"4877:14:16","value":{"kind":"number","nodeType":"YulLiteral","src":"4890:1:16","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4881:5:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"4926:67:16","statements":[{"nodeType":"YulAssignment","src":"4944:35:16","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4963:3:16"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"4968:9:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4959:3:16"},"nodeType":"YulFunctionCall","src":"4959:19:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4953:5:16"},"nodeType":"YulFunctionCall","src":"4953:26:16"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4944:5:16"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"4907:6:16"},"nodeType":"YulIf","src":"4904:89:16"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"5013:4:16"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5072:5:16"},{"name":"newLen","nodeType":"YulIdentifier","src":"5079:6:16"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"5019:52:16"},"nodeType":"YulFunctionCall","src":"5019:67:16"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"5006:6:16"},"nodeType":"YulFunctionCall","src":"5006:81:16"},"nodeType":"YulExpressionStatement","src":"5006:81:16"}]},"nodeType":"YulCase","src":"4855:242:16","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"4163:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"4171:2:16","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4160:2:16"},"nodeType":"YulFunctionCall","src":"4160:14:16"},"nodeType":"YulSwitch","src":"4153:944:16"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"3832:4:16","type":""},{"name":"src","nodeType":"YulTypedName","src":"3838:3:16","type":""}],"src":"3751:1352:16"},{"body":{"nodeType":"YulBlock","src":"5282:223:16","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5299:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"5310:2:16","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5292:6:16"},"nodeType":"YulFunctionCall","src":"5292:21:16"},"nodeType":"YulExpressionStatement","src":"5292:21:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5333:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"5344:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5329:3:16"},"nodeType":"YulFunctionCall","src":"5329:18:16"},{"kind":"number","nodeType":"YulLiteral","src":"5349:2:16","type":"","value":"33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5322:6:16"},"nodeType":"YulFunctionCall","src":"5322:30:16"},"nodeType":"YulExpressionStatement","src":"5322:30:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5372:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"5383:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5368:3:16"},"nodeType":"YulFunctionCall","src":"5368:18:16"},{"hexValue":"455243313135353a206d696e7420746f20746865207a65726f20616464726573","kind":"string","nodeType":"YulLiteral","src":"5388:34:16","type":"","value":"ERC1155: mint to the zero addres"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5361:6:16"},"nodeType":"YulFunctionCall","src":"5361:62:16"},"nodeType":"YulExpressionStatement","src":"5361:62:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5443:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"5454:2:16","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5439:3:16"},"nodeType":"YulFunctionCall","src":"5439:18:16"},{"hexValue":"73","kind":"string","nodeType":"YulLiteral","src":"5459:3:16","type":"","value":"s"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5432:6:16"},"nodeType":"YulFunctionCall","src":"5432:31:16"},"nodeType":"YulExpressionStatement","src":"5432:31:16"},{"nodeType":"YulAssignment","src":"5472:27:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5484:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"5495:3:16","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5480:3:16"},"nodeType":"YulFunctionCall","src":"5480:19:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5472:4:16"}]}]},"name":"abi_encode_tuple_t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5259:9:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5273:4:16","type":""}],"src":"5108:397:16"},{"body":{"nodeType":"YulBlock","src":"5558:77:16","statements":[{"nodeType":"YulAssignment","src":"5568:16:16","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5579:1:16"},{"name":"y","nodeType":"YulIdentifier","src":"5582:1:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5575:3:16"},"nodeType":"YulFunctionCall","src":"5575:9:16"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"5568:3:16"}]},{"body":{"nodeType":"YulBlock","src":"5607:22:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"5609:16:16"},"nodeType":"YulFunctionCall","src":"5609:18:16"},"nodeType":"YulExpressionStatement","src":"5609:18:16"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5599:1:16"},{"name":"sum","nodeType":"YulIdentifier","src":"5602:3:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5596:2:16"},"nodeType":"YulFunctionCall","src":"5596:10:16"},"nodeType":"YulIf","src":"5593:36:16"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"5541:1:16","type":""},{"name":"y","nodeType":"YulTypedName","src":"5544:1:16","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"5550:3:16","type":""}],"src":"5510:125:16"},{"body":{"nodeType":"YulBlock","src":"5769:119:16","statements":[{"nodeType":"YulAssignment","src":"5779:26:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5791:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"5802:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5787:3:16"},"nodeType":"YulFunctionCall","src":"5787:18:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5779:4:16"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5821:9:16"},{"name":"value0","nodeType":"YulIdentifier","src":"5832:6:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5814:6:16"},"nodeType":"YulFunctionCall","src":"5814:25:16"},"nodeType":"YulExpressionStatement","src":"5814:25:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5859:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"5870:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5855:3:16"},"nodeType":"YulFunctionCall","src":"5855:18:16"},{"name":"value1","nodeType":"YulIdentifier","src":"5875:6:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5848:6:16"},"nodeType":"YulFunctionCall","src":"5848:34:16"},"nodeType":"YulExpressionStatement","src":"5848:34:16"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5730:9:16","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5741:6:16","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5749:6:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5760:4:16","type":""}],"src":"5640:248:16"},{"body":{"nodeType":"YulBlock","src":"5925:95:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5942:1:16","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5949:3:16","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"5954:10:16","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5945:3:16"},"nodeType":"YulFunctionCall","src":"5945:20:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5935:6:16"},"nodeType":"YulFunctionCall","src":"5935:31:16"},"nodeType":"YulExpressionStatement","src":"5935:31:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5982:1:16","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5985:4:16","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5975:6:16"},"nodeType":"YulFunctionCall","src":"5975:15:16"},"nodeType":"YulExpressionStatement","src":"5975:15:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6006:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6009:4:16","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5999:6:16"},"nodeType":"YulFunctionCall","src":"5999:15:16"},"nodeType":"YulExpressionStatement","src":"5999:15:16"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"5893:127:16"},{"body":{"nodeType":"YulBlock","src":"6074:221:16","statements":[{"nodeType":"YulVariableDeclaration","src":"6084:26:16","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6104:5:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6098:5:16"},"nodeType":"YulFunctionCall","src":"6098:12:16"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"6088:6:16","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6126:3:16"},{"name":"length","nodeType":"YulIdentifier","src":"6131:6:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6119:6:16"},"nodeType":"YulFunctionCall","src":"6119:19:16"},"nodeType":"YulExpressionStatement","src":"6119:19:16"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6186:5:16"},{"kind":"number","nodeType":"YulLiteral","src":"6193:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6182:3:16"},"nodeType":"YulFunctionCall","src":"6182:16:16"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6204:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"6209:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6200:3:16"},"nodeType":"YulFunctionCall","src":"6200:14:16"},{"name":"length","nodeType":"YulIdentifier","src":"6216:6:16"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"6147:34:16"},"nodeType":"YulFunctionCall","src":"6147:76:16"},"nodeType":"YulExpressionStatement","src":"6147:76:16"},{"nodeType":"YulAssignment","src":"6232:57:16","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6247:3:16"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6260:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"6268:2:16","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6256:3:16"},"nodeType":"YulFunctionCall","src":"6256:15:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6277:2:16","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"6273:3:16"},"nodeType":"YulFunctionCall","src":"6273:7:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6252:3:16"},"nodeType":"YulFunctionCall","src":"6252:29:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6243:3:16"},"nodeType":"YulFunctionCall","src":"6243:39:16"},{"kind":"number","nodeType":"YulLiteral","src":"6284:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6239:3:16"},"nodeType":"YulFunctionCall","src":"6239:50:16"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"6232:3:16"}]}]},"name":"abi_encode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6051:5:16","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6058:3:16","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6066:3:16","type":""}],"src":"6025:270:16"},{"body":{"nodeType":"YulBlock","src":"6531:329:16","statements":[{"nodeType":"YulVariableDeclaration","src":"6541:29:16","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6559:3:16","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"6564:1:16","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6555:3:16"},"nodeType":"YulFunctionCall","src":"6555:11:16"},{"kind":"number","nodeType":"YulLiteral","src":"6568:1:16","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6551:3:16"},"nodeType":"YulFunctionCall","src":"6551:19:16"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"6545:2:16","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6586:9:16"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6601:6:16"},{"name":"_1","nodeType":"YulIdentifier","src":"6609:2:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6597:3:16"},"nodeType":"YulFunctionCall","src":"6597:15:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6579:6:16"},"nodeType":"YulFunctionCall","src":"6579:34:16"},"nodeType":"YulExpressionStatement","src":"6579:34:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6633:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"6644:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6629:3:16"},"nodeType":"YulFunctionCall","src":"6629:18:16"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"6653:6:16"},{"name":"_1","nodeType":"YulIdentifier","src":"6661:2:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6649:3:16"},"nodeType":"YulFunctionCall","src":"6649:15:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6622:6:16"},"nodeType":"YulFunctionCall","src":"6622:43:16"},"nodeType":"YulExpressionStatement","src":"6622:43:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6685:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"6696:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6681:3:16"},"nodeType":"YulFunctionCall","src":"6681:18:16"},{"name":"value2","nodeType":"YulIdentifier","src":"6701:6:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6674:6:16"},"nodeType":"YulFunctionCall","src":"6674:34:16"},"nodeType":"YulExpressionStatement","src":"6674:34:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6728:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"6739:2:16","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6724:3:16"},"nodeType":"YulFunctionCall","src":"6724:18:16"},{"name":"value3","nodeType":"YulIdentifier","src":"6744:6:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6717:6:16"},"nodeType":"YulFunctionCall","src":"6717:34:16"},"nodeType":"YulExpressionStatement","src":"6717:34:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6771:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"6782:3:16","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6767:3:16"},"nodeType":"YulFunctionCall","src":"6767:19:16"},{"kind":"number","nodeType":"YulLiteral","src":"6788:3:16","type":"","value":"160"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6760:6:16"},"nodeType":"YulFunctionCall","src":"6760:32:16"},"nodeType":"YulExpressionStatement","src":"6760:32:16"},{"nodeType":"YulAssignment","src":"6801:53:16","value":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"6826:6:16"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6838:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"6849:3:16","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6834:3:16"},"nodeType":"YulFunctionCall","src":"6834:19:16"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"6809:16:16"},"nodeType":"YulFunctionCall","src":"6809:45:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6801:4:16"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6468:9:16","type":""},{"name":"value4","nodeType":"YulTypedName","src":"6479:6:16","type":""},{"name":"value3","nodeType":"YulTypedName","src":"6487:6:16","type":""},{"name":"value2","nodeType":"YulTypedName","src":"6495:6:16","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6503:6:16","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6511:6:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6522:4:16","type":""}],"src":"6300:560:16"},{"body":{"nodeType":"YulBlock","src":"6945:210:16","statements":[{"body":{"nodeType":"YulBlock","src":"6991:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7000:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7003:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6993:6:16"},"nodeType":"YulFunctionCall","src":"6993:12:16"},"nodeType":"YulExpressionStatement","src":"6993:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6966:7:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"6975:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6962:3:16"},"nodeType":"YulFunctionCall","src":"6962:23:16"},{"kind":"number","nodeType":"YulLiteral","src":"6987:2:16","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6958:3:16"},"nodeType":"YulFunctionCall","src":"6958:32:16"},"nodeType":"YulIf","src":"6955:52:16"},{"nodeType":"YulVariableDeclaration","src":"7016:29:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7035:9:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7029:5:16"},"nodeType":"YulFunctionCall","src":"7029:16:16"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"7020:5:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"7109:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7118:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7121:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7111:6:16"},"nodeType":"YulFunctionCall","src":"7111:12:16"},"nodeType":"YulExpressionStatement","src":"7111:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7067:5:16"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7078:5:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7089:3:16","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"7094:10:16","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7085:3:16"},"nodeType":"YulFunctionCall","src":"7085:20:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7074:3:16"},"nodeType":"YulFunctionCall","src":"7074:32:16"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"7064:2:16"},"nodeType":"YulFunctionCall","src":"7064:43:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7057:6:16"},"nodeType":"YulFunctionCall","src":"7057:51:16"},"nodeType":"YulIf","src":"7054:71:16"},{"nodeType":"YulAssignment","src":"7134:15:16","value":{"name":"value","nodeType":"YulIdentifier","src":"7144:5:16"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7134:6:16"}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6911:9:16","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6922:7:16","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6934:6:16","type":""}],"src":"6865:290:16"},{"body":{"nodeType":"YulBlock","src":"7203:136:16","statements":[{"body":{"nodeType":"YulBlock","src":"7248:85:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7277:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7280:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7283:1:16","type":"","value":"4"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"7262:14:16"},"nodeType":"YulFunctionCall","src":"7262:23:16"},"nodeType":"YulExpressionStatement","src":"7262:23:16"},{"nodeType":"YulAssignment","src":"7298:25:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7309:3:16","type":"","value":"224"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7320:1:16","type":"","value":"0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7314:5:16"},"nodeType":"YulFunctionCall","src":"7314:8:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7305:3:16"},"nodeType":"YulFunctionCall","src":"7305:18:16"},"variableNames":[{"name":"sig","nodeType":"YulIdentifier","src":"7298:3:16"}]}]},"condition":{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"7219:14:16"},"nodeType":"YulFunctionCall","src":"7219:16:16"},{"kind":"number","nodeType":"YulLiteral","src":"7237:1:16","type":"","value":"3"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7216:2:16"},"nodeType":"YulFunctionCall","src":"7216:23:16"},"nodeType":"YulIf","src":"7213:120:16"}]},"name":"return_data_selector","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"sig","nodeType":"YulTypedName","src":"7195:3:16","type":""}],"src":"7160:179:16"},{"body":{"nodeType":"YulBlock","src":"7391:624:16","statements":[{"body":{"nodeType":"YulBlock","src":"7431:9:16","statements":[{"nodeType":"YulLeave","src":"7433:5:16"}]},"condition":{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"7407:14:16"},"nodeType":"YulFunctionCall","src":"7407:16:16"},{"kind":"number","nodeType":"YulLiteral","src":"7425:4:16","type":"","value":"0x44"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7404:2:16"},"nodeType":"YulFunctionCall","src":"7404:26:16"},"nodeType":"YulIf","src":"7401:39:16"},{"nodeType":"YulVariableDeclaration","src":"7449:21:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7467:2:16","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7461:5:16"},"nodeType":"YulFunctionCall","src":"7461:9:16"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"7453:4:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7479:16:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7493:1:16","type":"","value":"3"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"7489:3:16"},"nodeType":"YulFunctionCall","src":"7489:6:16"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"7483:2:16","type":""}]},{"expression":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"7519:4:16"},{"kind":"number","nodeType":"YulLiteral","src":"7525:1:16","type":"","value":"4"},{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"7532:14:16"},"nodeType":"YulFunctionCall","src":"7532:16:16"},{"name":"_1","nodeType":"YulIdentifier","src":"7550:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7528:3:16"},"nodeType":"YulFunctionCall","src":"7528:25:16"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"7504:14:16"},"nodeType":"YulFunctionCall","src":"7504:50:16"},"nodeType":"YulExpressionStatement","src":"7504:50:16"},{"nodeType":"YulVariableDeclaration","src":"7563:25:16","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"7583:4:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7577:5:16"},"nodeType":"YulFunctionCall","src":"7577:11:16"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7567:6:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7597:26:16","value":{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"7607:14:16"},"nodeType":"YulFunctionCall","src":"7607:16:16"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"7601:2:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7632:28:16","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7650:2:16","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"7654:1:16","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7646:3:16"},"nodeType":"YulFunctionCall","src":"7646:10:16"},{"kind":"number","nodeType":"YulLiteral","src":"7658:1:16","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7642:3:16"},"nodeType":"YulFunctionCall","src":"7642:18:16"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"7636:2:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"7718:9:16","statements":[{"nodeType":"YulLeave","src":"7720:5:16"}]},"condition":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7678:6:16"},{"name":"_3","nodeType":"YulIdentifier","src":"7686:2:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7675:2:16"},"nodeType":"YulFunctionCall","src":"7675:14:16"},{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7698:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"7706:4:16","type":"","value":"0x24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7694:3:16"},"nodeType":"YulFunctionCall","src":"7694:17:16"},{"name":"_2","nodeType":"YulIdentifier","src":"7713:2:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7691:2:16"},"nodeType":"YulFunctionCall","src":"7691:25:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7672:2:16"},"nodeType":"YulFunctionCall","src":"7672:45:16"},"nodeType":"YulIf","src":"7669:58:16"},{"nodeType":"YulVariableDeclaration","src":"7736:28:16","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"7751:4:16"},{"name":"offset","nodeType":"YulIdentifier","src":"7757:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7747:3:16"},"nodeType":"YulFunctionCall","src":"7747:17:16"},"variables":[{"name":"msg","nodeType":"YulTypedName","src":"7740:3:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7773:24:16","value":{"arguments":[{"name":"msg","nodeType":"YulIdentifier","src":"7793:3:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7787:5:16"},"nodeType":"YulFunctionCall","src":"7787:10:16"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"7777:6:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"7824:9:16","statements":[{"nodeType":"YulLeave","src":"7826:5:16"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7812:6:16"},{"name":"_3","nodeType":"YulIdentifier","src":"7820:2:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7809:2:16"},"nodeType":"YulFunctionCall","src":"7809:14:16"},"nodeType":"YulIf","src":"7806:27:16"},{"body":{"nodeType":"YulBlock","src":"7915:9:16","statements":[{"nodeType":"YulLeave","src":"7917:5:16"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"msg","nodeType":"YulIdentifier","src":"7856:3:16"},{"name":"length","nodeType":"YulIdentifier","src":"7861:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7852:3:16"},"nodeType":"YulFunctionCall","src":"7852:16:16"},{"kind":"number","nodeType":"YulLiteral","src":"7870:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7848:3:16"},"nodeType":"YulFunctionCall","src":"7848:27:16"},{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"7885:4:16"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"7891:14:16"},"nodeType":"YulFunctionCall","src":"7891:16:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7881:3:16"},"nodeType":"YulFunctionCall","src":"7881:27:16"},{"name":"_1","nodeType":"YulIdentifier","src":"7910:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7877:3:16"},"nodeType":"YulFunctionCall","src":"7877:36:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7845:2:16"},"nodeType":"YulFunctionCall","src":"7845:69:16"},"nodeType":"YulIf","src":"7842:82:16"},{"expression":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"7953:4:16"},{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7967:6:16"},{"name":"length","nodeType":"YulIdentifier","src":"7975:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7963:3:16"},"nodeType":"YulFunctionCall","src":"7963:19:16"},{"kind":"number","nodeType":"YulLiteral","src":"7984:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7959:3:16"},"nodeType":"YulFunctionCall","src":"7959:30:16"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"7933:19:16"},"nodeType":"YulFunctionCall","src":"7933:57:16"},"nodeType":"YulExpressionStatement","src":"7933:57:16"},{"nodeType":"YulAssignment","src":"7999:10:16","value":{"name":"msg","nodeType":"YulIdentifier","src":"8006:3:16"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"7999:3:16"}]}]},"name":"try_decode_error_message","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"7383:3:16","type":""}],"src":"7344:671:16"},{"body":{"nodeType":"YulBlock","src":"8141:98:16","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8158:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"8169:2:16","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8151:6:16"},"nodeType":"YulFunctionCall","src":"8151:21:16"},"nodeType":"YulExpressionStatement","src":"8151:21:16"},{"nodeType":"YulAssignment","src":"8181:52:16","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8206:6:16"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8218:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"8229:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8214:3:16"},"nodeType":"YulFunctionCall","src":"8214:18:16"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"8189:16:16"},"nodeType":"YulFunctionCall","src":"8189:44:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8181:4:16"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8110:9:16","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8121:6:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8132:4:16","type":""}],"src":"8020:219:16"},{"body":{"nodeType":"YulBlock","src":"8418:242:16","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8435:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"8446:2:16","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8428:6:16"},"nodeType":"YulFunctionCall","src":"8428:21:16"},"nodeType":"YulExpressionStatement","src":"8428:21:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8469:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"8480:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8465:3:16"},"nodeType":"YulFunctionCall","src":"8465:18:16"},{"kind":"number","nodeType":"YulLiteral","src":"8485:2:16","type":"","value":"52"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8458:6:16"},"nodeType":"YulFunctionCall","src":"8458:30:16"},"nodeType":"YulExpressionStatement","src":"8458:30:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8508:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"8519:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8504:3:16"},"nodeType":"YulFunctionCall","src":"8504:18:16"},{"hexValue":"455243313135353a207472616e7366657220746f206e6f6e2d45524331313535","kind":"string","nodeType":"YulLiteral","src":"8524:34:16","type":"","value":"ERC1155: transfer to non-ERC1155"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8497:6:16"},"nodeType":"YulFunctionCall","src":"8497:62:16"},"nodeType":"YulExpressionStatement","src":"8497:62:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8579:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"8590:2:16","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8575:3:16"},"nodeType":"YulFunctionCall","src":"8575:18:16"},{"hexValue":"526563656976657220696d706c656d656e746572","kind":"string","nodeType":"YulLiteral","src":"8595:22:16","type":"","value":"Receiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8568:6:16"},"nodeType":"YulFunctionCall","src":"8568:50:16"},"nodeType":"YulExpressionStatement","src":"8568:50:16"},{"nodeType":"YulAssignment","src":"8627:27:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8639:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"8650:3:16","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8635:3:16"},"nodeType":"YulFunctionCall","src":"8635:19:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8627:4:16"}]}]},"name":"abi_encode_tuple_t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8395:9:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8409:4:16","type":""}],"src":"8244:416:16"},{"body":{"nodeType":"YulBlock","src":"8839:230:16","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8856:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"8867:2:16","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8849:6:16"},"nodeType":"YulFunctionCall","src":"8849:21:16"},"nodeType":"YulExpressionStatement","src":"8849:21:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8890:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"8901:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8886:3:16"},"nodeType":"YulFunctionCall","src":"8886:18:16"},{"kind":"number","nodeType":"YulLiteral","src":"8906:2:16","type":"","value":"40"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8879:6:16"},"nodeType":"YulFunctionCall","src":"8879:30:16"},"nodeType":"YulExpressionStatement","src":"8879:30:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8929:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"8940:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8925:3:16"},"nodeType":"YulFunctionCall","src":"8925:18:16"},{"hexValue":"455243313135353a204552433131353552656365697665722072656a65637465","kind":"string","nodeType":"YulLiteral","src":"8945:34:16","type":"","value":"ERC1155: ERC1155Receiver rejecte"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8918:6:16"},"nodeType":"YulFunctionCall","src":"8918:62:16"},"nodeType":"YulExpressionStatement","src":"8918:62:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9000:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"9011:2:16","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8996:3:16"},"nodeType":"YulFunctionCall","src":"8996:18:16"},{"hexValue":"6420746f6b656e73","kind":"string","nodeType":"YulLiteral","src":"9016:10:16","type":"","value":"d tokens"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8989:6:16"},"nodeType":"YulFunctionCall","src":"8989:38:16"},"nodeType":"YulExpressionStatement","src":"8989:38:16"},{"nodeType":"YulAssignment","src":"9036:27:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9048:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"9059:3:16","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9044:3:16"},"nodeType":"YulFunctionCall","src":"9044:19:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9036:4:16"}]}]},"name":"abi_encode_tuple_t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8816:9:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8830:4:16","type":""}],"src":"8665:404:16"}]},"contents":"{\n    { }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function finalize_allocation(memPtr, size)\n    {\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_decode_tuple_t_addresst_bytes32t_string_memory_ptrt_uint256t_address_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_address_fromMemory(headStart)\n        value1 := mload(add(headStart, 32))\n        let offset := mload(add(headStart, 64))\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := mload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let memPtr := mload(64)\n        finalize_allocation(memPtr, add(and(add(_3, 0x1f), not(31)), 32))\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        copy_memory_to_memory_with_cleanup(add(_2, 32), add(memPtr, 32), _3)\n        value2 := memPtr\n        value3 := mload(add(headStart, 96))\n        value4 := abi_decode_address_fromMemory(add(headStart, 128))\n    }\n    function abi_encode_tuple_t_stringliteral_5ce500c9dc2e59e02700829a3ac6c4c1e7fc183d658cfaf2fdd6892d9a845f30__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Owner address cannot be empty\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC1155: mint to the zero addres\")\n        mstore(add(headStart, 96), \"s\")\n        tail := add(headStart, 128)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_encode_bytes(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), 160)\n        tail := abi_encode_bytes(value4, add(headStart, 160))\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n        value0 := value\n    }\n    function return_data_selector() -> sig\n    {\n        if gt(returndatasize(), 3)\n        {\n            returndatacopy(0, 0, 4)\n            sig := shr(224, mload(0))\n        }\n    }\n    function try_decode_error_message() -> ret\n    {\n        if lt(returndatasize(), 0x44) { leave }\n        let data := mload(64)\n        let _1 := not(3)\n        returndatacopy(data, 4, add(returndatasize(), _1))\n        let offset := mload(data)\n        let _2 := returndatasize()\n        let _3 := sub(shl(64, 1), 1)\n        if or(gt(offset, _3), gt(add(offset, 0x24), _2)) { leave }\n        let msg := add(data, offset)\n        let length := mload(msg)\n        if gt(length, _3) { leave }\n        if gt(add(add(msg, length), 0x20), add(add(data, returndatasize()), _1)) { leave }\n        finalize_allocation(data, add(add(offset, length), 0x20))\n        ret := msg\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_bytes(value0, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 52)\n        mstore(add(headStart, 64), \"ERC1155: transfer to non-ERC1155\")\n        mstore(add(headStart, 96), \"Receiver implementer\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 40)\n        mstore(add(headStart, 64), \"ERC1155: ERC1155Receiver rejecte\")\n        mstore(add(headStart, 96), \"d tokens\")\n        tail := add(headStart, 128)\n    }\n}","id":16,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x2BD0 CODESIZE SUB DUP1 PUSH3 0x2BD0 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x595 JUMP JUMPDEST DUP3 PUSH3 0x40 DUP2 PUSH3 0x10C JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH3 0x9D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E657220616464726573732063616E6E6F7420626520656D707479000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH3 0xD1 SWAP2 CALLER SWAP2 SWAP1 PUSH1 0x0 PUSH3 0xB6 DUP4 PUSH3 0x689 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE DUP6 SWAP1 PUSH3 0x11E JUMP JUMPDEST PUSH3 0xDE PUSH1 0x0 CALLER PUSH3 0x23C JUMP JUMPDEST PUSH1 0x4 SWAP4 SWAP1 SWAP4 SSTORE POP POP PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP PUSH3 0x991 JUMP JUMPDEST PUSH1 0x2 PUSH3 0x11A DUP3 DUP3 PUSH3 0x730 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH3 0x180 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A206D696E7420746F20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x94 JUMP JUMPDEST CALLER PUSH1 0x0 PUSH3 0x18E DUP6 PUSH3 0x248 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH3 0x19D DUP6 PUSH3 0x248 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP8 SWAP3 SWAP1 PUSH3 0x1D1 SWAP1 DUP5 SWAP1 PUSH3 0x7FC JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP11 AND SWAP3 PUSH1 0x0 SWAP3 SWAP2 DUP8 AND SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH3 0x233 DUP4 PUSH1 0x0 DUP10 DUP10 DUP10 DUP10 PUSH3 0x29E JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH3 0x11A DUP3 DUP3 PUSH3 0x456 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP3 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH3 0x285 JUMPI PUSH3 0x285 PUSH3 0x812 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH3 0x296 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF23A6E61 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xF23A6E61 SWAP1 PUSH3 0x2E5 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH3 0x856 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH3 0x323 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH3 0x320 SWAP2 DUP2 ADD SWAP1 PUSH3 0x89D JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH3 0x3E3 JUMPI PUSH3 0x332 PUSH3 0x8D0 JUMP JUMPDEST DUP1 PUSH4 0x8C379A0 SUB PUSH3 0x372 JUMPI POP PUSH3 0x349 PUSH3 0x8ED JUMP JUMPDEST DUP1 PUSH3 0x356 JUMPI POP PUSH3 0x374 JUMP JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x94 SWAP2 SWAP1 PUSH3 0x97C JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x34 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F206E6F6E2D45524331313535 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x526563656976657220696D706C656D656E746572000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x94 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xF23A6E61 PUSH1 0xE0 SHL EQ PUSH3 0x233 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A204552433131353552656365697665722072656A65637465 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x6420746F6B656E73 PUSH1 0xC0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x94 JUMP JUMPDEST PUSH3 0x462 DUP3 DUP3 PUSH3 0x4E0 JUMP JUMPDEST PUSH3 0x11A JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH3 0x49C CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x525 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH3 0x568 JUMPI PUSH3 0x568 PUSH3 0x52A JUMP JUMPDEST PUSH1 0x40 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x58C JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH3 0x572 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH3 0x5AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x5B9 DUP7 PUSH3 0x50D JUMP JUMPDEST PUSH1 0x20 DUP8 ADD MLOAD PUSH1 0x40 DUP9 ADD MLOAD SWAP2 SWAP7 POP SWAP5 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x5DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x5F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH3 0x608 JUMPI PUSH3 0x608 PUSH3 0x52A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 POP PUSH3 0x623 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP4 PUSH3 0x540 JUMP JUMPDEST DUP1 DUP3 MSTORE DUP10 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH3 0x639 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x64C DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD PUSH3 0x56F JUMP JUMPDEST POP DUP1 SWAP5 POP POP POP PUSH1 0x60 DUP7 ADD MLOAD SWAP2 POP PUSH3 0x667 PUSH1 0x80 DUP8 ADD PUSH3 0x50D JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH3 0x69E JUMPI PUSH3 0x69E PUSH3 0x673 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x6BA JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x6DB JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x72B JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x70A JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x296 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x716 JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x74C JUMPI PUSH3 0x74C PUSH3 0x52A JUMP JUMPDEST PUSH3 0x764 DUP2 PUSH3 0x75D DUP5 SLOAD PUSH3 0x6A5 JUMP JUMPDEST DUP5 PUSH3 0x6E1 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x79C JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x783 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x296 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x7CD JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x7AC JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x7EC JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH3 0x507 JUMPI PUSH3 0x507 PUSH3 0x673 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH3 0x842 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH3 0x56F JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH3 0x892 SWAP1 DUP4 ADD DUP5 PUSH3 0x828 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x8B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH3 0x8C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 RETURNDATASIZE GT ISZERO PUSH3 0x8EA JUMPI PUSH1 0x4 PUSH1 0x0 DUP1 RETURNDATACOPY POP PUSH1 0x0 MLOAD PUSH1 0xE0 SHR JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x44 RETURNDATASIZE LT ISZERO PUSH3 0x8FC JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x3 NOT RETURNDATASIZE DUP2 ADD PUSH1 0x4 DUP4 RETURNDATACOPY DUP2 MLOAD RETURNDATASIZE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP4 GT PUSH1 0x24 DUP5 ADD DUP4 LT OR ISZERO PUSH3 0x92C JUMPI POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP3 DUP6 ADD SWAP2 POP DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH3 0x945 JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP5 RETURNDATASIZE DUP8 ADD ADD PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH3 0x960 JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH3 0x971 PUSH1 0x20 DUP3 DUP7 ADD ADD DUP8 PUSH3 0x540 JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH3 0x8C9 PUSH1 0x20 DUP4 ADD DUP5 PUSH3 0x828 JUMP JUMPDEST PUSH2 0x222F DUP1 PUSH3 0x9A1 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x14C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x3E352E62 GT PUSH2 0xC3 JUMPI DUP1 PUSH4 0xC0883B92 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xC0883B92 EQ PUSH2 0x2F2 JUMPI DUP1 PUSH4 0xC3AE2B78 EQ PUSH2 0x31D JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x330 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x343 JUMPI DUP1 PUSH4 0xEF0D4572 EQ PUSH2 0x37F JUMPI DUP1 PUSH4 0xF242432A EQ PUSH2 0x392 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3E352E62 EQ PUSH2 0x27E JUMPI DUP1 PUSH4 0x4E1273F4 EQ PUSH2 0x291 JUMPI DUP1 PUSH4 0x7CB64759 EQ PUSH2 0x2B1 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x2C4 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x2D7 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x2DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x248A9CA3 GT PUSH2 0x115 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x1F4 JUMPI DUP1 PUSH4 0x2EB2C2D6 EQ PUSH2 0x217 JUMPI DUP1 PUSH4 0x2EB4A7AB EQ PUSH2 0x22C JUMPI DUP1 PUSH4 0x2ECC6160 EQ PUSH2 0x235 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x258 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x26B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0xFDD58E EQ PUSH2 0x151 JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x177 JUMPI DUP1 PUSH4 0x69824FB EQ PUSH2 0x19A JUMPI DUP1 PUSH4 0x7BD0265 EQ PUSH2 0x1AD JUMPI DUP1 PUSH4 0xE89341C EQ PUSH2 0x1D4 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x164 PUSH2 0x15F CALLDATASIZE PUSH1 0x4 PUSH2 0x16F3 JUMP JUMPDEST PUSH2 0x3A5 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x18A PUSH2 0x185 CALLDATASIZE PUSH1 0x4 PUSH2 0x1735 JUMP JUMPDEST PUSH2 0x43E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x16E JUMP JUMPDEST PUSH2 0x18A PUSH2 0x1A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x179D JUMP JUMPDEST PUSH2 0x458 JUMP JUMPDEST PUSH2 0x164 PUSH32 0xD8AA0F3194971A2A116679F7C2090F6939C8D4E01A2A8D7E41D55E5351469E63 DUP2 JUMP JUMPDEST PUSH2 0x1E7 PUSH2 0x1E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x17DE JUMP JUMPDEST PUSH2 0x4DC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x16E SWAP2 SWAP1 PUSH2 0x1847 JUMP JUMPDEST PUSH2 0x164 PUSH2 0x202 CALLDATASIZE PUSH1 0x4 PUSH2 0x17DE JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x22A PUSH2 0x225 CALLDATASIZE PUSH1 0x4 PUSH2 0x19A3 JUMP JUMPDEST PUSH2 0x570 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x164 PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x18A PUSH2 0x243 CALLDATASIZE PUSH1 0x4 PUSH2 0x17DE JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x22A PUSH2 0x266 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A50 JUMP JUMPDEST PUSH2 0x5BC JUMP JUMPDEST PUSH2 0x22A PUSH2 0x279 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A50 JUMP JUMPDEST PUSH2 0x5E6 JUMP JUMPDEST PUSH2 0x22A PUSH2 0x28C CALLDATASIZE PUSH1 0x4 PUSH2 0x1A80 JUMP JUMPDEST PUSH2 0x664 JUMP JUMPDEST PUSH2 0x2A4 PUSH2 0x29F CALLDATASIZE PUSH1 0x4 PUSH2 0x1AF7 JUMP JUMPDEST PUSH2 0x85D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x16E SWAP2 SWAP1 PUSH2 0x1BFE JUMP JUMPDEST PUSH2 0x22A PUSH2 0x2BF CALLDATASIZE PUSH1 0x4 PUSH2 0x17DE JUMP JUMPDEST PUSH2 0x986 JUMP JUMPDEST PUSH2 0x18A PUSH2 0x2D2 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A50 JUMP JUMPDEST PUSH2 0x997 JUMP JUMPDEST PUSH2 0x164 PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH2 0x22A PUSH2 0x2ED CALLDATASIZE PUSH1 0x4 PUSH2 0x1C1F JUMP JUMPDEST PUSH2 0x9C2 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH2 0x305 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x16E JUMP JUMPDEST PUSH2 0x22A PUSH2 0x32B CALLDATASIZE PUSH1 0x4 PUSH2 0x1C4D JUMP JUMPDEST PUSH2 0x9CD JUMP JUMPDEST PUSH2 0x22A PUSH2 0x33E CALLDATASIZE PUSH1 0x4 PUSH2 0x1A50 JUMP JUMPDEST PUSH2 0xAE8 JUMP JUMPDEST PUSH2 0x18A PUSH2 0x351 CALLDATASIZE PUSH1 0x4 PUSH2 0x1CBC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x22A PUSH2 0x38D CALLDATASIZE PUSH1 0x4 PUSH2 0x1CEA JUMP JUMPDEST PUSH2 0xB0D JUMP JUMPDEST PUSH2 0x22A PUSH2 0x3A0 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D07 JUMP JUMPDEST PUSH2 0xB3B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x415 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2061646472657373207A65726F206973206E6F7420612076 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x30B634B21037BBB732B9 PUSH1 0xB1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x449 DUP3 PUSH2 0xB80 JUMP JUMPDEST DUP1 PUSH2 0x438 JUMPI POP PUSH2 0x438 DUP3 PUSH2 0xBD0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT CALLER PUSH1 0x60 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x34 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0x4D4 DUP5 DUP5 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP PUSH1 0x4 SLOAD SWAP2 POP DUP5 SWAP1 POP PUSH2 0xBF5 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x4EB SWAP1 PUSH2 0x1D6F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x517 SWAP1 PUSH2 0x1D6F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x564 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x539 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x564 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x547 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER EQ DUP1 PUSH2 0x58C JUMPI POP PUSH2 0x58C DUP6 CALLER PUSH2 0x351 JUMP JUMPDEST PUSH2 0x5A8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x40C SWAP1 PUSH2 0x1DA9 JUMP JUMPDEST PUSH2 0x5B5 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0xC0B JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x5D7 DUP2 PUSH2 0xDE8 JUMP JUMPDEST PUSH2 0x5E1 DUP4 DUP4 PUSH2 0xDF5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x656 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x103937B632B9903337B91039B2B633 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x40C JUMP JUMPDEST PUSH2 0x660 DUP3 DUP3 PUSH2 0xE7B JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x40 MLOAD PUSH4 0xDEBFDA3 PUSH1 0xE4 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xDEBFDA30 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6AC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6D0 SWAP2 SWAP1 PUSH2 0x1DF7 JUMP JUMPDEST PUSH2 0x728 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x43616C6C6572206973206E6F7420616E20617574686F72697A65642065786563 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x3ABA37B9 PUSH1 0xE1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x40C JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x800 JUMPI PUSH1 0x0 DUP1 DUP1 DUP1 DUP8 DUP6 DUP9 PUSH2 0x746 DUP3 PUSH1 0x68 PUSH2 0x1E2A JUMP JUMPDEST SWAP3 PUSH2 0x753 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1E3D JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x760 SWAP2 SWAP1 PUSH2 0x1E67 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP1 PUSH2 0x773 DUP5 DUP5 PUSH2 0x3A5 JUMP JUMPDEST LT ISZERO PUSH2 0x7CC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53656C6C657220646F6573206E6F74206861766520656E6F75676820746F6B65 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6E73 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x40C JUMP JUMPDEST PUSH2 0x7E8 DUP4 DUP6 DUP5 DUP5 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xEE2 JUMP JUMPDEST POP POP POP POP PUSH1 0x68 DUP2 PUSH2 0x7F9 SWAP2 SWAP1 PUSH2 0x1E2A JUMP JUMPDEST SWAP1 POP PUSH2 0x72B JUMP JUMPDEST POP PUSH1 0x0 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x813 SWAP3 SWAP2 SWAP1 PUSH2 0x1EAD JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 SWAP1 SUB DUP3 KECCAK256 DUP1 DUP4 MSTORE TIMESTAMP PUSH1 0x20 DUP5 ADD MSTORE SWAP3 POP DUP4 SWAP2 CALLER SWAP2 PUSH32 0x78202E946262627C432F6C5B92FEE2A7224C9AABDB3C71F747FCCBAD2FB470A4 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x8C2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A206163636F756E747320616E6420696473206C656E677468 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x40DAD2E6DAC2E8C6D PUSH1 0xBB SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x40C JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8DD JUMPI PUSH2 0x8DD PUSH2 0x185A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x906 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x97E JUMPI PUSH2 0x951 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x92A JUMPI PUSH2 0x92A PUSH2 0x1EBD JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x944 JUMPI PUSH2 0x944 PUSH2 0x1EBD JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x3A5 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x963 JUMPI PUSH2 0x963 PUSH2 0x1EBD JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH2 0x977 DUP2 PUSH2 0x1ED3 JUMP JUMPDEST SWAP1 POP PUSH2 0x90C JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x991 DUP2 PUSH2 0xDE8 JUMP JUMPDEST POP PUSH1 0x4 SSTORE JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x660 CALLER DUP4 DUP4 PUSH2 0x100C JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xA3D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546F6B656E2069732063757272656E746C79206C6F636B656420666F72206D69 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6E74696E67 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x40C JUMP JUMPDEST PUSH2 0xA47 DUP4 DUP4 PUSH2 0x458 JUMP JUMPDEST PUSH2 0xA93 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616C6C6572206973206E6F742077686974656C697374656400000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x40C JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0xAB8 CALLER DUP3 DUP8 DUP8 PUSH2 0x10EC JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0x6 DUP1 SLOAD SWAP2 PUSH2 0xADC DUP4 PUSH2 0x1ED3 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xB03 DUP2 PUSH2 0xDE8 JUMP JUMPDEST PUSH2 0x5E1 DUP4 DUP4 PUSH2 0xE7B JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB18 DUP2 PUSH2 0xDE8 JUMP JUMPDEST POP PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER EQ DUP1 PUSH2 0xB57 JUMPI POP PUSH2 0xB57 DUP6 CALLER PUSH2 0x351 JUMP JUMPDEST PUSH2 0xB73 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x40C SWAP1 PUSH2 0x1DA9 JUMP JUMPDEST PUSH2 0x5B5 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0xEE2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x6CDB3D13 PUSH1 0xE1 SHL EQ DUP1 PUSH2 0xBB1 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x3A24D07 PUSH1 0xE2 SHL EQ JUMPDEST DUP1 PUSH2 0x438 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x438 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x438 JUMPI POP PUSH2 0x438 DUP3 PUSH2 0xB80 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xC02 DUP6 DUP5 PUSH2 0x1200 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0xC6D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2069647320616E6420616D6F756E7473206C656E67746820 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0xDAD2E6DAC2E8C6D PUSH1 0xC3 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x40C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0xC93 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x40C SWAP1 PUSH2 0x1EEC JUMP JUMPDEST CALLER PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xD7A JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xCB4 JUMPI PUSH2 0xCB4 PUSH2 0x1EBD JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xCD2 JUMPI PUSH2 0xCD2 PUSH2 0x1EBD JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x0 DUP5 DUP2 MSTORE DUP1 DUP4 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 AND DUP4 MSTORE SWAP1 SWAP4 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP2 DUP2 LT ISZERO PUSH2 0xD22 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x40C SWAP1 PUSH2 0x1F31 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP1 DUP12 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0xD5F SWAP1 DUP5 SWAP1 PUSH2 0x1E2A JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP POP POP DUP1 PUSH2 0xD73 SWAP1 PUSH2 0x1ED3 JUMP JUMPDEST SWAP1 POP PUSH2 0xC97 JUMP JUMPDEST POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0xDCA SWAP3 SWAP2 SWAP1 PUSH2 0x1F7B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xDE0 DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x1245 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xDF2 DUP2 CALLER PUSH2 0x13A0 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xDFF DUP3 DUP3 PUSH2 0x997 JUMP JUMPDEST PUSH2 0x660 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0xE37 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0xE85 DUP3 DUP3 PUSH2 0x997 JUMP JUMPDEST ISZERO PUSH2 0x660 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0xF08 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x40C SWAP1 PUSH2 0x1EEC JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0xF14 DUP6 PUSH2 0x13F9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xF21 DUP6 PUSH2 0x13F9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP6 DUP2 LT ISZERO PUSH2 0xF64 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x40C SWAP1 PUSH2 0x1F31 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP10 DUP6 SUB SWAP1 SSTORE SWAP1 DUP11 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP9 SWAP3 SWAP1 PUSH2 0xFA1 SWAP1 DUP5 SWAP1 PUSH2 0x1E2A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP9 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP12 AND SWAP3 DUP13 DUP3 AND SWAP3 SWAP2 DUP9 AND SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x1001 DUP5 DUP11 DUP11 DUP11 DUP11 DUP11 PUSH2 0x1444 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x107F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2073657474696E6720617070726F76616C20737461747573 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x103337B91039B2B633 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x40C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x114C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A206D696E7420746F20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x40C JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0x1158 DUP6 PUSH2 0x13F9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1165 DUP6 PUSH2 0x13F9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP8 SWAP3 SWAP1 PUSH2 0x1197 SWAP1 DUP5 SWAP1 PUSH2 0x1E2A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP11 AND SWAP3 PUSH1 0x0 SWAP3 SWAP2 DUP8 AND SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x11F7 DUP4 PUSH1 0x0 DUP10 DUP10 DUP10 DUP10 PUSH2 0x1444 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x97E JUMPI PUSH2 0x1231 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1224 JUMPI PUSH2 0x1224 PUSH2 0x1EBD JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x14FF JUMP JUMPDEST SWAP2 POP DUP1 PUSH2 0x123D DUP2 PUSH2 0x1ED3 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1205 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0xDE0 JUMPI PUSH1 0x40 MLOAD PUSH4 0xBC197C81 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xBC197C81 SWAP1 PUSH2 0x1289 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1FA9 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x12C4 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x12C1 SWAP2 DUP2 ADD SWAP1 PUSH2 0x2007 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1370 JUMPI PUSH2 0x12D0 PUSH2 0x2024 JUMP JUMPDEST DUP1 PUSH4 0x8C379A0 SUB PUSH2 0x1309 JUMPI POP PUSH2 0x12E4 PUSH2 0x2040 JUMP JUMPDEST DUP1 PUSH2 0x12EF JUMPI POP PUSH2 0x130B JUMP JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x40C SWAP2 SWAP1 PUSH2 0x1847 JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x34 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F206E6F6E2D45524331313535 PUSH1 0x44 DUP3 ADD MSTORE PUSH20 0x2932B1B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x61 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x40C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xBC197C81 PUSH1 0xE0 SHL EQ PUSH2 0x11F7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x40C SWAP1 PUSH2 0x20C9 JUMP JUMPDEST PUSH2 0x13AA DUP3 DUP3 PUSH2 0x997 JUMP JUMPDEST PUSH2 0x660 JUMPI PUSH2 0x13B7 DUP2 PUSH2 0x1531 JUMP JUMPDEST PUSH2 0x13C2 DUP4 PUSH1 0x20 PUSH2 0x1543 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x13D3 SWAP3 SWAP2 SWAP1 PUSH2 0x2111 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH2 0x40C SWAP2 PUSH1 0x4 ADD PUSH2 0x1847 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP3 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1433 JUMPI PUSH2 0x1433 PUSH2 0x1EBD JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0xDE0 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF23A6E61 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xF23A6E61 SWAP1 PUSH2 0x1488 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x2186 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x14C3 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x14C0 SWAP2 DUP2 ADD SWAP1 PUSH2 0x2007 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x14CF JUMPI PUSH2 0x12D0 PUSH2 0x2024 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xF23A6E61 PUSH1 0xE0 SHL EQ PUSH2 0x11F7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x40C SWAP1 PUSH2 0x20C9 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x151B JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x152A JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x438 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x14 JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x1552 DUP4 PUSH1 0x2 PUSH2 0x21CB JUMP JUMPDEST PUSH2 0x155D SWAP1 PUSH1 0x2 PUSH2 0x1E2A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1574 JUMPI PUSH2 0x1574 PUSH2 0x185A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x159E JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x3 PUSH1 0xFC SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x15B9 JUMPI PUSH2 0x15B9 PUSH2 0x1EBD JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xF PUSH1 0xFB SHL DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x15E8 JUMPI PUSH2 0x15E8 PUSH2 0x1EBD JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH2 0x160C DUP5 PUSH1 0x2 PUSH2 0x21CB JUMP JUMPDEST PUSH2 0x1617 SWAP1 PUSH1 0x1 PUSH2 0x1E2A JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x168F JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH2 0x164B JUMPI PUSH2 0x164B PUSH2 0x1EBD JUMP JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1661 JUMPI PUSH2 0x1661 PUSH2 0x1EBD JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH2 0x1688 DUP2 PUSH2 0x21E2 JUMP JUMPDEST SWAP1 POP PUSH2 0x161A JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0x152A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x40C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xDF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1706 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1711 DUP2 PUSH2 0x16DE JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xDF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1747 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x152A DUP2 PUSH2 0x171F JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1764 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x177B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x1796 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x17B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x17C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x17D2 DUP6 DUP3 DUP7 ADD PUSH2 0x1752 JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x17F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1812 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x17FA JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1833 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x17F7 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x152A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x181B JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1895 JUMPI PUSH2 0x1895 PUSH2 0x185A JUMP JUMPDEST PUSH1 0x40 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x18B5 JUMPI PUSH2 0x18B5 PUSH2 0x185A JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x18D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x18DD DUP3 PUSH2 0x189C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x18EA DUP3 DUP3 PUSH2 0x1870 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x5 SWAP4 SWAP1 SWAP4 SHL DUP6 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP2 POP DUP7 DUP5 GT ISZERO PUSH2 0x190A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1925 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x190E JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1941 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x195A JUMPI PUSH2 0x195A PUSH2 0x185A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1971 PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 PUSH2 0x1870 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x1986 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x19BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x19C6 DUP2 PUSH2 0x16DE JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x19D6 DUP2 PUSH2 0x16DE JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x19F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19FE DUP10 DUP4 DUP11 ADD PUSH2 0x18BF JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1A14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1A20 DUP10 DUP4 DUP11 ADD PUSH2 0x18BF JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1A36 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A43 DUP9 DUP3 DUP10 ADD PUSH2 0x1930 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1A63 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1A75 DUP2 PUSH2 0x16DE JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1A95 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1AAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1AC0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1ACF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1AE1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 DUP4 ADD SWAP9 SWAP1 SWAP8 POP SWAP6 SWAP1 SWAP2 ADD CALLDATALOAD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B0A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1B21 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1B35 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x1B42 DUP3 PUSH2 0x189C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B4F DUP3 DUP3 PUSH2 0x1870 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x5 SWAP4 SWAP1 SWAP4 SHL DUP6 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP2 POP DUP10 DUP5 GT ISZERO PUSH2 0x1B6F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 DUP3 ADD SWAP5 JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0x1B96 JUMPI DUP6 CALLDATALOAD PUSH2 0x1B87 DUP2 PUSH2 0x16DE JUMP JUMPDEST DUP3 MSTORE SWAP5 DUP3 ADD SWAP5 SWAP1 DUP3 ADD SWAP1 PUSH2 0x1B74 JUMP JUMPDEST SWAP7 POP POP DUP7 ADD CALLDATALOAD SWAP3 POP POP DUP1 DUP3 GT ISZERO PUSH2 0x1BAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BB9 DUP6 DUP3 DUP7 ADD PUSH2 0x18BF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1BF3 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1BD7 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x152A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1BC3 JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xDF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1C3D DUP2 PUSH2 0x16DE JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1A75 DUP2 PUSH2 0x1C11 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1C63 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1C81 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C8D DUP9 DUP4 DUP10 ADD PUSH2 0x1930 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1CA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1CB0 DUP8 DUP3 DUP9 ADD PUSH2 0x1752 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1CCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1CDA DUP2 PUSH2 0x16DE JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1A75 DUP2 PUSH2 0x16DE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1CFC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x152A DUP2 PUSH2 0x16DE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1D1F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x1D2A DUP2 PUSH2 0x16DE JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x1D3A DUP2 PUSH2 0x16DE JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1D63 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1A43 DUP9 DUP3 DUP10 ADD PUSH2 0x1930 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1D83 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1DA3 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A2063616C6C6572206973206E6F7420746F6B656E206F776E PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x195C881BDC88185C1C1C9BDD9959 PUSH1 0x92 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E09 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x152A DUP2 PUSH2 0x1C11 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x438 JUMPI PUSH2 0x438 PUSH2 0x1E14 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP6 GT ISZERO PUSH2 0x1E4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP7 GT ISZERO PUSH2 0x1E5A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 ADD SWAP4 SWAP2 SWAP1 SWAP3 SUB SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1E7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x1E88 DUP2 PUSH2 0x16DE JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x1E98 DUP2 PUSH2 0x16DE JUMP JUMPDEST SWAP4 SWAP7 SWAP4 SWAP6 POP POP POP POP PUSH1 0x40 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0x60 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST DUP2 DUP4 DUP3 CALLDATACOPY PUSH1 0x0 SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x1EE5 JUMPI PUSH2 0x1EE5 PUSH2 0x1E14 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F20746865207A65726F206164 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2A SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A20696E73756666696369656E742062616C616E636520666F PUSH1 0x40 DUP3 ADD MSTORE PUSH10 0x39103A3930B739B332B9 PUSH1 0xB1 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1F8E PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1BC3 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1FA0 DUP2 DUP6 PUSH2 0x1BC3 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1FD5 SWAP1 DUP4 ADD DUP7 PUSH2 0x1BC3 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x1FE7 DUP2 DUP7 PUSH2 0x1BC3 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x1FFB DUP2 DUP6 PUSH2 0x181B JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2019 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x152A DUP2 PUSH2 0x171F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 RETURNDATASIZE GT ISZERO PUSH2 0x203D JUMPI PUSH1 0x4 PUSH1 0x0 DUP1 RETURNDATACOPY POP PUSH1 0x0 MLOAD PUSH1 0xE0 SHR JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x44 RETURNDATASIZE LT ISZERO PUSH2 0x204E JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x3 NOT RETURNDATASIZE DUP2 ADD PUSH1 0x4 DUP4 RETURNDATACOPY DUP2 MLOAD RETURNDATASIZE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 PUSH1 0x24 DUP5 ADD GT DUP2 DUP5 GT OR ISZERO PUSH2 0x207D JUMPI POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP3 DUP6 ADD SWAP2 POP DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x2095 JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP5 RETURNDATASIZE DUP8 ADD ADD PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x20AF JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x20BE PUSH1 0x20 DUP3 DUP7 ADD ADD DUP8 PUSH2 0x1870 JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x28 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A204552433131353552656365697665722072656A65637465 PUSH1 0x40 DUP3 ADD MSTORE PUSH8 0x6420746F6B656E73 PUSH1 0xC0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH2 0x2149 DUP2 PUSH1 0x17 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x17F7 JUMP JUMPDEST PUSH17 0x1034B99036B4B9B9B4B733903937B6329 PUSH1 0x7D SHL PUSH1 0x17 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x217A DUP2 PUSH1 0x28 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x17F7 JUMP JUMPDEST ADD PUSH1 0x28 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x21C0 SWAP1 DUP4 ADD DUP5 PUSH2 0x181B JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x438 JUMPI PUSH2 0x438 PUSH2 0x1E14 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x21F1 JUMPI PUSH2 0x21F1 PUSH2 0x1E14 JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBD 0xE0 0x4D DUP15 LOG1 SHR PUSH3 0x4538C0 0x29 0x5F 0xCD RETURNDATASIZE PUSH12 0x74A74E1F6047CD7827CF73A2 0x5D PUSH32 0x9F5DA64736F6C63430008130033000000000000000000000000000000000000 ","sourceMap":"347:3136:15:-:0;;;777:410;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;918:11;1149:13:2;918:11:15;1149:7:2;:13::i;:::-;-1:-1:-1;;;;;;943:20:15;::::1;935:62;;;::::0;-1:-1:-1;;;935:62:15;;2091:2:16;935:62:15::1;::::0;::::1;2073:21:16::0;2130:2;2110:18;;;2103:30;2169:31;2149:18;;;2142:59;2218:18;;935:62:15::1;;;;;;;;;1019:14;:16:::0;;1001:52:::1;::::0;1007:10:::1;::::0;1019:16;:14:::1;:16;::::0;::::1;:::i;:::-;::::0;;;-1:-1:-1;1001:52:15::1;::::0;;::::1;::::0;::::1;::::0;;;-1:-1:-1;1001:52:15;;1037:11;;1001:5:::1;:52::i;:::-;1057:42;2072:4:0;1088:10:15;1057;:42::i;:::-;1103:10;:24:::0;;;;-1:-1:-1;;1131:15:15::1;:52:::0;;-1:-1:-1;;;;;;1131:52:15::1;-1:-1:-1::0;;;;;1131:52:15;;::::1;::::0;;;::::1;::::0;;-1:-1:-1;347:3136:15;;8171:86:2;8237:4;:13;8244:6;8237:4;:13;:::i;:::-;;8171:86;:::o;8630:709::-;-1:-1:-1;;;;;8777:16:2;;8769:62;;;;-1:-1:-1;;;8769:62:2;;5310:2:16;8769:62:2;;;5292:21:16;5349:2;5329:18;;;5322:30;5388:34;5368:18;;;5361:62;-1:-1:-1;;;5439:18:16;;;5432:31;5480:19;;8769:62:2;5108:397:16;8769:62:2;719:10:7;8842:16:2;8906:21;8924:2;8906:17;:21::i;:::-;8883:44;-1:-1:-1;8937:24:2;8964:25;8982:6;8964:17;:25::i;:::-;8937:52;-1:-1:-1;9077:9:2;:13;;;;;;;;;;;-1:-1:-1;;;;;9077:17:2;;;;;;;;;:27;;9098:6;;9077:9;:27;;9098:6;;9077:27;:::i;:::-;;;;-1:-1:-1;;9119:52:2;;;5814:25:16;;;5870:2;5855:18;;5848:34;;;-1:-1:-1;;;;;9119:52:2;;;;9152:1;;9119:52;;;;;;5787:18:16;9119:52:2;;;;;;;9258:74;9289:8;9307:1;9311:2;9315;9319:6;9327:4;9258:30;:74::i;:::-;8759:580;;;8630:709;;;;:::o;6811:110:0:-;6889:25;6900:4;6906:7;6889:10;:25::i;17064:193:2:-;17183:16;;;17197:1;17183:16;;;;;;;;;17130;;17158:22;;17183:16;;;;;;;;;;;;-1:-1:-1;17183:16:2;17158:41;;17220:7;17209:5;17215:1;17209:8;;;;;;;;:::i;:::-;;;;;;;;;;:18;17245:5;17064:193;-1:-1:-1;;17064:193:2:o;14169:214::-;;;;;;;:::o;15535:725::-;-1:-1:-1;;;;;15742:13:2;;1465:19:6;:23;15738:516:2;;15777:72;;-1:-1:-1;;;15777:72:2;;-1:-1:-1;;;;;15777:38:2;;;;;:72;;15816:8;;15826:4;;15832:2;;15836:6;;15844:4;;15777:72;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;15777:72:2;;;;;;;;-1:-1:-1;;15777:72:2;;;;;;;;;;;;:::i;:::-;;;15773:471;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;16120:6;16113:14;;-1:-1:-1;;;16113:14:2;;;;;;;;:::i;15773:471::-;;;16167:62;;-1:-1:-1;;;16167:62:2;;8446:2:16;16167:62:2;;;8428:21:16;8485:2;8465:18;;;8458:30;8524:34;8504:18;;;8497:62;8595:22;8575:18;;;8568:50;8635:19;;16167:62:2;8244:416:16;15773:471:2;-1:-1:-1;;;;;;15898:55:2;;-1:-1:-1;;;15898:55:2;15894:152;;15977:50;;-1:-1:-1;;;15977:50:2;;8867:2:16;15977:50:2;;;8849:21:16;8906:2;8886:18;;;8879:30;8945:34;8925:18;;;8918:62;-1:-1:-1;;;8996:18:16;;;8989:38;9044:19;;15977:50:2;8665:404:16;7461:233:0;7544:22;7552:4;7558:7;7544;:22::i;:::-;7539:149;;7582:12;;;;:6;:12;;;;;;;;-1:-1:-1;;;;;7582:29:0;;;;;;;;;:36;;-1:-1:-1;;7582:36:0;7614:4;7582:36;;;7664:12;719:10:7;;640:96;7664:12:0;-1:-1:-1;;;;;7637:40:0;7655:7;-1:-1:-1;;;;;7637:40:0;7649:4;7637:40;;;;;;;;;;7461:233;;:::o;2895:145::-;2981:4;3004:12;;;:6;:12;;;;;;;;-1:-1:-1;;;;;3004:29:0;;;;;;;;;;;;2895:145;;;;;:::o;14:177:16:-;93:13;;-1:-1:-1;;;;;135:31:16;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:127::-;257:10;252:3;248:20;245:1;238:31;288:4;285:1;278:15;312:4;309:1;302:15;328:249;438:2;419:13;;-1:-1:-1;;415:27:16;403:40;;-1:-1:-1;;;;;458:34:16;;494:22;;;455:62;452:88;;;520:18;;:::i;:::-;556:2;549:22;-1:-1:-1;;328:249:16:o;582:250::-;667:1;677:113;691:6;688:1;685:13;677:113;;;767:11;;;761:18;748:11;;;741:39;713:2;706:10;677:113;;;-1:-1:-1;;824:1:16;806:16;;799:27;582:250::o;837:1047::-;953:6;961;969;977;985;1038:3;1026:9;1017:7;1013:23;1009:33;1006:53;;;1055:1;1052;1045:12;1006:53;1078:40;1108:9;1078:40;:::i;:::-;1158:2;1143:18;;1137:25;1206:2;1191:18;;1185:25;1068:50;;-1:-1:-1;1137:25:16;-1:-1:-1;;;;;;1259:14:16;;;1256:34;;;1286:1;1283;1276:12;1256:34;1324:6;1313:9;1309:22;1299:32;;1369:7;1362:4;1358:2;1354:13;1350:27;1340:55;;1391:1;1388;1381:12;1340:55;1420:2;1414:9;1442:2;1438;1435:10;1432:36;;;1448:18;;:::i;:::-;1497:2;1491:9;;-1:-1:-1;1509:65:16;1564:2;1545:13;;-1:-1:-1;;1541:27:16;1570:2;1537:36;1491:9;1509:65;:::i;:::-;1598:2;1590:6;1583:18;1638:7;1633:2;1628;1624;1620:11;1616:20;1613:33;1610:53;;;1659:1;1656;1649:12;1610:53;1672:68;1737:2;1732;1724:6;1720:15;1715:2;1711;1707:11;1672:68;:::i;:::-;;1759:6;1749:16;;;;1805:2;1794:9;1790:18;1784:25;1774:35;;1828:50;1873:3;1862:9;1858:19;1828:50;:::i;:::-;1818:60;;837:1047;;;;;;;;:::o;2247:127::-;2308:10;2303:3;2299:20;2296:1;2289:31;2339:4;2336:1;2329:15;2363:4;2360:1;2353:15;2379:135;2418:3;2439:17;;;2436:43;;2459:18;;:::i;:::-;-1:-1:-1;2506:1:16;2495:13;;2379:135::o;2519:380::-;2598:1;2594:12;;;;2641;;;2662:61;;2716:4;2708:6;2704:17;2694:27;;2662:61;2769:2;2761:6;2758:14;2738:18;2735:38;2732:161;;2815:10;2810:3;2806:20;2803:1;2796:31;2850:4;2847:1;2840:15;2878:4;2875:1;2868:15;2732:161;;2519:380;;;:::o;3030:545::-;3132:2;3127:3;3124:11;3121:448;;;3168:1;3193:5;3189:2;3182:17;3238:4;3234:2;3224:19;3308:2;3296:10;3292:19;3289:1;3285:27;3279:4;3275:38;3344:4;3332:10;3329:20;3326:47;;;-1:-1:-1;3367:4:16;3326:47;3422:2;3417:3;3413:12;3410:1;3406:20;3400:4;3396:31;3386:41;;3477:82;3495:2;3488:5;3485:13;3477:82;;;3540:17;;;3521:1;3510:13;3477:82;;3121:448;3030:545;;;:::o;3751:1352::-;3871:10;;-1:-1:-1;;;;;3893:30:16;;3890:56;;;3926:18;;:::i;:::-;3955:97;4045:6;4005:38;4037:4;4031:11;4005:38;:::i;:::-;3999:4;3955:97;:::i;:::-;4107:4;;4171:2;4160:14;;4188:1;4183:663;;;;4890:1;4907:6;4904:89;;;-1:-1:-1;4959:19:16;;;4953:26;4904:89;-1:-1:-1;;3708:1:16;3704:11;;;3700:24;3696:29;3686:40;3732:1;3728:11;;;3683:57;5006:81;;4153:944;;4183:663;2977:1;2970:14;;;3014:4;3001:18;;-1:-1:-1;;4219:20:16;;;4337:236;4351:7;4348:1;4345:14;4337:236;;;4440:19;;;4434:26;4419:42;;4532:27;;;;4500:1;4488:14;;;;4367:19;;4337:236;;;4341:3;4601:6;4592:7;4589:19;4586:201;;;4662:19;;;4656:26;-1:-1:-1;;4745:1:16;4741:14;;;4757:3;4737:24;4733:37;4729:42;4714:58;4699:74;;4586:201;-1:-1:-1;;;;;4833:1:16;4817:14;;;4813:22;4800:36;;-1:-1:-1;3751:1352:16:o;5510:125::-;5575:9;;;5596:10;;;5593:36;;;5609:18;;:::i;5893:127::-;5954:10;5949:3;5945:20;5942:1;5935:31;5985:4;5982:1;5975:15;6009:4;6006:1;5999:15;6025:270;6066:3;6104:5;6098:12;6131:6;6126:3;6119:19;6147:76;6216:6;6209:4;6204:3;6200:14;6193:4;6186:5;6182:16;6147:76;:::i;:::-;6277:2;6256:15;-1:-1:-1;;6252:29:16;6243:39;;;;6284:4;6239:50;;6025:270;-1:-1:-1;;6025:270:16:o;6300:560::-;-1:-1:-1;;;;;6597:15:16;;;6579:34;;6649:15;;6644:2;6629:18;;6622:43;6696:2;6681:18;;6674:34;;;6739:2;6724:18;;6717:34;;;6559:3;6782;6767:19;;6760:32;;;6522:4;;6809:45;;6834:19;;6826:6;6809:45;:::i;:::-;6801:53;6300:560;-1:-1:-1;;;;;;;6300:560:16:o;6865:290::-;6934:6;6987:2;6975:9;6966:7;6962:23;6958:32;6955:52;;;7003:1;7000;6993:12;6955:52;7029:16;;-1:-1:-1;;;;;;7074:32:16;;7064:43;;7054:71;;7121:1;7118;7111:12;7054:71;7144:5;6865:290;-1:-1:-1;;;6865:290:16:o;7160:179::-;7195:3;7237:1;7219:16;7216:23;7213:120;;;7283:1;7280;7277;7262:23;-1:-1:-1;7320:1:16;7314:8;7309:3;7305:18;7213:120;7160:179;:::o;7344:671::-;7383:3;7425:4;7407:16;7404:26;7401:39;;;7344:671;:::o;7401:39::-;7467:2;7461:9;-1:-1:-1;;7532:16:16;7528:25;;7525:1;7461:9;7504:50;7577:11;;7607:16;-1:-1:-1;;;;;7675:14:16;;;7706:4;7694:17;;7691:25;-1:-1:-1;7672:45:16;7669:58;;;7720:5;;;;;7344:671;:::o;7669:58::-;7757:6;7751:4;7747:17;7736:28;;7793:3;7787:10;7820:2;7812:6;7809:14;7806:27;;;7826:5;;;;;;7344:671;:::o;7806:27::-;7910:2;7891:16;7885:4;7881:27;7877:36;7870:4;7861:6;7856:3;7852:16;7848:27;7845:69;7842:82;;;7917:5;;;;;;7344:671;:::o;7842:82::-;7933:57;7984:4;7975:6;7967;7963:19;7959:30;7953:4;7933:57;:::i;:::-;-1:-1:-1;8006:3:16;;7344:671;-1:-1:-1;;;;;7344:671:16:o;8020:219::-;8169:2;8158:9;8151:21;8132:4;8189:44;8229:2;8218:9;8214:18;8206:6;8189:44;:::i;8665:404::-;347:3136:15;;;;;;"},"deployedBytecode":{"functionDebugData":{"@DEFAULT_ADMIN_ROLE_27":{"entryPoint":null,"id":27,"parameterSlots":0,"returnSlots":0},"@EXECUTOR_ROLE_3911":{"entryPoint":null,"id":3911,"parameterSlots":0,"returnSlots":0},"@_afterTokenTransfer_1454":{"entryPoint":null,"id":1454,"parameterSlots":6,"returnSlots":0},"@_asSingletonArray_1610":{"entryPoint":5113,"id":1610,"parameterSlots":1,"returnSlots":1},"@_beforeTokenTransfer_1435":{"entryPoint":null,"id":1435,"parameterSlots":6,"returnSlots":0},"@_checkRole_131":{"entryPoint":5024,"id":131,"parameterSlots":2,"returnSlots":0},"@_checkRole_92":{"entryPoint":3560,"id":92,"parameterSlots":1,"returnSlots":0},"@_doSafeBatchTransferAcceptanceCheck_1582":{"entryPoint":4677,"id":1582,"parameterSlots":6,"returnSlots":0},"@_doSafeTransferAcceptanceCheck_1517":{"entryPoint":5188,"id":1517,"parameterSlots":6,"returnSlots":0},"@_efficientHash_2817":{"entryPoint":null,"id":2817,"parameterSlots":2,"returnSlots":1},"@_grantRole_283":{"entryPoint":3573,"id":283,"parameterSlots":2,"returnSlots":0},"@_hashPair_2806":{"entryPoint":5375,"id":2806,"parameterSlots":2,"returnSlots":1},"@_mint_1045":{"entryPoint":4332,"id":1045,"parameterSlots":4,"returnSlots":0},"@_msgSender_2131":{"entryPoint":null,"id":2131,"parameterSlots":0,"returnSlots":1},"@_revokeRole_314":{"entryPoint":3707,"id":314,"parameterSlots":2,"returnSlots":0},"@_safeBatchTransferFrom_933":{"entryPoint":3083,"id":933,"parameterSlots":5,"returnSlots":0},"@_safeTransferFrom_798":{"entryPoint":3810,"id":798,"parameterSlots":5,"returnSlots":0},"@_setApprovalForAll_1416":{"entryPoint":4108,"id":1416,"parameterSlots":3,"returnSlots":0},"@balanceOfBatch_568":{"entryPoint":2141,"id":568,"parameterSlots":2,"returnSlots":1},"@balanceOf_504":{"entryPoint":933,"id":504,"parameterSlots":2,"returnSlots":1},"@executorManager_3914":{"entryPoint":null,"id":3914,"parameterSlots":0,"returnSlots":0},"@getRoleAdmin_146":{"entryPoint":null,"id":146,"parameterSlots":1,"returnSlots":1},"@grantRole_166":{"entryPoint":1468,"id":166,"parameterSlots":2,"returnSlots":0},"@hasRole_79":{"entryPoint":2455,"id":79,"parameterSlots":2,"returnSlots":1},"@isApprovedForAll_603":{"entryPoint":null,"id":603,"parameterSlots":2,"returnSlots":1},"@isContract_1807":{"entryPoint":null,"id":1807,"parameterSlots":1,"returnSlots":1},"@isWhitelisted_4055":{"entryPoint":1112,"id":4055,"parameterSlots":2,"returnSlots":1},"@lockingFlags_3904":{"entryPoint":null,"id":3904,"parameterSlots":0,"returnSlots":0},"@merkleRoot_3900":{"entryPoint":null,"id":3900,"parameterSlots":0,"returnSlots":0},"@processBundle_4195":{"entryPoint":1636,"id":4195,"parameterSlots":3,"returnSlots":0},"@processProof_2401":{"entryPoint":4608,"id":2401,"parameterSlots":2,"returnSlots":1},"@renounceRole_209":{"entryPoint":1510,"id":209,"parameterSlots":2,"returnSlots":0},"@revokeRole_186":{"entryPoint":2792,"id":186,"parameterSlots":2,"returnSlots":0},"@safeBatchTransferFrom_681":{"entryPoint":1392,"id":681,"parameterSlots":5,"returnSlots":0},"@safeTransferFrom_641":{"entryPoint":2875,"id":641,"parameterSlots":5,"returnSlots":0},"@setApprovalForAll_585":{"entryPoint":2498,"id":585,"parameterSlots":2,"returnSlots":0},"@setExecutorManager_4104":{"entryPoint":2829,"id":4104,"parameterSlots":1,"returnSlots":0},"@setMerkleRoot_4068":{"entryPoint":2438,"id":4068,"parameterSlots":1,"returnSlots":0},"@supportsInterface_2841":{"entryPoint":null,"id":2841,"parameterSlots":1,"returnSlots":1},"@supportsInterface_4089":{"entryPoint":1086,"id":4089,"parameterSlots":1,"returnSlots":1},"@supportsInterface_464":{"entryPoint":2944,"id":464,"parameterSlots":1,"returnSlots":1},"@supportsInterface_60":{"entryPoint":3024,"id":60,"parameterSlots":1,"returnSlots":1},"@toHexString_2295":{"entryPoint":5443,"id":2295,"parameterSlots":2,"returnSlots":1},"@toHexString_2315":{"entryPoint":5425,"id":2315,"parameterSlots":1,"returnSlots":1},"@uri_476":{"entryPoint":1244,"id":476,"parameterSlots":1,"returnSlots":1},"@verify_2340":{"entryPoint":3061,"id":2340,"parameterSlots":3,"returnSlots":1},"@whitelistMint_4029":{"entryPoint":2509,"id":4029,"parameterSlots":4,"returnSlots":0},"abi_decode_array_bytes32_dyn_calldata":{"entryPoint":5970,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_array_uint256_dyn":{"entryPoint":6335,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes":{"entryPoint":6448,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":7402,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_payablet_address_payablet_uint256t_uint256":{"entryPoint":7783,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_address":{"entryPoint":7356,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr":{"entryPoint":6563,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr":{"entryPoint":7431,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_bool":{"entryPoint":7199,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":5875,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":6903,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptr":{"entryPoint":6045,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":7671,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":6736,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":5941,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":8199,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes_calldata_ptrt_uint256":{"entryPoint":6784,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_uint256":{"entryPoint":6110,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_bytes_memory_ptrt_array$_t_bytes32_$dyn_calldata_ptr":{"entryPoint":7245,"id":null,"parameterSlots":2,"returnSlots":4},"abi_encode_array_uint256_dyn":{"entryPoint":7107,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string":{"entryPoint":6171,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_address__to_t_address__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":7853,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":8465,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":8105,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":8582,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":7166,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":8059,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_contract$_IExecutorManager_$3894__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6215,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8393,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7593,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_60304f7258d86aaa1cc1138fb2f6bbc524adfb91bc7985c5cde7fccc8aa6045a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_691e84db20482a4c42ba7a4aa341855d8289774d9698451740209f85cbb09b0a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7916,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7985,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_acc775314033618014c4c79559957baf417931f6e8d18e4684d327a6a76d2e7e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c05b6e35da5e61f1d7b3ef7e615ddf60dfc35de37aba5dd75608f23dd6e104fb__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"array_allocation_size_array_uint256_dyn":{"entryPoint":6300,"id":null,"parameterSlots":1,"returnSlots":1},"calldata_array_index_range_access_t_bytes_calldata_ptr":{"entryPoint":7741,"id":null,"parameterSlots":4,"returnSlots":2},"checked_add_t_uint256":{"entryPoint":7722,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":8651,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":6135,"id":null,"parameterSlots":3,"returnSlots":0},"decrement_t_uint256":{"entryPoint":8674,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":7535,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":6256,"id":null,"parameterSlots":2,"returnSlots":0},"increment_t_uint256":{"entryPoint":7891,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":7700,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":7869,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":6234,"id":null,"parameterSlots":0,"returnSlots":0},"return_data_selector":{"entryPoint":8228,"id":null,"parameterSlots":0,"returnSlots":1},"try_decode_error_message":{"entryPoint":8256,"id":null,"parameterSlots":0,"returnSlots":1},"validator_revert_address":{"entryPoint":5854,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_bool":{"entryPoint":7185,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_bytes4":{"entryPoint":5919,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:25959:16","statements":[{"nodeType":"YulBlock","src":"6:3:16","statements":[]},{"body":{"nodeType":"YulBlock","src":"59:86:16","statements":[{"body":{"nodeType":"YulBlock","src":"123:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"132:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"135:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"125:6:16"},"nodeType":"YulFunctionCall","src":"125:12:16"},"nodeType":"YulExpressionStatement","src":"125:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"82:5:16"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"93:5:16"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"108:3:16","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"113:1:16","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"104:3:16"},"nodeType":"YulFunctionCall","src":"104:11:16"},{"kind":"number","nodeType":"YulLiteral","src":"117:1:16","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"100:3:16"},"nodeType":"YulFunctionCall","src":"100:19:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"89:3:16"},"nodeType":"YulFunctionCall","src":"89:31:16"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"79:2:16"},"nodeType":"YulFunctionCall","src":"79:42:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"72:6:16"},"nodeType":"YulFunctionCall","src":"72:50:16"},"nodeType":"YulIf","src":"69:70:16"}]},"name":"validator_revert_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"48:5:16","type":""}],"src":"14:131:16"},{"body":{"nodeType":"YulBlock","src":"237:228:16","statements":[{"body":{"nodeType":"YulBlock","src":"283:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"292:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"295:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"285:6:16"},"nodeType":"YulFunctionCall","src":"285:12:16"},"nodeType":"YulExpressionStatement","src":"285:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"258:7:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"267:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"254:3:16"},"nodeType":"YulFunctionCall","src":"254:23:16"},{"kind":"number","nodeType":"YulLiteral","src":"279:2:16","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"250:3:16"},"nodeType":"YulFunctionCall","src":"250:32:16"},"nodeType":"YulIf","src":"247:52:16"},{"nodeType":"YulVariableDeclaration","src":"308:36:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"334:9:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"321:12:16"},"nodeType":"YulFunctionCall","src":"321:23:16"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"312:5:16","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"378:5:16"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"353:24:16"},"nodeType":"YulFunctionCall","src":"353:31:16"},"nodeType":"YulExpressionStatement","src":"353:31:16"},{"nodeType":"YulAssignment","src":"393:15:16","value":{"name":"value","nodeType":"YulIdentifier","src":"403:5:16"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"393:6:16"}]},{"nodeType":"YulAssignment","src":"417:42:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"444:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"455:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"440:3:16"},"nodeType":"YulFunctionCall","src":"440:18:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"427:12:16"},"nodeType":"YulFunctionCall","src":"427:32:16"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"417:6:16"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"195:9:16","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"206:7:16","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"218:6:16","type":""},{"name":"value1","nodeType":"YulTypedName","src":"226:6:16","type":""}],"src":"150:315:16"},{"body":{"nodeType":"YulBlock","src":"571:76:16","statements":[{"nodeType":"YulAssignment","src":"581:26:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"593:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"604:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"589:3:16"},"nodeType":"YulFunctionCall","src":"589:18:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"581:4:16"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"623:9:16"},{"name":"value0","nodeType":"YulIdentifier","src":"634:6:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"616:6:16"},"nodeType":"YulFunctionCall","src":"616:25:16"},"nodeType":"YulExpressionStatement","src":"616:25:16"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"540:9:16","type":""},{"name":"value0","nodeType":"YulTypedName","src":"551:6:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"562:4:16","type":""}],"src":"470:177:16"},{"body":{"nodeType":"YulBlock","src":"696:87:16","statements":[{"body":{"nodeType":"YulBlock","src":"761:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"770:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"773:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"763:6:16"},"nodeType":"YulFunctionCall","src":"763:12:16"},"nodeType":"YulExpressionStatement","src":"763:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"719:5:16"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"730:5:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"741:3:16","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"746:10:16","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"737:3:16"},"nodeType":"YulFunctionCall","src":"737:20:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"726:3:16"},"nodeType":"YulFunctionCall","src":"726:32:16"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"716:2:16"},"nodeType":"YulFunctionCall","src":"716:43:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"709:6:16"},"nodeType":"YulFunctionCall","src":"709:51:16"},"nodeType":"YulIf","src":"706:71:16"}]},"name":"validator_revert_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"685:5:16","type":""}],"src":"652:131:16"},{"body":{"nodeType":"YulBlock","src":"857:176:16","statements":[{"body":{"nodeType":"YulBlock","src":"903:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"912:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"915:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"905:6:16"},"nodeType":"YulFunctionCall","src":"905:12:16"},"nodeType":"YulExpressionStatement","src":"905:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"878:7:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"887:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"874:3:16"},"nodeType":"YulFunctionCall","src":"874:23:16"},{"kind":"number","nodeType":"YulLiteral","src":"899:2:16","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"870:3:16"},"nodeType":"YulFunctionCall","src":"870:32:16"},"nodeType":"YulIf","src":"867:52:16"},{"nodeType":"YulVariableDeclaration","src":"928:36:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"954:9:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"941:12:16"},"nodeType":"YulFunctionCall","src":"941:23:16"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"932:5:16","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"997:5:16"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"973:23:16"},"nodeType":"YulFunctionCall","src":"973:30:16"},"nodeType":"YulExpressionStatement","src":"973:30:16"},{"nodeType":"YulAssignment","src":"1012:15:16","value":{"name":"value","nodeType":"YulIdentifier","src":"1022:5:16"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1012:6:16"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"823:9:16","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"834:7:16","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"846:6:16","type":""}],"src":"788:245:16"},{"body":{"nodeType":"YulBlock","src":"1133:92:16","statements":[{"nodeType":"YulAssignment","src":"1143:26:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1155:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"1166:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1151:3:16"},"nodeType":"YulFunctionCall","src":"1151:18:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1143:4:16"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1185:9:16"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1210:6:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1203:6:16"},"nodeType":"YulFunctionCall","src":"1203:14:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1196:6:16"},"nodeType":"YulFunctionCall","src":"1196:22:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1178:6:16"},"nodeType":"YulFunctionCall","src":"1178:41:16"},"nodeType":"YulExpressionStatement","src":"1178:41:16"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1102:9:16","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1113:6:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1124:4:16","type":""}],"src":"1038:187:16"},{"body":{"nodeType":"YulBlock","src":"1314:283:16","statements":[{"body":{"nodeType":"YulBlock","src":"1363:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1372:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1375:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1365:6:16"},"nodeType":"YulFunctionCall","src":"1365:12:16"},"nodeType":"YulExpressionStatement","src":"1365:12:16"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1342:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"1350:4:16","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1338:3:16"},"nodeType":"YulFunctionCall","src":"1338:17:16"},{"name":"end","nodeType":"YulIdentifier","src":"1357:3:16"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1334:3:16"},"nodeType":"YulFunctionCall","src":"1334:27:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1327:6:16"},"nodeType":"YulFunctionCall","src":"1327:35:16"},"nodeType":"YulIf","src":"1324:55:16"},{"nodeType":"YulAssignment","src":"1388:30:16","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1411:6:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1398:12:16"},"nodeType":"YulFunctionCall","src":"1398:20:16"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1388:6:16"}]},{"body":{"nodeType":"YulBlock","src":"1461:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1470:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1473:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1463:6:16"},"nodeType":"YulFunctionCall","src":"1463:12:16"},"nodeType":"YulExpressionStatement","src":"1463:12:16"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1433:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"1441:18:16","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1430:2:16"},"nodeType":"YulFunctionCall","src":"1430:30:16"},"nodeType":"YulIf","src":"1427:50:16"},{"nodeType":"YulAssignment","src":"1486:29:16","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1502:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"1510:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1498:3:16"},"nodeType":"YulFunctionCall","src":"1498:17:16"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"1486:8:16"}]},{"body":{"nodeType":"YulBlock","src":"1575:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1584:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1587:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1577:6:16"},"nodeType":"YulFunctionCall","src":"1577:12:16"},"nodeType":"YulExpressionStatement","src":"1577:12:16"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1538:6:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1550:1:16","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"1553:6:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1546:3:16"},"nodeType":"YulFunctionCall","src":"1546:14:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1534:3:16"},"nodeType":"YulFunctionCall","src":"1534:27:16"},{"kind":"number","nodeType":"YulLiteral","src":"1563:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1530:3:16"},"nodeType":"YulFunctionCall","src":"1530:38:16"},{"name":"end","nodeType":"YulIdentifier","src":"1570:3:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1527:2:16"},"nodeType":"YulFunctionCall","src":"1527:47:16"},"nodeType":"YulIf","src":"1524:67:16"}]},"name":"abi_decode_array_bytes32_dyn_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1277:6:16","type":""},{"name":"end","nodeType":"YulTypedName","src":"1285:3:16","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"1293:8:16","type":""},{"name":"length","nodeType":"YulTypedName","src":"1303:6:16","type":""}],"src":"1230:367:16"},{"body":{"nodeType":"YulBlock","src":"1707:332:16","statements":[{"body":{"nodeType":"YulBlock","src":"1753:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1762:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1765:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1755:6:16"},"nodeType":"YulFunctionCall","src":"1755:12:16"},"nodeType":"YulExpressionStatement","src":"1755:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1728:7:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"1737:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1724:3:16"},"nodeType":"YulFunctionCall","src":"1724:23:16"},{"kind":"number","nodeType":"YulLiteral","src":"1749:2:16","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1720:3:16"},"nodeType":"YulFunctionCall","src":"1720:32:16"},"nodeType":"YulIf","src":"1717:52:16"},{"nodeType":"YulVariableDeclaration","src":"1778:37:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1805:9:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1792:12:16"},"nodeType":"YulFunctionCall","src":"1792:23:16"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1782:6:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"1858:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1867:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1870:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1860:6:16"},"nodeType":"YulFunctionCall","src":"1860:12:16"},"nodeType":"YulExpressionStatement","src":"1860:12:16"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1830:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"1838:18:16","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1827:2:16"},"nodeType":"YulFunctionCall","src":"1827:30:16"},"nodeType":"YulIf","src":"1824:50:16"},{"nodeType":"YulVariableDeclaration","src":"1883:96:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1951:9:16"},{"name":"offset","nodeType":"YulIdentifier","src":"1962:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1947:3:16"},"nodeType":"YulFunctionCall","src":"1947:22:16"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1971:7:16"}],"functionName":{"name":"abi_decode_array_bytes32_dyn_calldata","nodeType":"YulIdentifier","src":"1909:37:16"},"nodeType":"YulFunctionCall","src":"1909:70:16"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"1887:8:16","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"1897:8:16","type":""}]},{"nodeType":"YulAssignment","src":"1988:18:16","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"1998:8:16"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1988:6:16"}]},{"nodeType":"YulAssignment","src":"2015:18:16","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"2025:8:16"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2015:6:16"}]}]},"name":"abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1665:9:16","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1676:7:16","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1688:6:16","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1696:6:16","type":""}],"src":"1602:437:16"},{"body":{"nodeType":"YulBlock","src":"2145:76:16","statements":[{"nodeType":"YulAssignment","src":"2155:26:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2167:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"2178:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2163:3:16"},"nodeType":"YulFunctionCall","src":"2163:18:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2155:4:16"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2197:9:16"},{"name":"value0","nodeType":"YulIdentifier","src":"2208:6:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2190:6:16"},"nodeType":"YulFunctionCall","src":"2190:25:16"},"nodeType":"YulExpressionStatement","src":"2190:25:16"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2114:9:16","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2125:6:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2136:4:16","type":""}],"src":"2044:177:16"},{"body":{"nodeType":"YulBlock","src":"2296:110:16","statements":[{"body":{"nodeType":"YulBlock","src":"2342:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2351:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2354:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2344:6:16"},"nodeType":"YulFunctionCall","src":"2344:12:16"},"nodeType":"YulExpressionStatement","src":"2344:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2317:7:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"2326:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2313:3:16"},"nodeType":"YulFunctionCall","src":"2313:23:16"},{"kind":"number","nodeType":"YulLiteral","src":"2338:2:16","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2309:3:16"},"nodeType":"YulFunctionCall","src":"2309:32:16"},"nodeType":"YulIf","src":"2306:52:16"},{"nodeType":"YulAssignment","src":"2367:33:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2390:9:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2377:12:16"},"nodeType":"YulFunctionCall","src":"2377:23:16"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2367:6:16"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2262:9:16","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2273:7:16","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2285:6:16","type":""}],"src":"2226:180:16"},{"body":{"nodeType":"YulBlock","src":"2477:184:16","statements":[{"nodeType":"YulVariableDeclaration","src":"2487:10:16","value":{"kind":"number","nodeType":"YulLiteral","src":"2496:1:16","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"2491:1:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"2556:63:16","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2581:3:16"},{"name":"i","nodeType":"YulIdentifier","src":"2586:1:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2577:3:16"},"nodeType":"YulFunctionCall","src":"2577:11:16"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2600:3:16"},{"name":"i","nodeType":"YulIdentifier","src":"2605:1:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2596:3:16"},"nodeType":"YulFunctionCall","src":"2596:11:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2590:5:16"},"nodeType":"YulFunctionCall","src":"2590:18:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2570:6:16"},"nodeType":"YulFunctionCall","src":"2570:39:16"},"nodeType":"YulExpressionStatement","src":"2570:39:16"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2517:1:16"},{"name":"length","nodeType":"YulIdentifier","src":"2520:6:16"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2514:2:16"},"nodeType":"YulFunctionCall","src":"2514:13:16"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2528:19:16","statements":[{"nodeType":"YulAssignment","src":"2530:15:16","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2539:1:16"},{"kind":"number","nodeType":"YulLiteral","src":"2542:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2535:3:16"},"nodeType":"YulFunctionCall","src":"2535:10:16"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"2530:1:16"}]}]},"pre":{"nodeType":"YulBlock","src":"2510:3:16","statements":[]},"src":"2506:113:16"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2639:3:16"},{"name":"length","nodeType":"YulIdentifier","src":"2644:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2635:3:16"},"nodeType":"YulFunctionCall","src":"2635:16:16"},{"kind":"number","nodeType":"YulLiteral","src":"2653:1:16","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2628:6:16"},"nodeType":"YulFunctionCall","src":"2628:27:16"},"nodeType":"YulExpressionStatement","src":"2628:27:16"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"2455:3:16","type":""},{"name":"dst","nodeType":"YulTypedName","src":"2460:3:16","type":""},{"name":"length","nodeType":"YulTypedName","src":"2465:6:16","type":""}],"src":"2411:250:16"},{"body":{"nodeType":"YulBlock","src":"2716:221:16","statements":[{"nodeType":"YulVariableDeclaration","src":"2726:26:16","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2746:5:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2740:5:16"},"nodeType":"YulFunctionCall","src":"2740:12:16"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2730:6:16","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2768:3:16"},{"name":"length","nodeType":"YulIdentifier","src":"2773:6:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2761:6:16"},"nodeType":"YulFunctionCall","src":"2761:19:16"},"nodeType":"YulExpressionStatement","src":"2761:19:16"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2828:5:16"},{"kind":"number","nodeType":"YulLiteral","src":"2835:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2824:3:16"},"nodeType":"YulFunctionCall","src":"2824:16:16"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2846:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"2851:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2842:3:16"},"nodeType":"YulFunctionCall","src":"2842:14:16"},{"name":"length","nodeType":"YulIdentifier","src":"2858:6:16"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"2789:34:16"},"nodeType":"YulFunctionCall","src":"2789:76:16"},"nodeType":"YulExpressionStatement","src":"2789:76:16"},{"nodeType":"YulAssignment","src":"2874:57:16","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2889:3:16"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2902:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"2910:2:16","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2898:3:16"},"nodeType":"YulFunctionCall","src":"2898:15:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2919:2:16","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2915:3:16"},"nodeType":"YulFunctionCall","src":"2915:7:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2894:3:16"},"nodeType":"YulFunctionCall","src":"2894:29:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2885:3:16"},"nodeType":"YulFunctionCall","src":"2885:39:16"},{"kind":"number","nodeType":"YulLiteral","src":"2926:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2881:3:16"},"nodeType":"YulFunctionCall","src":"2881:50:16"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2874:3:16"}]}]},"name":"abi_encode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2693:5:16","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2700:3:16","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"2708:3:16","type":""}],"src":"2666:271:16"},{"body":{"nodeType":"YulBlock","src":"3063:99:16","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3080:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"3091:2:16","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3073:6:16"},"nodeType":"YulFunctionCall","src":"3073:21:16"},"nodeType":"YulExpressionStatement","src":"3073:21:16"},{"nodeType":"YulAssignment","src":"3103:53:16","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3129:6:16"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3141:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"3152:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3137:3:16"},"nodeType":"YulFunctionCall","src":"3137:18:16"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"3111:17:16"},"nodeType":"YulFunctionCall","src":"3111:45:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3103:4:16"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3032:9:16","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3043:6:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3054:4:16","type":""}],"src":"2942:220:16"},{"body":{"nodeType":"YulBlock","src":"3237:110:16","statements":[{"body":{"nodeType":"YulBlock","src":"3283:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3292:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3295:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3285:6:16"},"nodeType":"YulFunctionCall","src":"3285:12:16"},"nodeType":"YulExpressionStatement","src":"3285:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3258:7:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"3267:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3254:3:16"},"nodeType":"YulFunctionCall","src":"3254:23:16"},{"kind":"number","nodeType":"YulLiteral","src":"3279:2:16","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3250:3:16"},"nodeType":"YulFunctionCall","src":"3250:32:16"},"nodeType":"YulIf","src":"3247:52:16"},{"nodeType":"YulAssignment","src":"3308:33:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3331:9:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3318:12:16"},"nodeType":"YulFunctionCall","src":"3318:23:16"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3308:6:16"}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3203:9:16","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3214:7:16","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3226:6:16","type":""}],"src":"3167:180:16"},{"body":{"nodeType":"YulBlock","src":"3384:95:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3401:1:16","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3408:3:16","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3413:10:16","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3404:3:16"},"nodeType":"YulFunctionCall","src":"3404:20:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3394:6:16"},"nodeType":"YulFunctionCall","src":"3394:31:16"},"nodeType":"YulExpressionStatement","src":"3394:31:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3441:1:16","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3444:4:16","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3434:6:16"},"nodeType":"YulFunctionCall","src":"3434:15:16"},"nodeType":"YulExpressionStatement","src":"3434:15:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3465:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3468:4:16","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3458:6:16"},"nodeType":"YulFunctionCall","src":"3458:15:16"},"nodeType":"YulExpressionStatement","src":"3458:15:16"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"3352:127:16"},{"body":{"nodeType":"YulBlock","src":"3531:202:16","statements":[{"nodeType":"YulVariableDeclaration","src":"3541:58:16","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3563:6:16"},{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"3579:4:16"},{"kind":"number","nodeType":"YulLiteral","src":"3585:2:16","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3575:3:16"},"nodeType":"YulFunctionCall","src":"3575:13:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3594:2:16","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3590:3:16"},"nodeType":"YulFunctionCall","src":"3590:7:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3571:3:16"},"nodeType":"YulFunctionCall","src":"3571:27:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3559:3:16"},"nodeType":"YulFunctionCall","src":"3559:40:16"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"3545:10:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"3674:22:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3676:16:16"},"nodeType":"YulFunctionCall","src":"3676:18:16"},"nodeType":"YulExpressionStatement","src":"3676:18:16"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3617:10:16"},{"kind":"number","nodeType":"YulLiteral","src":"3629:18:16","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3614:2:16"},"nodeType":"YulFunctionCall","src":"3614:34:16"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3653:10:16"},{"name":"memPtr","nodeType":"YulIdentifier","src":"3665:6:16"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3650:2:16"},"nodeType":"YulFunctionCall","src":"3650:22:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"3611:2:16"},"nodeType":"YulFunctionCall","src":"3611:62:16"},"nodeType":"YulIf","src":"3608:88:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3712:2:16","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3716:10:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3705:6:16"},"nodeType":"YulFunctionCall","src":"3705:22:16"},"nodeType":"YulExpressionStatement","src":"3705:22:16"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"3513:6:16","type":""},{"name":"size","nodeType":"YulTypedName","src":"3521:4:16","type":""}],"src":"3484:249:16"},{"body":{"nodeType":"YulBlock","src":"3807:114:16","statements":[{"body":{"nodeType":"YulBlock","src":"3851:22:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3853:16:16"},"nodeType":"YulFunctionCall","src":"3853:18:16"},"nodeType":"YulExpressionStatement","src":"3853:18:16"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3823:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"3831:18:16","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3820:2:16"},"nodeType":"YulFunctionCall","src":"3820:30:16"},"nodeType":"YulIf","src":"3817:56:16"},{"nodeType":"YulAssignment","src":"3882:33:16","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3898:1:16","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"3901:6:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3894:3:16"},"nodeType":"YulFunctionCall","src":"3894:14:16"},{"kind":"number","nodeType":"YulLiteral","src":"3910:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3890:3:16"},"nodeType":"YulFunctionCall","src":"3890:25:16"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"3882:4:16"}]}]},"name":"array_allocation_size_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"3787:6:16","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"3798:4:16","type":""}],"src":"3738:183:16"},{"body":{"nodeType":"YulBlock","src":"3990:660:16","statements":[{"body":{"nodeType":"YulBlock","src":"4039:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4048:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4051:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4041:6:16"},"nodeType":"YulFunctionCall","src":"4041:12:16"},"nodeType":"YulExpressionStatement","src":"4041:12:16"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4018:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"4026:4:16","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4014:3:16"},"nodeType":"YulFunctionCall","src":"4014:17:16"},{"name":"end","nodeType":"YulIdentifier","src":"4033:3:16"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4010:3:16"},"nodeType":"YulFunctionCall","src":"4010:27:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4003:6:16"},"nodeType":"YulFunctionCall","src":"4003:35:16"},"nodeType":"YulIf","src":"4000:55:16"},{"nodeType":"YulVariableDeclaration","src":"4064:30:16","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4087:6:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4074:12:16"},"nodeType":"YulFunctionCall","src":"4074:20:16"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4068:2:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4103:14:16","value":{"kind":"number","nodeType":"YulLiteral","src":"4113:4:16","type":"","value":"0x20"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"4107:2:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4126:53:16","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"4176:2:16"}],"functionName":{"name":"array_allocation_size_array_uint256_dyn","nodeType":"YulIdentifier","src":"4136:39:16"},"nodeType":"YulFunctionCall","src":"4136:43:16"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"4130:2:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4188:23:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4208:2:16","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4202:5:16"},"nodeType":"YulFunctionCall","src":"4202:9:16"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"4192:6:16","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4240:6:16"},{"name":"_3","nodeType":"YulIdentifier","src":"4248:2:16"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"4220:19:16"},"nodeType":"YulFunctionCall","src":"4220:31:16"},"nodeType":"YulExpressionStatement","src":"4220:31:16"},{"nodeType":"YulVariableDeclaration","src":"4260:17:16","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"4271:6:16"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"4264:3:16","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4293:6:16"},{"name":"_1","nodeType":"YulIdentifier","src":"4301:2:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4286:6:16"},"nodeType":"YulFunctionCall","src":"4286:18:16"},"nodeType":"YulExpressionStatement","src":"4286:18:16"},{"nodeType":"YulAssignment","src":"4313:22:16","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4324:6:16"},{"name":"_2","nodeType":"YulIdentifier","src":"4332:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4320:3:16"},"nodeType":"YulFunctionCall","src":"4320:15:16"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"4313:3:16"}]},{"nodeType":"YulVariableDeclaration","src":"4344:46:16","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4366:6:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4378:1:16","type":"","value":"5"},{"name":"_1","nodeType":"YulIdentifier","src":"4381:2:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4374:3:16"},"nodeType":"YulFunctionCall","src":"4374:10:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4362:3:16"},"nodeType":"YulFunctionCall","src":"4362:23:16"},{"name":"_2","nodeType":"YulIdentifier","src":"4387:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4358:3:16"},"nodeType":"YulFunctionCall","src":"4358:32:16"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"4348:6:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"4418:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4427:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4430:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4420:6:16"},"nodeType":"YulFunctionCall","src":"4420:12:16"},"nodeType":"YulExpressionStatement","src":"4420:12:16"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"4405:6:16"},{"name":"end","nodeType":"YulIdentifier","src":"4413:3:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4402:2:16"},"nodeType":"YulFunctionCall","src":"4402:15:16"},"nodeType":"YulIf","src":"4399:35:16"},{"nodeType":"YulVariableDeclaration","src":"4443:26:16","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4458:6:16"},{"name":"_2","nodeType":"YulIdentifier","src":"4466:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4454:3:16"},"nodeType":"YulFunctionCall","src":"4454:15:16"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"4447:3:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"4534:86:16","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4555:3:16"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4573:3:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4560:12:16"},"nodeType":"YulFunctionCall","src":"4560:17:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4548:6:16"},"nodeType":"YulFunctionCall","src":"4548:30:16"},"nodeType":"YulExpressionStatement","src":"4548:30:16"},{"nodeType":"YulAssignment","src":"4591:19:16","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4602:3:16"},{"name":"_2","nodeType":"YulIdentifier","src":"4607:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4598:3:16"},"nodeType":"YulFunctionCall","src":"4598:12:16"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"4591:3:16"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4489:3:16"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"4494:6:16"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4486:2:16"},"nodeType":"YulFunctionCall","src":"4486:15:16"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"4502:23:16","statements":[{"nodeType":"YulAssignment","src":"4504:19:16","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4515:3:16"},{"name":"_2","nodeType":"YulIdentifier","src":"4520:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4511:3:16"},"nodeType":"YulFunctionCall","src":"4511:12:16"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"4504:3:16"}]}]},"pre":{"nodeType":"YulBlock","src":"4482:3:16","statements":[]},"src":"4478:142:16"},{"nodeType":"YulAssignment","src":"4629:15:16","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"4638:6:16"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"4629:5:16"}]}]},"name":"abi_decode_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3964:6:16","type":""},{"name":"end","nodeType":"YulTypedName","src":"3972:3:16","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3980:5:16","type":""}],"src":"3926:724:16"},{"body":{"nodeType":"YulBlock","src":"4707:503:16","statements":[{"body":{"nodeType":"YulBlock","src":"4756:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4765:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4768:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4758:6:16"},"nodeType":"YulFunctionCall","src":"4758:12:16"},"nodeType":"YulExpressionStatement","src":"4758:12:16"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4735:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"4743:4:16","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4731:3:16"},"nodeType":"YulFunctionCall","src":"4731:17:16"},{"name":"end","nodeType":"YulIdentifier","src":"4750:3:16"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4727:3:16"},"nodeType":"YulFunctionCall","src":"4727:27:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4720:6:16"},"nodeType":"YulFunctionCall","src":"4720:35:16"},"nodeType":"YulIf","src":"4717:55:16"},{"nodeType":"YulVariableDeclaration","src":"4781:30:16","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4804:6:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4791:12:16"},"nodeType":"YulFunctionCall","src":"4791:20:16"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4785:2:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"4850:22:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4852:16:16"},"nodeType":"YulFunctionCall","src":"4852:18:16"},"nodeType":"YulExpressionStatement","src":"4852:18:16"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"4826:2:16"},{"kind":"number","nodeType":"YulLiteral","src":"4830:18:16","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4823:2:16"},"nodeType":"YulFunctionCall","src":"4823:26:16"},"nodeType":"YulIf","src":"4820:52:16"},{"nodeType":"YulVariableDeclaration","src":"4881:23:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4901:2:16","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4895:5:16"},"nodeType":"YulFunctionCall","src":"4895:9:16"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"4885:6:16","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4933:6:16"},{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"4953:2:16"},{"kind":"number","nodeType":"YulLiteral","src":"4957:4:16","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4949:3:16"},"nodeType":"YulFunctionCall","src":"4949:13:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4968:2:16","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4964:3:16"},"nodeType":"YulFunctionCall","src":"4964:7:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4945:3:16"},"nodeType":"YulFunctionCall","src":"4945:27:16"},{"kind":"number","nodeType":"YulLiteral","src":"4974:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4941:3:16"},"nodeType":"YulFunctionCall","src":"4941:38:16"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"4913:19:16"},"nodeType":"YulFunctionCall","src":"4913:67:16"},"nodeType":"YulExpressionStatement","src":"4913:67:16"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4996:6:16"},{"name":"_1","nodeType":"YulIdentifier","src":"5004:2:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4989:6:16"},"nodeType":"YulFunctionCall","src":"4989:18:16"},"nodeType":"YulExpressionStatement","src":"4989:18:16"},{"body":{"nodeType":"YulBlock","src":"5055:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5064:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5067:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5057:6:16"},"nodeType":"YulFunctionCall","src":"5057:12:16"},"nodeType":"YulExpressionStatement","src":"5057:12:16"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5030:6:16"},{"name":"_1","nodeType":"YulIdentifier","src":"5038:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5026:3:16"},"nodeType":"YulFunctionCall","src":"5026:15:16"},{"kind":"number","nodeType":"YulLiteral","src":"5043:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5022:3:16"},"nodeType":"YulFunctionCall","src":"5022:26:16"},{"name":"end","nodeType":"YulIdentifier","src":"5050:3:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5019:2:16"},"nodeType":"YulFunctionCall","src":"5019:35:16"},"nodeType":"YulIf","src":"5016:55:16"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5097:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"5105:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5093:3:16"},"nodeType":"YulFunctionCall","src":"5093:17:16"},{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5116:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"5124:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5112:3:16"},"nodeType":"YulFunctionCall","src":"5112:17:16"},{"name":"_1","nodeType":"YulIdentifier","src":"5131:2:16"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"5080:12:16"},"nodeType":"YulFunctionCall","src":"5080:54:16"},"nodeType":"YulExpressionStatement","src":"5080:54:16"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5158:6:16"},{"name":"_1","nodeType":"YulIdentifier","src":"5166:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5154:3:16"},"nodeType":"YulFunctionCall","src":"5154:15:16"},{"kind":"number","nodeType":"YulLiteral","src":"5171:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5150:3:16"},"nodeType":"YulFunctionCall","src":"5150:26:16"},{"kind":"number","nodeType":"YulLiteral","src":"5178:1:16","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5143:6:16"},"nodeType":"YulFunctionCall","src":"5143:37:16"},"nodeType":"YulExpressionStatement","src":"5143:37:16"},{"nodeType":"YulAssignment","src":"5189:15:16","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"5198:6:16"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"5189:5:16"}]}]},"name":"abi_decode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4681:6:16","type":""},{"name":"end","nodeType":"YulTypedName","src":"4689:3:16","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"4697:5:16","type":""}],"src":"4655:555:16"},{"body":{"nodeType":"YulBlock","src":"5412:874:16","statements":[{"body":{"nodeType":"YulBlock","src":"5459:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5468:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5471:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5461:6:16"},"nodeType":"YulFunctionCall","src":"5461:12:16"},"nodeType":"YulExpressionStatement","src":"5461:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5433:7:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"5442:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5429:3:16"},"nodeType":"YulFunctionCall","src":"5429:23:16"},{"kind":"number","nodeType":"YulLiteral","src":"5454:3:16","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5425:3:16"},"nodeType":"YulFunctionCall","src":"5425:33:16"},"nodeType":"YulIf","src":"5422:53:16"},{"nodeType":"YulVariableDeclaration","src":"5484:36:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5510:9:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5497:12:16"},"nodeType":"YulFunctionCall","src":"5497:23:16"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"5488:5:16","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5554:5:16"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"5529:24:16"},"nodeType":"YulFunctionCall","src":"5529:31:16"},"nodeType":"YulExpressionStatement","src":"5529:31:16"},{"nodeType":"YulAssignment","src":"5569:15:16","value":{"name":"value","nodeType":"YulIdentifier","src":"5579:5:16"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5569:6:16"}]},{"nodeType":"YulVariableDeclaration","src":"5593:47:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5625:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"5636:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5621:3:16"},"nodeType":"YulFunctionCall","src":"5621:18:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5608:12:16"},"nodeType":"YulFunctionCall","src":"5608:32:16"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"5597:7:16","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"5674:7:16"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"5649:24:16"},"nodeType":"YulFunctionCall","src":"5649:33:16"},"nodeType":"YulExpressionStatement","src":"5649:33:16"},{"nodeType":"YulAssignment","src":"5691:17:16","value":{"name":"value_1","nodeType":"YulIdentifier","src":"5701:7:16"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5691:6:16"}]},{"nodeType":"YulVariableDeclaration","src":"5717:46:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5748:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"5759:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5744:3:16"},"nodeType":"YulFunctionCall","src":"5744:18:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5731:12:16"},"nodeType":"YulFunctionCall","src":"5731:32:16"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5721:6:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5772:28:16","value":{"kind":"number","nodeType":"YulLiteral","src":"5782:18:16","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5776:2:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"5827:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5836:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5839:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5829:6:16"},"nodeType":"YulFunctionCall","src":"5829:12:16"},"nodeType":"YulExpressionStatement","src":"5829:12:16"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5815:6:16"},{"name":"_1","nodeType":"YulIdentifier","src":"5823:2:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5812:2:16"},"nodeType":"YulFunctionCall","src":"5812:14:16"},"nodeType":"YulIf","src":"5809:34:16"},{"nodeType":"YulAssignment","src":"5852:71:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5895:9:16"},{"name":"offset","nodeType":"YulIdentifier","src":"5906:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5891:3:16"},"nodeType":"YulFunctionCall","src":"5891:22:16"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5915:7:16"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"5862:28:16"},"nodeType":"YulFunctionCall","src":"5862:61:16"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"5852:6:16"}]},{"nodeType":"YulVariableDeclaration","src":"5932:48:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5965:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"5976:2:16","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5961:3:16"},"nodeType":"YulFunctionCall","src":"5961:18:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5948:12:16"},"nodeType":"YulFunctionCall","src":"5948:32:16"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"5936:8:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"6009:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6018:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6021:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6011:6:16"},"nodeType":"YulFunctionCall","src":"6011:12:16"},"nodeType":"YulExpressionStatement","src":"6011:12:16"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"5995:8:16"},{"name":"_1","nodeType":"YulIdentifier","src":"6005:2:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5992:2:16"},"nodeType":"YulFunctionCall","src":"5992:16:16"},"nodeType":"YulIf","src":"5989:36:16"},{"nodeType":"YulAssignment","src":"6034:73:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6077:9:16"},{"name":"offset_1","nodeType":"YulIdentifier","src":"6088:8:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6073:3:16"},"nodeType":"YulFunctionCall","src":"6073:24:16"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6099:7:16"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"6044:28:16"},"nodeType":"YulFunctionCall","src":"6044:63:16"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"6034:6:16"}]},{"nodeType":"YulVariableDeclaration","src":"6116:49:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6149:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"6160:3:16","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6145:3:16"},"nodeType":"YulFunctionCall","src":"6145:19:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6132:12:16"},"nodeType":"YulFunctionCall","src":"6132:33:16"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"6120:8:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"6194:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6203:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6206:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6196:6:16"},"nodeType":"YulFunctionCall","src":"6196:12:16"},"nodeType":"YulExpressionStatement","src":"6196:12:16"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"6180:8:16"},{"name":"_1","nodeType":"YulIdentifier","src":"6190:2:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6177:2:16"},"nodeType":"YulFunctionCall","src":"6177:16:16"},"nodeType":"YulIf","src":"6174:36:16"},{"nodeType":"YulAssignment","src":"6219:61:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6250:9:16"},{"name":"offset_2","nodeType":"YulIdentifier","src":"6261:8:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6246:3:16"},"nodeType":"YulFunctionCall","src":"6246:24:16"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6272:7:16"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"6229:16:16"},"nodeType":"YulFunctionCall","src":"6229:51:16"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"6219:6:16"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5346:9:16","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5357:7:16","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5369:6:16","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5377:6:16","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5385:6:16","type":""},{"name":"value3","nodeType":"YulTypedName","src":"5393:6:16","type":""},{"name":"value4","nodeType":"YulTypedName","src":"5401:6:16","type":""}],"src":"5215:1071:16"},{"body":{"nodeType":"YulBlock","src":"6378:228:16","statements":[{"body":{"nodeType":"YulBlock","src":"6424:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6433:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6436:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6426:6:16"},"nodeType":"YulFunctionCall","src":"6426:12:16"},"nodeType":"YulExpressionStatement","src":"6426:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6399:7:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"6408:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6395:3:16"},"nodeType":"YulFunctionCall","src":"6395:23:16"},{"kind":"number","nodeType":"YulLiteral","src":"6420:2:16","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6391:3:16"},"nodeType":"YulFunctionCall","src":"6391:32:16"},"nodeType":"YulIf","src":"6388:52:16"},{"nodeType":"YulAssignment","src":"6449:33:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6472:9:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6459:12:16"},"nodeType":"YulFunctionCall","src":"6459:23:16"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6449:6:16"}]},{"nodeType":"YulVariableDeclaration","src":"6491:45:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6521:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"6532:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6517:3:16"},"nodeType":"YulFunctionCall","src":"6517:18:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6504:12:16"},"nodeType":"YulFunctionCall","src":"6504:32:16"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"6495:5:16","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6570:5:16"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"6545:24:16"},"nodeType":"YulFunctionCall","src":"6545:31:16"},"nodeType":"YulExpressionStatement","src":"6545:31:16"},{"nodeType":"YulAssignment","src":"6585:15:16","value":{"name":"value","nodeType":"YulIdentifier","src":"6595:5:16"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6585:6:16"}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6336:9:16","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6347:7:16","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6359:6:16","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6367:6:16","type":""}],"src":"6291:315:16"},{"body":{"nodeType":"YulBlock","src":"6717:559:16","statements":[{"body":{"nodeType":"YulBlock","src":"6763:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6772:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6775:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6765:6:16"},"nodeType":"YulFunctionCall","src":"6765:12:16"},"nodeType":"YulExpressionStatement","src":"6765:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6738:7:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"6747:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6734:3:16"},"nodeType":"YulFunctionCall","src":"6734:23:16"},{"kind":"number","nodeType":"YulLiteral","src":"6759:2:16","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6730:3:16"},"nodeType":"YulFunctionCall","src":"6730:32:16"},"nodeType":"YulIf","src":"6727:52:16"},{"nodeType":"YulVariableDeclaration","src":"6788:37:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6815:9:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6802:12:16"},"nodeType":"YulFunctionCall","src":"6802:23:16"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6792:6:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6834:28:16","value":{"kind":"number","nodeType":"YulLiteral","src":"6844:18:16","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"6838:2:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"6889:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6898:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6901:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6891:6:16"},"nodeType":"YulFunctionCall","src":"6891:12:16"},"nodeType":"YulExpressionStatement","src":"6891:12:16"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6877:6:16"},{"name":"_1","nodeType":"YulIdentifier","src":"6885:2:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6874:2:16"},"nodeType":"YulFunctionCall","src":"6874:14:16"},"nodeType":"YulIf","src":"6871:34:16"},{"nodeType":"YulVariableDeclaration","src":"6914:32:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6928:9:16"},{"name":"offset","nodeType":"YulIdentifier","src":"6939:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6924:3:16"},"nodeType":"YulFunctionCall","src":"6924:22:16"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"6918:2:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"6994:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7003:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7006:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6996:6:16"},"nodeType":"YulFunctionCall","src":"6996:12:16"},"nodeType":"YulExpressionStatement","src":"6996:12:16"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"6973:2:16"},{"kind":"number","nodeType":"YulLiteral","src":"6977:4:16","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6969:3:16"},"nodeType":"YulFunctionCall","src":"6969:13:16"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6984:7:16"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6965:3:16"},"nodeType":"YulFunctionCall","src":"6965:27:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6958:6:16"},"nodeType":"YulFunctionCall","src":"6958:35:16"},"nodeType":"YulIf","src":"6955:55:16"},{"nodeType":"YulVariableDeclaration","src":"7019:30:16","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"7046:2:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7033:12:16"},"nodeType":"YulFunctionCall","src":"7033:16:16"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"7023:6:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"7076:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7085:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7088:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7078:6:16"},"nodeType":"YulFunctionCall","src":"7078:12:16"},"nodeType":"YulExpressionStatement","src":"7078:12:16"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7064:6:16"},{"name":"_1","nodeType":"YulIdentifier","src":"7072:2:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7061:2:16"},"nodeType":"YulFunctionCall","src":"7061:14:16"},"nodeType":"YulIf","src":"7058:34:16"},{"body":{"nodeType":"YulBlock","src":"7144:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7153:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7156:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7146:6:16"},"nodeType":"YulFunctionCall","src":"7146:12:16"},"nodeType":"YulExpressionStatement","src":"7146:12:16"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"7115:2:16"},{"name":"length","nodeType":"YulIdentifier","src":"7119:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7111:3:16"},"nodeType":"YulFunctionCall","src":"7111:15:16"},{"kind":"number","nodeType":"YulLiteral","src":"7128:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7107:3:16"},"nodeType":"YulFunctionCall","src":"7107:26:16"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7135:7:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7104:2:16"},"nodeType":"YulFunctionCall","src":"7104:39:16"},"nodeType":"YulIf","src":"7101:59:16"},{"nodeType":"YulAssignment","src":"7169:23:16","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"7183:2:16"},{"kind":"number","nodeType":"YulLiteral","src":"7187:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7179:3:16"},"nodeType":"YulFunctionCall","src":"7179:13:16"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7169:6:16"}]},{"nodeType":"YulAssignment","src":"7201:16:16","value":{"name":"length","nodeType":"YulIdentifier","src":"7211:6:16"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7201:6:16"}]},{"nodeType":"YulAssignment","src":"7226:44:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7253:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"7264:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7249:3:16"},"nodeType":"YulFunctionCall","src":"7249:20:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7236:12:16"},"nodeType":"YulFunctionCall","src":"7236:34:16"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"7226:6:16"}]}]},"name":"abi_decode_tuple_t_bytes_calldata_ptrt_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6667:9:16","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6678:7:16","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6690:6:16","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6698:6:16","type":""},{"name":"value2","nodeType":"YulTypedName","src":"6706:6:16","type":""}],"src":"6611:665:16"},{"body":{"nodeType":"YulBlock","src":"7418:1140:16","statements":[{"body":{"nodeType":"YulBlock","src":"7464:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7473:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7476:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7466:6:16"},"nodeType":"YulFunctionCall","src":"7466:12:16"},"nodeType":"YulExpressionStatement","src":"7466:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7439:7:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"7448:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7435:3:16"},"nodeType":"YulFunctionCall","src":"7435:23:16"},{"kind":"number","nodeType":"YulLiteral","src":"7460:2:16","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7431:3:16"},"nodeType":"YulFunctionCall","src":"7431:32:16"},"nodeType":"YulIf","src":"7428:52:16"},{"nodeType":"YulVariableDeclaration","src":"7489:37:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7516:9:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7503:12:16"},"nodeType":"YulFunctionCall","src":"7503:23:16"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7493:6:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7535:28:16","value":{"kind":"number","nodeType":"YulLiteral","src":"7545:18:16","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"7539:2:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"7590:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7599:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7602:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7592:6:16"},"nodeType":"YulFunctionCall","src":"7592:12:16"},"nodeType":"YulExpressionStatement","src":"7592:12:16"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7578:6:16"},{"name":"_1","nodeType":"YulIdentifier","src":"7586:2:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7575:2:16"},"nodeType":"YulFunctionCall","src":"7575:14:16"},"nodeType":"YulIf","src":"7572:34:16"},{"nodeType":"YulVariableDeclaration","src":"7615:32:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7629:9:16"},{"name":"offset","nodeType":"YulIdentifier","src":"7640:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7625:3:16"},"nodeType":"YulFunctionCall","src":"7625:22:16"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"7619:2:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"7695:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7704:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7707:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7697:6:16"},"nodeType":"YulFunctionCall","src":"7697:12:16"},"nodeType":"YulExpressionStatement","src":"7697:12:16"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"7674:2:16"},{"kind":"number","nodeType":"YulLiteral","src":"7678:4:16","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7670:3:16"},"nodeType":"YulFunctionCall","src":"7670:13:16"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7685:7:16"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7666:3:16"},"nodeType":"YulFunctionCall","src":"7666:27:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7659:6:16"},"nodeType":"YulFunctionCall","src":"7659:35:16"},"nodeType":"YulIf","src":"7656:55:16"},{"nodeType":"YulVariableDeclaration","src":"7720:26:16","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"7743:2:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7730:12:16"},"nodeType":"YulFunctionCall","src":"7730:16:16"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"7724:2:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7755:14:16","value":{"kind":"number","nodeType":"YulLiteral","src":"7765:4:16","type":"","value":"0x20"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"7759:2:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7778:53:16","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"7828:2:16"}],"functionName":{"name":"array_allocation_size_array_uint256_dyn","nodeType":"YulIdentifier","src":"7788:39:16"},"nodeType":"YulFunctionCall","src":"7788:43:16"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"7782:2:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7840:23:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7860:2:16","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7854:5:16"},"nodeType":"YulFunctionCall","src":"7854:9:16"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"7844:6:16","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7892:6:16"},{"name":"_5","nodeType":"YulIdentifier","src":"7900:2:16"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"7872:19:16"},"nodeType":"YulFunctionCall","src":"7872:31:16"},"nodeType":"YulExpressionStatement","src":"7872:31:16"},{"nodeType":"YulVariableDeclaration","src":"7912:17:16","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"7923:6:16"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"7916:3:16","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7945:6:16"},{"name":"_3","nodeType":"YulIdentifier","src":"7953:2:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7938:6:16"},"nodeType":"YulFunctionCall","src":"7938:18:16"},"nodeType":"YulExpressionStatement","src":"7938:18:16"},{"nodeType":"YulAssignment","src":"7965:22:16","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7976:6:16"},{"name":"_4","nodeType":"YulIdentifier","src":"7984:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7972:3:16"},"nodeType":"YulFunctionCall","src":"7972:15:16"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"7965:3:16"}]},{"nodeType":"YulVariableDeclaration","src":"7996:42:16","value":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"8018:2:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8026:1:16","type":"","value":"5"},{"name":"_3","nodeType":"YulIdentifier","src":"8029:2:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8022:3:16"},"nodeType":"YulFunctionCall","src":"8022:10:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8014:3:16"},"nodeType":"YulFunctionCall","src":"8014:19:16"},{"name":"_4","nodeType":"YulIdentifier","src":"8035:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8010:3:16"},"nodeType":"YulFunctionCall","src":"8010:28:16"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"8000:6:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"8070:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8079:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8082:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8072:6:16"},"nodeType":"YulFunctionCall","src":"8072:12:16"},"nodeType":"YulExpressionStatement","src":"8072:12:16"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"8053:6:16"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8061:7:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8050:2:16"},"nodeType":"YulFunctionCall","src":"8050:19:16"},"nodeType":"YulIf","src":"8047:39:16"},{"nodeType":"YulVariableDeclaration","src":"8095:22:16","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"8110:2:16"},{"name":"_4","nodeType":"YulIdentifier","src":"8114:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8106:3:16"},"nodeType":"YulFunctionCall","src":"8106:11:16"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"8099:3:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"8182:161:16","statements":[{"nodeType":"YulVariableDeclaration","src":"8196:30:16","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8222:3:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8209:12:16"},"nodeType":"YulFunctionCall","src":"8209:17:16"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"8200:5:16","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8264:5:16"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"8239:24:16"},"nodeType":"YulFunctionCall","src":"8239:31:16"},"nodeType":"YulExpressionStatement","src":"8239:31:16"},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"8290:3:16"},{"name":"value","nodeType":"YulIdentifier","src":"8295:5:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8283:6:16"},"nodeType":"YulFunctionCall","src":"8283:18:16"},"nodeType":"YulExpressionStatement","src":"8283:18:16"},{"nodeType":"YulAssignment","src":"8314:19:16","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"8325:3:16"},{"name":"_4","nodeType":"YulIdentifier","src":"8330:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8321:3:16"},"nodeType":"YulFunctionCall","src":"8321:12:16"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"8314:3:16"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8137:3:16"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"8142:6:16"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8134:2:16"},"nodeType":"YulFunctionCall","src":"8134:15:16"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"8150:23:16","statements":[{"nodeType":"YulAssignment","src":"8152:19:16","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8163:3:16"},{"name":"_4","nodeType":"YulIdentifier","src":"8168:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8159:3:16"},"nodeType":"YulFunctionCall","src":"8159:12:16"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"8152:3:16"}]}]},"pre":{"nodeType":"YulBlock","src":"8130:3:16","statements":[]},"src":"8126:217:16"},{"nodeType":"YulAssignment","src":"8352:16:16","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"8362:6:16"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8352:6:16"}]},{"nodeType":"YulVariableDeclaration","src":"8377:48:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8410:9:16"},{"name":"_4","nodeType":"YulIdentifier","src":"8421:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8406:3:16"},"nodeType":"YulFunctionCall","src":"8406:18:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8393:12:16"},"nodeType":"YulFunctionCall","src":"8393:32:16"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"8381:8:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"8454:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8463:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8466:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8456:6:16"},"nodeType":"YulFunctionCall","src":"8456:12:16"},"nodeType":"YulExpressionStatement","src":"8456:12:16"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"8440:8:16"},{"name":"_1","nodeType":"YulIdentifier","src":"8450:2:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8437:2:16"},"nodeType":"YulFunctionCall","src":"8437:16:16"},"nodeType":"YulIf","src":"8434:36:16"},{"nodeType":"YulAssignment","src":"8479:73:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8522:9:16"},{"name":"offset_1","nodeType":"YulIdentifier","src":"8533:8:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8518:3:16"},"nodeType":"YulFunctionCall","src":"8518:24:16"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8544:7:16"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"8489:28:16"},"nodeType":"YulFunctionCall","src":"8489:63:16"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"8479:6:16"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7376:9:16","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7387:7:16","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7399:6:16","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7407:6:16","type":""}],"src":"7281:1277:16"},{"body":{"nodeType":"YulBlock","src":"8624:374:16","statements":[{"nodeType":"YulVariableDeclaration","src":"8634:26:16","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8654:5:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8648:5:16"},"nodeType":"YulFunctionCall","src":"8648:12:16"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"8638:6:16","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8676:3:16"},{"name":"length","nodeType":"YulIdentifier","src":"8681:6:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8669:6:16"},"nodeType":"YulFunctionCall","src":"8669:19:16"},"nodeType":"YulExpressionStatement","src":"8669:19:16"},{"nodeType":"YulVariableDeclaration","src":"8697:14:16","value":{"kind":"number","nodeType":"YulLiteral","src":"8707:4:16","type":"","value":"0x20"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"8701:2:16","type":""}]},{"nodeType":"YulAssignment","src":"8720:19:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8731:3:16"},{"name":"_1","nodeType":"YulIdentifier","src":"8736:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8727:3:16"},"nodeType":"YulFunctionCall","src":"8727:12:16"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8720:3:16"}]},{"nodeType":"YulVariableDeclaration","src":"8748:28:16","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8766:5:16"},{"name":"_1","nodeType":"YulIdentifier","src":"8773:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8762:3:16"},"nodeType":"YulFunctionCall","src":"8762:14:16"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"8752:6:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8785:10:16","value":{"kind":"number","nodeType":"YulLiteral","src":"8794:1:16","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"8789:1:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"8853:120:16","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8874:3:16"},{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"8885:6:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8879:5:16"},"nodeType":"YulFunctionCall","src":"8879:13:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8867:6:16"},"nodeType":"YulFunctionCall","src":"8867:26:16"},"nodeType":"YulExpressionStatement","src":"8867:26:16"},{"nodeType":"YulAssignment","src":"8906:19:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8917:3:16"},{"name":"_1","nodeType":"YulIdentifier","src":"8922:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8913:3:16"},"nodeType":"YulFunctionCall","src":"8913:12:16"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8906:3:16"}]},{"nodeType":"YulAssignment","src":"8938:25:16","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"8952:6:16"},{"name":"_1","nodeType":"YulIdentifier","src":"8960:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8948:3:16"},"nodeType":"YulFunctionCall","src":"8948:15:16"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"8938:6:16"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"8815:1:16"},{"name":"length","nodeType":"YulIdentifier","src":"8818:6:16"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8812:2:16"},"nodeType":"YulFunctionCall","src":"8812:13:16"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"8826:18:16","statements":[{"nodeType":"YulAssignment","src":"8828:14:16","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"8837:1:16"},{"kind":"number","nodeType":"YulLiteral","src":"8840:1:16","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8833:3:16"},"nodeType":"YulFunctionCall","src":"8833:9:16"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"8828:1:16"}]}]},"pre":{"nodeType":"YulBlock","src":"8808:3:16","statements":[]},"src":"8804:169:16"},{"nodeType":"YulAssignment","src":"8982:10:16","value":{"name":"pos","nodeType":"YulIdentifier","src":"8989:3:16"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8982:3:16"}]}]},"name":"abi_encode_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8601:5:16","type":""},{"name":"pos","nodeType":"YulTypedName","src":"8608:3:16","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8616:3:16","type":""}],"src":"8563:435:16"},{"body":{"nodeType":"YulBlock","src":"9154:110:16","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9171:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"9182:2:16","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9164:6:16"},"nodeType":"YulFunctionCall","src":"9164:21:16"},"nodeType":"YulExpressionStatement","src":"9164:21:16"},{"nodeType":"YulAssignment","src":"9194:64:16","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9231:6:16"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9243:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"9254:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9239:3:16"},"nodeType":"YulFunctionCall","src":"9239:18:16"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"9202:28:16"},"nodeType":"YulFunctionCall","src":"9202:56:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9194:4:16"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9123:9:16","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9134:6:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9145:4:16","type":""}],"src":"9003:261:16"},{"body":{"nodeType":"YulBlock","src":"9311:76:16","statements":[{"body":{"nodeType":"YulBlock","src":"9365:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9374:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9377:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9367:6:16"},"nodeType":"YulFunctionCall","src":"9367:12:16"},"nodeType":"YulExpressionStatement","src":"9367:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9334:5:16"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9355:5:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9348:6:16"},"nodeType":"YulFunctionCall","src":"9348:13:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9341:6:16"},"nodeType":"YulFunctionCall","src":"9341:21:16"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"9331:2:16"},"nodeType":"YulFunctionCall","src":"9331:32:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9324:6:16"},"nodeType":"YulFunctionCall","src":"9324:40:16"},"nodeType":"YulIf","src":"9321:60:16"}]},"name":"validator_revert_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9300:5:16","type":""}],"src":"9269:118:16"},{"body":{"nodeType":"YulBlock","src":"9476:298:16","statements":[{"body":{"nodeType":"YulBlock","src":"9522:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9531:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9534:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9524:6:16"},"nodeType":"YulFunctionCall","src":"9524:12:16"},"nodeType":"YulExpressionStatement","src":"9524:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9497:7:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"9506:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9493:3:16"},"nodeType":"YulFunctionCall","src":"9493:23:16"},{"kind":"number","nodeType":"YulLiteral","src":"9518:2:16","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9489:3:16"},"nodeType":"YulFunctionCall","src":"9489:32:16"},"nodeType":"YulIf","src":"9486:52:16"},{"nodeType":"YulVariableDeclaration","src":"9547:36:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9573:9:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9560:12:16"},"nodeType":"YulFunctionCall","src":"9560:23:16"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"9551:5:16","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9617:5:16"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"9592:24:16"},"nodeType":"YulFunctionCall","src":"9592:31:16"},"nodeType":"YulExpressionStatement","src":"9592:31:16"},{"nodeType":"YulAssignment","src":"9632:15:16","value":{"name":"value","nodeType":"YulIdentifier","src":"9642:5:16"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9632:6:16"}]},{"nodeType":"YulVariableDeclaration","src":"9656:47:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9688:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"9699:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9684:3:16"},"nodeType":"YulFunctionCall","src":"9684:18:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9671:12:16"},"nodeType":"YulFunctionCall","src":"9671:32:16"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"9660:7:16","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"9734:7:16"}],"functionName":{"name":"validator_revert_bool","nodeType":"YulIdentifier","src":"9712:21:16"},"nodeType":"YulFunctionCall","src":"9712:30:16"},"nodeType":"YulExpressionStatement","src":"9712:30:16"},{"nodeType":"YulAssignment","src":"9751:17:16","value":{"name":"value_1","nodeType":"YulIdentifier","src":"9761:7:16"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"9751:6:16"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9434:9:16","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9445:7:16","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9457:6:16","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9465:6:16","type":""}],"src":"9392:382:16"},{"body":{"nodeType":"YulBlock","src":"9905:102:16","statements":[{"nodeType":"YulAssignment","src":"9915:26:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9927:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"9938:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9923:3:16"},"nodeType":"YulFunctionCall","src":"9923:18:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9915:4:16"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9957:9:16"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9972:6:16"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9988:3:16","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"9993:1:16","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9984:3:16"},"nodeType":"YulFunctionCall","src":"9984:11:16"},{"kind":"number","nodeType":"YulLiteral","src":"9997:1:16","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9980:3:16"},"nodeType":"YulFunctionCall","src":"9980:19:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9968:3:16"},"nodeType":"YulFunctionCall","src":"9968:32:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9950:6:16"},"nodeType":"YulFunctionCall","src":"9950:51:16"},"nodeType":"YulExpressionStatement","src":"9950:51:16"}]},"name":"abi_encode_tuple_t_contract$_IExecutorManager_$3894__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9874:9:16","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9885:6:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9896:4:16","type":""}],"src":"9779:228:16"},{"body":{"nodeType":"YulBlock","src":"10160:576:16","statements":[{"body":{"nodeType":"YulBlock","src":"10206:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10215:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10218:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10208:6:16"},"nodeType":"YulFunctionCall","src":"10208:12:16"},"nodeType":"YulExpressionStatement","src":"10208:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10181:7:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"10190:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10177:3:16"},"nodeType":"YulFunctionCall","src":"10177:23:16"},{"kind":"number","nodeType":"YulLiteral","src":"10202:2:16","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10173:3:16"},"nodeType":"YulFunctionCall","src":"10173:32:16"},"nodeType":"YulIf","src":"10170:52:16"},{"nodeType":"YulAssignment","src":"10231:33:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10254:9:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10241:12:16"},"nodeType":"YulFunctionCall","src":"10241:23:16"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10231:6:16"}]},{"nodeType":"YulVariableDeclaration","src":"10273:46:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10304:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"10315:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10300:3:16"},"nodeType":"YulFunctionCall","src":"10300:18:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10287:12:16"},"nodeType":"YulFunctionCall","src":"10287:32:16"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10277:6:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10328:28:16","value":{"kind":"number","nodeType":"YulLiteral","src":"10338:18:16","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"10332:2:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"10383:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10392:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10395:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10385:6:16"},"nodeType":"YulFunctionCall","src":"10385:12:16"},"nodeType":"YulExpressionStatement","src":"10385:12:16"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10371:6:16"},{"name":"_1","nodeType":"YulIdentifier","src":"10379:2:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10368:2:16"},"nodeType":"YulFunctionCall","src":"10368:14:16"},"nodeType":"YulIf","src":"10365:34:16"},{"nodeType":"YulAssignment","src":"10408:59:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10439:9:16"},{"name":"offset","nodeType":"YulIdentifier","src":"10450:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10435:3:16"},"nodeType":"YulFunctionCall","src":"10435:22:16"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10459:7:16"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"10418:16:16"},"nodeType":"YulFunctionCall","src":"10418:49:16"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"10408:6:16"}]},{"nodeType":"YulVariableDeclaration","src":"10476:48:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10509:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"10520:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10505:3:16"},"nodeType":"YulFunctionCall","src":"10505:18:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10492:12:16"},"nodeType":"YulFunctionCall","src":"10492:32:16"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"10480:8:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"10553:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10562:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10565:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10555:6:16"},"nodeType":"YulFunctionCall","src":"10555:12:16"},"nodeType":"YulExpressionStatement","src":"10555:12:16"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"10539:8:16"},{"name":"_1","nodeType":"YulIdentifier","src":"10549:2:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10536:2:16"},"nodeType":"YulFunctionCall","src":"10536:16:16"},"nodeType":"YulIf","src":"10533:36:16"},{"nodeType":"YulVariableDeclaration","src":"10578:98:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10646:9:16"},{"name":"offset_1","nodeType":"YulIdentifier","src":"10657:8:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10642:3:16"},"nodeType":"YulFunctionCall","src":"10642:24:16"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10668:7:16"}],"functionName":{"name":"abi_decode_array_bytes32_dyn_calldata","nodeType":"YulIdentifier","src":"10604:37:16"},"nodeType":"YulFunctionCall","src":"10604:72:16"},"variables":[{"name":"value2_1","nodeType":"YulTypedName","src":"10582:8:16","type":""},{"name":"value3_1","nodeType":"YulTypedName","src":"10592:8:16","type":""}]},{"nodeType":"YulAssignment","src":"10685:18:16","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"10695:8:16"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"10685:6:16"}]},{"nodeType":"YulAssignment","src":"10712:18:16","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"10722:8:16"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"10712:6:16"}]}]},"name":"abi_decode_tuple_t_uint256t_bytes_memory_ptrt_array$_t_bytes32_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10102:9:16","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10113:7:16","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10125:6:16","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10133:6:16","type":""},{"name":"value2","nodeType":"YulTypedName","src":"10141:6:16","type":""},{"name":"value3","nodeType":"YulTypedName","src":"10149:6:16","type":""}],"src":"10012:724:16"},{"body":{"nodeType":"YulBlock","src":"10828:301:16","statements":[{"body":{"nodeType":"YulBlock","src":"10874:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10883:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10886:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10876:6:16"},"nodeType":"YulFunctionCall","src":"10876:12:16"},"nodeType":"YulExpressionStatement","src":"10876:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10849:7:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"10858:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10845:3:16"},"nodeType":"YulFunctionCall","src":"10845:23:16"},{"kind":"number","nodeType":"YulLiteral","src":"10870:2:16","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10841:3:16"},"nodeType":"YulFunctionCall","src":"10841:32:16"},"nodeType":"YulIf","src":"10838:52:16"},{"nodeType":"YulVariableDeclaration","src":"10899:36:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10925:9:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10912:12:16"},"nodeType":"YulFunctionCall","src":"10912:23:16"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"10903:5:16","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10969:5:16"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"10944:24:16"},"nodeType":"YulFunctionCall","src":"10944:31:16"},"nodeType":"YulExpressionStatement","src":"10944:31:16"},{"nodeType":"YulAssignment","src":"10984:15:16","value":{"name":"value","nodeType":"YulIdentifier","src":"10994:5:16"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10984:6:16"}]},{"nodeType":"YulVariableDeclaration","src":"11008:47:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11040:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"11051:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11036:3:16"},"nodeType":"YulFunctionCall","src":"11036:18:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11023:12:16"},"nodeType":"YulFunctionCall","src":"11023:32:16"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"11012:7:16","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"11089:7:16"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"11064:24:16"},"nodeType":"YulFunctionCall","src":"11064:33:16"},"nodeType":"YulExpressionStatement","src":"11064:33:16"},{"nodeType":"YulAssignment","src":"11106:17:16","value":{"name":"value_1","nodeType":"YulIdentifier","src":"11116:7:16"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"11106:6:16"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10786:9:16","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10797:7:16","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10809:6:16","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10817:6:16","type":""}],"src":"10741:388:16"},{"body":{"nodeType":"YulBlock","src":"11204:177:16","statements":[{"body":{"nodeType":"YulBlock","src":"11250:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11259:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11262:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11252:6:16"},"nodeType":"YulFunctionCall","src":"11252:12:16"},"nodeType":"YulExpressionStatement","src":"11252:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11225:7:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"11234:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11221:3:16"},"nodeType":"YulFunctionCall","src":"11221:23:16"},{"kind":"number","nodeType":"YulLiteral","src":"11246:2:16","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11217:3:16"},"nodeType":"YulFunctionCall","src":"11217:32:16"},"nodeType":"YulIf","src":"11214:52:16"},{"nodeType":"YulVariableDeclaration","src":"11275:36:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11301:9:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11288:12:16"},"nodeType":"YulFunctionCall","src":"11288:23:16"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"11279:5:16","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11345:5:16"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"11320:24:16"},"nodeType":"YulFunctionCall","src":"11320:31:16"},"nodeType":"YulExpressionStatement","src":"11320:31:16"},{"nodeType":"YulAssignment","src":"11360:15:16","value":{"name":"value","nodeType":"YulIdentifier","src":"11370:5:16"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11360:6:16"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11170:9:16","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"11181:7:16","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"11193:6:16","type":""}],"src":"11134:247:16"},{"body":{"nodeType":"YulBlock","src":"11533:587:16","statements":[{"body":{"nodeType":"YulBlock","src":"11580:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11589:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11592:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11582:6:16"},"nodeType":"YulFunctionCall","src":"11582:12:16"},"nodeType":"YulExpressionStatement","src":"11582:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11554:7:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"11563:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11550:3:16"},"nodeType":"YulFunctionCall","src":"11550:23:16"},{"kind":"number","nodeType":"YulLiteral","src":"11575:3:16","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11546:3:16"},"nodeType":"YulFunctionCall","src":"11546:33:16"},"nodeType":"YulIf","src":"11543:53:16"},{"nodeType":"YulVariableDeclaration","src":"11605:36:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11631:9:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11618:12:16"},"nodeType":"YulFunctionCall","src":"11618:23:16"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"11609:5:16","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11675:5:16"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"11650:24:16"},"nodeType":"YulFunctionCall","src":"11650:31:16"},"nodeType":"YulExpressionStatement","src":"11650:31:16"},{"nodeType":"YulAssignment","src":"11690:15:16","value":{"name":"value","nodeType":"YulIdentifier","src":"11700:5:16"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11690:6:16"}]},{"nodeType":"YulVariableDeclaration","src":"11714:47:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11746:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"11757:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11742:3:16"},"nodeType":"YulFunctionCall","src":"11742:18:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11729:12:16"},"nodeType":"YulFunctionCall","src":"11729:32:16"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"11718:7:16","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"11795:7:16"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"11770:24:16"},"nodeType":"YulFunctionCall","src":"11770:33:16"},"nodeType":"YulExpressionStatement","src":"11770:33:16"},{"nodeType":"YulAssignment","src":"11812:17:16","value":{"name":"value_1","nodeType":"YulIdentifier","src":"11822:7:16"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"11812:6:16"}]},{"nodeType":"YulAssignment","src":"11838:42:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11865:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"11876:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11861:3:16"},"nodeType":"YulFunctionCall","src":"11861:18:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11848:12:16"},"nodeType":"YulFunctionCall","src":"11848:32:16"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"11838:6:16"}]},{"nodeType":"YulAssignment","src":"11889:42:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11916:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"11927:2:16","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11912:3:16"},"nodeType":"YulFunctionCall","src":"11912:18:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11899:12:16"},"nodeType":"YulFunctionCall","src":"11899:32:16"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"11889:6:16"}]},{"nodeType":"YulVariableDeclaration","src":"11940:47:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11971:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"11982:3:16","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11967:3:16"},"nodeType":"YulFunctionCall","src":"11967:19:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11954:12:16"},"nodeType":"YulFunctionCall","src":"11954:33:16"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11944:6:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"12030:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12039:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12042:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12032:6:16"},"nodeType":"YulFunctionCall","src":"12032:12:16"},"nodeType":"YulExpressionStatement","src":"12032:12:16"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"12002:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"12010:18:16","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11999:2:16"},"nodeType":"YulFunctionCall","src":"11999:30:16"},"nodeType":"YulIf","src":"11996:50:16"},{"nodeType":"YulAssignment","src":"12055:59:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12086:9:16"},{"name":"offset","nodeType":"YulIdentifier","src":"12097:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12082:3:16"},"nodeType":"YulFunctionCall","src":"12082:22:16"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12106:7:16"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"12065:16:16"},"nodeType":"YulFunctionCall","src":"12065:49:16"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"12055:6:16"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11467:9:16","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"11478:7:16","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"11490:6:16","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11498:6:16","type":""},{"name":"value2","nodeType":"YulTypedName","src":"11506:6:16","type":""},{"name":"value3","nodeType":"YulTypedName","src":"11514:6:16","type":""},{"name":"value4","nodeType":"YulTypedName","src":"11522:6:16","type":""}],"src":"11386:734:16"},{"body":{"nodeType":"YulBlock","src":"12299:232:16","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12316:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"12327:2:16","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12309:6:16"},"nodeType":"YulFunctionCall","src":"12309:21:16"},"nodeType":"YulExpressionStatement","src":"12309:21:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12350:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"12361:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12346:3:16"},"nodeType":"YulFunctionCall","src":"12346:18:16"},{"kind":"number","nodeType":"YulLiteral","src":"12366:2:16","type":"","value":"42"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12339:6:16"},"nodeType":"YulFunctionCall","src":"12339:30:16"},"nodeType":"YulExpressionStatement","src":"12339:30:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12389:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"12400:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12385:3:16"},"nodeType":"YulFunctionCall","src":"12385:18:16"},{"hexValue":"455243313135353a2061646472657373207a65726f206973206e6f7420612076","kind":"string","nodeType":"YulLiteral","src":"12405:34:16","type":"","value":"ERC1155: address zero is not a v"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12378:6:16"},"nodeType":"YulFunctionCall","src":"12378:62:16"},"nodeType":"YulExpressionStatement","src":"12378:62:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12460:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"12471:2:16","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12456:3:16"},"nodeType":"YulFunctionCall","src":"12456:18:16"},{"hexValue":"616c6964206f776e6572","kind":"string","nodeType":"YulLiteral","src":"12476:12:16","type":"","value":"alid owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12449:6:16"},"nodeType":"YulFunctionCall","src":"12449:40:16"},"nodeType":"YulExpressionStatement","src":"12449:40:16"},{"nodeType":"YulAssignment","src":"12498:27:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12510:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"12521:3:16","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12506:3:16"},"nodeType":"YulFunctionCall","src":"12506:19:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12498:4:16"}]}]},"name":"abi_encode_tuple_t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12276:9:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12290:4:16","type":""}],"src":"12125:406:16"},{"body":{"nodeType":"YulBlock","src":"12655:110:16","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12672:3:16"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12685:2:16","type":"","value":"96"},{"name":"value0","nodeType":"YulIdentifier","src":"12689:6:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12681:3:16"},"nodeType":"YulFunctionCall","src":"12681:15:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12702:26:16","type":"","value":"0xffffffffffffffffffffffff"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"12698:3:16"},"nodeType":"YulFunctionCall","src":"12698:31:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12677:3:16"},"nodeType":"YulFunctionCall","src":"12677:53:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12665:6:16"},"nodeType":"YulFunctionCall","src":"12665:66:16"},"nodeType":"YulExpressionStatement","src":"12665:66:16"},{"nodeType":"YulAssignment","src":"12740:19:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12751:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"12756:2:16","type":"","value":"20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12747:3:16"},"nodeType":"YulFunctionCall","src":"12747:12:16"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12740:3:16"}]}]},"name":"abi_encode_tuple_packed_t_address__to_t_address__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12631:3:16","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12636:6:16","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12647:3:16","type":""}],"src":"12536:229:16"},{"body":{"nodeType":"YulBlock","src":"12825:325:16","statements":[{"nodeType":"YulAssignment","src":"12835:22:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12849:1:16","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"12852:4:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"12845:3:16"},"nodeType":"YulFunctionCall","src":"12845:12:16"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"12835:6:16"}]},{"nodeType":"YulVariableDeclaration","src":"12866:38:16","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"12896:4:16"},{"kind":"number","nodeType":"YulLiteral","src":"12902:1:16","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12892:3:16"},"nodeType":"YulFunctionCall","src":"12892:12:16"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"12870:18:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"12943:31:16","statements":[{"nodeType":"YulAssignment","src":"12945:27:16","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"12959:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"12967:4:16","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12955:3:16"},"nodeType":"YulFunctionCall","src":"12955:17:16"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"12945:6:16"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"12923:18:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12916:6:16"},"nodeType":"YulFunctionCall","src":"12916:26:16"},"nodeType":"YulIf","src":"12913:61:16"},{"body":{"nodeType":"YulBlock","src":"13033:111:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13054:1:16","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13061:3:16","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"13066:10:16","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"13057:3:16"},"nodeType":"YulFunctionCall","src":"13057:20:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13047:6:16"},"nodeType":"YulFunctionCall","src":"13047:31:16"},"nodeType":"YulExpressionStatement","src":"13047:31:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13098:1:16","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"13101:4:16","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13091:6:16"},"nodeType":"YulFunctionCall","src":"13091:15:16"},"nodeType":"YulExpressionStatement","src":"13091:15:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13126:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13129:4:16","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13119:6:16"},"nodeType":"YulFunctionCall","src":"13119:15:16"},"nodeType":"YulExpressionStatement","src":"13119:15:16"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"12989:18:16"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"13012:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"13020:2:16","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"13009:2:16"},"nodeType":"YulFunctionCall","src":"13009:14:16"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"12986:2:16"},"nodeType":"YulFunctionCall","src":"12986:38:16"},"nodeType":"YulIf","src":"12983:161:16"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"12805:4:16","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"12814:6:16","type":""}],"src":"12770:380:16"},{"body":{"nodeType":"YulBlock","src":"13329:236:16","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13346:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"13357:2:16","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13339:6:16"},"nodeType":"YulFunctionCall","src":"13339:21:16"},"nodeType":"YulExpressionStatement","src":"13339:21:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13380:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"13391:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13376:3:16"},"nodeType":"YulFunctionCall","src":"13376:18:16"},{"kind":"number","nodeType":"YulLiteral","src":"13396:2:16","type":"","value":"46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13369:6:16"},"nodeType":"YulFunctionCall","src":"13369:30:16"},"nodeType":"YulExpressionStatement","src":"13369:30:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13419:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"13430:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13415:3:16"},"nodeType":"YulFunctionCall","src":"13415:18:16"},{"hexValue":"455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e","kind":"string","nodeType":"YulLiteral","src":"13435:34:16","type":"","value":"ERC1155: caller is not token own"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13408:6:16"},"nodeType":"YulFunctionCall","src":"13408:62:16"},"nodeType":"YulExpressionStatement","src":"13408:62:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13490:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"13501:2:16","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13486:3:16"},"nodeType":"YulFunctionCall","src":"13486:18:16"},{"hexValue":"6572206f7220617070726f766564","kind":"string","nodeType":"YulLiteral","src":"13506:16:16","type":"","value":"er or approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13479:6:16"},"nodeType":"YulFunctionCall","src":"13479:44:16"},"nodeType":"YulExpressionStatement","src":"13479:44:16"},{"nodeType":"YulAssignment","src":"13532:27:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13544:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"13555:3:16","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13540:3:16"},"nodeType":"YulFunctionCall","src":"13540:19:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13532:4:16"}]}]},"name":"abi_encode_tuple_t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13306:9:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13320:4:16","type":""}],"src":"13155:410:16"},{"body":{"nodeType":"YulBlock","src":"13744:237:16","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13761:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"13772:2:16","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13754:6:16"},"nodeType":"YulFunctionCall","src":"13754:21:16"},"nodeType":"YulExpressionStatement","src":"13754:21:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13795:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"13806:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13791:3:16"},"nodeType":"YulFunctionCall","src":"13791:18:16"},{"kind":"number","nodeType":"YulLiteral","src":"13811:2:16","type":"","value":"47"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13784:6:16"},"nodeType":"YulFunctionCall","src":"13784:30:16"},"nodeType":"YulExpressionStatement","src":"13784:30:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13834:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"13845:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13830:3:16"},"nodeType":"YulFunctionCall","src":"13830:18:16"},{"hexValue":"416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e6365","kind":"string","nodeType":"YulLiteral","src":"13850:34:16","type":"","value":"AccessControl: can only renounce"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13823:6:16"},"nodeType":"YulFunctionCall","src":"13823:62:16"},"nodeType":"YulExpressionStatement","src":"13823:62:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13905:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"13916:2:16","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13901:3:16"},"nodeType":"YulFunctionCall","src":"13901:18:16"},{"hexValue":"20726f6c657320666f722073656c66","kind":"string","nodeType":"YulLiteral","src":"13921:17:16","type":"","value":" roles for self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13894:6:16"},"nodeType":"YulFunctionCall","src":"13894:45:16"},"nodeType":"YulExpressionStatement","src":"13894:45:16"},{"nodeType":"YulAssignment","src":"13948:27:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13960:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"13971:3:16","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13956:3:16"},"nodeType":"YulFunctionCall","src":"13956:19:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13948:4:16"}]}]},"name":"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13721:9:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13735:4:16","type":""}],"src":"13570:411:16"},{"body":{"nodeType":"YulBlock","src":"14087:102:16","statements":[{"nodeType":"YulAssignment","src":"14097:26:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14109:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"14120:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14105:3:16"},"nodeType":"YulFunctionCall","src":"14105:18:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14097:4:16"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14139:9:16"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"14154:6:16"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14170:3:16","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"14175:1:16","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"14166:3:16"},"nodeType":"YulFunctionCall","src":"14166:11:16"},{"kind":"number","nodeType":"YulLiteral","src":"14179:1:16","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14162:3:16"},"nodeType":"YulFunctionCall","src":"14162:19:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14150:3:16"},"nodeType":"YulFunctionCall","src":"14150:32:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14132:6:16"},"nodeType":"YulFunctionCall","src":"14132:51:16"},"nodeType":"YulExpressionStatement","src":"14132:51:16"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14056:9:16","type":""},{"name":"value0","nodeType":"YulTypedName","src":"14067:6:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14078:4:16","type":""}],"src":"13986:203:16"},{"body":{"nodeType":"YulBlock","src":"14272:167:16","statements":[{"body":{"nodeType":"YulBlock","src":"14318:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14327:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14330:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14320:6:16"},"nodeType":"YulFunctionCall","src":"14320:12:16"},"nodeType":"YulExpressionStatement","src":"14320:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"14293:7:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"14302:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14289:3:16"},"nodeType":"YulFunctionCall","src":"14289:23:16"},{"kind":"number","nodeType":"YulLiteral","src":"14314:2:16","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"14285:3:16"},"nodeType":"YulFunctionCall","src":"14285:32:16"},"nodeType":"YulIf","src":"14282:52:16"},{"nodeType":"YulVariableDeclaration","src":"14343:29:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14362:9:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14356:5:16"},"nodeType":"YulFunctionCall","src":"14356:16:16"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"14347:5:16","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14403:5:16"}],"functionName":{"name":"validator_revert_bool","nodeType":"YulIdentifier","src":"14381:21:16"},"nodeType":"YulFunctionCall","src":"14381:28:16"},"nodeType":"YulExpressionStatement","src":"14381:28:16"},{"nodeType":"YulAssignment","src":"14418:15:16","value":{"name":"value","nodeType":"YulIdentifier","src":"14428:5:16"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"14418:6:16"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14238:9:16","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"14249:7:16","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"14261:6:16","type":""}],"src":"14194:245:16"},{"body":{"nodeType":"YulBlock","src":"14618:226:16","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14635:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"14646:2:16","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14628:6:16"},"nodeType":"YulFunctionCall","src":"14628:21:16"},"nodeType":"YulExpressionStatement","src":"14628:21:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14669:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"14680:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14665:3:16"},"nodeType":"YulFunctionCall","src":"14665:18:16"},{"kind":"number","nodeType":"YulLiteral","src":"14685:2:16","type":"","value":"36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14658:6:16"},"nodeType":"YulFunctionCall","src":"14658:30:16"},"nodeType":"YulExpressionStatement","src":"14658:30:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14708:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"14719:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14704:3:16"},"nodeType":"YulFunctionCall","src":"14704:18:16"},{"hexValue":"43616c6c6572206973206e6f7420616e20617574686f72697a65642065786563","kind":"string","nodeType":"YulLiteral","src":"14724:34:16","type":"","value":"Caller is not an authorized exec"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14697:6:16"},"nodeType":"YulFunctionCall","src":"14697:62:16"},"nodeType":"YulExpressionStatement","src":"14697:62:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14779:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"14790:2:16","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14775:3:16"},"nodeType":"YulFunctionCall","src":"14775:18:16"},{"hexValue":"75746f72","kind":"string","nodeType":"YulLiteral","src":"14795:6:16","type":"","value":"utor"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14768:6:16"},"nodeType":"YulFunctionCall","src":"14768:34:16"},"nodeType":"YulExpressionStatement","src":"14768:34:16"},{"nodeType":"YulAssignment","src":"14811:27:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14823:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"14834:3:16","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14819:3:16"},"nodeType":"YulFunctionCall","src":"14819:19:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14811:4:16"}]}]},"name":"abi_encode_tuple_t_stringliteral_691e84db20482a4c42ba7a4aa341855d8289774d9698451740209f85cbb09b0a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14595:9:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14609:4:16","type":""}],"src":"14444:400:16"},{"body":{"nodeType":"YulBlock","src":"14881:95:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14898:1:16","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14905:3:16","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"14910:10:16","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"14901:3:16"},"nodeType":"YulFunctionCall","src":"14901:20:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14891:6:16"},"nodeType":"YulFunctionCall","src":"14891:31:16"},"nodeType":"YulExpressionStatement","src":"14891:31:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14938:1:16","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"14941:4:16","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14931:6:16"},"nodeType":"YulFunctionCall","src":"14931:15:16"},"nodeType":"YulExpressionStatement","src":"14931:15:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14962:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14965:4:16","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14955:6:16"},"nodeType":"YulFunctionCall","src":"14955:15:16"},"nodeType":"YulExpressionStatement","src":"14955:15:16"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"14849:127:16"},{"body":{"nodeType":"YulBlock","src":"15029:77:16","statements":[{"nodeType":"YulAssignment","src":"15039:16:16","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"15050:1:16"},{"name":"y","nodeType":"YulIdentifier","src":"15053:1:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15046:3:16"},"nodeType":"YulFunctionCall","src":"15046:9:16"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"15039:3:16"}]},{"body":{"nodeType":"YulBlock","src":"15078:22:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"15080:16:16"},"nodeType":"YulFunctionCall","src":"15080:18:16"},"nodeType":"YulExpressionStatement","src":"15080:18:16"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"15070:1:16"},{"name":"sum","nodeType":"YulIdentifier","src":"15073:3:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15067:2:16"},"nodeType":"YulFunctionCall","src":"15067:10:16"},"nodeType":"YulIf","src":"15064:36:16"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"15012:1:16","type":""},{"name":"y","nodeType":"YulTypedName","src":"15015:1:16","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"15021:3:16","type":""}],"src":"14981:125:16"},{"body":{"nodeType":"YulBlock","src":"15241:201:16","statements":[{"body":{"nodeType":"YulBlock","src":"15279:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15288:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15291:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15281:6:16"},"nodeType":"YulFunctionCall","src":"15281:12:16"},"nodeType":"YulExpressionStatement","src":"15281:12:16"}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"15257:10:16"},{"name":"endIndex","nodeType":"YulIdentifier","src":"15269:8:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15254:2:16"},"nodeType":"YulFunctionCall","src":"15254:24:16"},"nodeType":"YulIf","src":"15251:44:16"},{"body":{"nodeType":"YulBlock","src":"15328:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15337:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15340:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15330:6:16"},"nodeType":"YulFunctionCall","src":"15330:12:16"},"nodeType":"YulExpressionStatement","src":"15330:12:16"}]},"condition":{"arguments":[{"name":"endIndex","nodeType":"YulIdentifier","src":"15310:8:16"},{"name":"length","nodeType":"YulIdentifier","src":"15320:6:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15307:2:16"},"nodeType":"YulFunctionCall","src":"15307:20:16"},"nodeType":"YulIf","src":"15304:40:16"},{"nodeType":"YulAssignment","src":"15353:36:16","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"15370:6:16"},{"name":"startIndex","nodeType":"YulIdentifier","src":"15378:10:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15366:3:16"},"nodeType":"YulFunctionCall","src":"15366:23:16"},"variableNames":[{"name":"offsetOut","nodeType":"YulIdentifier","src":"15353:9:16"}]},{"nodeType":"YulAssignment","src":"15398:38:16","value":{"arguments":[{"name":"endIndex","nodeType":"YulIdentifier","src":"15415:8:16"},{"name":"startIndex","nodeType":"YulIdentifier","src":"15425:10:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15411:3:16"},"nodeType":"YulFunctionCall","src":"15411:25:16"},"variableNames":[{"name":"lengthOut","nodeType":"YulIdentifier","src":"15398:9:16"}]}]},"name":"calldata_array_index_range_access_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"15175:6:16","type":""},{"name":"length","nodeType":"YulTypedName","src":"15183:6:16","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"15191:10:16","type":""},{"name":"endIndex","nodeType":"YulTypedName","src":"15203:8:16","type":""}],"returnVariables":[{"name":"offsetOut","nodeType":"YulTypedName","src":"15216:9:16","type":""},{"name":"lengthOut","nodeType":"YulTypedName","src":"15227:9:16","type":""}],"src":"15111:331:16"},{"body":{"nodeType":"YulBlock","src":"15584:404:16","statements":[{"body":{"nodeType":"YulBlock","src":"15631:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15640:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15643:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15633:6:16"},"nodeType":"YulFunctionCall","src":"15633:12:16"},"nodeType":"YulExpressionStatement","src":"15633:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"15605:7:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"15614:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15601:3:16"},"nodeType":"YulFunctionCall","src":"15601:23:16"},{"kind":"number","nodeType":"YulLiteral","src":"15626:3:16","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"15597:3:16"},"nodeType":"YulFunctionCall","src":"15597:33:16"},"nodeType":"YulIf","src":"15594:53:16"},{"nodeType":"YulVariableDeclaration","src":"15656:36:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15682:9:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"15669:12:16"},"nodeType":"YulFunctionCall","src":"15669:23:16"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"15660:5:16","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15726:5:16"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"15701:24:16"},"nodeType":"YulFunctionCall","src":"15701:31:16"},"nodeType":"YulExpressionStatement","src":"15701:31:16"},{"nodeType":"YulAssignment","src":"15741:15:16","value":{"name":"value","nodeType":"YulIdentifier","src":"15751:5:16"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"15741:6:16"}]},{"nodeType":"YulVariableDeclaration","src":"15765:47:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15797:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"15808:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15793:3:16"},"nodeType":"YulFunctionCall","src":"15793:18:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"15780:12:16"},"nodeType":"YulFunctionCall","src":"15780:32:16"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"15769:7:16","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"15846:7:16"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"15821:24:16"},"nodeType":"YulFunctionCall","src":"15821:33:16"},"nodeType":"YulExpressionStatement","src":"15821:33:16"},{"nodeType":"YulAssignment","src":"15863:17:16","value":{"name":"value_1","nodeType":"YulIdentifier","src":"15873:7:16"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"15863:6:16"}]},{"nodeType":"YulAssignment","src":"15889:42:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15916:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"15927:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15912:3:16"},"nodeType":"YulFunctionCall","src":"15912:18:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"15899:12:16"},"nodeType":"YulFunctionCall","src":"15899:32:16"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"15889:6:16"}]},{"nodeType":"YulAssignment","src":"15940:42:16","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15967:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"15978:2:16","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15963:3:16"},"nodeType":"YulFunctionCall","src":"15963:18:16"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"15950:12:16"},"nodeType":"YulFunctionCall","src":"15950:32:16"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"15940:6:16"}]}]},"name":"abi_decode_tuple_t_address_payablet_address_payablet_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15526:9:16","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"15537:7:16","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"15549:6:16","type":""},{"name":"value1","nodeType":"YulTypedName","src":"15557:6:16","type":""},{"name":"value2","nodeType":"YulTypedName","src":"15565:6:16","type":""},{"name":"value3","nodeType":"YulTypedName","src":"15573:6:16","type":""}],"src":"15447:541:16"},{"body":{"nodeType":"YulBlock","src":"16167:224:16","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16184:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"16195:2:16","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16177:6:16"},"nodeType":"YulFunctionCall","src":"16177:21:16"},"nodeType":"YulExpressionStatement","src":"16177:21:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16218:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"16229:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16214:3:16"},"nodeType":"YulFunctionCall","src":"16214:18:16"},{"kind":"number","nodeType":"YulLiteral","src":"16234:2:16","type":"","value":"34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16207:6:16"},"nodeType":"YulFunctionCall","src":"16207:30:16"},"nodeType":"YulExpressionStatement","src":"16207:30:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16257:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"16268:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16253:3:16"},"nodeType":"YulFunctionCall","src":"16253:18:16"},{"hexValue":"53656c6c657220646f6573206e6f74206861766520656e6f75676820746f6b65","kind":"string","nodeType":"YulLiteral","src":"16273:34:16","type":"","value":"Seller does not have enough toke"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16246:6:16"},"nodeType":"YulFunctionCall","src":"16246:62:16"},"nodeType":"YulExpressionStatement","src":"16246:62:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16328:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"16339:2:16","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16324:3:16"},"nodeType":"YulFunctionCall","src":"16324:18:16"},{"hexValue":"6e73","kind":"string","nodeType":"YulLiteral","src":"16344:4:16","type":"","value":"ns"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16317:6:16"},"nodeType":"YulFunctionCall","src":"16317:32:16"},"nodeType":"YulExpressionStatement","src":"16317:32:16"},{"nodeType":"YulAssignment","src":"16358:27:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16370:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"16381:3:16","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16366:3:16"},"nodeType":"YulFunctionCall","src":"16366:19:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16358:4:16"}]}]},"name":"abi_encode_tuple_t_stringliteral_acc775314033618014c4c79559957baf417931f6e8d18e4684d327a6a76d2e7e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16144:9:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16158:4:16","type":""}],"src":"15993:398:16"},{"body":{"nodeType":"YulBlock","src":"16543:124:16","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16566:3:16"},{"name":"value0","nodeType":"YulIdentifier","src":"16571:6:16"},{"name":"value1","nodeType":"YulIdentifier","src":"16579:6:16"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"16553:12:16"},"nodeType":"YulFunctionCall","src":"16553:33:16"},"nodeType":"YulExpressionStatement","src":"16553:33:16"},{"nodeType":"YulVariableDeclaration","src":"16595:26:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16609:3:16"},{"name":"value1","nodeType":"YulIdentifier","src":"16614:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16605:3:16"},"nodeType":"YulFunctionCall","src":"16605:16:16"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"16599:2:16","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"16637:2:16"},{"kind":"number","nodeType":"YulLiteral","src":"16641:1:16","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16630:6:16"},"nodeType":"YulFunctionCall","src":"16630:13:16"},"nodeType":"YulExpressionStatement","src":"16630:13:16"},{"nodeType":"YulAssignment","src":"16652:9:16","value":{"name":"_1","nodeType":"YulIdentifier","src":"16659:2:16"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16652:3:16"}]}]},"name":"abi_encode_tuple_packed_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16511:3:16","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16516:6:16","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16524:6:16","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16535:3:16","type":""}],"src":"16396:271:16"},{"body":{"nodeType":"YulBlock","src":"16801:119:16","statements":[{"nodeType":"YulAssignment","src":"16811:26:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16823:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"16834:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16819:3:16"},"nodeType":"YulFunctionCall","src":"16819:18:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16811:4:16"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16853:9:16"},{"name":"value0","nodeType":"YulIdentifier","src":"16864:6:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16846:6:16"},"nodeType":"YulFunctionCall","src":"16846:25:16"},"nodeType":"YulExpressionStatement","src":"16846:25:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16891:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"16902:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16887:3:16"},"nodeType":"YulFunctionCall","src":"16887:18:16"},{"name":"value1","nodeType":"YulIdentifier","src":"16907:6:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16880:6:16"},"nodeType":"YulFunctionCall","src":"16880:34:16"},"nodeType":"YulExpressionStatement","src":"16880:34:16"}]},"name":"abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16762:9:16","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16773:6:16","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16781:6:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16792:4:16","type":""}],"src":"16672:248:16"},{"body":{"nodeType":"YulBlock","src":"17099:231:16","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17116:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"17127:2:16","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17109:6:16"},"nodeType":"YulFunctionCall","src":"17109:21:16"},"nodeType":"YulExpressionStatement","src":"17109:21:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17150:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"17161:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17146:3:16"},"nodeType":"YulFunctionCall","src":"17146:18:16"},{"kind":"number","nodeType":"YulLiteral","src":"17166:2:16","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17139:6:16"},"nodeType":"YulFunctionCall","src":"17139:30:16"},"nodeType":"YulExpressionStatement","src":"17139:30:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17189:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"17200:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17185:3:16"},"nodeType":"YulFunctionCall","src":"17185:18:16"},{"hexValue":"455243313135353a206163636f756e747320616e6420696473206c656e677468","kind":"string","nodeType":"YulLiteral","src":"17205:34:16","type":"","value":"ERC1155: accounts and ids length"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17178:6:16"},"nodeType":"YulFunctionCall","src":"17178:62:16"},"nodeType":"YulExpressionStatement","src":"17178:62:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17260:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"17271:2:16","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17256:3:16"},"nodeType":"YulFunctionCall","src":"17256:18:16"},{"hexValue":"206d69736d61746368","kind":"string","nodeType":"YulLiteral","src":"17276:11:16","type":"","value":" mismatch"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17249:6:16"},"nodeType":"YulFunctionCall","src":"17249:39:16"},"nodeType":"YulExpressionStatement","src":"17249:39:16"},{"nodeType":"YulAssignment","src":"17297:27:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17309:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"17320:3:16","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17305:3:16"},"nodeType":"YulFunctionCall","src":"17305:19:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17297:4:16"}]}]},"name":"abi_encode_tuple_t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17076:9:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17090:4:16","type":""}],"src":"16925:405:16"},{"body":{"nodeType":"YulBlock","src":"17367:95:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17384:1:16","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17391:3:16","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"17396:10:16","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"17387:3:16"},"nodeType":"YulFunctionCall","src":"17387:20:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17377:6:16"},"nodeType":"YulFunctionCall","src":"17377:31:16"},"nodeType":"YulExpressionStatement","src":"17377:31:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17424:1:16","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"17427:4:16","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17417:6:16"},"nodeType":"YulFunctionCall","src":"17417:15:16"},"nodeType":"YulExpressionStatement","src":"17417:15:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17448:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"17451:4:16","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"17441:6:16"},"nodeType":"YulFunctionCall","src":"17441:15:16"},"nodeType":"YulExpressionStatement","src":"17441:15:16"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"17335:127:16"},{"body":{"nodeType":"YulBlock","src":"17514:88:16","statements":[{"body":{"nodeType":"YulBlock","src":"17545:22:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"17547:16:16"},"nodeType":"YulFunctionCall","src":"17547:18:16"},"nodeType":"YulExpressionStatement","src":"17547:18:16"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17530:5:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17541:1:16","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"17537:3:16"},"nodeType":"YulFunctionCall","src":"17537:6:16"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"17527:2:16"},"nodeType":"YulFunctionCall","src":"17527:17:16"},"nodeType":"YulIf","src":"17524:43:16"},{"nodeType":"YulAssignment","src":"17576:20:16","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17587:5:16"},{"kind":"number","nodeType":"YulLiteral","src":"17594:1:16","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17583:3:16"},"nodeType":"YulFunctionCall","src":"17583:13:16"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"17576:3:16"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"17496:5:16","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"17506:3:16","type":""}],"src":"17467:135:16"},{"body":{"nodeType":"YulBlock","src":"17781:227:16","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17798:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"17809:2:16","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17791:6:16"},"nodeType":"YulFunctionCall","src":"17791:21:16"},"nodeType":"YulExpressionStatement","src":"17791:21:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17832:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"17843:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17828:3:16"},"nodeType":"YulFunctionCall","src":"17828:18:16"},{"kind":"number","nodeType":"YulLiteral","src":"17848:2:16","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17821:6:16"},"nodeType":"YulFunctionCall","src":"17821:30:16"},"nodeType":"YulExpressionStatement","src":"17821:30:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17871:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"17882:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17867:3:16"},"nodeType":"YulFunctionCall","src":"17867:18:16"},{"hexValue":"546f6b656e2069732063757272656e746c79206c6f636b656420666f72206d69","kind":"string","nodeType":"YulLiteral","src":"17887:34:16","type":"","value":"Token is currently locked for mi"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17860:6:16"},"nodeType":"YulFunctionCall","src":"17860:62:16"},"nodeType":"YulExpressionStatement","src":"17860:62:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17942:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"17953:2:16","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17938:3:16"},"nodeType":"YulFunctionCall","src":"17938:18:16"},{"hexValue":"6e74696e67","kind":"string","nodeType":"YulLiteral","src":"17958:7:16","type":"","value":"nting"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17931:6:16"},"nodeType":"YulFunctionCall","src":"17931:35:16"},"nodeType":"YulExpressionStatement","src":"17931:35:16"},{"nodeType":"YulAssignment","src":"17975:27:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17987:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"17998:3:16","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17983:3:16"},"nodeType":"YulFunctionCall","src":"17983:19:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17975:4:16"}]}]},"name":"abi_encode_tuple_t_stringliteral_c05b6e35da5e61f1d7b3ef7e615ddf60dfc35de37aba5dd75608f23dd6e104fb__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17758:9:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17772:4:16","type":""}],"src":"17607:401:16"},{"body":{"nodeType":"YulBlock","src":"18187:175:16","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18204:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"18215:2:16","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18197:6:16"},"nodeType":"YulFunctionCall","src":"18197:21:16"},"nodeType":"YulExpressionStatement","src":"18197:21:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18238:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"18249:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18234:3:16"},"nodeType":"YulFunctionCall","src":"18234:18:16"},{"kind":"number","nodeType":"YulLiteral","src":"18254:2:16","type":"","value":"25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18227:6:16"},"nodeType":"YulFunctionCall","src":"18227:30:16"},"nodeType":"YulExpressionStatement","src":"18227:30:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18277:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"18288:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18273:3:16"},"nodeType":"YulFunctionCall","src":"18273:18:16"},{"hexValue":"43616c6c6572206973206e6f742077686974656c6973746564","kind":"string","nodeType":"YulLiteral","src":"18293:27:16","type":"","value":"Caller is not whitelisted"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18266:6:16"},"nodeType":"YulFunctionCall","src":"18266:55:16"},"nodeType":"YulExpressionStatement","src":"18266:55:16"},{"nodeType":"YulAssignment","src":"18330:26:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18342:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"18353:2:16","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18338:3:16"},"nodeType":"YulFunctionCall","src":"18338:18:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18330:4:16"}]}]},"name":"abi_encode_tuple_t_stringliteral_60304f7258d86aaa1cc1138fb2f6bbc524adfb91bc7985c5cde7fccc8aa6045a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18164:9:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18178:4:16","type":""}],"src":"18013:349:16"},{"body":{"nodeType":"YulBlock","src":"18541:230:16","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18558:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"18569:2:16","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18551:6:16"},"nodeType":"YulFunctionCall","src":"18551:21:16"},"nodeType":"YulExpressionStatement","src":"18551:21:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18592:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"18603:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18588:3:16"},"nodeType":"YulFunctionCall","src":"18588:18:16"},{"kind":"number","nodeType":"YulLiteral","src":"18608:2:16","type":"","value":"40"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18581:6:16"},"nodeType":"YulFunctionCall","src":"18581:30:16"},"nodeType":"YulExpressionStatement","src":"18581:30:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18631:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"18642:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18627:3:16"},"nodeType":"YulFunctionCall","src":"18627:18:16"},{"hexValue":"455243313135353a2069647320616e6420616d6f756e7473206c656e67746820","kind":"string","nodeType":"YulLiteral","src":"18647:34:16","type":"","value":"ERC1155: ids and amounts length "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18620:6:16"},"nodeType":"YulFunctionCall","src":"18620:62:16"},"nodeType":"YulExpressionStatement","src":"18620:62:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18702:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"18713:2:16","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18698:3:16"},"nodeType":"YulFunctionCall","src":"18698:18:16"},{"hexValue":"6d69736d61746368","kind":"string","nodeType":"YulLiteral","src":"18718:10:16","type":"","value":"mismatch"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18691:6:16"},"nodeType":"YulFunctionCall","src":"18691:38:16"},"nodeType":"YulExpressionStatement","src":"18691:38:16"},{"nodeType":"YulAssignment","src":"18738:27:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18750:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"18761:3:16","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18746:3:16"},"nodeType":"YulFunctionCall","src":"18746:19:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18738:4:16"}]}]},"name":"abi_encode_tuple_t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18518:9:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18532:4:16","type":""}],"src":"18367:404:16"},{"body":{"nodeType":"YulBlock","src":"18950:227:16","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18967:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"18978:2:16","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18960:6:16"},"nodeType":"YulFunctionCall","src":"18960:21:16"},"nodeType":"YulExpressionStatement","src":"18960:21:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19001:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"19012:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18997:3:16"},"nodeType":"YulFunctionCall","src":"18997:18:16"},{"kind":"number","nodeType":"YulLiteral","src":"19017:2:16","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18990:6:16"},"nodeType":"YulFunctionCall","src":"18990:30:16"},"nodeType":"YulExpressionStatement","src":"18990:30:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19040:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"19051:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19036:3:16"},"nodeType":"YulFunctionCall","src":"19036:18:16"},{"hexValue":"455243313135353a207472616e7366657220746f20746865207a65726f206164","kind":"string","nodeType":"YulLiteral","src":"19056:34:16","type":"","value":"ERC1155: transfer to the zero ad"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19029:6:16"},"nodeType":"YulFunctionCall","src":"19029:62:16"},"nodeType":"YulExpressionStatement","src":"19029:62:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19111:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"19122:2:16","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19107:3:16"},"nodeType":"YulFunctionCall","src":"19107:18:16"},{"hexValue":"6472657373","kind":"string","nodeType":"YulLiteral","src":"19127:7:16","type":"","value":"dress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19100:6:16"},"nodeType":"YulFunctionCall","src":"19100:35:16"},"nodeType":"YulExpressionStatement","src":"19100:35:16"},{"nodeType":"YulAssignment","src":"19144:27:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19156:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"19167:3:16","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19152:3:16"},"nodeType":"YulFunctionCall","src":"19152:19:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19144:4:16"}]}]},"name":"abi_encode_tuple_t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18927:9:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18941:4:16","type":""}],"src":"18776:401:16"},{"body":{"nodeType":"YulBlock","src":"19356:232:16","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19373:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"19384:2:16","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19366:6:16"},"nodeType":"YulFunctionCall","src":"19366:21:16"},"nodeType":"YulExpressionStatement","src":"19366:21:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19407:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"19418:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19403:3:16"},"nodeType":"YulFunctionCall","src":"19403:18:16"},{"kind":"number","nodeType":"YulLiteral","src":"19423:2:16","type":"","value":"42"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19396:6:16"},"nodeType":"YulFunctionCall","src":"19396:30:16"},"nodeType":"YulExpressionStatement","src":"19396:30:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19446:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"19457:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19442:3:16"},"nodeType":"YulFunctionCall","src":"19442:18:16"},{"hexValue":"455243313135353a20696e73756666696369656e742062616c616e636520666f","kind":"string","nodeType":"YulLiteral","src":"19462:34:16","type":"","value":"ERC1155: insufficient balance fo"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19435:6:16"},"nodeType":"YulFunctionCall","src":"19435:62:16"},"nodeType":"YulExpressionStatement","src":"19435:62:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19517:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"19528:2:16","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19513:3:16"},"nodeType":"YulFunctionCall","src":"19513:18:16"},{"hexValue":"72207472616e73666572","kind":"string","nodeType":"YulLiteral","src":"19533:12:16","type":"","value":"r transfer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19506:6:16"},"nodeType":"YulFunctionCall","src":"19506:40:16"},"nodeType":"YulExpressionStatement","src":"19506:40:16"},{"nodeType":"YulAssignment","src":"19555:27:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19567:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"19578:3:16","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19563:3:16"},"nodeType":"YulFunctionCall","src":"19563:19:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19555:4:16"}]}]},"name":"abi_encode_tuple_t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19333:9:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19347:4:16","type":""}],"src":"19182:406:16"},{"body":{"nodeType":"YulBlock","src":"19822:236:16","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19839:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"19850:2:16","type":"","value":"64"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19832:6:16"},"nodeType":"YulFunctionCall","src":"19832:21:16"},"nodeType":"YulExpressionStatement","src":"19832:21:16"},{"nodeType":"YulVariableDeclaration","src":"19862:70:16","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"19905:6:16"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19917:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"19928:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19913:3:16"},"nodeType":"YulFunctionCall","src":"19913:18:16"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"19876:28:16"},"nodeType":"YulFunctionCall","src":"19876:56:16"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"19866:6:16","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19952:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"19963:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19948:3:16"},"nodeType":"YulFunctionCall","src":"19948:18:16"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"19972:6:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"19980:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19968:3:16"},"nodeType":"YulFunctionCall","src":"19968:22:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19941:6:16"},"nodeType":"YulFunctionCall","src":"19941:50:16"},"nodeType":"YulExpressionStatement","src":"19941:50:16"},{"nodeType":"YulAssignment","src":"20000:52:16","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"20037:6:16"},{"name":"tail_1","nodeType":"YulIdentifier","src":"20045:6:16"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"20008:28:16"},"nodeType":"YulFunctionCall","src":"20008:44:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20000:4:16"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19783:9:16","type":""},{"name":"value1","nodeType":"YulTypedName","src":"19794:6:16","type":""},{"name":"value0","nodeType":"YulTypedName","src":"19802:6:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19813:4:16","type":""}],"src":"19593:465:16"},{"body":{"nodeType":"YulBlock","src":"20192:119:16","statements":[{"nodeType":"YulAssignment","src":"20202:26:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20214:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"20225:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20210:3:16"},"nodeType":"YulFunctionCall","src":"20210:18:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20202:4:16"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20244:9:16"},{"name":"value0","nodeType":"YulIdentifier","src":"20255:6:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20237:6:16"},"nodeType":"YulFunctionCall","src":"20237:25:16"},"nodeType":"YulExpressionStatement","src":"20237:25:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20282:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"20293:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20278:3:16"},"nodeType":"YulFunctionCall","src":"20278:18:16"},{"name":"value1","nodeType":"YulIdentifier","src":"20298:6:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20271:6:16"},"nodeType":"YulFunctionCall","src":"20271:34:16"},"nodeType":"YulExpressionStatement","src":"20271:34:16"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20153:9:16","type":""},{"name":"value1","nodeType":"YulTypedName","src":"20164:6:16","type":""},{"name":"value0","nodeType":"YulTypedName","src":"20172:6:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20183:4:16","type":""}],"src":"20063:248:16"},{"body":{"nodeType":"YulBlock","src":"20490:231:16","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20507:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"20518:2:16","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20500:6:16"},"nodeType":"YulFunctionCall","src":"20500:21:16"},"nodeType":"YulExpressionStatement","src":"20500:21:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20541:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"20552:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20537:3:16"},"nodeType":"YulFunctionCall","src":"20537:18:16"},{"kind":"number","nodeType":"YulLiteral","src":"20557:2:16","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20530:6:16"},"nodeType":"YulFunctionCall","src":"20530:30:16"},"nodeType":"YulExpressionStatement","src":"20530:30:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20580:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"20591:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20576:3:16"},"nodeType":"YulFunctionCall","src":"20576:18:16"},{"hexValue":"455243313135353a2073657474696e6720617070726f76616c20737461747573","kind":"string","nodeType":"YulLiteral","src":"20596:34:16","type":"","value":"ERC1155: setting approval status"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20569:6:16"},"nodeType":"YulFunctionCall","src":"20569:62:16"},"nodeType":"YulExpressionStatement","src":"20569:62:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20651:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"20662:2:16","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20647:3:16"},"nodeType":"YulFunctionCall","src":"20647:18:16"},{"hexValue":"20666f722073656c66","kind":"string","nodeType":"YulLiteral","src":"20667:11:16","type":"","value":" for self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20640:6:16"},"nodeType":"YulFunctionCall","src":"20640:39:16"},"nodeType":"YulExpressionStatement","src":"20640:39:16"},{"nodeType":"YulAssignment","src":"20688:27:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20700:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"20711:3:16","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20696:3:16"},"nodeType":"YulFunctionCall","src":"20696:19:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20688:4:16"}]}]},"name":"abi_encode_tuple_t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20467:9:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20481:4:16","type":""}],"src":"20316:405:16"},{"body":{"nodeType":"YulBlock","src":"20900:223:16","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20917:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"20928:2:16","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20910:6:16"},"nodeType":"YulFunctionCall","src":"20910:21:16"},"nodeType":"YulExpressionStatement","src":"20910:21:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20951:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"20962:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20947:3:16"},"nodeType":"YulFunctionCall","src":"20947:18:16"},{"kind":"number","nodeType":"YulLiteral","src":"20967:2:16","type":"","value":"33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20940:6:16"},"nodeType":"YulFunctionCall","src":"20940:30:16"},"nodeType":"YulExpressionStatement","src":"20940:30:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20990:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"21001:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20986:3:16"},"nodeType":"YulFunctionCall","src":"20986:18:16"},{"hexValue":"455243313135353a206d696e7420746f20746865207a65726f20616464726573","kind":"string","nodeType":"YulLiteral","src":"21006:34:16","type":"","value":"ERC1155: mint to the zero addres"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20979:6:16"},"nodeType":"YulFunctionCall","src":"20979:62:16"},"nodeType":"YulExpressionStatement","src":"20979:62:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21061:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"21072:2:16","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21057:3:16"},"nodeType":"YulFunctionCall","src":"21057:18:16"},{"hexValue":"73","kind":"string","nodeType":"YulLiteral","src":"21077:3:16","type":"","value":"s"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21050:6:16"},"nodeType":"YulFunctionCall","src":"21050:31:16"},"nodeType":"YulExpressionStatement","src":"21050:31:16"},{"nodeType":"YulAssignment","src":"21090:27:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21102:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"21113:3:16","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21098:3:16"},"nodeType":"YulFunctionCall","src":"21098:19:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21090:4:16"}]}]},"name":"abi_encode_tuple_t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20877:9:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20891:4:16","type":""}],"src":"20726:397:16"},{"body":{"nodeType":"YulBlock","src":"21459:496:16","statements":[{"nodeType":"YulVariableDeclaration","src":"21469:29:16","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21487:3:16","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"21492:1:16","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"21483:3:16"},"nodeType":"YulFunctionCall","src":"21483:11:16"},{"kind":"number","nodeType":"YulLiteral","src":"21496:1:16","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21479:3:16"},"nodeType":"YulFunctionCall","src":"21479:19:16"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"21473:2:16","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21514:9:16"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"21529:6:16"},{"name":"_1","nodeType":"YulIdentifier","src":"21537:2:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"21525:3:16"},"nodeType":"YulFunctionCall","src":"21525:15:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21507:6:16"},"nodeType":"YulFunctionCall","src":"21507:34:16"},"nodeType":"YulExpressionStatement","src":"21507:34:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21561:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"21572:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21557:3:16"},"nodeType":"YulFunctionCall","src":"21557:18:16"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"21581:6:16"},{"name":"_1","nodeType":"YulIdentifier","src":"21589:2:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"21577:3:16"},"nodeType":"YulFunctionCall","src":"21577:15:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21550:6:16"},"nodeType":"YulFunctionCall","src":"21550:43:16"},"nodeType":"YulExpressionStatement","src":"21550:43:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21613:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"21624:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21609:3:16"},"nodeType":"YulFunctionCall","src":"21609:18:16"},{"kind":"number","nodeType":"YulLiteral","src":"21629:3:16","type":"","value":"160"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21602:6:16"},"nodeType":"YulFunctionCall","src":"21602:31:16"},"nodeType":"YulExpressionStatement","src":"21602:31:16"},{"nodeType":"YulVariableDeclaration","src":"21642:71:16","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"21685:6:16"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21697:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"21708:3:16","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21693:3:16"},"nodeType":"YulFunctionCall","src":"21693:19:16"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"21656:28:16"},"nodeType":"YulFunctionCall","src":"21656:57:16"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"21646:6:16","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21733:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"21744:2:16","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21729:3:16"},"nodeType":"YulFunctionCall","src":"21729:18:16"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"21753:6:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"21761:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21749:3:16"},"nodeType":"YulFunctionCall","src":"21749:22:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21722:6:16"},"nodeType":"YulFunctionCall","src":"21722:50:16"},"nodeType":"YulExpressionStatement","src":"21722:50:16"},{"nodeType":"YulVariableDeclaration","src":"21781:58:16","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"21824:6:16"},{"name":"tail_1","nodeType":"YulIdentifier","src":"21832:6:16"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"21795:28:16"},"nodeType":"YulFunctionCall","src":"21795:44:16"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"21785:6:16","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21859:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"21870:3:16","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21855:3:16"},"nodeType":"YulFunctionCall","src":"21855:19:16"},{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"21880:6:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"21888:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21876:3:16"},"nodeType":"YulFunctionCall","src":"21876:22:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21848:6:16"},"nodeType":"YulFunctionCall","src":"21848:51:16"},"nodeType":"YulExpressionStatement","src":"21848:51:16"},{"nodeType":"YulAssignment","src":"21908:41:16","value":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"21934:6:16"},{"name":"tail_2","nodeType":"YulIdentifier","src":"21942:6:16"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"21916:17:16"},"nodeType":"YulFunctionCall","src":"21916:33:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21908:4:16"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21396:9:16","type":""},{"name":"value4","nodeType":"YulTypedName","src":"21407:6:16","type":""},{"name":"value3","nodeType":"YulTypedName","src":"21415:6:16","type":""},{"name":"value2","nodeType":"YulTypedName","src":"21423:6:16","type":""},{"name":"value1","nodeType":"YulTypedName","src":"21431:6:16","type":""},{"name":"value0","nodeType":"YulTypedName","src":"21439:6:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21450:4:16","type":""}],"src":"21128:827:16"},{"body":{"nodeType":"YulBlock","src":"22040:169:16","statements":[{"body":{"nodeType":"YulBlock","src":"22086:16:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22095:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"22098:1:16","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"22088:6:16"},"nodeType":"YulFunctionCall","src":"22088:12:16"},"nodeType":"YulExpressionStatement","src":"22088:12:16"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"22061:7:16"},{"name":"headStart","nodeType":"YulIdentifier","src":"22070:9:16"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22057:3:16"},"nodeType":"YulFunctionCall","src":"22057:23:16"},{"kind":"number","nodeType":"YulLiteral","src":"22082:2:16","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"22053:3:16"},"nodeType":"YulFunctionCall","src":"22053:32:16"},"nodeType":"YulIf","src":"22050:52:16"},{"nodeType":"YulVariableDeclaration","src":"22111:29:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22130:9:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"22124:5:16"},"nodeType":"YulFunctionCall","src":"22124:16:16"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"22115:5:16","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22173:5:16"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"22149:23:16"},"nodeType":"YulFunctionCall","src":"22149:30:16"},"nodeType":"YulExpressionStatement","src":"22149:30:16"},{"nodeType":"YulAssignment","src":"22188:15:16","value":{"name":"value","nodeType":"YulIdentifier","src":"22198:5:16"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"22188:6:16"}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22006:9:16","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"22017:7:16","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"22029:6:16","type":""}],"src":"21960:249:16"},{"body":{"nodeType":"YulBlock","src":"22257:136:16","statements":[{"body":{"nodeType":"YulBlock","src":"22302:85:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22331:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"22334:1:16","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"22337:1:16","type":"","value":"4"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"22316:14:16"},"nodeType":"YulFunctionCall","src":"22316:23:16"},"nodeType":"YulExpressionStatement","src":"22316:23:16"},{"nodeType":"YulAssignment","src":"22352:25:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22363:3:16","type":"","value":"224"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22374:1:16","type":"","value":"0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"22368:5:16"},"nodeType":"YulFunctionCall","src":"22368:8:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"22359:3:16"},"nodeType":"YulFunctionCall","src":"22359:18:16"},"variableNames":[{"name":"sig","nodeType":"YulIdentifier","src":"22352:3:16"}]}]},"condition":{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"22273:14:16"},"nodeType":"YulFunctionCall","src":"22273:16:16"},{"kind":"number","nodeType":"YulLiteral","src":"22291:1:16","type":"","value":"3"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"22270:2:16"},"nodeType":"YulFunctionCall","src":"22270:23:16"},"nodeType":"YulIf","src":"22267:120:16"}]},"name":"return_data_selector","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"sig","nodeType":"YulTypedName","src":"22249:3:16","type":""}],"src":"22214:179:16"},{"body":{"nodeType":"YulBlock","src":"22445:624:16","statements":[{"body":{"nodeType":"YulBlock","src":"22485:9:16","statements":[{"nodeType":"YulLeave","src":"22487:5:16"}]},"condition":{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"22461:14:16"},"nodeType":"YulFunctionCall","src":"22461:16:16"},{"kind":"number","nodeType":"YulLiteral","src":"22479:4:16","type":"","value":"0x44"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"22458:2:16"},"nodeType":"YulFunctionCall","src":"22458:26:16"},"nodeType":"YulIf","src":"22455:39:16"},{"nodeType":"YulVariableDeclaration","src":"22503:21:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22521:2:16","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"22515:5:16"},"nodeType":"YulFunctionCall","src":"22515:9:16"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"22507:4:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"22533:16:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22547:1:16","type":"","value":"3"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"22543:3:16"},"nodeType":"YulFunctionCall","src":"22543:6:16"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"22537:2:16","type":""}]},{"expression":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"22573:4:16"},{"kind":"number","nodeType":"YulLiteral","src":"22579:1:16","type":"","value":"4"},{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"22586:14:16"},"nodeType":"YulFunctionCall","src":"22586:16:16"},{"name":"_1","nodeType":"YulIdentifier","src":"22604:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22582:3:16"},"nodeType":"YulFunctionCall","src":"22582:25:16"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"22558:14:16"},"nodeType":"YulFunctionCall","src":"22558:50:16"},"nodeType":"YulExpressionStatement","src":"22558:50:16"},{"nodeType":"YulVariableDeclaration","src":"22617:25:16","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"22637:4:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"22631:5:16"},"nodeType":"YulFunctionCall","src":"22631:11:16"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"22621:6:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"22651:26:16","value":{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"22661:14:16"},"nodeType":"YulFunctionCall","src":"22661:16:16"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"22655:2:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"22686:28:16","value":{"kind":"number","nodeType":"YulLiteral","src":"22696:18:16","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"22690:2:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"22772:9:16","statements":[{"nodeType":"YulLeave","src":"22774:5:16"}]},"condition":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"22732:6:16"},{"name":"_3","nodeType":"YulIdentifier","src":"22740:2:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"22729:2:16"},"nodeType":"YulFunctionCall","src":"22729:14:16"},{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"22752:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"22760:4:16","type":"","value":"0x24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22748:3:16"},"nodeType":"YulFunctionCall","src":"22748:17:16"},{"name":"_2","nodeType":"YulIdentifier","src":"22767:2:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"22745:2:16"},"nodeType":"YulFunctionCall","src":"22745:25:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"22726:2:16"},"nodeType":"YulFunctionCall","src":"22726:45:16"},"nodeType":"YulIf","src":"22723:58:16"},{"nodeType":"YulVariableDeclaration","src":"22790:28:16","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"22805:4:16"},{"name":"offset","nodeType":"YulIdentifier","src":"22811:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22801:3:16"},"nodeType":"YulFunctionCall","src":"22801:17:16"},"variables":[{"name":"msg","nodeType":"YulTypedName","src":"22794:3:16","type":""}]},{"nodeType":"YulVariableDeclaration","src":"22827:24:16","value":{"arguments":[{"name":"msg","nodeType":"YulIdentifier","src":"22847:3:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"22841:5:16"},"nodeType":"YulFunctionCall","src":"22841:10:16"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"22831:6:16","type":""}]},{"body":{"nodeType":"YulBlock","src":"22878:9:16","statements":[{"nodeType":"YulLeave","src":"22880:5:16"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"22866:6:16"},{"name":"_3","nodeType":"YulIdentifier","src":"22874:2:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"22863:2:16"},"nodeType":"YulFunctionCall","src":"22863:14:16"},"nodeType":"YulIf","src":"22860:27:16"},{"body":{"nodeType":"YulBlock","src":"22969:9:16","statements":[{"nodeType":"YulLeave","src":"22971:5:16"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"msg","nodeType":"YulIdentifier","src":"22910:3:16"},{"name":"length","nodeType":"YulIdentifier","src":"22915:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22906:3:16"},"nodeType":"YulFunctionCall","src":"22906:16:16"},{"kind":"number","nodeType":"YulLiteral","src":"22924:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22902:3:16"},"nodeType":"YulFunctionCall","src":"22902:27:16"},{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"22939:4:16"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"22945:14:16"},"nodeType":"YulFunctionCall","src":"22945:16:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22935:3:16"},"nodeType":"YulFunctionCall","src":"22935:27:16"},{"name":"_1","nodeType":"YulIdentifier","src":"22964:2:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22931:3:16"},"nodeType":"YulFunctionCall","src":"22931:36:16"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"22899:2:16"},"nodeType":"YulFunctionCall","src":"22899:69:16"},"nodeType":"YulIf","src":"22896:82:16"},{"expression":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"23007:4:16"},{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"23021:6:16"},{"name":"length","nodeType":"YulIdentifier","src":"23029:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23017:3:16"},"nodeType":"YulFunctionCall","src":"23017:19:16"},{"kind":"number","nodeType":"YulLiteral","src":"23038:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23013:3:16"},"nodeType":"YulFunctionCall","src":"23013:30:16"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"22987:19:16"},"nodeType":"YulFunctionCall","src":"22987:57:16"},"nodeType":"YulExpressionStatement","src":"22987:57:16"},{"nodeType":"YulAssignment","src":"23053:10:16","value":{"name":"msg","nodeType":"YulIdentifier","src":"23060:3:16"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"23053:3:16"}]}]},"name":"try_decode_error_message","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"22437:3:16","type":""}],"src":"22398:671:16"},{"body":{"nodeType":"YulBlock","src":"23248:242:16","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23265:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"23276:2:16","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23258:6:16"},"nodeType":"YulFunctionCall","src":"23258:21:16"},"nodeType":"YulExpressionStatement","src":"23258:21:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23299:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"23310:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23295:3:16"},"nodeType":"YulFunctionCall","src":"23295:18:16"},{"kind":"number","nodeType":"YulLiteral","src":"23315:2:16","type":"","value":"52"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23288:6:16"},"nodeType":"YulFunctionCall","src":"23288:30:16"},"nodeType":"YulExpressionStatement","src":"23288:30:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23338:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"23349:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23334:3:16"},"nodeType":"YulFunctionCall","src":"23334:18:16"},{"hexValue":"455243313135353a207472616e7366657220746f206e6f6e2d45524331313535","kind":"string","nodeType":"YulLiteral","src":"23354:34:16","type":"","value":"ERC1155: transfer to non-ERC1155"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23327:6:16"},"nodeType":"YulFunctionCall","src":"23327:62:16"},"nodeType":"YulExpressionStatement","src":"23327:62:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23409:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"23420:2:16","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23405:3:16"},"nodeType":"YulFunctionCall","src":"23405:18:16"},{"hexValue":"526563656976657220696d706c656d656e746572","kind":"string","nodeType":"YulLiteral","src":"23425:22:16","type":"","value":"Receiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23398:6:16"},"nodeType":"YulFunctionCall","src":"23398:50:16"},"nodeType":"YulExpressionStatement","src":"23398:50:16"},{"nodeType":"YulAssignment","src":"23457:27:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23469:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"23480:3:16","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23465:3:16"},"nodeType":"YulFunctionCall","src":"23465:19:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23457:4:16"}]}]},"name":"abi_encode_tuple_t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23225:9:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23239:4:16","type":""}],"src":"23074:416:16"},{"body":{"nodeType":"YulBlock","src":"23669:230:16","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23686:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"23697:2:16","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23679:6:16"},"nodeType":"YulFunctionCall","src":"23679:21:16"},"nodeType":"YulExpressionStatement","src":"23679:21:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23720:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"23731:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23716:3:16"},"nodeType":"YulFunctionCall","src":"23716:18:16"},{"kind":"number","nodeType":"YulLiteral","src":"23736:2:16","type":"","value":"40"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23709:6:16"},"nodeType":"YulFunctionCall","src":"23709:30:16"},"nodeType":"YulExpressionStatement","src":"23709:30:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23759:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"23770:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23755:3:16"},"nodeType":"YulFunctionCall","src":"23755:18:16"},{"hexValue":"455243313135353a204552433131353552656365697665722072656a65637465","kind":"string","nodeType":"YulLiteral","src":"23775:34:16","type":"","value":"ERC1155: ERC1155Receiver rejecte"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23748:6:16"},"nodeType":"YulFunctionCall","src":"23748:62:16"},"nodeType":"YulExpressionStatement","src":"23748:62:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23830:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"23841:2:16","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23826:3:16"},"nodeType":"YulFunctionCall","src":"23826:18:16"},{"hexValue":"6420746f6b656e73","kind":"string","nodeType":"YulLiteral","src":"23846:10:16","type":"","value":"d tokens"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23819:6:16"},"nodeType":"YulFunctionCall","src":"23819:38:16"},"nodeType":"YulExpressionStatement","src":"23819:38:16"},{"nodeType":"YulAssignment","src":"23866:27:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23878:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"23889:3:16","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23874:3:16"},"nodeType":"YulFunctionCall","src":"23874:19:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23866:4:16"}]}]},"name":"abi_encode_tuple_t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23646:9:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23660:4:16","type":""}],"src":"23495:404:16"},{"body":{"nodeType":"YulBlock","src":"24293:423:16","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24310:3:16"},{"hexValue":"416363657373436f6e74726f6c3a206163636f756e7420","kind":"string","nodeType":"YulLiteral","src":"24315:25:16","type":"","value":"AccessControl: account "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24303:6:16"},"nodeType":"YulFunctionCall","src":"24303:38:16"},"nodeType":"YulExpressionStatement","src":"24303:38:16"},{"nodeType":"YulVariableDeclaration","src":"24350:27:16","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"24370:6:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"24364:5:16"},"nodeType":"YulFunctionCall","src":"24364:13:16"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"24354:6:16","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"24425:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"24433:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24421:3:16"},"nodeType":"YulFunctionCall","src":"24421:17:16"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24444:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"24449:2:16","type":"","value":"23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24440:3:16"},"nodeType":"YulFunctionCall","src":"24440:12:16"},{"name":"length","nodeType":"YulIdentifier","src":"24454:6:16"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"24386:34:16"},"nodeType":"YulFunctionCall","src":"24386:75:16"},"nodeType":"YulExpressionStatement","src":"24386:75:16"},{"nodeType":"YulVariableDeclaration","src":"24470:26:16","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24484:3:16"},{"name":"length","nodeType":"YulIdentifier","src":"24489:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24480:3:16"},"nodeType":"YulFunctionCall","src":"24480:16:16"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"24474:2:16","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"24516:2:16"},{"kind":"number","nodeType":"YulLiteral","src":"24520:2:16","type":"","value":"23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24512:3:16"},"nodeType":"YulFunctionCall","src":"24512:11:16"},{"hexValue":"206973206d697373696e6720726f6c6520","kind":"string","nodeType":"YulLiteral","src":"24525:19:16","type":"","value":" is missing role "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24505:6:16"},"nodeType":"YulFunctionCall","src":"24505:40:16"},"nodeType":"YulExpressionStatement","src":"24505:40:16"},{"nodeType":"YulVariableDeclaration","src":"24554:29:16","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"24576:6:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"24570:5:16"},"nodeType":"YulFunctionCall","src":"24570:13:16"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"24558:8:16","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"24631:6:16"},{"kind":"number","nodeType":"YulLiteral","src":"24639:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24627:3:16"},"nodeType":"YulFunctionCall","src":"24627:17:16"},{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"24650:2:16"},{"kind":"number","nodeType":"YulLiteral","src":"24654:2:16","type":"","value":"40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24646:3:16"},"nodeType":"YulFunctionCall","src":"24646:11:16"},{"name":"length_1","nodeType":"YulIdentifier","src":"24659:8:16"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"24592:34:16"},"nodeType":"YulFunctionCall","src":"24592:76:16"},"nodeType":"YulExpressionStatement","src":"24592:76:16"},{"nodeType":"YulAssignment","src":"24677:33:16","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"24692:2:16"},{"name":"length_1","nodeType":"YulIdentifier","src":"24696:8:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24688:3:16"},"nodeType":"YulFunctionCall","src":"24688:17:16"},{"kind":"number","nodeType":"YulLiteral","src":"24707:2:16","type":"","value":"40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24684:3:16"},"nodeType":"YulFunctionCall","src":"24684:26:16"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"24677:3:16"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"24261:3:16","type":""},{"name":"value1","nodeType":"YulTypedName","src":"24266:6:16","type":""},{"name":"value0","nodeType":"YulTypedName","src":"24274:6:16","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"24285:3:16","type":""}],"src":"23904:812:16"},{"body":{"nodeType":"YulBlock","src":"24952:330:16","statements":[{"nodeType":"YulVariableDeclaration","src":"24962:29:16","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24980:3:16","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"24985:1:16","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"24976:3:16"},"nodeType":"YulFunctionCall","src":"24976:11:16"},{"kind":"number","nodeType":"YulLiteral","src":"24989:1:16","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"24972:3:16"},"nodeType":"YulFunctionCall","src":"24972:19:16"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"24966:2:16","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25007:9:16"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"25022:6:16"},{"name":"_1","nodeType":"YulIdentifier","src":"25030:2:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"25018:3:16"},"nodeType":"YulFunctionCall","src":"25018:15:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25000:6:16"},"nodeType":"YulFunctionCall","src":"25000:34:16"},"nodeType":"YulExpressionStatement","src":"25000:34:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25054:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"25065:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25050:3:16"},"nodeType":"YulFunctionCall","src":"25050:18:16"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"25074:6:16"},{"name":"_1","nodeType":"YulIdentifier","src":"25082:2:16"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"25070:3:16"},"nodeType":"YulFunctionCall","src":"25070:15:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25043:6:16"},"nodeType":"YulFunctionCall","src":"25043:43:16"},"nodeType":"YulExpressionStatement","src":"25043:43:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25106:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"25117:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25102:3:16"},"nodeType":"YulFunctionCall","src":"25102:18:16"},{"name":"value2","nodeType":"YulIdentifier","src":"25122:6:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25095:6:16"},"nodeType":"YulFunctionCall","src":"25095:34:16"},"nodeType":"YulExpressionStatement","src":"25095:34:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25149:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"25160:2:16","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25145:3:16"},"nodeType":"YulFunctionCall","src":"25145:18:16"},{"name":"value3","nodeType":"YulIdentifier","src":"25165:6:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25138:6:16"},"nodeType":"YulFunctionCall","src":"25138:34:16"},"nodeType":"YulExpressionStatement","src":"25138:34:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25192:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"25203:3:16","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25188:3:16"},"nodeType":"YulFunctionCall","src":"25188:19:16"},{"kind":"number","nodeType":"YulLiteral","src":"25209:3:16","type":"","value":"160"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25181:6:16"},"nodeType":"YulFunctionCall","src":"25181:32:16"},"nodeType":"YulExpressionStatement","src":"25181:32:16"},{"nodeType":"YulAssignment","src":"25222:54:16","value":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"25248:6:16"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25260:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"25271:3:16","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25256:3:16"},"nodeType":"YulFunctionCall","src":"25256:19:16"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"25230:17:16"},"nodeType":"YulFunctionCall","src":"25230:46:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25222:4:16"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24889:9:16","type":""},{"name":"value4","nodeType":"YulTypedName","src":"24900:6:16","type":""},{"name":"value3","nodeType":"YulTypedName","src":"24908:6:16","type":""},{"name":"value2","nodeType":"YulTypedName","src":"24916:6:16","type":""},{"name":"value1","nodeType":"YulTypedName","src":"24924:6:16","type":""},{"name":"value0","nodeType":"YulTypedName","src":"24932:6:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"24943:4:16","type":""}],"src":"24721:561:16"},{"body":{"nodeType":"YulBlock","src":"25339:116:16","statements":[{"nodeType":"YulAssignment","src":"25349:20:16","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"25364:1:16"},{"name":"y","nodeType":"YulIdentifier","src":"25367:1:16"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"25360:3:16"},"nodeType":"YulFunctionCall","src":"25360:9:16"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"25349:7:16"}]},{"body":{"nodeType":"YulBlock","src":"25427:22:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"25429:16:16"},"nodeType":"YulFunctionCall","src":"25429:18:16"},"nodeType":"YulExpressionStatement","src":"25429:18:16"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"25398:1:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"25391:6:16"},"nodeType":"YulFunctionCall","src":"25391:9:16"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"25405:1:16"},{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"25412:7:16"},{"name":"x","nodeType":"YulIdentifier","src":"25421:1:16"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"25408:3:16"},"nodeType":"YulFunctionCall","src":"25408:15:16"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"25402:2:16"},"nodeType":"YulFunctionCall","src":"25402:22:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"25388:2:16"},"nodeType":"YulFunctionCall","src":"25388:37:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"25381:6:16"},"nodeType":"YulFunctionCall","src":"25381:45:16"},"nodeType":"YulIf","src":"25378:71:16"}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"25318:1:16","type":""},{"name":"y","nodeType":"YulTypedName","src":"25321:1:16","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"25327:7:16","type":""}],"src":"25287:168:16"},{"body":{"nodeType":"YulBlock","src":"25507:89:16","statements":[{"body":{"nodeType":"YulBlock","src":"25534:22:16","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"25536:16:16"},"nodeType":"YulFunctionCall","src":"25536:18:16"},"nodeType":"YulExpressionStatement","src":"25536:18:16"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25527:5:16"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"25520:6:16"},"nodeType":"YulFunctionCall","src":"25520:13:16"},"nodeType":"YulIf","src":"25517:39:16"},{"nodeType":"YulAssignment","src":"25565:25:16","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25576:5:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25587:1:16","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"25583:3:16"},"nodeType":"YulFunctionCall","src":"25583:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25572:3:16"},"nodeType":"YulFunctionCall","src":"25572:18:16"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"25565:3:16"}]}]},"name":"decrement_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"25489:5:16","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"25499:3:16","type":""}],"src":"25460:136:16"},{"body":{"nodeType":"YulBlock","src":"25775:182:16","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25792:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"25803:2:16","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25785:6:16"},"nodeType":"YulFunctionCall","src":"25785:21:16"},"nodeType":"YulExpressionStatement","src":"25785:21:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25826:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"25837:2:16","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25822:3:16"},"nodeType":"YulFunctionCall","src":"25822:18:16"},{"kind":"number","nodeType":"YulLiteral","src":"25842:2:16","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25815:6:16"},"nodeType":"YulFunctionCall","src":"25815:30:16"},"nodeType":"YulExpressionStatement","src":"25815:30:16"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25865:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"25876:2:16","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25861:3:16"},"nodeType":"YulFunctionCall","src":"25861:18:16"},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","kind":"string","nodeType":"YulLiteral","src":"25881:34:16","type":"","value":"Strings: hex length insufficient"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25854:6:16"},"nodeType":"YulFunctionCall","src":"25854:62:16"},"nodeType":"YulExpressionStatement","src":"25854:62:16"},{"nodeType":"YulAssignment","src":"25925:26:16","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25937:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"25948:2:16","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25933:3:16"},"nodeType":"YulFunctionCall","src":"25933:18:16"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25925:4:16"}]}]},"name":"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25752:9:16","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25766:4:16","type":""}],"src":"25601:356:16"}]},"contents":"{\n    { }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_array_bytes32_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_bytes32_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function finalize_allocation(memPtr, size)\n    {\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_array_uint256_dyn(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(shl(5, length), 0x20)\n    }\n    function abi_decode_array_uint256_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let _3 := array_allocation_size_array_uint256_dyn(_1)\n        let memPtr := mload(64)\n        finalize_allocation(memPtr, _3)\n        let dst := memPtr\n        mstore(memPtr, _1)\n        dst := add(memPtr, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _2)\n        }\n        array := memPtr\n    }\n    function abi_decode_bytes(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        if gt(_1, 0xffffffffffffffff) { panic_error_0x41() }\n        let memPtr := mload(64)\n        finalize_allocation(memPtr, add(and(add(_1, 0x1f), not(31)), 0x20))\n        mstore(memPtr, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(memPtr, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(memPtr, _1), 0x20), 0)\n        array := memPtr\n    }\n    function abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        let offset := calldataload(add(headStart, 64))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value2 := abi_decode_array_uint256_dyn(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 96))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value3 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n        let offset_2 := calldataload(add(headStart, 128))\n        if gt(offset_2, _1) { revert(0, 0) }\n        value4 := abi_decode_bytes(add(headStart, offset_2), dataEnd)\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n    }\n    function abi_decode_tuple_t_bytes_calldata_ptrt_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, length), 0x20), dataEnd) { revert(0, 0) }\n        value0 := add(_2, 0x20)\n        value1 := length\n        value2 := calldataload(add(headStart, 0x20))\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        let _4 := 0x20\n        let _5 := array_allocation_size_array_uint256_dyn(_3)\n        let memPtr := mload(64)\n        finalize_allocation(memPtr, _5)\n        let dst := memPtr\n        mstore(memPtr, _3)\n        dst := add(memPtr, _4)\n        let srcEnd := add(add(_2, shl(5, _3)), _4)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_2, _4)\n        for { } lt(src, srcEnd) { src := add(src, _4) }\n        {\n            let value := calldataload(src)\n            validator_revert_address(value)\n            mstore(dst, value)\n            dst := add(dst, _4)\n        }\n        value0 := memPtr\n        let offset_1 := calldataload(add(headStart, _4))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n    }\n    function abi_encode_array_uint256_dyn(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let _1 := 0x20\n        pos := add(pos, _1)\n        let srcPtr := add(value, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        end := pos\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_array_uint256_dyn(value0, add(headStart, 32))\n    }\n    function validator_revert_bool(value)\n    {\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_bool(value_1)\n        value1 := value_1\n    }\n    function abi_encode_tuple_t_contract$_IExecutorManager_$3894__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_uint256t_bytes_memory_ptrt_array$_t_bytes32_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value1 := abi_decode_bytes(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 64))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_bytes32_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let offset := calldataload(add(headStart, 128))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value4 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"ERC1155: address zero is not a v\")\n        mstore(add(headStart, 96), \"alid owner\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_address__to_t_address__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, and(shl(96, value0), not(0xffffffffffffffffffffffff)))\n        end := add(pos, 20)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"ERC1155: caller is not token own\")\n        mstore(add(headStart, 96), \"er or approved\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 47)\n        mstore(add(headStart, 64), \"AccessControl: can only renounce\")\n        mstore(add(headStart, 96), \" roles for self\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bool(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_691e84db20482a4c42ba7a4aa341855d8289774d9698451740209f85cbb09b0a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"Caller is not an authorized exec\")\n        mstore(add(headStart, 96), \"utor\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function calldata_array_index_range_access_t_bytes_calldata_ptr(offset, length, startIndex, endIndex) -> offsetOut, lengthOut\n    {\n        if gt(startIndex, endIndex) { revert(0, 0) }\n        if gt(endIndex, length) { revert(0, 0) }\n        offsetOut := add(offset, startIndex)\n        lengthOut := sub(endIndex, startIndex)\n    }\n    function abi_decode_tuple_t_address_payablet_address_payablet_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n    }\n    function abi_encode_tuple_t_stringliteral_acc775314033618014c4c79559957baf417931f6e8d18e4684d327a6a76d2e7e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"Seller does not have enough toke\")\n        mstore(add(headStart, 96), \"ns\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        calldatacopy(pos, value0, value1)\n        let _1 := add(pos, value1)\n        mstore(_1, 0)\n        end := _1\n    }\n    function abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC1155: accounts and ids length\")\n        mstore(add(headStart, 96), \" mismatch\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_c05b6e35da5e61f1d7b3ef7e615ddf60dfc35de37aba5dd75608f23dd6e104fb__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"Token is currently locked for mi\")\n        mstore(add(headStart, 96), \"nting\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_60304f7258d86aaa1cc1138fb2f6bbc524adfb91bc7985c5cde7fccc8aa6045a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"Caller is not whitelisted\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 40)\n        mstore(add(headStart, 64), \"ERC1155: ids and amounts length \")\n        mstore(add(headStart, 96), \"mismatch\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC1155: transfer to the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"ERC1155: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r transfer\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        let tail_1 := abi_encode_array_uint256_dyn(value0, add(headStart, 64))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        tail := abi_encode_array_uint256_dyn(value1, tail_1)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC1155: setting approval status\")\n        mstore(add(headStart, 96), \" for self\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC1155: mint to the zero addres\")\n        mstore(add(headStart, 96), \"s\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), 160)\n        let tail_1 := abi_encode_array_uint256_dyn(value2, add(headStart, 160))\n        mstore(add(headStart, 96), sub(tail_1, headStart))\n        let tail_2 := abi_encode_array_uint256_dyn(value3, tail_1)\n        mstore(add(headStart, 128), sub(tail_2, headStart))\n        tail := abi_encode_string(value4, tail_2)\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function return_data_selector() -> sig\n    {\n        if gt(returndatasize(), 3)\n        {\n            returndatacopy(0, 0, 4)\n            sig := shr(224, mload(0))\n        }\n    }\n    function try_decode_error_message() -> ret\n    {\n        if lt(returndatasize(), 0x44) { leave }\n        let data := mload(64)\n        let _1 := not(3)\n        returndatacopy(data, 4, add(returndatasize(), _1))\n        let offset := mload(data)\n        let _2 := returndatasize()\n        let _3 := 0xffffffffffffffff\n        if or(gt(offset, _3), gt(add(offset, 0x24), _2)) { leave }\n        let msg := add(data, offset)\n        let length := mload(msg)\n        if gt(length, _3) { leave }\n        if gt(add(add(msg, length), 0x20), add(add(data, returndatasize()), _1)) { leave }\n        finalize_allocation(data, add(add(offset, length), 0x20))\n        ret := msg\n    }\n    function abi_encode_tuple_t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 52)\n        mstore(add(headStart, 64), \"ERC1155: transfer to non-ERC1155\")\n        mstore(add(headStart, 96), \"Receiver implementer\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 40)\n        mstore(add(headStart, 64), \"ERC1155: ERC1155Receiver rejecte\")\n        mstore(add(headStart, 96), \"d tokens\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, \"AccessControl: account \")\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), add(pos, 23), length)\n        let _1 := add(pos, length)\n        mstore(add(_1, 23), \" is missing role \")\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), add(_1, 40), length_1)\n        end := add(add(_1, length_1), 40)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), 160)\n        tail := abi_encode_string(value4, add(headStart, 160))\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function decrement_t_uint256(value) -> ret\n    {\n        if iszero(value) { panic_error_0x11() }\n        ret := add(value, not(0))\n    }\n    function abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Strings: hex length insufficient\")\n        tail := add(headStart, 96)\n    }\n}","id":16,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x14C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x3E352E62 GT PUSH2 0xC3 JUMPI DUP1 PUSH4 0xC0883B92 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xC0883B92 EQ PUSH2 0x2F2 JUMPI DUP1 PUSH4 0xC3AE2B78 EQ PUSH2 0x31D JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x330 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x343 JUMPI DUP1 PUSH4 0xEF0D4572 EQ PUSH2 0x37F JUMPI DUP1 PUSH4 0xF242432A EQ PUSH2 0x392 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3E352E62 EQ PUSH2 0x27E JUMPI DUP1 PUSH4 0x4E1273F4 EQ PUSH2 0x291 JUMPI DUP1 PUSH4 0x7CB64759 EQ PUSH2 0x2B1 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x2C4 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x2D7 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x2DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x248A9CA3 GT PUSH2 0x115 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x1F4 JUMPI DUP1 PUSH4 0x2EB2C2D6 EQ PUSH2 0x217 JUMPI DUP1 PUSH4 0x2EB4A7AB EQ PUSH2 0x22C JUMPI DUP1 PUSH4 0x2ECC6160 EQ PUSH2 0x235 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x258 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x26B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0xFDD58E EQ PUSH2 0x151 JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x177 JUMPI DUP1 PUSH4 0x69824FB EQ PUSH2 0x19A JUMPI DUP1 PUSH4 0x7BD0265 EQ PUSH2 0x1AD JUMPI DUP1 PUSH4 0xE89341C EQ PUSH2 0x1D4 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x164 PUSH2 0x15F CALLDATASIZE PUSH1 0x4 PUSH2 0x16F3 JUMP JUMPDEST PUSH2 0x3A5 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x18A PUSH2 0x185 CALLDATASIZE PUSH1 0x4 PUSH2 0x1735 JUMP JUMPDEST PUSH2 0x43E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x16E JUMP JUMPDEST PUSH2 0x18A PUSH2 0x1A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x179D JUMP JUMPDEST PUSH2 0x458 JUMP JUMPDEST PUSH2 0x164 PUSH32 0xD8AA0F3194971A2A116679F7C2090F6939C8D4E01A2A8D7E41D55E5351469E63 DUP2 JUMP JUMPDEST PUSH2 0x1E7 PUSH2 0x1E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x17DE JUMP JUMPDEST PUSH2 0x4DC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x16E SWAP2 SWAP1 PUSH2 0x1847 JUMP JUMPDEST PUSH2 0x164 PUSH2 0x202 CALLDATASIZE PUSH1 0x4 PUSH2 0x17DE JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x22A PUSH2 0x225 CALLDATASIZE PUSH1 0x4 PUSH2 0x19A3 JUMP JUMPDEST PUSH2 0x570 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x164 PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x18A PUSH2 0x243 CALLDATASIZE PUSH1 0x4 PUSH2 0x17DE JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x22A PUSH2 0x266 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A50 JUMP JUMPDEST PUSH2 0x5BC JUMP JUMPDEST PUSH2 0x22A PUSH2 0x279 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A50 JUMP JUMPDEST PUSH2 0x5E6 JUMP JUMPDEST PUSH2 0x22A PUSH2 0x28C CALLDATASIZE PUSH1 0x4 PUSH2 0x1A80 JUMP JUMPDEST PUSH2 0x664 JUMP JUMPDEST PUSH2 0x2A4 PUSH2 0x29F CALLDATASIZE PUSH1 0x4 PUSH2 0x1AF7 JUMP JUMPDEST PUSH2 0x85D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x16E SWAP2 SWAP1 PUSH2 0x1BFE JUMP JUMPDEST PUSH2 0x22A PUSH2 0x2BF CALLDATASIZE PUSH1 0x4 PUSH2 0x17DE JUMP JUMPDEST PUSH2 0x986 JUMP JUMPDEST PUSH2 0x18A PUSH2 0x2D2 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A50 JUMP JUMPDEST PUSH2 0x997 JUMP JUMPDEST PUSH2 0x164 PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH2 0x22A PUSH2 0x2ED CALLDATASIZE PUSH1 0x4 PUSH2 0x1C1F JUMP JUMPDEST PUSH2 0x9C2 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH2 0x305 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x16E JUMP JUMPDEST PUSH2 0x22A PUSH2 0x32B CALLDATASIZE PUSH1 0x4 PUSH2 0x1C4D JUMP JUMPDEST PUSH2 0x9CD JUMP JUMPDEST PUSH2 0x22A PUSH2 0x33E CALLDATASIZE PUSH1 0x4 PUSH2 0x1A50 JUMP JUMPDEST PUSH2 0xAE8 JUMP JUMPDEST PUSH2 0x18A PUSH2 0x351 CALLDATASIZE PUSH1 0x4 PUSH2 0x1CBC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x22A PUSH2 0x38D CALLDATASIZE PUSH1 0x4 PUSH2 0x1CEA JUMP JUMPDEST PUSH2 0xB0D JUMP JUMPDEST PUSH2 0x22A PUSH2 0x3A0 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D07 JUMP JUMPDEST PUSH2 0xB3B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x415 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2061646472657373207A65726F206973206E6F7420612076 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x30B634B21037BBB732B9 PUSH1 0xB1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x449 DUP3 PUSH2 0xB80 JUMP JUMPDEST DUP1 PUSH2 0x438 JUMPI POP PUSH2 0x438 DUP3 PUSH2 0xBD0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT CALLER PUSH1 0x60 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x34 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0x4D4 DUP5 DUP5 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP PUSH1 0x4 SLOAD SWAP2 POP DUP5 SWAP1 POP PUSH2 0xBF5 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x4EB SWAP1 PUSH2 0x1D6F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x517 SWAP1 PUSH2 0x1D6F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x564 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x539 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x564 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x547 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER EQ DUP1 PUSH2 0x58C JUMPI POP PUSH2 0x58C DUP6 CALLER PUSH2 0x351 JUMP JUMPDEST PUSH2 0x5A8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x40C SWAP1 PUSH2 0x1DA9 JUMP JUMPDEST PUSH2 0x5B5 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0xC0B JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x5D7 DUP2 PUSH2 0xDE8 JUMP JUMPDEST PUSH2 0x5E1 DUP4 DUP4 PUSH2 0xDF5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x656 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x103937B632B9903337B91039B2B633 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x40C JUMP JUMPDEST PUSH2 0x660 DUP3 DUP3 PUSH2 0xE7B JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x40 MLOAD PUSH4 0xDEBFDA3 PUSH1 0xE4 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xDEBFDA30 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6AC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6D0 SWAP2 SWAP1 PUSH2 0x1DF7 JUMP JUMPDEST PUSH2 0x728 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x43616C6C6572206973206E6F7420616E20617574686F72697A65642065786563 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x3ABA37B9 PUSH1 0xE1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x40C JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x800 JUMPI PUSH1 0x0 DUP1 DUP1 DUP1 DUP8 DUP6 DUP9 PUSH2 0x746 DUP3 PUSH1 0x68 PUSH2 0x1E2A JUMP JUMPDEST SWAP3 PUSH2 0x753 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1E3D JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x760 SWAP2 SWAP1 PUSH2 0x1E67 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP1 PUSH2 0x773 DUP5 DUP5 PUSH2 0x3A5 JUMP JUMPDEST LT ISZERO PUSH2 0x7CC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53656C6C657220646F6573206E6F74206861766520656E6F75676820746F6B65 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6E73 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x40C JUMP JUMPDEST PUSH2 0x7E8 DUP4 DUP6 DUP5 DUP5 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xEE2 JUMP JUMPDEST POP POP POP POP PUSH1 0x68 DUP2 PUSH2 0x7F9 SWAP2 SWAP1 PUSH2 0x1E2A JUMP JUMPDEST SWAP1 POP PUSH2 0x72B JUMP JUMPDEST POP PUSH1 0x0 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x813 SWAP3 SWAP2 SWAP1 PUSH2 0x1EAD JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 SWAP1 SUB DUP3 KECCAK256 DUP1 DUP4 MSTORE TIMESTAMP PUSH1 0x20 DUP5 ADD MSTORE SWAP3 POP DUP4 SWAP2 CALLER SWAP2 PUSH32 0x78202E946262627C432F6C5B92FEE2A7224C9AABDB3C71F747FCCBAD2FB470A4 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x8C2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A206163636F756E747320616E6420696473206C656E677468 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x40DAD2E6DAC2E8C6D PUSH1 0xBB SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x40C JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8DD JUMPI PUSH2 0x8DD PUSH2 0x185A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x906 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x97E JUMPI PUSH2 0x951 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x92A JUMPI PUSH2 0x92A PUSH2 0x1EBD JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x944 JUMPI PUSH2 0x944 PUSH2 0x1EBD JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x3A5 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x963 JUMPI PUSH2 0x963 PUSH2 0x1EBD JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH2 0x977 DUP2 PUSH2 0x1ED3 JUMP JUMPDEST SWAP1 POP PUSH2 0x90C JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x991 DUP2 PUSH2 0xDE8 JUMP JUMPDEST POP PUSH1 0x4 SSTORE JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x660 CALLER DUP4 DUP4 PUSH2 0x100C JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xA3D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546F6B656E2069732063757272656E746C79206C6F636B656420666F72206D69 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6E74696E67 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x40C JUMP JUMPDEST PUSH2 0xA47 DUP4 DUP4 PUSH2 0x458 JUMP JUMPDEST PUSH2 0xA93 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616C6C6572206973206E6F742077686974656C697374656400000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x40C JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0xAB8 CALLER DUP3 DUP8 DUP8 PUSH2 0x10EC JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0x6 DUP1 SLOAD SWAP2 PUSH2 0xADC DUP4 PUSH2 0x1ED3 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xB03 DUP2 PUSH2 0xDE8 JUMP JUMPDEST PUSH2 0x5E1 DUP4 DUP4 PUSH2 0xE7B JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB18 DUP2 PUSH2 0xDE8 JUMP JUMPDEST POP PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER EQ DUP1 PUSH2 0xB57 JUMPI POP PUSH2 0xB57 DUP6 CALLER PUSH2 0x351 JUMP JUMPDEST PUSH2 0xB73 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x40C SWAP1 PUSH2 0x1DA9 JUMP JUMPDEST PUSH2 0x5B5 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0xEE2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x6CDB3D13 PUSH1 0xE1 SHL EQ DUP1 PUSH2 0xBB1 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x3A24D07 PUSH1 0xE2 SHL EQ JUMPDEST DUP1 PUSH2 0x438 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x438 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x438 JUMPI POP PUSH2 0x438 DUP3 PUSH2 0xB80 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xC02 DUP6 DUP5 PUSH2 0x1200 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0xC6D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2069647320616E6420616D6F756E7473206C656E67746820 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0xDAD2E6DAC2E8C6D PUSH1 0xC3 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x40C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0xC93 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x40C SWAP1 PUSH2 0x1EEC JUMP JUMPDEST CALLER PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xD7A JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xCB4 JUMPI PUSH2 0xCB4 PUSH2 0x1EBD JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xCD2 JUMPI PUSH2 0xCD2 PUSH2 0x1EBD JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x0 DUP5 DUP2 MSTORE DUP1 DUP4 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 AND DUP4 MSTORE SWAP1 SWAP4 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP2 DUP2 LT ISZERO PUSH2 0xD22 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x40C SWAP1 PUSH2 0x1F31 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP1 DUP12 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0xD5F SWAP1 DUP5 SWAP1 PUSH2 0x1E2A JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP POP POP DUP1 PUSH2 0xD73 SWAP1 PUSH2 0x1ED3 JUMP JUMPDEST SWAP1 POP PUSH2 0xC97 JUMP JUMPDEST POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0xDCA SWAP3 SWAP2 SWAP1 PUSH2 0x1F7B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xDE0 DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x1245 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xDF2 DUP2 CALLER PUSH2 0x13A0 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xDFF DUP3 DUP3 PUSH2 0x997 JUMP JUMPDEST PUSH2 0x660 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0xE37 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0xE85 DUP3 DUP3 PUSH2 0x997 JUMP JUMPDEST ISZERO PUSH2 0x660 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0xF08 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x40C SWAP1 PUSH2 0x1EEC JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0xF14 DUP6 PUSH2 0x13F9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xF21 DUP6 PUSH2 0x13F9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP6 DUP2 LT ISZERO PUSH2 0xF64 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x40C SWAP1 PUSH2 0x1F31 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP10 DUP6 SUB SWAP1 SSTORE SWAP1 DUP11 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP9 SWAP3 SWAP1 PUSH2 0xFA1 SWAP1 DUP5 SWAP1 PUSH2 0x1E2A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP9 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP12 AND SWAP3 DUP13 DUP3 AND SWAP3 SWAP2 DUP9 AND SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x1001 DUP5 DUP11 DUP11 DUP11 DUP11 DUP11 PUSH2 0x1444 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x107F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2073657474696E6720617070726F76616C20737461747573 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x103337B91039B2B633 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x40C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x114C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A206D696E7420746F20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x40C JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0x1158 DUP6 PUSH2 0x13F9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1165 DUP6 PUSH2 0x13F9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP8 SWAP3 SWAP1 PUSH2 0x1197 SWAP1 DUP5 SWAP1 PUSH2 0x1E2A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP11 AND SWAP3 PUSH1 0x0 SWAP3 SWAP2 DUP8 AND SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x11F7 DUP4 PUSH1 0x0 DUP10 DUP10 DUP10 DUP10 PUSH2 0x1444 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x97E JUMPI PUSH2 0x1231 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1224 JUMPI PUSH2 0x1224 PUSH2 0x1EBD JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x14FF JUMP JUMPDEST SWAP2 POP DUP1 PUSH2 0x123D DUP2 PUSH2 0x1ED3 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1205 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0xDE0 JUMPI PUSH1 0x40 MLOAD PUSH4 0xBC197C81 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xBC197C81 SWAP1 PUSH2 0x1289 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1FA9 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x12C4 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x12C1 SWAP2 DUP2 ADD SWAP1 PUSH2 0x2007 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1370 JUMPI PUSH2 0x12D0 PUSH2 0x2024 JUMP JUMPDEST DUP1 PUSH4 0x8C379A0 SUB PUSH2 0x1309 JUMPI POP PUSH2 0x12E4 PUSH2 0x2040 JUMP JUMPDEST DUP1 PUSH2 0x12EF JUMPI POP PUSH2 0x130B JUMP JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x40C SWAP2 SWAP1 PUSH2 0x1847 JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x34 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F206E6F6E2D45524331313535 PUSH1 0x44 DUP3 ADD MSTORE PUSH20 0x2932B1B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x61 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x40C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xBC197C81 PUSH1 0xE0 SHL EQ PUSH2 0x11F7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x40C SWAP1 PUSH2 0x20C9 JUMP JUMPDEST PUSH2 0x13AA DUP3 DUP3 PUSH2 0x997 JUMP JUMPDEST PUSH2 0x660 JUMPI PUSH2 0x13B7 DUP2 PUSH2 0x1531 JUMP JUMPDEST PUSH2 0x13C2 DUP4 PUSH1 0x20 PUSH2 0x1543 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x13D3 SWAP3 SWAP2 SWAP1 PUSH2 0x2111 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH2 0x40C SWAP2 PUSH1 0x4 ADD PUSH2 0x1847 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP3 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1433 JUMPI PUSH2 0x1433 PUSH2 0x1EBD JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0xDE0 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF23A6E61 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xF23A6E61 SWAP1 PUSH2 0x1488 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x2186 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x14C3 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x14C0 SWAP2 DUP2 ADD SWAP1 PUSH2 0x2007 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x14CF JUMPI PUSH2 0x12D0 PUSH2 0x2024 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xF23A6E61 PUSH1 0xE0 SHL EQ PUSH2 0x11F7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x40C SWAP1 PUSH2 0x20C9 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x151B JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x152A JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x438 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x14 JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x1552 DUP4 PUSH1 0x2 PUSH2 0x21CB JUMP JUMPDEST PUSH2 0x155D SWAP1 PUSH1 0x2 PUSH2 0x1E2A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1574 JUMPI PUSH2 0x1574 PUSH2 0x185A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x159E JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x3 PUSH1 0xFC SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x15B9 JUMPI PUSH2 0x15B9 PUSH2 0x1EBD JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xF PUSH1 0xFB SHL DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x15E8 JUMPI PUSH2 0x15E8 PUSH2 0x1EBD JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH2 0x160C DUP5 PUSH1 0x2 PUSH2 0x21CB JUMP JUMPDEST PUSH2 0x1617 SWAP1 PUSH1 0x1 PUSH2 0x1E2A JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x168F JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH2 0x164B JUMPI PUSH2 0x164B PUSH2 0x1EBD JUMP JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1661 JUMPI PUSH2 0x1661 PUSH2 0x1EBD JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH2 0x1688 DUP2 PUSH2 0x21E2 JUMP JUMPDEST SWAP1 POP PUSH2 0x161A JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0x152A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x40C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xDF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1706 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1711 DUP2 PUSH2 0x16DE JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xDF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1747 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x152A DUP2 PUSH2 0x171F JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1764 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x177B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x1796 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x17B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x17C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x17D2 DUP6 DUP3 DUP7 ADD PUSH2 0x1752 JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x17F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1812 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x17FA JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1833 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x17F7 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x152A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x181B JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1895 JUMPI PUSH2 0x1895 PUSH2 0x185A JUMP JUMPDEST PUSH1 0x40 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x18B5 JUMPI PUSH2 0x18B5 PUSH2 0x185A JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x18D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x18DD DUP3 PUSH2 0x189C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x18EA DUP3 DUP3 PUSH2 0x1870 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x5 SWAP4 SWAP1 SWAP4 SHL DUP6 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP2 POP DUP7 DUP5 GT ISZERO PUSH2 0x190A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1925 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x190E JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1941 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x195A JUMPI PUSH2 0x195A PUSH2 0x185A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1971 PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 PUSH2 0x1870 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x1986 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x19BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x19C6 DUP2 PUSH2 0x16DE JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x19D6 DUP2 PUSH2 0x16DE JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x19F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19FE DUP10 DUP4 DUP11 ADD PUSH2 0x18BF JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1A14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1A20 DUP10 DUP4 DUP11 ADD PUSH2 0x18BF JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1A36 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A43 DUP9 DUP3 DUP10 ADD PUSH2 0x1930 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1A63 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1A75 DUP2 PUSH2 0x16DE JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1A95 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1AAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1AC0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1ACF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1AE1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 DUP4 ADD SWAP9 SWAP1 SWAP8 POP SWAP6 SWAP1 SWAP2 ADD CALLDATALOAD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B0A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1B21 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1B35 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x1B42 DUP3 PUSH2 0x189C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B4F DUP3 DUP3 PUSH2 0x1870 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x5 SWAP4 SWAP1 SWAP4 SHL DUP6 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP2 POP DUP10 DUP5 GT ISZERO PUSH2 0x1B6F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 DUP3 ADD SWAP5 JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0x1B96 JUMPI DUP6 CALLDATALOAD PUSH2 0x1B87 DUP2 PUSH2 0x16DE JUMP JUMPDEST DUP3 MSTORE SWAP5 DUP3 ADD SWAP5 SWAP1 DUP3 ADD SWAP1 PUSH2 0x1B74 JUMP JUMPDEST SWAP7 POP POP DUP7 ADD CALLDATALOAD SWAP3 POP POP DUP1 DUP3 GT ISZERO PUSH2 0x1BAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BB9 DUP6 DUP3 DUP7 ADD PUSH2 0x18BF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1BF3 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1BD7 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x152A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1BC3 JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xDF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1C3D DUP2 PUSH2 0x16DE JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1A75 DUP2 PUSH2 0x1C11 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1C63 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1C81 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C8D DUP9 DUP4 DUP10 ADD PUSH2 0x1930 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1CA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1CB0 DUP8 DUP3 DUP9 ADD PUSH2 0x1752 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1CCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1CDA DUP2 PUSH2 0x16DE JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1A75 DUP2 PUSH2 0x16DE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1CFC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x152A DUP2 PUSH2 0x16DE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1D1F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x1D2A DUP2 PUSH2 0x16DE JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x1D3A DUP2 PUSH2 0x16DE JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1D63 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1A43 DUP9 DUP3 DUP10 ADD PUSH2 0x1930 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1D83 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1DA3 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A2063616C6C6572206973206E6F7420746F6B656E206F776E PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x195C881BDC88185C1C1C9BDD9959 PUSH1 0x92 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E09 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x152A DUP2 PUSH2 0x1C11 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x438 JUMPI PUSH2 0x438 PUSH2 0x1E14 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP6 GT ISZERO PUSH2 0x1E4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP7 GT ISZERO PUSH2 0x1E5A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 ADD SWAP4 SWAP2 SWAP1 SWAP3 SUB SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1E7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x1E88 DUP2 PUSH2 0x16DE JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x1E98 DUP2 PUSH2 0x16DE JUMP JUMPDEST SWAP4 SWAP7 SWAP4 SWAP6 POP POP POP POP PUSH1 0x40 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0x60 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST DUP2 DUP4 DUP3 CALLDATACOPY PUSH1 0x0 SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x1EE5 JUMPI PUSH2 0x1EE5 PUSH2 0x1E14 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F20746865207A65726F206164 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2A SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A20696E73756666696369656E742062616C616E636520666F PUSH1 0x40 DUP3 ADD MSTORE PUSH10 0x39103A3930B739B332B9 PUSH1 0xB1 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1F8E PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1BC3 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1FA0 DUP2 DUP6 PUSH2 0x1BC3 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1FD5 SWAP1 DUP4 ADD DUP7 PUSH2 0x1BC3 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x1FE7 DUP2 DUP7 PUSH2 0x1BC3 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x1FFB DUP2 DUP6 PUSH2 0x181B JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2019 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x152A DUP2 PUSH2 0x171F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 RETURNDATASIZE GT ISZERO PUSH2 0x203D JUMPI PUSH1 0x4 PUSH1 0x0 DUP1 RETURNDATACOPY POP PUSH1 0x0 MLOAD PUSH1 0xE0 SHR JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x44 RETURNDATASIZE LT ISZERO PUSH2 0x204E JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x3 NOT RETURNDATASIZE DUP2 ADD PUSH1 0x4 DUP4 RETURNDATACOPY DUP2 MLOAD RETURNDATASIZE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 PUSH1 0x24 DUP5 ADD GT DUP2 DUP5 GT OR ISZERO PUSH2 0x207D JUMPI POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP3 DUP6 ADD SWAP2 POP DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x2095 JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP5 RETURNDATASIZE DUP8 ADD ADD PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x20AF JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x20BE PUSH1 0x20 DUP3 DUP7 ADD ADD DUP8 PUSH2 0x1870 JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x28 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A204552433131353552656365697665722072656A65637465 PUSH1 0x40 DUP3 ADD MSTORE PUSH8 0x6420746F6B656E73 PUSH1 0xC0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH2 0x2149 DUP2 PUSH1 0x17 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x17F7 JUMP JUMPDEST PUSH17 0x1034B99036B4B9B9B4B733903937B6329 PUSH1 0x7D SHL PUSH1 0x17 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x217A DUP2 PUSH1 0x28 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x17F7 JUMP JUMPDEST ADD PUSH1 0x28 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x21C0 SWAP1 DUP4 ADD DUP5 PUSH2 0x181B JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x438 JUMPI PUSH2 0x438 PUSH2 0x1E14 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x21F1 JUMPI PUSH2 0x21F1 PUSH2 0x1E14 JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBD 0xE0 0x4D DUP15 LOG1 SHR PUSH3 0x4538C0 0x29 0x5F 0xCD RETURNDATASIZE PUSH12 0x74A74E1F6047CD7827CF73A2 0x5D PUSH32 0x9F5DA64736F6C63430008130033000000000000000000000000000000000000 ","sourceMap":"347:3136:15:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2185:227:2;;;;;;:::i;:::-;;:::i;:::-;;;616:25:16;;;604:2;589:18;2185:227:2;;;;;;;;2109::15;;;;;;:::i;:::-;;:::i;:::-;;;1203:14:16;;1196:22;1178:41;;1166:2;1151:18;2109:227:15;1038:187:16;1777:209:15;;;;;;:::i;:::-;;:::i;535:66::-;;575:26;535:66;;1940:103:2;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;4378:129:0:-;;;;;;:::i;:::-;4452:7;4478:12;;;:6;:12;;;;;:22;;;;4378:129;4064:426:2;;;;;;:::i;:::-;;:::i;:::-;;395:25:15;;;;;;423:44;;;;;;:::i;:::-;;;;;;;;;;;;;;;;4803:145:0;;;;;;:::i;:::-;;:::i;5912:214::-;;;;;;:::i;:::-;;:::i;2497:984:15:-;;;;;;:::i;:::-;;:::i;2569:508:2:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1989:117:15:-;;;;;;:::i;:::-;;:::i;2895:145:0:-;;;;;;:::i;:::-;;:::i;2027:49::-;;2072:4;2027:49;;3145:153:2;;;;;;:::i;:::-;;:::i;604:39:15:-;;;;;-1:-1:-1;;;;;604:39:15;;;;;;-1:-1:-1;;;;;9968:32:16;;;9950:51;;9938:2;9923:18;604:39:15;9779:228:16;1190:584:15;;;;;;:::i;:::-;;:::i;5228:147:0:-;;;;;;:::i;:::-;;:::i;3365:166:2:-;;;;;;:::i;:::-;-1:-1:-1;;;;;3487:27:2;;;3464:4;3487:27;;;:18;:27;;;;;;;;:37;;;;;;;;;;;;;;;3365:166;2339:155:15;;;;;;:::i;:::-;;:::i;3598:394:2:-;;;;;;:::i;:::-;;:::i;2185:227::-;2271:7;-1:-1:-1;;;;;2298:21:2;;2290:76;;;;-1:-1:-1;;;2290:76:2;;12327:2:16;2290:76:2;;;12309:21:16;12366:2;12346:18;;;12339:30;12405:34;12385:18;;;12378:62;-1:-1:-1;;;12456:18:16;;;12449:40;12506:19;;2290:76:2;;;;;;;;;-1:-1:-1;2383:9:2;:13;;;;;;;;;;;-1:-1:-1;;;;;2383:22:2;;;;;;;;;;2185:227;;;;;:::o;2109::15:-;2223:4;2243:38;2269:11;2243:25;:38::i;:::-;:89;;;;2288:44;2320:11;2288:31;:44::i;1777:209::-;1893:28;;-1:-1:-1;;1910:10:15;12685:2:16;12681:15;12677:53;1893:28:15;;;12665:66:16;1858:4:15;;;;12747:12:16;;1893:28:15;;;;;;;;;;;;1883:39;;;;;;1868:54;;1933:49;1952:11;;1933:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1965:10:15;;;-1:-1:-1;1977:4:15;;-1:-1:-1;1933:18:15;:49::i;:::-;1926:56;1777:209;-1:-1:-1;;;;1777:209:15:o;1940:103:2:-;2000:13;2032:4;2025:11;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1940:103;;;:::o;4064:426::-;-1:-1:-1;;;;;4289:20:2;;719:10:7;4289:20:2;;:60;;-1:-1:-1;4313:36:2;4330:4;719:10:7;3365:166:2;:::i;4313:36::-;4268:153;;;;-1:-1:-1;;;4268:153:2;;;;;;;:::i;:::-;4431:52;4454:4;4460:2;4464:3;4469:7;4478:4;4431:22;:52::i;:::-;4064:426;;;;;:::o;4803:145:0:-;4452:7;4478:12;;;:6;:12;;;;;:22;;;2505:16;2516:4;2505:10;:16::i;:::-;4916:25:::1;4927:4;4933:7;4916:10;:25::i;:::-;4803:145:::0;;;:::o;5912:214::-;-1:-1:-1;;;;;6007:23:0;;719:10:7;6007:23:0;5999:83;;;;-1:-1:-1;;;5999:83:0;;13772:2:16;5999:83:0;;;13754:21:16;13811:2;13791:18;;;13784:30;13850:34;13830:18;;;13823:62;-1:-1:-1;;;13901:18:16;;;13894:45;13956:19;;5999:83:0;13570:411:16;5999:83:0;6093:26;6105:4;6111:7;6093:11;:26::i;:::-;5912:214;;:::o;2497:984:15:-;2598:15;;:38;;-1:-1:-1;;;2598:38:15;;2625:10;2598:38;;;9950:51:16;-1:-1:-1;;;;;2598:15:15;;;;:26;;9923:18:16;;2598:38:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2586:97;;;;-1:-1:-1;;;2586:97:15;;14646:2:16;2586:97:15;;;14628:21:16;14685:2;14665:18;;;14658:30;14724:34;14704:18;;;14697:62;-1:-1:-1;;;14775:18:16;;;14768:34;14819:19;;2586:97:15;14444:400:16;2586:97:15;2748:6;2743:497;2760:21;;;2743:497;;;2804:13;;;;2903:10;2914:1;2903:10;2916:7;2914:1;2920:3;2916:7;:::i;:::-;2903:21;;;;;;;:::i;:::-;2886:87;;;;;;;:::i;:::-;2798:175;;;;;;;;3069:6;3039:26;3049:6;3057:7;3039:9;:26::i;:::-;:36;;3026:96;;;;-1:-1:-1;;;3026:96:15;;16195:2:16;3026:96:15;;;16177:21:16;16234:2;16214:18;;;16207:30;16273:34;16253:18;;;16246:62;-1:-1:-1;;;16324:18:16;;;16317:32;16366:19;;3026:96:15;15993:398:16;3026:96:15;3182:53;3200:6;3208:5;3215:7;3224:6;3182:53;;;;;;;;;;;;:17;:53::i;:::-;2793:447;;;;2788:3;2783:8;;;;;:::i;:::-;;;2743:497;;;;3297:18;3328:10;;3318:21;;;;;;;:::i;:::-;;;;;;;;;;16846:25:16;;;3458:15:15;16902:2:16;16887:18;;16880:34;3318:21:15;-1:-1:-1;3427:11:15;;3412:10;;3392:85;;16819:18:16;3392:85:15;;;;;;;2582:899;2497:984;;;:::o;2569:508:2:-;2720:16;2779:3;:10;2760:8;:15;:29;2752:83;;;;-1:-1:-1;;;2752:83:2;;17127:2:16;2752:83:2;;;17109:21:16;17166:2;17146:18;;;17139:30;17205:34;17185:18;;;17178:62;-1:-1:-1;;;17256:18:16;;;17249:39;17305:19;;2752:83:2;16925:405:16;2752:83:2;2846:30;2893:8;:15;-1:-1:-1;;;;;2879:30:2;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2879:30:2;;2846:63;;2925:9;2920:120;2944:8;:15;2940:1;:19;2920:120;;;2999:30;3009:8;3018:1;3009:11;;;;;;;;:::i;:::-;;;;;;;3022:3;3026:1;3022:6;;;;;;;;:::i;:::-;;;;;;;2999:9;:30::i;:::-;2980:13;2994:1;2980:16;;;;;;;;:::i;:::-;;;;;;;;;;:49;2961:3;;;:::i;:::-;;;2920:120;;;-1:-1:-1;3057:13:2;2569:508;-1:-1:-1;;;2569:508:2:o;1989:117:15:-;2072:4:0;2505:16;2072:4;2505:10;:16::i;:::-;-1:-1:-1;2078:10:15::1;:24:::0;1989:117::o;2895:145:0:-;2981:4;3004:12;;;:6;:12;;;;;;;;-1:-1:-1;;;;;3004:29:0;;;;;;;;;;;;;;;2895:145::o;3145:153:2:-;3239:52;719:10:7;3272:8:2;3282;3239:18;:52::i;1190:584:15:-;1313:14;;1300:10;1340:16;;;:12;:16;;;;;;;;1339:17;1331:67;;;;-1:-1:-1;;;1331:67:15;;17809:2:16;1331:67:15;;;17791:21:16;17848:2;17828:18;;;17821:30;17887:34;17867:18;;;17860:62;-1:-1:-1;;;17938:18:16;;;17931:35;17983:19;;1331:67:15;17607:401:16;1331:67:15;1458:26;1472:11;;1458:13;:26::i;:::-;1450:64;;;;-1:-1:-1;;;1450:64:15;;18215:2:16;1450:64:15;;;18197:21:16;18254:2;18234:18;;;18227:30;18293:27;18273:18;;;18266:55;18338:18;;1450:64:15;18013:349:16;1450:64:15;1519:16;;;;:12;:16;;;;;:23;;-1:-1:-1;;1519:23:15;1538:4;1519:23;;;1651:35;1657:10;1532:2;1673:6;1681:4;1651:5;:35::i;:::-;1710:5;1691:16;;;:12;:16;;;;;:24;;-1:-1:-1;;1691:24:15;;;1754:14;:16;;;;;;:::i;:::-;;;;;;1296:478;1190:584;;;;:::o;5228:147:0:-;4452:7;4478:12;;;:6;:12;;;;;:22;;;2505:16;2516:4;2505:10;:16::i;:::-;5342:26:::1;5354:4;5360:7;5342:11;:26::i;2339:155:15:-:0;2072:4:0;2505:16;2072:4;2505:10;:16::i;:::-;-1:-1:-1;2438:15:15::1;:52:::0;;-1:-1:-1;;;;;;2438:52:15::1;-1:-1:-1::0;;;;;2438:52:15;;;::::1;::::0;;;::::1;::::0;;2339:155::o;3598:394:2:-;-1:-1:-1;;;;;3798:20:2;;719:10:7;3798:20:2;;:60;;-1:-1:-1;3822:36:2;3839:4;719:10:7;3365:166:2;:::i;3822:36::-;3777:153;;;;-1:-1:-1;;;3777:153:2;;;;;;;:::i;:::-;3940:45;3958:4;3964:2;3968;3972:6;3980:4;3940:17;:45::i;1236:305::-;1338:4;-1:-1:-1;;;;;;1373:41:2;;-1:-1:-1;;;1373:41:2;;:109;;-1:-1:-1;;;;;;;1430:52:2;;-1:-1:-1;;;1430:52:2;1373:109;:161;;;-1:-1:-1;;;;;;;;;;937:40:10;;;1498:36:2;829:155:10;2606:202:0;2691:4;-1:-1:-1;;;;;;2714:47:0;;-1:-1:-1;;;2714:47:0;;:87;;;2765:36;2789:11;2765:23;:36::i;1156:184:9:-;1277:4;1329;1300:25;1313:5;1320:4;1300:12;:25::i;:::-;:33;;1156:184;-1:-1:-1;;;;1156:184:9:o;6233:1115:2:-;6453:7;:14;6439:3;:10;:28;6431:81;;;;-1:-1:-1;;;6431:81:2;;18569:2:16;6431:81:2;;;18551:21:16;18608:2;18588:18;;;18581:30;18647:34;18627:18;;;18620:62;-1:-1:-1;;;18698:18:16;;;18691:38;18746:19;;6431:81:2;18367:404:16;6431:81:2;-1:-1:-1;;;;;6530:16:2;;6522:66;;;;-1:-1:-1;;;6522:66:2;;;;;;;:::i;:::-;719:10:7;6599:16:2;6712:411;6736:3;:10;6732:1;:14;6712:411;;;6767:10;6780:3;6784:1;6780:6;;;;;;;;:::i;:::-;;;;;;;6767:19;;6800:14;6817:7;6825:1;6817:10;;;;;;;;:::i;:::-;;;;;;;;;;;;6842:19;6864:13;;;;;;;;;;-1:-1:-1;;;;;6864:19:2;;;;;;;;;;;;6817:10;;-1:-1:-1;6905:21:2;;;;6897:76;;;;-1:-1:-1;;;6897:76:2;;;;;;;:::i;:::-;7015:9;:13;;;;;;;;;;;-1:-1:-1;;;;;7015:19:2;;;;;;;;;;7037:20;;;7015:42;;7085:17;;;;;;;:27;;7037:20;;7015:9;7085:27;;7037:20;;7085:27;:::i;:::-;;;;;;;;6753:370;;;6748:3;;;;:::i;:::-;;;6712:411;;;;7168:2;-1:-1:-1;;;;;7138:47:2;7162:4;-1:-1:-1;;;;;7138:47:2;7152:8;-1:-1:-1;;;;;7138:47:2;;7172:3;7177:7;7138:47;;;;;;;:::i;:::-;;;;;;;;7266:75;7302:8;7312:4;7318:2;7322:3;7327:7;7336:4;7266:35;:75::i;:::-;6421:927;6233:1115;;;;;:::o;3334:103:0:-;3400:30;3411:4;719:10:7;3400::0;:30::i;:::-;3334:103;:::o;7461:233::-;7544:22;7552:4;7558:7;7544;:22::i;:::-;7539:149;;7582:12;;;;:6;:12;;;;;;;;-1:-1:-1;;;;;7582:29:0;;;;;;;;;:36;;-1:-1:-1;;7582:36:0;7614:4;7582:36;;;7664:12;719:10:7;;640:96;7664:12:0;-1:-1:-1;;;;;7637:40:0;7655:7;-1:-1:-1;;;;;7637:40:0;7649:4;7637:40;;;;;;;;;;7461:233;;:::o;7865:234::-;7948:22;7956:4;7962:7;7948;:22::i;:::-;7944:149;;;8018:5;7986:12;;;:6;:12;;;;;;;;-1:-1:-1;;;;;7986:29:0;;;;;;;;;;:37;;-1:-1:-1;;7986:37:0;;;8042:40;719:10:7;;7986:12:0;;8042:40;;8018:5;8042:40;7865:234;;:::o;4940:947:2:-;-1:-1:-1;;;;;5121:16:2;;5113:66;;;;-1:-1:-1;;;5113:66:2;;;;;;;:::i;:::-;719:10:7;5190:16:2;5254:21;5272:2;5254:17;:21::i;:::-;5231:44;;5285:24;5312:25;5330:6;5312:17;:25::i;:::-;5285:52;;5419:19;5441:13;;;;;;;;;;;-1:-1:-1;;;;;5441:19:2;;;;;;;;;;5478:21;;;;5470:76;;;;-1:-1:-1;;;5470:76:2;;;;;;;:::i;:::-;5580:9;:13;;;;;;;;;;;-1:-1:-1;;;;;5580:19:2;;;;;;;;;;5602:20;;;5580:42;;5642:17;;;;;;;:27;;5602:20;;5580:9;5642:27;;5602:20;;5642:27;:::i;:::-;;;;-1:-1:-1;;5685:46:2;;;16846:25:16;;;16902:2;16887:18;;16880:34;;;-1:-1:-1;;;;;5685:46:2;;;;;;;;;;;;;;16819:18:16;5685:46:2;;;;;;;5812:68;5843:8;5853:4;5859:2;5863;5867:6;5875:4;5812:30;:68::i;:::-;5103:784;;;;4940:947;;;;;:::o;12910:323::-;13060:8;-1:-1:-1;;;;;13051:17:2;:5;-1:-1:-1;;;;;13051:17:2;;13043:71;;;;-1:-1:-1;;;13043:71:2;;20518:2:16;13043:71:2;;;20500:21:16;20557:2;20537:18;;;20530:30;20596:34;20576:18;;;20569:62;-1:-1:-1;;;20647:18:16;;;20640:39;20696:19;;13043:71:2;20316:405:16;13043:71:2;-1:-1:-1;;;;;13124:25:2;;;;;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;:46;;-1:-1:-1;;13124:46:2;;;;;;;;;;13185:41;;1178::16;;;13185::2;;1151:18:16;13185:41:2;;;;;;;12910:323;;;:::o;8630:709::-;-1:-1:-1;;;;;8777:16:2;;8769:62;;;;-1:-1:-1;;;8769:62:2;;20928:2:16;8769:62:2;;;20910:21:16;20967:2;20947:18;;;20940:30;21006:34;20986:18;;;20979:62;-1:-1:-1;;;21057:18:16;;;21050:31;21098:19;;8769:62:2;20726:397:16;8769:62:2;719:10:7;8842:16:2;8906:21;8924:2;8906:17;:21::i;:::-;8883:44;;8937:24;8964:25;8982:6;8964:17;:25::i;:::-;8937:52;;9077:9;:13;;;;;;;;;;;-1:-1:-1;;;;;9077:17:2;;;;;;;;;:27;;9098:6;;9077:9;:27;;9098:6;;9077:27;:::i;:::-;;;;-1:-1:-1;;9119:52:2;;;16846:25:16;;;16902:2;16887:18;;16880:34;;;-1:-1:-1;;;;;9119:52:2;;;;9152:1;;9119:52;;;;;;16819:18:16;9119:52:2;;;;;;;9258:74;9289:8;9307:1;9311:2;9315;9319:6;9327:4;9258:30;:74::i;:::-;8759:580;;;8630:709;;;;:::o;1994:290:9:-;2077:7;2119:4;2077:7;2133:116;2157:5;:12;2153:1;:16;2133:116;;;2205:33;2215:12;2229:5;2235:1;2229:8;;;;;;;;:::i;:::-;;;;;;;2205:9;:33::i;:::-;2190:48;-1:-1:-1;2171:3:9;;;;:::i;:::-;;;;2133:116;;16266:792:2;-1:-1:-1;;;;;16498:13:2;;1465:19:6;:23;16494:558:2;;16533:79;;-1:-1:-1;;;16533:79:2;;-1:-1:-1;;;;;16533:43:2;;;;;:79;;16577:8;;16587:4;;16593:3;;16598:7;;16607:4;;16533:79;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;16533:79:2;;;;;;;;-1:-1:-1;;16533:79:2;;;;;;;;;;;;:::i;:::-;;;16529:513;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;16918:6;16911:14;;-1:-1:-1;;;16911:14:2;;;;;;;;:::i;16529:513::-;;;16965:62;;-1:-1:-1;;;16965:62:2;;23276:2:16;16965:62:2;;;23258:21:16;23315:2;23295:18;;;23288:30;23354:34;23334:18;;;23327:62;-1:-1:-1;;;23405:18:16;;;23398:50;23465:19;;16965:62:2;23074:416:16;16529:513:2;-1:-1:-1;;;;;;16691:60:2;;-1:-1:-1;;;16691:60:2;16687:157;;16775:50;;-1:-1:-1;;;16775:50:2;;;;;;;:::i;3718:479:0:-;3806:22;3814:4;3820:7;3806;:22::i;:::-;3801:390;;3989:28;4009:7;3989:19;:28::i;:::-;4088:38;4116:4;4123:2;4088:19;:38::i;:::-;3896:252;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3896:252:0;;;;;;;;;;-1:-1:-1;;;3844:336:0;;;;;;;:::i;17064:193:2:-;17183:16;;;17197:1;17183:16;;;;;;;;;17130;;17158:22;;17183:16;;;;;;;;;;;;-1:-1:-1;17183:16:2;17158:41;;17220:7;17209:5;17215:1;17209:8;;;;;;;;:::i;:::-;;;;;;;;;;:18;17245:5;17064:193;-1:-1:-1;;17064:193:2:o;15535:725::-;-1:-1:-1;;;;;15742:13:2;;1465:19:6;:23;15738:516:2;;15777:72;;-1:-1:-1;;;15777:72:2;;-1:-1:-1;;;;;15777:38:2;;;;;:72;;15816:8;;15826:4;;15832:2;;15836:6;;15844:4;;15777:72;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;15777:72:2;;;;;;;;-1:-1:-1;;15777:72:2;;;;;;;;;;;;:::i;:::-;;;15773:471;;;;:::i;:::-;-1:-1:-1;;;;;;15898:55:2;;-1:-1:-1;;;15898:55:2;15894:152;;15977:50;;-1:-1:-1;;;15977:50:2;;;;;;;:::i;8879:147:9:-;8942:7;8972:1;8968;:5;:51;;9100:13;9191:15;;;9226:4;9219:15;;;9272:4;9256:21;;8968:51;;;9100:13;9191:15;;;9226:4;9219:15;;;9272:4;9256:21;;8976:20;8961:58;8879:147;-1:-1:-1;;;8879:147:9:o;2102:149:8:-;2160:13;2192:52;-1:-1:-1;;;;;2204:22:8;;311:2;1513:437;1588:13;1613:19;1645:10;1649:6;1645:1;:10;:::i;:::-;:14;;1658:1;1645:14;:::i;:::-;-1:-1:-1;;;;;1635:25:8;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1635:25:8;;1613:47;;-1:-1:-1;;;1670:6:8;1677:1;1670:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;1670:15:8;;;;;;;;;-1:-1:-1;;;1695:6:8;1702:1;1695:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;1695:15:8;;;;;;;;-1:-1:-1;1725:9:8;1737:10;1741:6;1737:1;:10;:::i;:::-;:14;;1750:1;1737:14;:::i;:::-;1725:26;;1720:128;1757:1;1753;:5;1720:128;;;-1:-1:-1;;;1800:5:8;1808:3;1800:11;1791:21;;;;;;;:::i;:::-;;;;1779:6;1786:1;1779:9;;;;;;;;:::i;:::-;;;;:33;-1:-1:-1;;;;;1779:33:8;;;;;;;;-1:-1:-1;1836:1:8;1826:11;;;;;1760:3;;;:::i;:::-;;;1720:128;;;-1:-1:-1;1865:10:8;;1857:55;;;;-1:-1:-1;;;1857:55:8;;25803:2:16;1857:55:8;;;25785:21:16;;;25822:18;;;25815:30;25881:34;25861:18;;;25854:62;25933:18;;1857:55:8;25601:356:16;14:131;-1:-1:-1;;;;;89:31:16;;79:42;;69:70;;135:1;132;125:12;150:315;218:6;226;279:2;267:9;258:7;254:23;250:32;247:52;;;295:1;292;285:12;247:52;334:9;321:23;353:31;378:5;353:31;:::i;:::-;403:5;455:2;440:18;;;;427:32;;-1:-1:-1;;;150:315:16:o;652:131::-;-1:-1:-1;;;;;;726:32:16;;716:43;;706:71;;773:1;770;763:12;788:245;846:6;899:2;887:9;878:7;874:23;870:32;867:52;;;915:1;912;905:12;867:52;954:9;941:23;973:30;997:5;973:30;:::i;1230:367::-;1293:8;1303:6;1357:3;1350:4;1342:6;1338:17;1334:27;1324:55;;1375:1;1372;1365:12;1324:55;-1:-1:-1;1398:20:16;;-1:-1:-1;;;;;1430:30:16;;1427:50;;;1473:1;1470;1463:12;1427:50;1510:4;1502:6;1498:17;1486:29;;1570:3;1563:4;1553:6;1550:1;1546:14;1538:6;1534:27;1530:38;1527:47;1524:67;;;1587:1;1584;1577:12;1524:67;1230:367;;;;;:::o;1602:437::-;1688:6;1696;1749:2;1737:9;1728:7;1724:23;1720:32;1717:52;;;1765:1;1762;1755:12;1717:52;1805:9;1792:23;-1:-1:-1;;;;;1830:6:16;1827:30;1824:50;;;1870:1;1867;1860:12;1824:50;1909:70;1971:7;1962:6;1951:9;1947:22;1909:70;:::i;:::-;1998:8;;1883:96;;-1:-1:-1;1602:437:16;-1:-1:-1;;;;1602:437:16:o;2226:180::-;2285:6;2338:2;2326:9;2317:7;2313:23;2309:32;2306:52;;;2354:1;2351;2344:12;2306:52;-1:-1:-1;2377:23:16;;2226:180;-1:-1:-1;2226:180:16:o;2411:250::-;2496:1;2506:113;2520:6;2517:1;2514:13;2506:113;;;2596:11;;;2590:18;2577:11;;;2570:39;2542:2;2535:10;2506:113;;;-1:-1:-1;;2653:1:16;2635:16;;2628:27;2411:250::o;2666:271::-;2708:3;2746:5;2740:12;2773:6;2768:3;2761:19;2789:76;2858:6;2851:4;2846:3;2842:14;2835:4;2828:5;2824:16;2789:76;:::i;:::-;2919:2;2898:15;-1:-1:-1;;2894:29:16;2885:39;;;;2926:4;2881:50;;2666:271;-1:-1:-1;;2666:271:16:o;2942:220::-;3091:2;3080:9;3073:21;3054:4;3111:45;3152:2;3141:9;3137:18;3129:6;3111:45;:::i;3352:127::-;3413:10;3408:3;3404:20;3401:1;3394:31;3444:4;3441:1;3434:15;3468:4;3465:1;3458:15;3484:249;3594:2;3575:13;;-1:-1:-1;;3571:27:16;3559:40;;-1:-1:-1;;;;;3614:34:16;;3650:22;;;3611:62;3608:88;;;3676:18;;:::i;:::-;3712:2;3705:22;-1:-1:-1;;3484:249:16:o;3738:183::-;3798:4;-1:-1:-1;;;;;3823:6:16;3820:30;3817:56;;;3853:18;;:::i;:::-;-1:-1:-1;3898:1:16;3894:14;3910:4;3890:25;;3738:183::o;3926:724::-;3980:5;4033:3;4026:4;4018:6;4014:17;4010:27;4000:55;;4051:1;4048;4041:12;4000:55;4087:6;4074:20;4113:4;4136:43;4176:2;4136:43;:::i;:::-;4208:2;4202:9;4220:31;4248:2;4240:6;4220:31;:::i;:::-;4286:18;;;4378:1;4374:10;;;;4362:23;;4358:32;;;4320:15;;;;-1:-1:-1;4402:15:16;;;4399:35;;;4430:1;4427;4420:12;4399:35;4466:2;4458:6;4454:15;4478:142;4494:6;4489:3;4486:15;4478:142;;;4560:17;;4548:30;;4598:12;;;;4511;;4478:142;;;-1:-1:-1;4638:6:16;3926:724;-1:-1:-1;;;;;;3926:724:16:o;4655:555::-;4697:5;4750:3;4743:4;4735:6;4731:17;4727:27;4717:55;;4768:1;4765;4758:12;4717:55;4804:6;4791:20;-1:-1:-1;;;;;4826:2:16;4823:26;4820:52;;;4852:18;;:::i;:::-;4901:2;4895:9;4913:67;4968:2;4949:13;;-1:-1:-1;;4945:27:16;4974:4;4941:38;4895:9;4913:67;:::i;:::-;5004:2;4996:6;4989:18;5050:3;5043:4;5038:2;5030:6;5026:15;5022:26;5019:35;5016:55;;;5067:1;5064;5057:12;5016:55;5131:2;5124:4;5116:6;5112:17;5105:4;5097:6;5093:17;5080:54;5178:1;5154:15;;;5171:4;5150:26;5143:37;;;;5158:6;4655:555;-1:-1:-1;;;4655:555:16:o;5215:1071::-;5369:6;5377;5385;5393;5401;5454:3;5442:9;5433:7;5429:23;5425:33;5422:53;;;5471:1;5468;5461:12;5422:53;5510:9;5497:23;5529:31;5554:5;5529:31;:::i;:::-;5579:5;-1:-1:-1;5636:2:16;5621:18;;5608:32;5649:33;5608:32;5649:33;:::i;:::-;5701:7;-1:-1:-1;5759:2:16;5744:18;;5731:32;-1:-1:-1;;;;;5812:14:16;;;5809:34;;;5839:1;5836;5829:12;5809:34;5862:61;5915:7;5906:6;5895:9;5891:22;5862:61;:::i;:::-;5852:71;;5976:2;5965:9;5961:18;5948:32;5932:48;;6005:2;5995:8;5992:16;5989:36;;;6021:1;6018;6011:12;5989:36;6044:63;6099:7;6088:8;6077:9;6073:24;6044:63;:::i;:::-;6034:73;;6160:3;6149:9;6145:19;6132:33;6116:49;;6190:2;6180:8;6177:16;6174:36;;;6206:1;6203;6196:12;6174:36;;6229:51;6272:7;6261:8;6250:9;6246:24;6229:51;:::i;:::-;6219:61;;;5215:1071;;;;;;;;:::o;6291:315::-;6359:6;6367;6420:2;6408:9;6399:7;6395:23;6391:32;6388:52;;;6436:1;6433;6426:12;6388:52;6472:9;6459:23;6449:33;;6532:2;6521:9;6517:18;6504:32;6545:31;6570:5;6545:31;:::i;:::-;6595:5;6585:15;;;6291:315;;;;;:::o;6611:665::-;6690:6;6698;6706;6759:2;6747:9;6738:7;6734:23;6730:32;6727:52;;;6775:1;6772;6765:12;6727:52;6815:9;6802:23;-1:-1:-1;;;;;6885:2:16;6877:6;6874:14;6871:34;;;6901:1;6898;6891:12;6871:34;6939:6;6928:9;6924:22;6914:32;;6984:7;6977:4;6973:2;6969:13;6965:27;6955:55;;7006:1;7003;6996:12;6955:55;7046:2;7033:16;7072:2;7064:6;7061:14;7058:34;;;7088:1;7085;7078:12;7058:34;7135:7;7128:4;7119:6;7115:2;7111:15;7107:26;7104:39;7101:59;;;7156:1;7153;7146:12;7101:59;7187:4;7179:13;;;;7211:6;;-1:-1:-1;7249:20:16;;;;7236:34;;6611:665;-1:-1:-1;;;;6611:665:16:o;7281:1277::-;7399:6;7407;7460:2;7448:9;7439:7;7435:23;7431:32;7428:52;;;7476:1;7473;7466:12;7428:52;7516:9;7503:23;-1:-1:-1;;;;;7586:2:16;7578:6;7575:14;7572:34;;;7602:1;7599;7592:12;7572:34;7640:6;7629:9;7625:22;7615:32;;7685:7;7678:4;7674:2;7670:13;7666:27;7656:55;;7707:1;7704;7697:12;7656:55;7743:2;7730:16;7765:4;7788:43;7828:2;7788:43;:::i;:::-;7860:2;7854:9;7872:31;7900:2;7892:6;7872:31;:::i;:::-;7938:18;;;8026:1;8022:10;;;;8014:19;;8010:28;;;7972:15;;;;-1:-1:-1;8050:19:16;;;8047:39;;;8082:1;8079;8072:12;8047:39;8106:11;;;;8126:217;8142:6;8137:3;8134:15;8126:217;;;8222:3;8209:17;8239:31;8264:5;8239:31;:::i;:::-;8283:18;;8159:12;;;;8321;;;;8126:217;;;8362:6;-1:-1:-1;;8406:18:16;;8393:32;;-1:-1:-1;;8437:16:16;;;8434:36;;;8466:1;8463;8456:12;8434:36;;8489:63;8544:7;8533:8;8522:9;8518:24;8489:63;:::i;:::-;8479:73;;;7281:1277;;;;;:::o;8563:435::-;8616:3;8654:5;8648:12;8681:6;8676:3;8669:19;8707:4;8736:2;8731:3;8727:12;8720:19;;8773:2;8766:5;8762:14;8794:1;8804:169;8818:6;8815:1;8812:13;8804:169;;;8879:13;;8867:26;;8913:12;;;;8948:15;;;;8840:1;8833:9;8804:169;;;-1:-1:-1;8989:3:16;;8563:435;-1:-1:-1;;;;;8563:435:16:o;9003:261::-;9182:2;9171:9;9164:21;9145:4;9202:56;9254:2;9243:9;9239:18;9231:6;9202:56;:::i;9269:118::-;9355:5;9348:13;9341:21;9334:5;9331:32;9321:60;;9377:1;9374;9367:12;9392:382;9457:6;9465;9518:2;9506:9;9497:7;9493:23;9489:32;9486:52;;;9534:1;9531;9524:12;9486:52;9573:9;9560:23;9592:31;9617:5;9592:31;:::i;:::-;9642:5;-1:-1:-1;9699:2:16;9684:18;;9671:32;9712:30;9671:32;9712:30;:::i;10012:724::-;10125:6;10133;10141;10149;10202:2;10190:9;10181:7;10177:23;10173:32;10170:52;;;10218:1;10215;10208:12;10170:52;10254:9;10241:23;10231:33;;10315:2;10304:9;10300:18;10287:32;-1:-1:-1;;;;;10379:2:16;10371:6;10368:14;10365:34;;;10395:1;10392;10385:12;10365:34;10418:49;10459:7;10450:6;10439:9;10435:22;10418:49;:::i;:::-;10408:59;;10520:2;10509:9;10505:18;10492:32;10476:48;;10549:2;10539:8;10536:16;10533:36;;;10565:1;10562;10555:12;10533:36;;10604:72;10668:7;10657:8;10646:9;10642:24;10604:72;:::i;:::-;10012:724;;;;-1:-1:-1;10695:8:16;-1:-1:-1;;;;10012:724:16:o;10741:388::-;10809:6;10817;10870:2;10858:9;10849:7;10845:23;10841:32;10838:52;;;10886:1;10883;10876:12;10838:52;10925:9;10912:23;10944:31;10969:5;10944:31;:::i;:::-;10994:5;-1:-1:-1;11051:2:16;11036:18;;11023:32;11064:33;11023:32;11064:33;:::i;11134:247::-;11193:6;11246:2;11234:9;11225:7;11221:23;11217:32;11214:52;;;11262:1;11259;11252:12;11214:52;11301:9;11288:23;11320:31;11345:5;11320:31;:::i;11386:734::-;11490:6;11498;11506;11514;11522;11575:3;11563:9;11554:7;11550:23;11546:33;11543:53;;;11592:1;11589;11582:12;11543:53;11631:9;11618:23;11650:31;11675:5;11650:31;:::i;:::-;11700:5;-1:-1:-1;11757:2:16;11742:18;;11729:32;11770:33;11729:32;11770:33;:::i;:::-;11822:7;-1:-1:-1;11876:2:16;11861:18;;11848:32;;-1:-1:-1;11927:2:16;11912:18;;11899:32;;-1:-1:-1;11982:3:16;11967:19;;11954:33;-1:-1:-1;;;;;11999:30:16;;11996:50;;;12042:1;12039;12032:12;11996:50;12065:49;12106:7;12097:6;12086:9;12082:22;12065:49;:::i;12770:380::-;12849:1;12845:12;;;;12892;;;12913:61;;12967:4;12959:6;12955:17;12945:27;;12913:61;13020:2;13012:6;13009:14;12989:18;12986:38;12983:161;;13066:10;13061:3;13057:20;13054:1;13047:31;13101:4;13098:1;13091:15;13129:4;13126:1;13119:15;12983:161;;12770:380;;;:::o;13155:410::-;13357:2;13339:21;;;13396:2;13376:18;;;13369:30;13435:34;13430:2;13415:18;;13408:62;-1:-1:-1;;;13501:2:16;13486:18;;13479:44;13555:3;13540:19;;13155:410::o;14194:245::-;14261:6;14314:2;14302:9;14293:7;14289:23;14285:32;14282:52;;;14330:1;14327;14320:12;14282:52;14362:9;14356:16;14381:28;14403:5;14381:28;:::i;14849:127::-;14910:10;14905:3;14901:20;14898:1;14891:31;14941:4;14938:1;14931:15;14965:4;14962:1;14955:15;14981:125;15046:9;;;15067:10;;;15064:36;;;15080:18;;:::i;15111:331::-;15216:9;15227;15269:8;15257:10;15254:24;15251:44;;;15291:1;15288;15281:12;15251:44;15320:6;15310:8;15307:20;15304:40;;;15340:1;15337;15330:12;15304:40;-1:-1:-1;;15366:23:16;;;15411:25;;;;;-1:-1:-1;15111:331:16:o;15447:541::-;15549:6;15557;15565;15573;15626:3;15614:9;15605:7;15601:23;15597:33;15594:53;;;15643:1;15640;15633:12;15594:53;15682:9;15669:23;15701:31;15726:5;15701:31;:::i;:::-;15751:5;-1:-1:-1;15808:2:16;15793:18;;15780:32;15821:33;15780:32;15821:33;:::i;:::-;15447:541;;15873:7;;-1:-1:-1;;;;15927:2:16;15912:18;;15899:32;;15978:2;15963:18;15950:32;;15447:541::o;16396:271::-;16579:6;16571;16566:3;16553:33;16535:3;16605:16;;16630:13;;;16605:16;16396:271;-1:-1:-1;16396:271:16:o;17335:127::-;17396:10;17391:3;17387:20;17384:1;17377:31;17427:4;17424:1;17417:15;17451:4;17448:1;17441:15;17467:135;17506:3;17527:17;;;17524:43;;17547:18;;:::i;:::-;-1:-1:-1;17594:1:16;17583:13;;17467:135::o;18776:401::-;18978:2;18960:21;;;19017:2;18997:18;;;18990:30;19056:34;19051:2;19036:18;;19029:62;-1:-1:-1;;;19122:2:16;19107:18;;19100:35;19167:3;19152:19;;18776:401::o;19182:406::-;19384:2;19366:21;;;19423:2;19403:18;;;19396:30;19462:34;19457:2;19442:18;;19435:62;-1:-1:-1;;;19528:2:16;19513:18;;19506:40;19578:3;19563:19;;19182:406::o;19593:465::-;19850:2;19839:9;19832:21;19813:4;19876:56;19928:2;19917:9;19913:18;19905:6;19876:56;:::i;:::-;19980:9;19972:6;19968:22;19963:2;19952:9;19948:18;19941:50;20008:44;20045:6;20037;20008:44;:::i;:::-;20000:52;19593:465;-1:-1:-1;;;;;19593:465:16:o;21128:827::-;-1:-1:-1;;;;;21525:15:16;;;21507:34;;21577:15;;21572:2;21557:18;;21550:43;21487:3;21624:2;21609:18;;21602:31;;;21450:4;;21656:57;;21693:19;;21685:6;21656:57;:::i;:::-;21761:9;21753:6;21749:22;21744:2;21733:9;21729:18;21722:50;21795:44;21832:6;21824;21795:44;:::i;:::-;21781:58;;21888:9;21880:6;21876:22;21870:3;21859:9;21855:19;21848:51;21916:33;21942:6;21934;21916:33;:::i;:::-;21908:41;21128:827;-1:-1:-1;;;;;;;;21128:827:16:o;21960:249::-;22029:6;22082:2;22070:9;22061:7;22057:23;22053:32;22050:52;;;22098:1;22095;22088:12;22050:52;22130:9;22124:16;22149:30;22173:5;22149:30;:::i;22214:179::-;22249:3;22291:1;22273:16;22270:23;22267:120;;;22337:1;22334;22331;22316:23;-1:-1:-1;22374:1:16;22368:8;22363:3;22359:18;22267:120;22214:179;:::o;22398:671::-;22437:3;22479:4;22461:16;22458:26;22455:39;;;22398:671;:::o;22455:39::-;22521:2;22515:9;-1:-1:-1;;22586:16:16;22582:25;;22579:1;22515:9;22558:50;22637:4;22631:11;22661:16;-1:-1:-1;;;;;22767:2:16;22760:4;22752:6;22748:17;22745:25;22740:2;22732:6;22729:14;22726:45;22723:58;;;22774:5;;;;;22398:671;:::o;22723:58::-;22811:6;22805:4;22801:17;22790:28;;22847:3;22841:10;22874:2;22866:6;22863:14;22860:27;;;22880:5;;;;;;22398:671;:::o;22860:27::-;22964:2;22945:16;22939:4;22935:27;22931:36;22924:4;22915:6;22910:3;22906:16;22902:27;22899:69;22896:82;;;22971:5;;;;;;22398:671;:::o;22896:82::-;22987:57;23038:4;23029:6;23021;23017:19;23013:30;23007:4;22987:57;:::i;:::-;-1:-1:-1;23060:3:16;;22398:671;-1:-1:-1;;;;;22398:671:16:o;23495:404::-;23697:2;23679:21;;;23736:2;23716:18;;;23709:30;23775:34;23770:2;23755:18;;23748:62;-1:-1:-1;;;23841:2:16;23826:18;;23819:38;23889:3;23874:19;;23495:404::o;23904:812::-;24315:25;24310:3;24303:38;24285:3;24370:6;24364:13;24386:75;24454:6;24449:2;24444:3;24440:12;24433:4;24425:6;24421:17;24386:75;:::i;:::-;-1:-1:-1;;;24520:2:16;24480:16;;;24512:11;;;24505:40;24570:13;;24592:76;24570:13;24654:2;24646:11;;24639:4;24627:17;;24592:76;:::i;:::-;24688:17;24707:2;24684:26;;23904:812;-1:-1:-1;;;;23904:812:16:o;24721:561::-;-1:-1:-1;;;;;25018:15:16;;;25000:34;;25070:15;;25065:2;25050:18;;25043:43;25117:2;25102:18;;25095:34;;;25160:2;25145:18;;25138:34;;;24980:3;25203;25188:19;;25181:32;;;24943:4;;25230:46;;25256:19;;25248:6;25230:46;:::i;:::-;25222:54;24721:561;-1:-1:-1;;;;;;;24721:561:16:o;25287:168::-;25360:9;;;25391;;25408:15;;;25402:22;;25388:37;25378:71;;25429:18;;:::i;25460:136::-;25499:3;25527:5;25517:39;;25536:18;;:::i;:::-;-1:-1:-1;;;25572:18:16;;25460:136::o"},"gasEstimates":{"creation":{"codeDepositCost":"1750200","executionCost":"infinite","totalCost":"infinite"},"external":{"DEFAULT_ADMIN_ROLE()":"295","EXECUTOR_ROLE()":"274","balanceOf(address,uint256)":"2694","balanceOfBatch(address[],uint256[])":"infinite","executorManager()":"2359","getRoleAdmin(bytes32)":"2456","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"2753","isApprovedForAll(address,address)":"infinite","isWhitelisted(bytes32[])":"infinite","lockingFlags(uint256)":"2539","merkleRoot()":"2351","processBundle(bytes,uint256)":"infinite","renounceRole(bytes32,address)":"29133","revokeRole(bytes32,address)":"infinite","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"infinite","safeTransferFrom(address,address,uint256,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"infinite","setExecutorManager(address)":"infinite","setMerkleRoot(bytes32)":"infinite","supportsInterface(bytes4)":"infinite","uri(uint256)":"infinite","whitelistMint(uint256,bytes,bytes32[])":"infinite"}},"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","EXECUTOR_ROLE()":"07bd0265","balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","executorManager()":"c0883b92","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","isApprovedForAll(address,address)":"e985e9c5","isWhitelisted(bytes32[])":"069824fb","lockingFlags(uint256)":"2ecc6160","merkleRoot()":"2eb4a7ab","processBundle(bytes,uint256)":"3e352e62","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","setExecutorManager(address)":"ef0d4572","setMerkleRoot(bytes32)":"7cb64759","supportsInterface(bytes4)":"01ffc9a7","uri(uint256)":"0e89341c","whitelistMint(uint256,bytes,bytes32[])":"c3ae2b78"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"metadataUri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_executorManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bundleNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bundleHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BundleProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXECUTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executorManager\",\"outputs\":[{\"internalType\":\"contract IExecutorManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockingFlags\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"bundleData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"bundleNonce\",\"type\":\"uint256\"}],\"name\":\"processBundle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executorManager\",\"type\":\"address\"}],\"name\":\"setExecutorManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"whitelistMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SAFTToken.sol\":\"SAFTToken\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xd917747dc87f189c6779b894f367a028f9dca4be930283cccec8f312966af820\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/SAFTToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ninterface IExecutorManager {\\n\\tfunction isExecutor(address _address) external view returns (bool);\\n}\\n\\ncontract SAFTToken is ERC1155, AccessControl {\\n\\tbytes32 public merkleRoot;\\n\\tmapping(uint256 => bool) public lockingFlags; // Reentrancy guard for minting\\n\\tuint256 private tokenIdCounter;\\n\\tbytes32 public constant EXECUTOR_ROLE = keccak256(\\\"EXECUTOR_ROLE\\\");\\n\\tIExecutorManager public executorManager;\\n\\n\\tevent BundleProcessed(\\n\\t\\taddress indexed executor,\\n\\t\\tuint256 indexed bundleNonce,\\n\\t\\tbytes32 bundleHash,\\n\\t\\tuint256 timestamp\\n\\t);\\n\\n\\tconstructor(\\n\\t\\taddress _owner,\\n\\t\\tbytes32 _merkleRoot,\\n\\t\\tstring memory metadataUri,\\n\\t\\tuint totalSupply,\\n\\t\\taddress _executorManager\\n\\t) ERC1155(metadataUri) {\\n\\t\\trequire(_owner != address(0), \\\"Owner address cannot be empty\\\");\\n\\t\\t_mint(msg.sender, tokenIdCounter++, totalSupply, \\\"\\\");\\n\\t\\t_setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\t\\tmerkleRoot = _merkleRoot;\\n\\t\\texecutorManager = IExecutorManager(_executorManager);\\n\\t}\\n\\n\\tfunction whitelistMint(\\n\\t\\tuint256 amount,\\n\\t\\tbytes memory data,\\n\\t\\tbytes32[] calldata merkleProof\\n\\t) public {\\n\\t\\tuint256 id = tokenIdCounter;\\n\\t\\trequire(!lockingFlags[id], \\\"Token is currently locked for minting\\\");\\n\\n\\t\\t// Validate merkle proof using a single call\\n\\t\\trequire(isWhitelisted(merkleProof), \\\"Caller is not whitelisted\\\");\\n\\n\\t\\tlockingFlags[id] = true; // Set locking flag to prevent duplicate mints\\n\\n\\t\\t// Minimize external function calls for gas efficiency\\n\\t\\t_mint(msg.sender, id, amount, data);\\n\\n\\t\\tlockingFlags[id] = false; // Unlock after successful minting\\n\\t\\ttokenIdCounter++;\\n\\t}\\n\\n\\tfunction isWhitelisted(\\n\\t\\tbytes32[] calldata merkleProof\\n\\t) public view returns (bool) {\\n\\t\\tbytes32 leaf = keccak256(abi.encodePacked(msg.sender));\\n\\t\\treturn MerkleProof.verify(merkleProof, merkleRoot, leaf);\\n\\t}\\n\\n\\tfunction setMerkleRoot(\\n\\t\\tbytes32 _merkleRoot\\n\\t) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\tmerkleRoot = _merkleRoot;\\n\\t}\\n\\n\\tfunction supportsInterface(\\n\\t\\tbytes4 interfaceId\\n\\t) public view virtual override(ERC1155, AccessControl) returns (bool) {\\n\\t\\treturn\\n\\t\\t\\tERC1155.supportsInterface(interfaceId) ||\\n\\t\\t\\tAccessControl.supportsInterface(interfaceId);\\n\\t}\\n\\n\\tfunction setExecutorManager(\\n\\t\\taddress _executorManager\\n\\t) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\texecutorManager = IExecutorManager(_executorManager);\\n\\t}\\n\\n\\tfunction processBundle(\\n\\t\\tbytes calldata bundleData,\\n\\t\\tuint256 bundleNonce\\n\\t) public {\\n\\t\\trequire(\\n\\t\\t\\texecutorManager.isExecutor(msg.sender),\\n\\t\\t\\t\\\"Caller is not an authorized executor\\\"\\n\\t\\t);\\n\\n\\t\\t// Decode and process each transaction in the bundle\\n\\t\\tfor (uint i = 0; i < bundleData.length; i += 104) {\\n\\t\\t\\t(\\n\\t\\t\\t\\taddress buyer,\\n\\t\\t\\t\\taddress seller,\\n\\t\\t\\t\\tuint256 tokenId,\\n\\t\\t\\t\\tuint256 amount\\n\\t\\t\\t) = abi.decode(\\n\\t\\t\\t\\t\\tbundleData[i:i + 104],\\n\\t\\t\\t\\t\\t(address, address, uint256, uint256)\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t// Ensure that the seller has enough tokens\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tbalanceOf(seller, tokenId) >= amount,\\n\\t\\t\\t\\t\\\"Seller does not have enough tokens\\\"\\n\\t\\t\\t);\\n\\n\\t\\t\\t// Perform the token transfer from seller to buyer\\n\\t\\t\\t_safeTransferFrom(seller, buyer, tokenId, amount, \\\"\\\");\\n\\t\\t}\\n\\n\\t\\t// Compute the hash of the bundle data for logging\\n\\t\\tbytes32 bundleHash = keccak256(bundleData);\\n\\n\\t\\t// Emit the event with necessary details\\n\\t\\temit BundleProcessed(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tbundleNonce,\\n\\t\\t\\tbundleHash,\\n\\t\\t\\tblock.timestamp\\n\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0x0f0da0b2e90ff1010e33b0a67db4d7fdea5e3dd1f5d33cf722ddc50d37df303d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":414,"contract":"contracts/SAFTToken.sol:SAFTToken","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_uint256,t_mapping(t_address,t_uint256))"},{"astId":420,"contract":"contracts/SAFTToken.sol:SAFTToken","label":"_operatorApprovals","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":422,"contract":"contracts/SAFTToken.sol:SAFTToken","label":"_uri","offset":0,"slot":"2","type":"t_string_storage"},{"astId":24,"contract":"contracts/SAFTToken.sol:SAFTToken","label":"_roles","offset":0,"slot":"3","type":"t_mapping(t_bytes32,t_struct(RoleData)19_storage)"},{"astId":3900,"contract":"contracts/SAFTToken.sol:SAFTToken","label":"merkleRoot","offset":0,"slot":"4","type":"t_bytes32"},{"astId":3904,"contract":"contracts/SAFTToken.sol:SAFTToken","label":"lockingFlags","offset":0,"slot":"5","type":"t_mapping(t_uint256,t_bool)"},{"astId":3906,"contract":"contracts/SAFTToken.sol:SAFTToken","label":"tokenIdCounter","offset":0,"slot":"6","type":"t_uint256"},{"astId":3914,"contract":"contracts/SAFTToken.sol:SAFTToken","label":"executorManager","offset":0,"slot":"7","type":"t_contract(IExecutorManager)3894"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_contract(IExecutorManager)3894":{"encoding":"inplace","label":"contract IExecutorManager","numberOfBytes":"20"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_bytes32,t_struct(RoleData)19_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControl.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)19_storage"},"t_mapping(t_uint256,t_bool)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint256,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(RoleData)19_storage":{"encoding":"inplace","label":"struct AccessControl.RoleData","members":[{"astId":16,"contract":"contracts/SAFTToken.sol:SAFTToken","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":18,"contract":"contracts/SAFTToken.sol:SAFTToken","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}